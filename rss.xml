<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Your Site's RSS Feed]]></title><description><![CDATA[From Coding To Everyone Else]]></description><link>https://yjksw.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 22 Dec 2021 09:17:09 GMT</lastBuildDate><item><title><![CDATA[이펙티브 자바 - 아이템 11 & 12]]></title><description><![CDATA[이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 11] equals를 재정의하려거든 hashCode도 재정의하라 와 함께 도 재정의하지 않으면 이나 의 원소로 사용할 때 일관성이 무너진다. Object…]]></description><link>https://yjksw.github.io/effective-java-11-12/</link><guid isPermaLink="false">https://yjksw.github.io/effective-java-11-12/</guid><pubDate>Sun, 19 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-아이템-11-equals를-재정의하려거든-hashcode도-재정의하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-11-equals%EB%A5%BC-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%A0%A4%EA%B1%B0%EB%93%A0-hashcode%EB%8F%84-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 11 equals를 재정의하려거든 hashcode도 재정의하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 11] equals를 재정의하려거든 hashCode도 재정의하라&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;equals&lt;/code&gt;와 함께 &lt;code class=&quot;language-text&quot;&gt;hashCode&lt;/code&gt;도 재정의하지 않으면 &lt;code class=&quot;language-text&quot;&gt;HashMap&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;HashSet&lt;/code&gt;의 원소로 사용할 때 일관성이 무너진다.&lt;/p&gt;
&lt;p&gt;Object 명세에 따르면 다음 규약이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eqauls(Object)가 두 객체를 같다고 판단하면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다시 말해서 논리적으로 같은 객체는 같은 해시코드를 반환해야 한다는 것이다. 해시코드가 같지 않으면 다음 코드에서 일관성이 깨진다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;707&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;867&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5309&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;사용자&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;707&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;867&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5309&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// result.equals(&quot;사용자&quot;) != false 이다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;좋은-hashcode를-작성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A2%8B%EC%9D%80-hashcode%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;좋은 hashcode를 작성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;좋은 hashCode를 작성하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;hashCode의 로컬 int 변수 result를 첫번째 핵심 필드의 해시코드로 초기화 한다. (여기서 해시코드는 다음 2.a 단계대로 계산한다.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 핵심 필드 들에 대해서 다음과 같이 해시코드를 계산하고 result 필드를 갱신한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;기본 타입 필드라면 Type.hashCode(f)를 수행한다. Type은 해당 기본 타입의 박싱 클래스다.&lt;/p&gt;
&lt;p&gt;만일 참조 클래스라면 hashCode를 재귀적으로 호출할 수 있으니 이 필드의 표준형을 만들어서 해당 표준형(canonical representation)의 hashCode를 호출하고 null 이라면 0을 사용한다.&lt;/p&gt;
&lt;p&gt;필드가 배열이면 각각의 원소를 별도의 필드로 다루어 해시코드를 계산한다. Arrays.hashCode를 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a에서 계산된 해시코드로 result를 갱신한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;result = 31 * result + c;&lt;/code&gt; 이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;result를 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;참고로 파생 필드는 제외해도 된다.&lt;/li&gt;
&lt;li&gt;equals에서 사용되지 않는 필드는 반드시 제외한다.&lt;/li&gt;
&lt;li&gt;단계 b에서 31 * result를 하는 순서에 따라서 result 값이 달라지므로 해시 효과를 높여준다. 그렇지 않으면 anagram인 경우 해시코드가 같아지면서 성능이 저하된다. (O(n)이 된다) 31은 홀수이면서 소수이기 때문에 적합하다. (그 이유는 책에 더 자세히 나와있다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 완성된 hashCode의 예시를 보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;areaCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lineNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Objects 클래스의 정적 메서드 활용하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;임의 개수의 객체를 받아서 해시코드를 계산해주는 정적 메서드 hash를 제공한다.&lt;/li&gt;
&lt;li&gt;하지만 속도는 다수 느리다. 입력 인수를 위한 배열이 만들어지고 박싱/언박싱이 일어나기 때문에 성능이 민감한 요소라면 사용하지 않는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lineNum&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; areaCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;클래스가 불변이고 해시코드 계산 비용이 크다면 캐싱 방식을 고려하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;hashCode를 지연초기화 하는 것도 하나의 방법인데 이때는 스레드 안전성을 고려하여 구현해야 한다.&lt;/li&gt;
&lt;li&gt;성능을 높이기 위해 핵심 필드를 생략해서 해시코드를 계산하면 안된다.&lt;/li&gt;
&lt;li&gt;hashCode의 생성 규칙을 API 사용자가 자세히 알 필요가 없다. 클라이언트가 이 값에 의지하지 않게 되고 이후에 계산 방식을 바꿀 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-아이템-12-tostring을-항상-재정의하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 12 tostring을 항상 재정의하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 12] toString을 항상 재정의하라&lt;/h2&gt;
&lt;p&gt;Object에서 기본적으로 제공하는 &lt;code class=&quot;language-text&quot;&gt;toString&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;클래스명@16진수_해시코드&lt;/code&gt; 를 주로 반환하여 사용자가 필요한 형태로 반환하는 경우가 거의 없다. &lt;code class=&quot;language-text&quot;&gt;toString&lt;/code&gt; 은 &lt;strong&gt;간결하며 사용자가 읽기 쉬운 형태의 유익한 정보&lt;/strong&gt;를 반환해야 한다. 따라서 이 메서드를 항상 재정의 하는 것이 필요하다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;toString&lt;/code&gt;을 잘 구현한다면 &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;printf&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;+ 연산자&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;assert&lt;/code&gt; 등에서 유용하게 사용되며 시스템 디버깅이 훨씬 용의해진다. 또한 직접 호출하지 않아도 오류 메세지 로깅 시 매우 읽기 좋은 유용한 정보를 표시한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;toString&lt;/code&gt;은 해당 객체가 가진 주요 정보를 모두 반환하는 것이 좋다. 하지만 객체가 너무 크다면 표현하기 무리가 있다. 이럴 경우에는 요약 정보를 담는 것이 좋다. &lt;strong&gt;어쨋든 자기 스스로를 굉장히 잘 표현한 문자열이어야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;toString을 구현할 때 반환값의 형식을 문서화 할지 정하는데, 값 클래스라면 문서화 하는 것이 좋다. 그대로 입출력에서 사용하고 CSV 파일처럼 사람이 읽을 수 있는 데이터 객체로 저장될 수 있다. 이 경우 문자열과 객체를 상호 전환할 수 있는 생성자나 정적 팩토리 메서드를 제공해주는 것이 좋다.&lt;/p&gt;
&lt;p&gt;포맷을 명시하는 것의 단점으로는 그 포맷이 평생 쓰이게 된다. 따라서 다른 포맷을 적용하고 싶다면 해당 포맷에 맞추어서 파싱하고 새로운 객체를 만들어서 데이터를 저장하는 코드를 작성해야 한다. 그 다음에 포맷이 바뀌게 된다면 굉장히 번거로워진다.&lt;/p&gt;
&lt;p&gt;또한 toString에서 반환하는 정보에 대한 접근자를 각각 제공하는 것이 좋다. 그렇지 않다면 사용자는 toString을 파싱해서 사용할 수밖에 없어진다.&lt;/p&gt;
&lt;p&gt;정적 유틸리티 클래스는 toString을 제공할 필요가 없으며 열거 타입도 마찬가지이다.&lt;/p&gt;
&lt;p&gt;추상 클래스같은 경우 하위 클래스에서 공통적으로 사용해야할 문자열 표현이 있다면 추상 클래스에서 toString을 재정의해야한다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-11-equals%EB%A5%BC-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%A0%A4%EA%B1%B0%EB%93%A0-hashcode%EB%8F%84-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 11] equals를 재정의하려거든 hashCode도 재정의하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A2%8B%EC%9D%80-hashcode%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot;&gt;좋은 hashCode를 작성하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 12] toString을 항상 재정의하라&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[이펙티브 자바 - 아이템 9 & 10]]></title><description><![CDATA[이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 9] try-finally 보다는 try-with-resources를 사용하라 자바에서 close…]]></description><link>https://yjksw.github.io/effective-java-9-10/</link><guid isPermaLink="false">https://yjksw.github.io/effective-java-9-10/</guid><pubDate>Sat, 18 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-아이템-9-try-finally-보다는-try-with-resources를-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-9-try-finally-%EB%B3%B4%EB%8B%A4%EB%8A%94-try-with-resources%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 9 try finally 보다는 try with resources를 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 9] try-finally 보다는 try-with-resources를 사용하라&lt;/h2&gt;
&lt;p&gt;자바에서 close 메서드를 직접 호출해서 닫아주어야하는 자원들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;InputStream&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;OutputStream&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;java.sql.Connection&lt;/code&gt; 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;try-finally-사용시-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#try-finally-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;try finally 사용시 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;try-finally 사용시 단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;try-finally를 사용한다면 닫아야 하는 자원이 많아질수록 매우 복잡해진다.&lt;/li&gt;
&lt;li&gt;try 블록과 finally 블록에서 모두 예외가 발생할 수 있는데, 만일 둘다 예외가 발생했을 경우 이후에 일어난 예외가 첫번째 예외를 삼켜서 디버깅을 어렵게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;try-with-resources로-해결&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#try-with-resources%EB%A1%9C-%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;try with resources로 해결 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;try-with-resources로 해결&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;짧고 간결하여 읽기가 수월하다.&lt;/li&gt;
&lt;li&gt;try 내부와 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt;에서 모두 예외가 발생 하더라도 첫번째 예외만 보여지고 두번째 예외는 &lt;code class=&quot;language-text&quot;&gt;suppressed&lt;/code&gt; 되어 출력된다.&lt;/li&gt;
&lt;li&gt;catch 블록을 함께 사용하여 여러 예외를 처리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-아이템-10-equals는-일반-규약을-지켜-재정의하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-10-equals%EB%8A%94-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD%EC%9D%84-%EC%A7%80%EC%BC%9C-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 10 equals는 일반 규약을 지켜 재정의하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 10] equals는 일반 규약을 지켜 재정의하라&lt;/h2&gt;
&lt;p&gt;대부분은 &lt;code class=&quot;language-text&quot;&gt;equals&lt;/code&gt;를 재정의 하지 않는 것이 가장 좋다. 책에서는 특히나 다음과 같은 경우면 재정의 하지 않는 것을 추천한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;각 인스턴스가 본질적으로 고유하다.&lt;/li&gt;
&lt;li&gt;인스턴스의 ‘논리적 동치성(logical equality)‘를 검사할 일이 없다.&lt;/li&gt;
&lt;li&gt;상위 클래스의 equals가 하위 클래스에도 적합하게 구현되어 있다.&lt;/li&gt;
&lt;li&gt;클래스가 private이거나 package-private이고 equals를 호출할 일이 없다.&lt;/li&gt;
&lt;li&gt;인스턴스가 하나만 만들어지도록 통제되는 싱글톤이나 enum 인 경우이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;다음과 같은 경우는 equals를 재정의 하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체의 식별성(identity)가 아닌 논리적 동치성을 확인해야 할 때 (VO 같은 경우)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;object-명세에-적힌-일반-규약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#object-%EB%AA%85%EC%84%B8%EC%97%90-%EC%A0%81%ED%9E%8C-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD&quot; aria-label=&quot;object 명세에 적힌 일반 규약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object 명세에 적힌 일반 규약&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;equals는 동치관계(equivalence relation)을 구현하며 다음을 만족한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Object&lt;/code&gt; 명세에서 말하는 &lt;strong&gt;동치관계&lt;/strong&gt;란 무엇일까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;집합을 서로 같은 원소의 부분집합으로 나누고 같은 집합 속에 있는 원소는 서로 언제나 교환될 수 있어야 하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;첫 번째 조건, &lt;strong&gt;반사성&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체는 자기 자신과 같아야 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;x.equals(x) == true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;두 번째 조건, &lt;strong&gt;대칭성&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;두 객체의 동치 여부는 같아야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;x.equals(y) == true&lt;/code&gt;면 &lt;code class=&quot;language-text&quot;&gt;y.equals(x) == true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 예에서는 대칭성이 만족되지 않은 경우이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CasInsensitiveString&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CasInsensitiveString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CasInsensitiveString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CasInsensitiveString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 문제가 되는 지점 !!! &lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서는 &lt;code class=&quot;language-text&quot;&gt;CasInsensitiveString&lt;/code&gt; 클래스 인스턴스 뿐 아니라 String에 대해서도 equals 메서드를 지원한다. 여기서 문제는 &lt;code class=&quot;language-text&quot;&gt;CasInsensitiveString**.**equals(String)&lt;/code&gt; 의 경우는 잘 성립하는데 &lt;code class=&quot;language-text&quot;&gt;String.equals(CasInsensitiveString)&lt;/code&gt;는 성립하지 않는다.&lt;/li&gt;
&lt;li&gt;이렇게 대칭성이 성립되지 않으면 해당 객체를 사용하는 다른 객체들의 결과를 예측하기가 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;세 번째 조건, &lt;strong&gt;추이성&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a, b가 동치고 b, c가 동치면 a, c도 동치이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주로 구체 클래스의 하위 클래스에서 추가가 된 필드에 대해서 equals를 추가하려고 할 때 발생한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 추이성이 깨지는 경우&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ColorPoint&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RED&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token class-name&quot;&gt;ColorPoint&lt;/span&gt; p3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BLUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 위치만 비교&lt;/span&gt;
p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 위치만 비교&lt;/span&gt;

p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 색상까지 비교 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ColorPoint&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;equals()&lt;/code&gt; 내부 구현을 보면 다음과 같이 되어 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token comment&quot;&gt;// 만일 o가 Point면 좌표만 비교한다. &lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ColorPoint&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이런 식으로 구현이 되었을 때 주의할 점은 무한 재귀에 빠질 수도 있다는 것이다. 위와 같이 구현된 &lt;code class=&quot;language-text&quot;&gt;SmellPoint&lt;/code&gt; 를 만들고 &lt;code class=&quot;language-text&quot;&gt;myColorPoint.equals(mySmellPoint)&lt;/code&gt;를 호출하면 무한 재귀로 인해 &lt;code class=&quot;language-text&quot;&gt;StackOverflowError&lt;/code&gt;를 일으킨다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;instanceof&lt;/code&gt; 대신 &lt;code class=&quot;language-text&quot;&gt;getClass()&lt;/code&gt; 를 쓸수 있지만 이것은 LSP를 위반하여 하위 클래스가 상위 클래스 대신 대체될 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가능한 해결 방법은 추상 클래스의 하위 클래스를 활용하던지 상속보다 컴포지션 룰을 적용하던지이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;네 번째 조건, &lt;strong&gt;일관성&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;두 객체가 같다면 수정이 되기 전까지 앞으로도 같아야 한다는 뜻이다. 특히 불변 클래스라면 한번 같다면 영원히 같아야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;일관성&lt;/strong&gt; 조건을 만족시키기 위해서는 equals에 신뢰할 수 있는 자원만 들어와야 한다. 예를 들어서 특정 URL의 IP주소가 그 자원 중 하나라면 이것은 네트워크에 따라서 매번 달라질 수 있기 때문에 항상 결과가 같지 않다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;다섯 번째 조건, &lt;strong&gt;null-아님&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;모든 객체가 null과 같지 않아야 한다는 뜻이다. 동치성을 검사하기 위해서 받은 객체를 적절히 형변환 하여 필드 값을 알아내기 때문에 여기서 &lt;code class=&quot;language-text&quot;&gt;instanceof&lt;/code&gt; 로 검사할 때 &lt;code class=&quot;language-text&quot;&gt;ClassCastException&lt;/code&gt;으로 예외를 발생시킨다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;좋은-equals-메서드-구현하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A2%8B%EC%9D%80-equals-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;좋은 equals 메서드 구현하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;좋은 equals 메서드 구현하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;==&lt;/code&gt; 를 통해 자기 자신이면 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 반환한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;instanceof&lt;/code&gt; 로 입력의 타입을 검증한다.&lt;/li&gt;
&lt;li&gt;입력을 올바른 타입으로 형변환 한다.&lt;/li&gt;
&lt;li&gt;입력 객체와 자신의 &lt;strong&gt;핵심 필드&lt;/strong&gt;는 모두 일치하는지 검사한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;자바에서 float와 double 같은 경우는 정적 메서드인 &lt;code class=&quot;language-text&quot;&gt;Float.compare&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Double.compare&lt;/code&gt;로 비교한다. 특수한 부동소수 값 때문이다.&lt;/li&gt;
&lt;li&gt;null을 정상값으로 취급하는 참조 타입 필드가 있다면 &lt;code class=&quot;language-text&quot;&gt;Objects.equals(Object, Object)&lt;/code&gt;를 사용하여 NPE를 방지하자.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CaseInsensitiveString&lt;/code&gt; 처럼 다루기 복잡한 클래스라면 해당 필드의 표준형(canonical form)을 저장하여 표준형 끼리 비교하자. 가변이라면 이 표준형을 매번 갱신해야해서 어렵지만 불변이라면 더욱 적합하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;equals의-성능-고려하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#equals%EC%9D%98-%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;equals의 성능 고려하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;equals의 성능 고려하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다를 가능성이 크거나 비교하는 비용이 싼 필드를 먼저 비교하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;객체의 논리적 상태와 관련이 없는 필드(락 필드 등등)는 비교하지 않도록 한다.&lt;/li&gt;
&lt;li&gt;equals를 재정의할 때 hashCode도 함께 재정의 해야 한다.&lt;/li&gt;
&lt;li&gt;필드의 동치성만 검사해도 equals 규약이 대부분 만족되니 너무 복잡하게 구현하지 않는 것이 좋다.&lt;/li&gt;
&lt;li&gt;equals의 매개변수는 반드시 Object 이도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-9-try-finally-%EB%B3%B4%EB%8B%A4%EB%8A%94-try-with-resources%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 9] try-finally 보다는 try-with-resources를 사용하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#try-finally-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8B%A8%EC%A0%90&quot;&gt;try-finally 사용시 단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#try-with-resources%EB%A1%9C-%ED%95%B4%EA%B2%B0&quot;&gt;try-with-resources로 해결&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-10-equals%EB%8A%94-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD%EC%9D%84-%EC%A7%80%EC%BC%9C-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 10] equals는 일반 규약을 지켜 재정의하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#object-%EB%AA%85%EC%84%B8%EC%97%90-%EC%A0%81%ED%9E%8C-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD&quot;&gt;Object 명세에 적힌 일반 규약&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A2%8B%EC%9D%80-equals-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0&quot;&gt;좋은 equals 메서드 구현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#equals%EC%9D%98-%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0&quot;&gt;equals의 성능 고려하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[이펙티브 자바 - 아이템 7 & 8]]></title><description><![CDATA[이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 7] 다 쓴 객체 참조를 해제하라 JVM 언어를 사용한다면 GC가 알아서 사용되지 않는 객체를 해제할텐데 왜 이런 항목이 있는걸까? 다음과 같은 경우에는 GC…]]></description><link>https://yjksw.github.io/effective-java-7-8/</link><guid isPermaLink="false">https://yjksw.github.io/effective-java-7-8/</guid><pubDate>Fri, 17 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-아이템-7-다-쓴-객체-참조를-해제하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-7-%EB%8B%A4-%EC%93%B4-%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%ED%95%B4%EC%A0%9C%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 7 다 쓴 객체 참조를 해제하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 7] 다 쓴 객체 참조를 해제하라&lt;/h2&gt;
&lt;p&gt;JVM 언어를 사용한다면 GC가 알아서 사용되지 않는 객체를 해제할텐데 왜 이런 항목이 있는걸까?&lt;/p&gt;
&lt;p&gt;다음과 같은 경우에는 GC가 해당 객체가 다 쓴 객체인지 아닌지 판단할 수가 없다.&lt;/p&gt;
&lt;p&gt;Stack 자료구조를 구현한 예시이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; elements&apos;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 이외 필드 및 메서드&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음과 같은 경우 다시 참조되지 않을 객체에 대한 해제가 이루어지지 않았기 때문에 ‘메모리 누수’가 발생한다. 이 프로그램이 오랜시간 실행이 되다보면 메모리 사용량이 늘어나 성능이 저하되거나 심하면 &lt;code class=&quot;language-text&quot;&gt;OutOfMemoryError&lt;/code&gt;를 일으킬수도 있다.&lt;/p&gt;
&lt;p&gt;위 코드와 같은 경우 &lt;code class=&quot;language-text&quot;&gt;elements&lt;/code&gt; 배열에 더이상 사용되지 않는 영역의 객체 참조를 배열이 여전히 가지고 있다. 예를 들면 &lt;code class=&quot;language-text&quot;&gt;size&lt;/code&gt; 바깥에 존재하는 객체들에 대해서 말이다.&lt;/p&gt;
&lt;p&gt;이렇게 GC에게 객체 처리를 맡기는 언어에서 이러한 메모리 누수를 찾기가 매우 어렵다. 또한 쓰이지 않지만 참조되고 있는 객체의 영향이 해당 객체에서 끝이 나는 것이 아니라 해당 객체들을 췸조하는 다른 여러 객체들도 회수할 수 없다.&lt;/p&gt;
&lt;p&gt;따라서 다음과 같이 null 처리를 통해 참조 해제를 해야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	element&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;객체-참조를-직접-해제해야-하는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%A7%81%EC%A0%91-%ED%95%B4%EC%A0%9C%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;객체 참조를 직접 해제해야 하는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 참조를 직접 해제해야 하는 경우&lt;/h3&gt;
&lt;p&gt;그렇다고 항상 객체 참조를 하나하나 null 처리 해야한다는 것은 아니다. 이 로직은 가독성을 저하시키고 프로그램을 지저분하게 만든다. 객체 참조를 null 처리를 통해 직접 해제해야하는 경우는 &lt;strong&gt;자기 메모리를 직접 관리하는 클래스&lt;/strong&gt;인 경우이다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;code class=&quot;language-text&quot;&gt;Stack&lt;/code&gt; 클래스의 경우를 살펴보자. 이 클래스의 경우 객체가 아니라 객체 참조를 담는 element 배열을 사용한다. 그러니까 JVM에서 직접 객체 참조를 관리하는 것이 아니라 관리하는 영역을 따로 만든 것이다. 그렇기 때문에 어디부터 어디까지가 유효한 참조범위인지 GC는 알 수 없다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;메모리-누수가-자주-발생하는-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EA%B0%80-%EC%9E%90%EC%A3%BC-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9&quot; aria-label=&quot;메모리 누수가 자주 발생하는 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 누수가 자주 발생하는 상황&lt;/h3&gt;
&lt;p&gt;또 다른 예로는 캐시가 있다. 캐시에 특정 객체를 넣어놓고 인지하지 못하면 메모리 누수가 발생한다. 이 경우 저자가 제안하는 몇가지 해결방법이 있다.&lt;/p&gt;
&lt;p&gt;첫 번째는 WeakHashMap을 사용하여 해당 캐시의 key 값이 더 이상 참조되지 않는다면 해당 엔트리를 삭제하는 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;WeakHashMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakHashMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; key1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; key2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;값1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
map&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;값2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

key1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 사용할 경우 key1에 대한 엔트리 값이 자동으로 GC에 의해 수거된다.&lt;/p&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;다음 단락은 개인적인 의견 입니다 !!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;위 방법은 추천하지 않는다. 우선 Map 자료구조의 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;의 값이 불변과 &lt;code class=&quot;language-text&quot;&gt;final&lt;/code&gt;이 아닐 경우 찾기 매우 어려운 버그가 발생하기 너무 쉽다고 생각한다. 특히나 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;와 같은 경우는 불변이나 &lt;code class=&quot;language-text&quot;&gt;final&lt;/code&gt;이 아닐 경우 개발자가 예상하지 못하는 시점에 변경이 일어나고 의도하지 않은 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;가 매핑되어 있을 수 있다.&lt;/p&gt;
&lt;p&gt;두 번째 방법은 엔트리의 가치를 시간에 따라 점점 떨어뜨리고 오래된 엔트리를 주기적으로 청소해주는 것이다. &lt;code class=&quot;language-text&quot;&gt;ScheduledThreadPoolExecutor&lt;/code&gt;를 사용하여 백그라운드 스레드로 유효기간이 지난 엔트리를 삭제하는 로직을 실행할 수 있다. 또는 &lt;code class=&quot;language-text&quot;&gt;LinkedHashMap&lt;/code&gt; 자료그조의 &lt;code class=&quot;language-text&quot;&gt;removeEldestEntry()&lt;/code&gt; 를 사용하여 오래된 엔트리를 삭제할 수 있다. (추가로 복잡한 캐시 처리에는 &lt;code class=&quot;language-text&quot;&gt;java.lang.ref&lt;/code&gt; 패키지를 사용하라고 제안한다. 여러 종류의 객체 참조에 대한 패키지인데 자세한 것을 이 &lt;a href=&quot;%5Bhttps://d2.naver.com/helloworld/329631%5D(https://d2.naver.com/helloworld/329631)&quot;&gt;링크&lt;/a&gt;를 참고해보자.)&lt;/p&gt;
&lt;p&gt;메모리 누수가 자주 발생할 수 있는 마지막 경우는 리스너(Listener) 혹은 콜백(callback)이다. 콜백을 등록하고 해제하지 않으면 콜백이 쌓이며 메모리 누수가 발생한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-아이템-8-finalizer와-cleaner-사용을-피하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-8-finalizer%EC%99%80-cleaner-%EC%82%AC%EC%9A%A9%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 8 finalizer와 cleaner 사용을 피하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 8] finalizer와 cleaner 사용을 피하라&lt;/h2&gt;
&lt;h3 id=&quot;수행-시점을-보장할-수-없다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%88%98%ED%96%89-%EC%8B%9C%EC%A0%90%EC%9D%84-%EB%B3%B4%EC%9E%A5%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;수행 시점을 보장할 수 없다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;수행 시점을 보장할 수 없다&lt;/h3&gt;
&lt;p&gt;finalizer와 cleaner의 큰 단점은 어느 시점에 수행되는지 보장할 수 없다는 것이다. 따라서 반드시 닫아야 하는 파일 닫기와 같은 로직을 finalizer 혹은 cleaner로 수행한다면 파일이 언제 닫힐지 몰라 열어두게 되고 한계를 넘으면 프로그램이 실패한다.&lt;/p&gt;
&lt;p&gt;finalizer의 스레드는 다른 스레드에 비해 우선순위가 낮아서 오랜시간 처리가 되지 않을 수도 있다. 반면 cleaner는 해당 스레드를 제어할 수 있지만 여전히 GC의 통제하에 수행하기 때문에 실제로 수행하는 시점을 알기 어렵다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;수행-여부를-보장할-수-없다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%88%98%ED%96%89-%EC%97%AC%EB%B6%80%EB%A5%BC-%EB%B3%B4%EC%9E%A5%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;수행 여부를 보장할 수 없다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;수행 여부를 보장할 수 없다&lt;/h3&gt;
&lt;p&gt;수행 시간도 큰 단점이지만 수행 여부에 대한 보장도 되지 않는다. 해당 작업이 종료되었는지와 상관없이 프로그램이 종료될 수 있기 때문에 프로그램 내부의 일시적인 것이 아닌 영구적은 수정 작업에서 finalizer나 cleaner를 사용하게 되면 시스템 자체가 서서히 죽어갈 수도 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예를 들면 DB와 관련된 공유 자원의 lock 해제 등의 로직 등이 제대로 이루어졌는지 확인되지 않고 프로그램이 종료될 수 있는 것이다. 그러면 엄청난 성능 저하가 일어나고 시간이 지나면 왜인지 모른체 시스템이 다운 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;예외-발생시-알-수-없다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D%EC%8B%9C-%EC%95%8C-%EC%88%98-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;예외 발생시 알 수 없다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외 발생시 알 수 없다&lt;/h3&gt;
&lt;p&gt;또 다른 큰 단점은 finalizer 수행 중 예외가 발생하면 &lt;strong&gt;1) 예외는 무시되지만 2) 작업은 순간 종료된다&lt;/strong&gt;(남은 작업을 처리하지 않는다). 예외가 발생해도 경고도 출력되지 않고 무시되며 프로그램은 여전히 실행되기 때문에 어떤 객체가 중단되었고 훼손 되었는지 알 수 없다. cleaner는 자신의 스레드를 통제하기 때문에 관련 문제가 적게 발생한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;성능-문제가-발생한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B1%EB%8A%A5-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;성능 문제가 발생한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;성능 문제가 발생한다&lt;/h3&gt;
&lt;p&gt;try-with-resources를 사용한 경우 객체 생성 후 GC가 수거하기까지 12ns가 걸리지만 finalizer를 사용하면 550ns 가 걸린다. 즉, 50배의 성능저하가 일어나는 것이다. 안전망 형태 (추후 설명)로 사용하면 빨라지지만 여전히 5배가 느려진다. GC의 성능 저하를 초래하는 것이다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;finalizer-공격에-노출된다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#finalizer-%EA%B3%B5%EA%B2%A9%EC%97%90-%EB%85%B8%EC%B6%9C%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;finalizer 공격에 노출된다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;finalizer 공격에 노출된다&lt;/h3&gt;
&lt;p&gt;예를 들어 다음과 같은 경우이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;생성자나 직렬화 과정에서 예외가 발생하여 불완전한 객체가 생긴다.&lt;/li&gt;
&lt;li&gt;이때 악의적인 하위 클래스의 finalizer에서 정적 필드에 자기 자신을 참조하여 GC가 불완전한 해당 클래스를 수집하지 못하게 된다.&lt;/li&gt;
&lt;li&gt;이렇게 일그러진 객체가 생성되어 일반적으로 허용되지 못하는 작업을 수행하게 될 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 상황을 예방하기 위해서는 다음 방법들을 사용해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체를 final로 설정하여 하위 클래스 생성을 막자. (하지만 이것은 하위 클래스로의 확장 가능성 자체를 막아버리는 단점이 존재한다)&lt;/li&gt;
&lt;li&gt;final이 아닌 클래스라면 아무일을 하지 않는 finalize 메서드를 만들고 final로 선언한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;가장-좋은-해결-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%9E%A5-%EC%A2%8B%EC%9D%80-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;가장 좋은 해결 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가장 좋은 해결 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;AutoCloseable&lt;/code&gt;을 구현하고 close 메서드를 호출해라.&lt;/li&gt;
&lt;li&gt;혹은 &lt;code class=&quot;language-text&quot;&gt;try-with-resource&lt;/code&gt;를 사용해라.&lt;/li&gt;
&lt;li&gt;번외로 각 객체는 자신이 닫혔는지를 항상 확인 하는 것이 좋다.  &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt; 메서드 내부에서 닫힐 때 필드에 저장하고 해당 객체를 호출할 때 필드를 검사해 만일 닫힌 객체였다면 &lt;code class=&quot;language-text&quot;&gt;IllegalStateException&lt;/code&gt;을 던져야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;그럼-언제-finalizercleaner를-사용하면-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-%EC%96%B8%EC%A0%9C-finalizercleaner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;그럼 언제 finalizercleaner를 사용하면 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그럼 언제 finalizer/cleaner를 사용하면 좋을까&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;close를 호출하지 않은 것에 대한 안전망 역할&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바의 경우 &lt;code class=&quot;language-text&quot;&gt;FileInputStream&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;FileOutputStream&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;ThreadPoolExecutor&lt;/code&gt; 는 안전망 finalizer를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네이티브 피어(native peer)와 연결된 객체 관련 메모리 해제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네이티브 피어는 네이티브 메서드로 기능을 위임한 네이티브 객체이다.&lt;/li&gt;
&lt;li&gt;자바 객체가 아니므로 GC는 그 존재를 알지 못한다.&lt;/li&gt;
&lt;li&gt;하지만 당장 자원이 회수되거나 성능 저하를 감수하지 않으려면 close 메서드를 사용해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cleaner 같은 경우는 Autocloseable의 안전망으로 많이 사용된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예를 들어 아래 같은 경우에는 cleaner가 반드시 회수해야할 자원인 &lt;code class=&quot;language-text&quot;&gt;numJunkPiles&lt;/code&gt;를 청소한 후 객체를 닫는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Romm&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AutoCloseable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Cleaner&lt;/span&gt; cleaner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Cleaner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//static class로 선언 !! &lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; numJunkPiles&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numJunkPiles&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;numJunkPiles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numJunkPiles&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 본래는 이 부분이 native peer 참조를 담는 final long 변수&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;방 청소&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			numJunkPiles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Cleaner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Cleanable&lt;/span&gt; cleanable&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Room&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; numJunkPiles&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numJunkPiles&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		cleanable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cleaner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		cleanable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서 run 메서드가 호출되는 경우는 Room의 close 메서드를 호출하거나 cleaner가 State의 run 메서드를 호출하는 경우이다. (안정망)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;여기서 주의할 점은 State 인스턴스가 Room 인스턴스를 참조하지 않는 것이다.&lt;/strong&gt; 만일 참조하게 된다면 순환참조가 생겨서 GC가 Room 인스턴스를 절대로 회수 할 수 없다. 따라서 위 코드에서는 State가 정적 중첩 클래스로 구현이 되어 있다. 정적이 아닌 중첩 클래스는 자동으로 바깥 객체의 참조를 갖는다. (람다도 마찬가지이므로 조심해야 한다.)&lt;/li&gt;
&lt;li&gt;Cleaner는 단순한 안전망이기 때문에 반드시 &lt;code class=&quot;language-text&quot;&gt;try-with-resource&lt;/code&gt;를 사용하여 즉각적으로 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt; 메서드가 호출되도록 구현하는 것이 가장 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-7-%EB%8B%A4-%EC%93%B4-%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%ED%95%B4%EC%A0%9C%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 7] 다 쓴 객체 참조를 해제하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%A7%81%EC%A0%91-%ED%95%B4%EC%A0%9C%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot;&gt;객체 참조를 직접 해제해야 하는 경우&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EA%B0%80-%EC%9E%90%EC%A3%BC-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9&quot;&gt;메모리 누수가 자주 발생하는 상황&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-8-finalizer%EC%99%80-cleaner-%EC%82%AC%EC%9A%A9%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 8] finalizer와 cleaner 사용을 피하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%88%98%ED%96%89-%EC%8B%9C%EC%A0%90%EC%9D%84-%EB%B3%B4%EC%9E%A5%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot;&gt;수행 시점을 보장할 수 없다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%88%98%ED%96%89-%EC%97%AC%EB%B6%80%EB%A5%BC-%EB%B3%B4%EC%9E%A5%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot;&gt;수행 여부를 보장할 수 없다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D%EC%8B%9C-%EC%95%8C-%EC%88%98-%EC%97%86%EB%8B%A4&quot;&gt;예외 발생시 알 수 없다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%B1%EB%8A%A5-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4&quot;&gt;성능 문제가 발생한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#finalizer-%EA%B3%B5%EA%B2%A9%EC%97%90-%EB%85%B8%EC%B6%9C%EB%90%9C%EB%8B%A4&quot;&gt;finalizer 공격에 노출된다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%80%EC%9E%A5-%EC%A2%8B%EC%9D%80-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot;&gt;가장 좋은 해결 방법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-%EC%96%B8%EC%A0%9C-finalizercleaner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;그럼 언제 finalizer/cleaner를 사용하면 좋을까&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[이펙티브 자바 - 아이템 5 & 6]]></title><description><![CDATA[이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템…]]></description><link>https://yjksw.github.io/effective-java-5-6/</link><guid isPermaLink="false">https://yjksw.github.io/effective-java-5-6/</guid><pubDate>Thu, 16 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-아이템-5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-5-%EC%9E%90%EC%9B%90%EC%9D%84-%EC%A7%81%EC%A0%91-%EB%AA%85%EC%8B%9C%ED%95%98%EC%A7%80-%EB%A7%90%EA%B3%A0-%EC%9D%98%EC%A1%B4-%EA%B0%9D%EC%B2%B4-%EC%A3%BC%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 5 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 5] 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라&lt;/h2&gt;
&lt;p&gt;하나의 클래스에서 다른 자원에 의존하는 경우가 많다. 또한 해당 클래스가 유틸리티 클래스라면 싱글톤이나 정적 클래스로 사용되는 경우가 많다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;정적 클래스로 구현한 경우&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lexicon&lt;/span&gt; dictionary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	priavte &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; word&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;싱글톤으로 구현한 경우&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lexicon&lt;/span&gt; dictionary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt; INSTANCE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	priavte &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; word&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런 경우 여러 단점이 발생한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;유연하지 않다.
&lt;ul&gt;
&lt;li&gt;안에 의존하고 있는 객체를 런타임 시점에 바꾸거나 조작하기가 어렵다.&lt;/li&gt;
&lt;li&gt;여러 다른 사전들을 이용하고 싶을 때 변경에 자유롭지 못하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;테스트하기 어렵다.
&lt;ul&gt;
&lt;li&gt;정적으로 의존 객체를 내부에서 생성하므로 모킹하거나 해당 객체에 대한 조작으로 테스트를 하기 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;의존성-주입di을-통해-해결하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85di%EC%9D%84-%ED%86%B5%ED%95%B4-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0&quot; aria-label=&quot;의존성 주입di을 통해 해결하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;의존성 주입(DI)을 통해 해결하기&lt;/h3&gt;
&lt;p&gt;위 문제에 대한 가능한 해결방법이 DI 말고 하나가 더 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변경에 대한 유연성을 부여하기 위해 &lt;code class=&quot;language-text&quot;&gt;final&lt;/code&gt;을 제거하고 여러 사전들을 바꿔서 사용할 수 있도록 한다.
&lt;ul&gt;
&lt;li&gt;이렇게 할 경우 멀티스레드 환경에 취약하고 오류를 내기가 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 DI를 통해서 문제를 해결해본다.&lt;/p&gt;
&lt;p&gt;DI란 클래스에서 필요한 자원을 내부에서 생성하는 것이 아니라 인스턴스를 생성할 때 생성자에 필요한 자원을 넘겨주는 방식으로 구현하는 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lexicon&lt;/span&gt; dictionary&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	priavte &lt;span class=&quot;token class-name&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Lexicon&lt;/span&gt; dictionary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dictionary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requireNonNul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dictionary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; word&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;여러 자원에 대한 의존 관계에 자유로우며 유연하다.&lt;/li&gt;
&lt;li&gt;불변을 보장하여 여러 클라이언트에 대한 공유에 안정적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;추가적으로 특정 자원을 직접 넘겨주기보다 팩터리를 넘겨주어 필요시 자원을 클래스 내부에서 직접 생성할 수 있도록 할 수도 있다. 이때 &lt;code class=&quot;language-text&quot;&gt;Supplier&amp;lt;T&gt;&lt;/code&gt; 처럼 한정적 와일드카드 타입(타입 안정성을 지원하는 Generic을 사용)을 통해 팩터리 매개변수를 넘겨서 필요한 자원을 생성하도록 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;요약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EC%95%BD&quot; aria-label=&quot;요약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요약&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클래스가 다른 자원에 의존한다면 그것을 직접 싱글톤이나 정적 클래스로 구현하는 것은 좋은 방법이 아니다.&lt;/li&gt;
&lt;li&gt;또한 그 자원들을 그 클래스가 직접 생성하도록 하지 않는 것이 더 좋다.&lt;/li&gt;
&lt;li&gt;대신 의존 객체 주입으로 외부에서 해당 자원이나 팩터리를 생성자나 정적 팩터리에 넘겨주도록 하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-아이템-6-불필요한-객체-생성을-피하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-6-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 6 불필요한 객체 생성을 피하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 6] 불필요한 객체 생성을 피하라&lt;/h2&gt;
&lt;p&gt;현재 JVM의 성능이 좋아져 객체 생성이 이전만큼 비싼 작업은 아니지만 여전히 매번 생성하기에 무겁거나 지나치게 반복적으로 생성하여 성능에 안좋은 영향을 미치는 경우가 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;따라서 객체는 (특히 불변 객체는) 재사용할 수 있다면 재사용하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;string을-재사용-하자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#string%EC%9D%84-%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%98%EC%9E%90&quot; aria-label=&quot;string을 재사용 하자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String을 재사용 하자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;new String(&quot;woowa&quot;)&lt;/code&gt; 는 만들때마다 heap영역에 새로운 객체를 생성한다. 만일 &lt;code class=&quot;language-text&quot;&gt;new String(&quot;woowa&quot;)&lt;/code&gt; 를 두번 호출한다면 두개의 객체가 생성된다.&lt;/li&gt;
&lt;li&gt;반면 &lt;code class=&quot;language-text&quot;&gt;String s = &quot;woowa&quot;&lt;/code&gt; 를 호출한다면 heap영역 내부에 String constant pool에 객체가 생성되고 동일한 스트링이라면 재사용 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;불변-클래스의-정적-팩터리-메서드로-객체를-재사용-하자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%98%EC%9E%90&quot; aria-label=&quot;불변 클래스의 정적 팩터리 메서드로 객체를 재사용 하자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;불변 클래스의 정적 팩터리 메서드로 객체를 재사용 하자&lt;/h3&gt;
&lt;p&gt;예를 들어 &lt;code class=&quot;language-text&quot;&gt;Boolean(String)&lt;/code&gt; 보다 &lt;code class=&quot;language-text&quot;&gt;Boolean.valueOf(String)&lt;/code&gt;을 사용하여 불변 객체를 재사용 하는 것이 더 빠르고 세련된 구현 방식이다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;객체-생성이-비싼-객체라면-재사용-하자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9D%B4-%EB%B9%84%EC%8B%BC-%EA%B0%9D%EC%B2%B4%EB%9D%BC%EB%A9%B4-%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%98%EC%9E%90&quot; aria-label=&quot;객체 생성이 비싼 객체라면 재사용 하자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 생성이 비싼 객체라면 재사용 하자&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;String.matches()&lt;/code&gt; 내부에서 사용되는 &lt;code class=&quot;language-text&quot;&gt;Pattern&lt;/code&gt; 객체는 매우 생성이 비싼 객체이다. 이 메서드를 반복해서 사용하면 내부에서 위 객체를 계속 생성하여 사용한다. 따라서 필요하다면 비교하고자 하는 정규식에 대한 &lt;code class=&quot;language-text&quot;&gt;Pattern&lt;/code&gt;을 미리 만들어두고 그것을 재사용하는 형식으로 사용하는 것이 훨씬 성능이 좋다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RomanNumerals&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pattern&lt;/span&gt; ROMAN &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;정규식 ..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isRomanNumeral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ROMAN&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;오토박싱으로-생성되는-불필요한-객체를-주의하자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%86%A0%EB%B0%95%EC%8B%B1%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EB%90%98%EB%8A%94-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A3%BC%EC%9D%98%ED%95%98%EC%9E%90&quot; aria-label=&quot;오토박싱으로 생성되는 불필요한 객체를 주의하자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오토박싱으로 생성되는 불필요한 객체를 주의하자&lt;/h3&gt;
&lt;p&gt;오토박싱으로 기본타입을 자동적으로 박싱된 타입으로 변환시켜준다. 하지만 명시적으로 객체를 생성하는 부분이 개발자에게 노출되지는 않기 때문에 예기치 않게 굉장히 많은 객체를 생성하고 있을 수도 있다. 따라서 성능에 큰 영향을 미칠수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예를 들어 위와 같은 코드는 sum 이라는 변수가 박싱타입으로 선언되어 있으므로 누적되는 &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt;는 매번 &lt;code class=&quot;language-text&quot;&gt;Long&lt;/code&gt;으로 오토박싱되며 새로운 객체가 2^31개나 생성되는 일이 발생한다.&lt;/p&gt;
&lt;p&gt;이런 의도치 않은 오토박싱을 주의하고 되도록 기본타입을 사용하기를 추천한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;주의할 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의할 점&lt;/h3&gt;
&lt;p&gt;객체 생성을 최대한 안하기 위해서 지나친 재사용을 하라는 뜻이 아니다. JVM에서 객체를 생성하는 것이 대부분 크게 부담되는 일이 아니기 때문에 프로그램의 안정성, 명확성, 간결성을 위해서 객체를 자주 생성하는 것은 바람직한 것이다.&lt;/p&gt;
&lt;p&gt;객체를 재사용하기 위해 무리하여 pool을 생성하는 것을 지양하자. 코드에서 직관적이지 않고 오히려 메모리 사용량을 늘릴 수 있다. 다만 엄청 비싼 자원이라면(DB 커넥션과 같이) pool을 사용하는 것이 적합하다.&lt;/p&gt;
&lt;p&gt;객체를 새로 생성하는 것이(예를 들면 방어적 복사) 프로그램 안정성 측면에서 훨씬 좋을 수 있다. 이럴때는 주저없이 객체를 재사용하기보다 새로 생성하는 것이 훨씬 좋다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;느낀 점&lt;/h3&gt;
&lt;p&gt;불필요하다고 명확히 느낄 때만 객체 생성을 지양하라는 것이지 무조건 객체를 재사용하기 위해서 무리하라는 것이 아니다. 마지막 부분에서 저자가 강조한 것처럼 트레이드 오프를 고려하고 지혜로운 결정을 내리는 것이 매우 중요하다.&lt;/p&gt;
&lt;p&gt;가끔 개발을 하다가 보면 “어디서 이렇게 하라고 했다.” 라고 이야기하면서 특정 방식을 적용하자고 하는 말을 자주 듣곤 한다. 하지만 대부분 그 지령은 절대 진리는 아니다. 상황에 따라서 적합한 것을 선택하는 것이 매우 중요한 개발자 역량이라고 생각한다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-5-%EC%9E%90%EC%9B%90%EC%9D%84-%EC%A7%81%EC%A0%91-%EB%AA%85%EC%8B%9C%ED%95%98%EC%A7%80-%EB%A7%90%EA%B3%A0-%EC%9D%98%EC%A1%B4-%EA%B0%9D%EC%B2%B4-%EC%A3%BC%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 5] 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85di%EC%9D%84-%ED%86%B5%ED%95%B4-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0&quot;&gt;의존성 주입(DI)을 통해 해결하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%94%EC%95%BD&quot;&gt;요약&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-6-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 6] 불필요한 객체 생성을 피하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#string%EC%9D%84-%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%98%EC%9E%90&quot;&gt;String을 재사용 하자&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%98%EC%9E%90&quot;&gt;불변 클래스의 정적 팩터리 메서드로 객체를 재사용 하자&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9D%B4-%EB%B9%84%EC%8B%BC-%EA%B0%9D%EC%B2%B4%EB%9D%BC%EB%A9%B4-%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%98%EC%9E%90&quot;&gt;객체 생성이 비싼 객체라면 재사용 하자&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%A4%ED%86%A0%EB%B0%95%EC%8B%B1%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EB%90%98%EB%8A%94-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A3%BC%EC%9D%98%ED%95%98%EC%9E%90&quot;&gt;오토박싱으로 생성되는 불필요한 객체를 주의하자&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot;&gt;주의할 점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;느낀 점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[이펙티브 자바 - 아이템 3 & 4]]></title><description><![CDATA[이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라 하나의 인스턴스만 생성할 수 있는 것이 싱글턴(Singleton…]]></description><link>https://yjksw.github.io/effective-java-3-4/</link><guid isPermaLink="false">https://yjksw.github.io/effective-java-3-4/</guid><pubDate>Wed, 15 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-아이템-3-private-생성자나-열거-타입으로-싱글턴임을-보증하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-3-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%82%98-%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 3 private 생성자나 열거 타입으로 싱글턴임을 보증하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라&lt;/h2&gt;
&lt;p&gt;하나의 인스턴스만 생성할 수 있는 것이 싱글턴(Singleton) 패턴이다. 참고로 싱글턴을 사용할 경우 이것을 사용하는 클라이언트를 테스트하기가 어렵다. 싱글턴 객체의 생성지점을 제어하기 어려우므로 mock으로 대체하기가 어렵기 때문이다. 싱글턴 객체를 구현하기 위해서는 다음 &lt;strong&gt;3가지 방법&lt;/strong&gt;을 사용할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-private-생성자--public-static-final-필드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-private-%EC%83%9D%EC%84%B1%EC%9E%90--public-static-final-%ED%95%84%EB%93%9C&quot; aria-label=&quot;1 private 생성자  public static final 필드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) private 생성자 &amp;#x26; public static final 필드&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt; INSTANCE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;생성자의 접근제어자가 private이므로 인스턴스는 오직 &lt;code class=&quot;language-text&quot;&gt;INSTANCE&lt;/code&gt; 필드를 초기화할 때 단 한번만 생성된다. 일반적인 경우 클라이언트는 이 부분에 대한 권한이 전혀 없지만 예외적으로 &lt;code class=&quot;language-text&quot;&gt;AccessibleObject.setAccessible&lt;/code&gt;을 사용한다면 private 생성자를 호출할 수 있기는 하다. (방어를 위해서는 두번째 생성자 호출시 예외발생)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장점
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;public static final&lt;/code&gt; 필드를 사용할 경우 싱글턴이라는 것이 분명히 드러난다. (&lt;code class=&quot;language-text&quot;&gt;final&lt;/code&gt;이므로 재정의 할 수 없다.)&lt;/li&gt;
&lt;li&gt;간결하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;2-private-생성자--정적-팩터리-메서드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-private-%EC%83%9D%EC%84%B1%EC%9E%90--%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;2 private 생성자  정적 팩터리 메서드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) private 생성자 &amp;#x26; 정적 팩터리 메서드&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt; INSTANCE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&apos;

	pirvate &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; INSTANCE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;장점
&lt;ul&gt;
&lt;li&gt;싱글턴이 아닌 경우로 리팩토링 할 경우 변경에 유연하다.&lt;/li&gt;
&lt;li&gt;정적 팩터리를 제네링 싱글턴 팩터리로 만들 수 있다.&lt;/li&gt;
&lt;li&gt;정적 팩터리 메소드를 Supplier로 사용할 수 있다. (일급 함수로 사용 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;위-방법에서-직렬화-시-주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%84-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%A7%81%EB%A0%AC%ED%99%94-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;위 방법에서 직렬화 시 주의할 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위 방법에서 직렬화 시 주의할 점&lt;/h3&gt;
&lt;p&gt;직렬화는 객체를 바이트로 변환해 데이터를 외부 시스템에 영구적으로 저장하거나 사용할 수 있도록 하는 것을 말한다. 직렬화 후 다시 역직렬화 할 때(&lt;code class=&quot;language-text&quot;&gt;readObject()&lt;/code&gt; 사용시) 싱글톤임에도 불구하고 새로운 인스턴스가 생성된다.&lt;/p&gt;
&lt;p&gt;이를 방지하기 위해서는 직렬화 하는 객체의 필드를 &lt;code class=&quot;language-text&quot;&gt;transient&lt;/code&gt; 선언(직렬화 대상에서 제외하고 &lt;code class=&quot;language-text&quot;&gt;readResolve()&lt;/code&gt; 메서드를 정의하여 기존에 생성된 객체를 반환하도록 해야 한다. 이때도 &lt;code class=&quot;language-text&quot;&gt;readObject()&lt;/code&gt; 호출 시 새로운 인스턴스가 생성되기는 하지만 해당 인스턴스를 가짜 인스턴스로 간주하고 무시하여 GC가 처리한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; INSTANCE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;3-enum-타입으로-선언&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-enum-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%84%A0%EC%96%B8&quot; aria-label=&quot;3 enum 타입으로 선언 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) Enum 타입으로 선언&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Earth&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	INSTANCE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 관련 메서드 정의&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;열거타입으로 선언할 경우 매우 간결하고 특별한 노력 없이 직렬화 관련 문제도 해결된다. 또한 리플렉션 시에도 싱글톤임을 보장해준다. 하지만 열거 타입의 본래 사용의도와 어긋나므로 어색해보일 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-아이템-4-인스턴스화를-막으려거든-private-생성자를-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94%EB%A5%BC-%EB%A7%89%EC%9C%BC%EB%A0%A4%EA%B1%B0%EB%93%A0-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 4 인스턴스화를 막으려거든 private 생성자를 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 4] 인스턴스화를 막으려거든 private 생성자를 사용하라&lt;/h2&gt;
&lt;p&gt;객체지향적으로 보았을 때 안티패턴이기는 하지만 필요시 정적 필드와 정적 메서드만을 모아둔 utility 성향의 클래스를 생성하게 될 때가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바의 경우 java.util.Arrays, java.util.Collections와 같이 배열과 관련된 메서드를 모아 놓거나 특정 인터페이스 구현체를 생성해주는 팩터리 역할을 하는 경우 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 경우 클래스의 인스턴스화를 막아야 하는데 이때는 기본 생성자를 &lt;code class=&quot;language-text&quot;&gt;private&lt;/code&gt;으로 선언하여 명시해주어야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴파일러는 기본 생성자가 명시되어 있지 않으면 자동으로 기본 생성자를 만들어서 인스턴스화가 가능하도록 한다.&lt;/li&gt;
&lt;li&gt;실수로 클래스 내에서 private 생성자를 사용하지 않도록 주의해야 한다.&lt;/li&gt;
&lt;li&gt;기본 생성자가 막혀있다면 하위 클래스에서 상위 클래스의 생성자에 접근할 수 없으므로 상속을 불가능하게 하는 효과도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사용하지 않을 생성자를 코드에 명시하는 것이므로 직관적인 코드는 아니라는 단점도 있다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-3-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%82%98-%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-private-%EC%83%9D%EC%84%B1%EC%9E%90--public-static-final-%ED%95%84%EB%93%9C&quot;&gt;1) private 생성자 &amp;#x26; public static final 필드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-private-%EC%83%9D%EC%84%B1%EC%9E%90--%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C&quot;&gt;2) private 생성자 &amp;#x26; 정적 팩터리 메서드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%84-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%A7%81%EB%A0%AC%ED%99%94-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot;&gt;위 방법에서 직렬화 시 주의할 점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-enum-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%84%A0%EC%96%B8&quot;&gt;3) Enum 타입으로 선언&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94%EB%A5%BC-%EB%A7%89%EC%9C%BC%EB%A0%A4%EA%B1%B0%EB%93%A0-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 4] 인스턴스화를 막으려거든 private 생성자를 사용하라&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[이펙티브 자바 - 아이템 1 & 2]]></title><description><![CDATA[이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 1] 생성자 대신 정적 팩터리 메서드를 고려하라 정적 팩터리 메서드(static factory method…]]></description><link>https://yjksw.github.io/effective-java-1-2/</link><guid isPermaLink="false">https://yjksw.github.io/effective-java-1-2/</guid><pubDate>Tue, 14 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-아이템-1-생성자-대신-정적-팩터리-메서드를-고려하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 1 생성자 대신 정적 팩터리 메서드를 고려하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 1] 생성자 대신 정적 팩터리 메서드를 고려하라&lt;/h2&gt;
&lt;h3 id=&quot;정적-팩터리-메서드static-factory-method란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9Cstatic-factory-method%EB%9E%80&quot; aria-label=&quot;정적 팩터리 메서드static factory method란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적 팩터리 메서드(static factory method)란?&lt;/h3&gt;
&lt;p&gt;해당 클래스의 인스턴스를 반환하는 정적 메서드이다.&lt;/p&gt;
&lt;p&gt;예를 들어 다음 박싱 클래스를 반환하는 정적 메서드를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TRUE &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FALSE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 챕터에서 추천하는 바는 public 생성자 대신 정적 팩터리 메서드를 고려해보라는 것이다. 정적 팩터리 메서드는 장단점이 있다. 따라서 항상 정적 팩터리 메서드가 더 우수하다는 것은 아니다. 다만 습관적으로 public 생성자를 사용하기 이전에 상황을 살피고 정적 팩터리 메서드가 더 적합하다면 해당 메서드를 사용하도록 추천한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;이름을 가질 수 있다.&lt;/p&gt;
&lt;p&gt;여러 종류의 생성자가 필요로 할 경우 매개변수의 수를 다르게 해서 추가하곤 한다. 하지만 이 매개변수와 생성자 자체로는 반환될 객체의 특성이나 언제 이 생성자가 사용이 되는지 설명할 수 없다.&lt;/p&gt;
&lt;p&gt;따라서 이름을 가진 정적 팩터리 메서드를 사용한다면 개발자가 각 생성 메서드가 무엇을 의짐하는지 알 수 있고 그 차이를 잘 드러낼 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.&lt;/p&gt;
&lt;p&gt;미리 만들어놓은 인스턴스나 새로 생성한 인스턴스 캐싱하여 재사용하는 추가 로직을 가지고 있을 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예를 들어 &lt;code class=&quot;language-text&quot;&gt;Boolean.valueOf()&lt;/code&gt; 메서드는 객체를 아예 생성하지 않고 미리 생성된 객체만을 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 미리 만들어놓은 인스턴스를 활용하는 것은 해당 코드의 성능도 높여주지만 개발자가 반환되는 인스턴스를 철저하게 통제할 수 있다는 이점도 제공한다. 이러한 클래스를 인스턴스 통제(instance-controlled) 클래스라고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인스턴스를 통제한다면 클래스를 싱글톤(Singleton)이나 인스턴스 불가(noninstantiable)로 만들 수 있다.&lt;/li&gt;
&lt;li&gt;불변 값에서 동치를 보장하는 인스턴스를 제공할 수도 있다.&lt;/li&gt;
&lt;li&gt;Flyweight pattern의 근간이 된다. Flyweight pattern 이란 불필요한 new 연산자를 줄이고 필요한 인스턴스만 만들어 최대한 공유할 수 있도록 한 디자인 패턴이다.&lt;/li&gt;
&lt;li&gt;열거 타입이 인스턴스를 하나만 만들어지는 것을 보장하도록 해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.&lt;/p&gt;
&lt;p&gt;반환 할 때 반드시 해당 클래스의 객체만 반환하는 것이 아니라 필요시 하위 타입의 객체를 반환하도록 하는 것은 엄청난 유연성을 가질 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;이 유연성을 활용하면 반환할 때 그 구현체를 공개하지 않고 반환하여 활용할 수 있도록 하므로 코드가 간결하고 작게 유지될 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자바 컬렉션 프레임워크의 경우 여러 추가 기능을 덧붙인 45개의 유틸리티 구현체를 제공한다. 이 구현체들은 아래 사진에서 볼 수 있는 것과 같이 &lt;code class=&quot;language-text&quot;&gt;java.util.Collections&lt;/code&gt;에서 정적 팩토리 메서드를 통해서 얻어질 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/146213695-ebca67cd-c845-4eba-8c35-3a97bf683f3f.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 클래스들은 공개되어 있지 않기 때문에 자바 컬렉션 프레임워크 자체를 외부에서 바라보았을 때 훨씬 작고, 응용하면서 익혀야하는 개념과 난이도가 대폭 줄어든다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 그 인터페이스가 명시한 대로 동작할 것을 알기 때문에 해당 구현 클래스가 무엇인지 자세히 살펴볼 필요도 없다. 즉, 정적 팩토리 메서드를 사용한 클라이언트는 해당 객체의 구현체가 아닌 인터페이스만으로 다룰 수 있는 이점이 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.&lt;/p&gt;
&lt;p&gt;반환 타입의 하위 타입이기만 한다면 해당 클래스의 객체를 반환할 수 있다. 이것은 매번 다음 릴리즈 때 필요에 의해 다른 클래스의 객체를 반환할 수 있도록 해준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예를 들면 &lt;code class=&quot;language-text&quot;&gt;EnumSet&lt;/code&gt; 같은 경우 정적 팩토리 메서드로만 객체를 생성할 수 있는데, 매개변수에 적인 원소의 수에 따라서 &lt;code class=&quot;language-text&quot;&gt;RegularEnumSet&lt;/code&gt; 인스턴스를 반환하거나 &lt;code class=&quot;language-text&quot;&gt;JumboEnumSet&lt;/code&gt; 인스턴스를 반환한다.&lt;/li&gt;
&lt;li&gt;다음 릴리즈 때 둘 중 하나의 구현체의 이점이 없어진다면 큰 번거로움 없이 둘 중 하나를 삭제하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;위 유연함을 제공하기 때문에 service provider framework가 가능하다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;흔히 알고 있는 대표적인 service provider framework는 &lt;code class=&quot;language-text&quot;&gt;JDBC&lt;/code&gt;이다. 여기서 provider는 구현체이다. 이러한 service provider framework에서는 클라이언트에게 구현체를 제공하는 역할을 프레임워크가 담당하기 때문에 클리아언트는 인터페이스로 기능만 제공받고 구현체로부터는 분리될 수 있다.&lt;/p&gt;
&lt;p&gt;클라이언트가 서비스의 인스턴스를 얻을 때 서비스 접근 API를 사용하여 조건에 따라 필요한 구현체를 얻는데 여기서 정적 팩터리 메서드의 유연성이 이것을 가능하게 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.&lt;/p&gt;
&lt;p&gt;하지만 이것은 &lt;strong&gt;상속보다 컴포지션을 사용&lt;/strong&gt;하고 &lt;strong&gt;불변 타입을 보장&lt;/strong&gt;하도록 한다면 이 제약이 그렇게 큰 단점으로 다가오지는 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정적 팩터리 메서드는 프로그래머가 찾기 어렵다.&lt;/p&gt;
&lt;p&gt;어떤 메서드를 사용하여 해당 객체를 생성할 수 있는지 규정되어 있지 않으므로 찾기가 어렵다. 다만 흔히 사용하는 몇가지 명명 방식이 있기는 하다. (예를 들면 &lt;code class=&quot;language-text&quot;&gt;from&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;of&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;valueOf&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;instance&lt;/code&gt; 등등.. 필요하면 찾아보길)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-아이템-2-생성자에-매개변수가-많다면-빌더를-고려하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EB%8B%A4%EB%A9%B4-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC&quot; aria-label=&quot; 아이템 2 생성자에 매개변수가 많다면 빌더를 고려하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 [아이템 2] 생성자에 매개변수가 많다면 빌더를 고려하라&lt;/h2&gt;
&lt;p&gt;앞서 정적 팩터리 메서드의 장점에 대해서 이야기했다. 하지만 정적 팩터리 메서드도 여전히 한계점이 있는데 그것은 매개변수가 너무 많거나, 그 중 선택적인 요소들이 많을 때 &lt;strong&gt;가독성과 안정성&lt;/strong&gt;을 유지시키는 것이 어렵다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 &lt;strong&gt;가독성이&lt;/strong&gt;라고 하는 것은 여러 매개변수가 있을 때 몇번째가 어느 필드에 관한 값인지 알기 어려운 것이다.&lt;/li&gt;
&lt;li&gt;여기서 &lt;strong&gt;안정성&lt;/strong&gt;이라고 하는 것은 setter를 사용했을 때 중간에 일관성이 깨지게 되는 것을 말한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;생성자정적-팩터리-메서드와-setter의-한계점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EC%9E%90%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-setter%EC%9D%98-%ED%95%9C%EA%B3%84%EC%A0%90&quot; aria-label=&quot;생성자정적 팩터리 메서드와 setter의 한계점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성자(정적 팩터리 메서드)와 setter의 한계점&lt;/h3&gt;
&lt;p&gt;여러 매개변수가 있고 몇몇 선택적인 요소들이 있을 경우 흔히 사용하는 방법은 &lt;strong&gt;점층적 생성자 패턴&lt;/strong&gt;(telescoping constructor pattern)이다. 이 패턴을 사용할 경우 보통 생성자의 수가 너무 많아 가독성이 떨어지거나 설정하고 싶지 않은 매개변수까지 포함하기 쉽다. (따라서 0 또는 null로 해당 값을 입력하게 된다)&lt;/p&gt;
&lt;p&gt;두번째 가능한 방법은 자바빈즈 패턴JavaBeans Pattern이다. 이 경우 생성자는 기본으로 두고 setter를 통해서 원하는 매개변수의 값을 설정하는 것이다. 가독성은 좋아지나 &lt;strong&gt;불변 객체를 포기&lt;/strong&gt;해야하며 여러 메서드를 호출해서 각각 초기값을 입력해주어야 하기 때문에 해당 작업이 완료되기 이전에는 &lt;strong&gt;일관성이 보장되지 않은 상태&lt;/strong&gt;이다. 따라서 버그 가능성이 매우 높다. (스레드 안정성이 낮다.)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;빌더-패턴-builder-pattern을-통한-대안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4-builder-pattern%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%8C%80%EC%95%88&quot; aria-label=&quot;빌더 패턴 builder pattern을 통한 대안 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌더 패턴 Builder Pattern을 통한 대안&lt;/h3&gt;
&lt;p&gt;빌더 패턴을 사용할 경우 필수 매개변수(초기값이 반드시 있어야 하는 필드)로 빌더 객체를 생성한다. (&lt;strong&gt;해당 객체를 직접 생성하는 것이 아니다.&lt;/strong&gt;) 이후 빌더를 통해서 선택 매개변수들을 하나씩 지정하게 되고 &lt;code class=&quot;language-text&quot;&gt;build()&lt;/code&gt; 메서드 호출을 통해 필요 매개변수들이 대입된 객체를 얻게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 필수 매개변수&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 필수 매개변수&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; school&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; address&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		school &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;school&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		address &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;address&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; fianl &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; school &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 기본값&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; address &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 기본값&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; school&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;school &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; school&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; address&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;address &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; address&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이처럼 Builder를 사용한다면 해당 클래스를 불변으로 유지하면서 기본값 매개변수는 반드시 지정하도록, 그리고선택 매개변수는 원하는 것을 선택해서 사용할 수 있도록 한다.&lt;/p&gt;
&lt;p&gt;Builder를 사용한다면 메서드 체이닝 방식으로(fluent API, method chaining) 사용되기 때문에 가독성이 좋고 일관성을 유지시킬 수 있다.&lt;/p&gt;
&lt;p&gt;불변식(invariant)을 검증하고 싶다면 &lt;code class=&quot;language-text&quot;&gt;build()&lt;/code&gt;에서 사용하는 생성자에 검증로직을 넣어서 보장하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;번외) 불변(immutable) vs. 불변식(invariant)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;불변은 해당 객체에 대한 그 어떠한 변경도 허용하지 않는 것이다. 불변식은 프로그램이 실행되는 동안 반드시 만족해야하는 조건이다. 값에 대한 변경과 상관없이 해당 객체가 가지고 있는 필수 요구사항이라고 할수 있다. (나이는 항상 양수여야 한다 등등&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;빌더패턴의-장점---계층적-클래스에서의-응용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90---%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%91%EC%9A%A9&quot; aria-label=&quot;빌더패턴의 장점   계층적 클래스에서의 응용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌더패턴의 장점 - 계층적 클래스에서의 응용&lt;/h3&gt;
&lt;p&gt;각 계층에서 각각의 빌더를 두어 사용한도록 한다. 상위 클래스에서는 추상 빌더를, 하위 클래스에서는 구현체 빌더를 사용하도록 한다. Generic과 추상 메서드를 활용한 빌더 패턴이다.&lt;/p&gt;
&lt;p&gt;코드를 통해서 이해하는 것이 훨씬 빠르므로 코드로 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최상위 추상 클래스 &lt;code class=&quot;language-text&quot;&gt;Pizza&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;HAM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MUSHROOM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ONION&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; toppings&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//상위 클래스 필드&lt;/span&gt;

	&lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		toppings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toppings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;EnumSet&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; toppings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EnumSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;noneOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// element 타입을 지정한 빈 EnumSet 자료구조이다.&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addTopping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt; topping&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			toppings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topping&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 하위 클래스에서 그 값이 달라지므로 추상메서드 self()를 반환&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 하위 클래스의 생성자 호출&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 하위 클래스의 Builder 반환 메서드 &lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;첫 번째 하위 클래스 &lt;code class=&quot;language-text&quot;&gt;NyPizza&lt;/code&gt; - 사이즈 지정이 필수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NyPizza&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; SMALL&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MEDIUM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; LARGE &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Size&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NyPizza&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 상위 클래스의 topping을 지정&lt;/span&gt;
		size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 하위 클래스의 필드를 지정&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Builder&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Size&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Size&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NyPizza&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NyPizza&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;두 번째 하위 클래스 &lt;code class=&quot;language-text&quot;&gt;Calzone&lt;/code&gt; - Sauce 추가 여부 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Calzone&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; sauceInside&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Calzone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		sauceInside &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sauceInside&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Builder&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; sauceInside &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 기본값 지정&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sauceInside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			sauceInside &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;	
		
		&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Calzone&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Calzone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;상위 코드를 잘 이해해보면 계층적 클래스에서 빌더를 통해 구현체의 필수 매개변수를 지정하고 공통된 상위 클래스의 매개변수 지정까지 함께 처리할 수 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;또한 하위 클래스에서 &lt;code class=&quot;language-text&quot;&gt;build()&lt;/code&gt;를 정의하기 때문에 구현체의 객체를 반환할 수 있다. 즉, &lt;code class=&quot;language-text&quot;&gt;NyPizza.Builder&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;NyPizza&lt;/code&gt;를 반환할 수 있다. (상위 클래스에서는 &lt;code class=&quot;language-text&quot;&gt;Pizza&lt;/code&gt;를 반환하도록 되어 있다.)&lt;/p&gt;
&lt;p&gt;이렇게 하위 클래스의 메서드에서 상위 클래스에서 정의한 반환값이 아닌 하위 클래스의 타입을 반환하는 것을 &lt;strong&gt;공변 반환 타이핑(covariant return typing)&lt;/strong&gt; 이라고 한다. 이것을 통해 클라이언트가 형변환을 굳이 하지 않고 Builder를 사용할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;위에서 구현한 Builder는 다음과 같이 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;NyPizza&lt;/span&gt; pizza &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NyPizza&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SMALL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTopping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SAUSAGE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTopping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ONION&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Calzone&lt;/span&gt; calzone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Calzone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTopping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HAM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sauceInside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Builder의 추가적인 이점&lt;/p&gt;
&lt;p&gt;위의 &lt;code class=&quot;language-text&quot;&gt;addToppings()&lt;/code&gt; 처럼 가변인수(varargs) 매개변수를 여러개 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;즉, 개수가 한정되어 있지 않은 가변 인자를 여러개 연달아 지정할 수 있는 이점을 누릴 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;빌더패턴의-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;빌더패턴의 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌더패턴의 단점&lt;/h3&gt;
&lt;p&gt;객체를 만들기 전 빌더 관련 로직을 구현하고 생성해야 하므로 성능에 민감한 상황에서 영향을 끼칠 수 있다.&lt;/p&gt;
&lt;p&gt;또한 추가 코드가 매우 많아지기 때문에 매개변수가 적을 때는 오히려 생산성이 훨씬 떨어진다.&lt;/p&gt;
&lt;p&gt;하지만 저자는 API는 일반적으로 시간이 지날수록 매개변수가 많아지기 때문에 나중에 빌더 패턴으로 전환하기보다는 애초에 빌더로 시작하는 것을 추천한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;요약---언제-빌더를-사용하는게-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EC%95%BD---%EC%96%B8%EC%A0%9C-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;요약   언제 빌더를 사용하는게 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요약 - 언제 빌더를 사용하는게 좋을까?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;매개변수의 수가 많을 때&lt;/li&gt;
&lt;li&gt;매개변수의 수가 많고 매개변수 중 다수가 선택 매개변수 일 때 (또는 같은 타입이라서 점층적 생성자 패턴을 사용하지 못할 때)&lt;/li&gt;
&lt;li&gt;가독성이 필요하고 안정성이 중요할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 1] 생성자 대신 정적 팩터리 메서드를 고려하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9Cstatic-factory-method%EB%9E%80&quot;&gt;정적 팩터리 메서드(static factory method)란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot;&gt;장점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot;&gt;단점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%95%84%EC%9D%B4%ED%85%9C-2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EB%8B%A4%EB%A9%B4-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC&quot;&gt;🌩 [아이템 2] 생성자에 매개변수가 많다면 빌더를 고려하라&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EC%9E%90%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-setter%EC%9D%98-%ED%95%9C%EA%B3%84%EC%A0%90&quot;&gt;생성자(정적 팩터리 메서드)와 setter의 한계점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4-builder-pattern%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%8C%80%EC%95%88&quot;&gt;빌더 패턴 Builder Pattern을 통한 대안&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90---%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%91%EC%9A%A9&quot;&gt;빌더패턴의 장점 - 계층적 클래스에서의 응용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90&quot;&gt;빌더패턴의 단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%94%EC%95%BD---%EC%96%B8%EC%A0%9C-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;요약 - 언제 빌더를 사용하는게 좋을까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[함께 자라기 🌱 읽자 - Part 3. 애자일]]></title><description><![CDATA[💡 Intro…]]></description><link>https://yjksw.github.io/growing-together-3/</link><guid isPermaLink="false">https://yjksw.github.io/growing-together-3/</guid><pubDate>Mon, 06 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;p&gt;애자일의 의도는 불확실성이 큰 소프트웨어 개발 분야에서는 꼼꼼한 초반 계획을 세우고 이행하는 형태는 불가능하다는 것에서 출발한다. 따라서 애자일은 불확실성이 더 큰 프로젝트일수록 적합하다.&lt;/p&gt;
&lt;p&gt;하지만 저자는 애자일을 단순한 소프트웨어 개발론으로만 보지 않고 하나의 일하거나 삶을 사는 스타일로 확장해서 해석해본다. 어떻게 우리 삶에서, 일에서 애자일을 적용할 수 있을까?&lt;/p&gt;
&lt;p&gt;지금까지 말한 학습과 협력이 애자일의 핵심 전략이 될 수 있다. 불확실성이 높은 프로젝트 일수록 안좋은 일이 생기기 쉽다. 그리고 안좋은 일은 ‘또는’ 조건에서 생기기 마련인데 애자일은 앞서 말한 서로의 업무를 공유하고 상호 검토하는 협력을 통해 ‘또는’ 조건을 ‘그리고’ 조건으로 만들어 확률을 낮춘다.&lt;/p&gt;
&lt;p&gt;또한 좋은 일은 확장될 수 있도록 ‘또는’ 조건을 공유를 통한 ‘그리고’ 조건으로 변경한다. 공유를 통해 전체가 개선되도록 하는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 글은 세 번째 파트인 애자일 파트이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;애자일의-씨앗&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%98-%EC%94%A8%EC%95%97&quot; aria-label=&quot;애자일의 씨앗 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 애자일의 씨앗&lt;/h2&gt;
&lt;p&gt;애자일은 짧은 시간 내에 아주 간단하게 전달하는 것은 어렵다. 그럼에도 불구하고 애자일의 씨앗이라고 말할 수 있는 핵심을 한 문장으로 정의하면 다음이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;고객에게 매일 가치를 전하라.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;불확실성이 높을수록 빈도가 높아야한다. 그래서 한번에 몰아서 하기 보다 조금씩 자주 하는 것이 중요하다. 현재 위치를 확인하고 피드백을 받는 빈도를 늘리는 것이다.&lt;/p&gt;
&lt;p&gt;또한 해당 프로젝트의 이해관계자와 ‘함께’ 진행을 해야 한다. 끼리끼리 마구 진행해버리는 것은 아무 소용 없다.&lt;/p&gt;
&lt;p&gt;애자일에서 고객 참여와 코드 공유는 필수다. 하지만 많은 팀에서 이 두 가지는 ‘사람’을 다루는 것이기 때문에 많이 미룬다. 또한 애자일 성숙도에 큰 기여를 한 것은 짧은 개발 주기이다.&lt;/p&gt;
&lt;p&gt;정리해서 말하자면 애자일 실천법을 잘 하기만 하면 조직의 성공률이 올라간다. 애자일을 실천할 때 성공과 직결이 되는 것을 뽑자면 고객 참여, 리팩터링, 코딩 후 자동화 단위 테스트, 코드 공유 등이다. 애자일의 성숙도가 낮더라도 고객 참여를 하면 프로젝트의 성공 확률이 올라간다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 마무리&lt;/h2&gt;
&lt;p&gt;어쩌면 어떤 방법론을 적용하는지보다 중요한 것은 어떤 사람들이 참여하는 가가 더 중요할 수 있다. 결국 그 방법론을 이행하는 주체는 그 팀의 사람들이기 때문이다. 더해서 이 책에서 언급하는 것은 애자일을 애자일스럽게 적용하자는 것이다. 불확실한 것을 적용할 때 하는 것이 애자일인데 애자일을 확실성 위에서 진행하고자 하는 것은 어리석은 일이다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애자일을 소프트웨어 개발론의 하나가 아니라 학습과 삶의 방식으로 해석을 한 것이 흥미로웠다.&lt;/li&gt;
&lt;li&gt;처음에 애자일에 대해서 들었을 때 “그냥 그때그때 알아서 하라는 거 같은데 이게 무슨 방법론이야” 라는 생각을 했었다.&lt;/li&gt;
&lt;li&gt;하지만 이 글을 읽으면서 애자일의 핵심은 “불확실한 상황이라는 것을 인지하는 태도”라는 생각이 많이 들었다.&lt;/li&gt;
&lt;li&gt;결국 불확실한 상황이라는 것을 인지하기 때문에 짧은 주기로 잦은 피드백을 받고 많은 수정을 하면서 길을 찾아나가는 것이기 때문이다.&lt;/li&gt;
&lt;li&gt;여기에 더해서 흥미로운 애자일의 특징은 ‘사람’이라는 요소가 중요하게 작용한다는 것이다. 애자일은 불학실한 상황에서 상호 피드백과, 중복 검증, 좋은 정보 공유 등을 통해서 성공 확률을 높이고 실패 확률을 낮추는 것이 핵심이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%98-%EC%94%A8%EC%95%97&quot;&gt;🌩 애자일의 씨앗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;🌩 마무리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[함께 자라기 🌱 읽자 - Part 2. 함께]]></title><description><![CDATA[💡 Intro…]]></description><link>https://yjksw.github.io/growing-together-2/</link><guid isPermaLink="false">https://yjksw.github.io/growing-together-2/</guid><pubDate>Sun, 05 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;주로 협력이라고 하면 초반에 일을 나누고 선을 그어 따로 진행하는 것처럼 생각한다.&lt;/li&gt;
&lt;li&gt;실제로 일을 나누는 것은 초반에 하기 어렵다. 왜냐면 그 일이 무엇인지 잘 모르기 때문이다. 그럼에도 불구하고 사람들은 일을 초반에 나누고 따로 진행하면서 협력이 아닌 협력을 한다.&lt;/li&gt;
&lt;li&gt;요즘에 ‘함께’라는 것이 중요 키워드다. 회사와 구성원이 함께, 팀원들이 함께 성장하는 것에 관심이 많다.&lt;/li&gt;
&lt;li&gt;이 글은 두 번째 파트인 &lt;strong&gt;함께&lt;/strong&gt; 파트이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;소프트웨어-관리자의-우선순위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B4%80%EB%A6%AC%EC%9E%90%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot; aria-label=&quot;소프트웨어 관리자의 우선순위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 소프트웨어 관리자의 우선순위&lt;/h2&gt;
&lt;p&gt;다음 4가지 영역이 소프트웨어 개발의 관리에 영향을 미치는 요소들이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;도구: 소프트웨어 개발에 사용하는 도구&lt;/li&gt;
&lt;li&gt;사람: 사람의 능력과 경험&lt;/li&gt;
&lt;li&gt;시스템: 제품의 복잡도, 요구 신뢰성, DB 크기 등등&lt;/li&gt;
&lt;li&gt;관리: 사람을 배정하고 작업을 분배하고 위임. 작업을 모니터링, 동기 고취 환경 개선, 리스트 확인 및 적절한 조치 등등&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;주로 개발 비용을 개선하려면 도구나 사람을 개선한다. 즉, 더 좋은 도구로 바꾸거나 더 실력있는 사람을 데리고 오는 것이다. 하지만 실제로 개발할 때 문제가 생겼던 부분이나 비용을 크게 개선하는 부분은 관리 부분이다. 역순으로 실제 중요도가 매겨진다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;협력을-통한-추상화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%98%91%EB%A0%A5%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%B6%94%EC%83%81%ED%99%94&quot; aria-label=&quot;협력을 통한 추상화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 협력을 통한 추상화&lt;/h2&gt;
&lt;p&gt;이때까지 프로그래머에게 중요하다고 생각되지 않았던 영역은 소프트 스킬이라고 한다. “개발만 하는 천재”라는 표현이 익숙하다. 하지만 사실 진짜로 뛰어난 프로그래머는 사회적인 면을 더 언급하여 협력의 중요성을 상기시킨다.&lt;/p&gt;
&lt;p&gt;협력을 하면 그 효용성이 떨어진다는 결과가 많다. 같이 할수록 일도 더디게 진행이 되고 혼자서 낼 수 있는 최고의 아웃풋 만큼의 결과가 나오지 않는 경우가 많기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;하지만 협력을 하기 위해서는 일에 대해서 추상적으로 표현하고 설명해야 할 필요가 생기기 때문에 작업에 대한 추상화가 진행될 수 있다. 그런 과정 중에게 문제를 해결하기도 한다.&lt;/strong&gt; 혼자서 작업을 할 때에는 추상화 작업이 덜 필요하기 때문에 작업을 추상적으로 바라보면서 해결을 하기가 어렵다.&lt;/p&gt;
&lt;p&gt;다른 두 시각을 가진 두 사람이 협력을 하면 자연스럽게 추상화를 하게 된다. 그것은 작업에 큰 효용을 가지고 온다. 추상화를 높이고 싶다면 다른 사람과 함께 진행하면서 대화해라!&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;신뢰는-깎는-공유인가-신뢰를-쌓는-공유인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A0%EB%A2%B0%EB%8A%94-%EA%B9%8E%EB%8A%94-%EA%B3%B5%EC%9C%A0%EC%9D%B8%EA%B0%80-%EC%8B%A0%EB%A2%B0%EB%A5%BC-%EC%8C%93%EB%8A%94-%EA%B3%B5%EC%9C%A0%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;신뢰는 깎는 공유인가 신뢰를 쌓는 공유인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 신뢰는 깎는 공유인가 신뢰를 쌓는 공유인가&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;신뢰 자산이 높은 조직은 커뮤니케이션 효율이나 생산성이 높다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;흔히 신뢰를 쌓는데 사용되는 방법은 투명서와 공유, 인터랙션이다. 누군가 한 작업물을 공유하면서 피드백을 주고 받으며 상호작용하는 것이다. 그런데 그 모든 공유와 소통을 하면 반드시 신뢰가 쌓이는 것은 아니다.&lt;/p&gt;
&lt;p&gt;실험을 해보았을 때 자신이 한 작업물을 하나만 공유하거나(하나 공유), 여러개의 작업물 중 최고만 공유하거나(최고 공유) 한 경우 신뢰는 더욱 떨어졌다. 반대로 자신이 한 작업물을 모두 공유(복수 공유) 했을 때는 신뢰도가 높아졌다. 하나만 공유했을 때 상대의 의견에 지나치게 방어적이게 되면서 자기효능감이 떨어지기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;따라서 복수 공유를 하는 것이 신뢰를 쌓는 공유이다.&lt;/strong&gt; 복수 공유를 하면 인터랙션이 더 많아지고 피드백을 더 잘 수용하게 된다. 그래서 결과물이 더 잘 나오게 된다. 즉, 복수 공유는 신뢰도도 높아지고 성과도 더 좋다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;객관성의-주관성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EA%B4%80%EC%84%B1%EC%9D%98-%EC%A3%BC%EA%B4%80%EC%84%B1&quot; aria-label=&quot;객관성의 주관성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 객관성의 주관성&lt;/h2&gt;
&lt;p&gt;새로운 개념을 적용하기 위해서는 주변을 설득해야한다. 혹시 본인이 팀장이더라도 설득을 해야한다. 이때 수치를 가지고 설득을 하거나 여러 자료를 사용하기도 한다. 하지만 무엇보다 중요한 것은 설득을 하는 그 상대에 대해서 잘 알고 이야기 해보았는지다. 그렇지 않으면 설득에 성공할 확률은 낮아진다.&lt;/p&gt;
&lt;p&gt;어떠한 공동체 내에서 사용하는 단어는 매우 주관적으로 사용이 된다. 누군가가 ‘품질’에 대해서 이야기할 때 그것에 대해 각기 다른 의미를 가지고 있을 것이다. &lt;strong&gt;‘객관성’ 또한 마찬가지이다. 누군가를 설득하려면 객관성이 있어야 한다고 말하는데 이 객관성이라는 것 자체가 주관적인 의미를 담고 있다.&lt;/strong&gt; 따라서 설득을 하려고 한다면 그 상대를 이해해야 한다. 어떤 사람이며 어떤 가치관을 가지고 있는지 알고 그것을 바탕으로 설득을 해야한다. 그것 없이 객관적인 설득은 어렵다. &lt;strong&gt;결국 결정하는 것은 ‘객관적 사실’이기보다 사람이기 때문이다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;아무리 객관적인 의사결정을 하더라도 감정을 배제할 수는 없다. 인간이 그렇다. 그렇기 때문에 누군가를 설득하고 싶다면 그 상대와 신뢰를 쌓고, 그 사람이 중요하게 생각하는 것과, 어떤 설명 방식을 선호하는지 이해해야 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;효과적인-코칭&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-%EC%BD%94%EC%B9%AD&quot; aria-label=&quot;효과적인 코칭 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 효과적인 코칭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;코칭 능력이 없을수록 상대를 비난한다.&lt;/li&gt;
&lt;li&gt;사람은 스스로 한 약속일수록 지킬 확률이 높아진다.&lt;/li&gt;
&lt;li&gt;어떠한 방법을 택해서 해왔는지 물어보면서 상태를 파악한다.&lt;/li&gt;
&lt;li&gt;할 수 있는 방향을 제시해서 이행하도록 유도한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;하향식-접근의-함정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%ED%96%A5%EC%8B%9D-%EC%A0%91%EA%B7%BC%EC%9D%98-%ED%95%A8%EC%A0%95&quot; aria-label=&quot;하향식 접근의 함정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 하향식 접근의 함정&lt;/h2&gt;
&lt;p&gt;주로 일을 할 때 탑 다운 형식(추상적 → 구체적)으로 가는 것이 깔끔하게 느껴진다. 하지만 전문가일수록 일을 처리하는 것을 확인해보니 추상화의 정도와 구체적인 정도를 왔다갔다 하면서 일을 처리했다.&lt;/p&gt;
&lt;p&gt;비전문가일수록 처음에 설계한 것을 고집하며 따라간다. 전문가는 자신의 초기 계획을 자주 수정하며 바꿔나간다.&lt;/p&gt;
&lt;p&gt;보면 프로그램을 이해하는 고수는 &lt;strong&gt;상호 참조 전략&lt;/strong&gt;을 쓴다. 프로그램을 이해한 것을 도메인의 어휘로 바꿔보고 다시 이것을 프로그램의 어휘로 바꾼다. &lt;strong&gt;즉, 추상과 구상의 차원을 자주 오간다.&lt;/strong&gt;  반면 하수는 둘 중 한족에만 집중한다.&lt;/p&gt;
&lt;p&gt;조직에 일을 할 때는 주로 여러 팀이 바통 터치를 하면서 일을 진행한다. 이때 협력이 잘 되게 하려면 바통 터치 모델보다 &lt;strong&gt;삼투압 모형&lt;/strong&gt;으로 가야한다.&lt;/p&gt;
&lt;h3 id=&quot;삼투압-모형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%BC%ED%88%AC%EC%95%95-%EB%AA%A8%ED%98%95&quot; aria-label=&quot;삼투압 모형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;삼투압 모형&lt;/h3&gt;
&lt;p&gt;삼투압 모형은 기존에 발신, 수신인이 정해져 있는 화살 모형의 의사소통이 아니라 은연중에 서로 간에 정보가 스며드는 것이다. 이것이 되려면 우선 물리적으로 가까운 공간에 있어서 대화를 나누는 것이 주변에 잘 스며들어야 한다. 또한 한꺼번에 처리되는 일의 양을 줄여야한다. 따라서 지속적 흐름을 만들고 짧은 시간 내에 탑, 바텀을 오가게 해야한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;전문가팀이-실패하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EB%AC%B8%EA%B0%80%ED%8C%80%EC%9D%B4-%EC%8B%A4%ED%8C%A8%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;전문가팀이 실패하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 전문가팀이 실패하는 이유&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;전문가팀을 모아도 음의 성능을 낼 수 있다. 정보를 공유하고 협력을 잘하기 위한 도움이 필요하며 소셜 스킬이 뛰어나서 정보 공유를 잘하는 팀의 퍼포먼스가 훨씬 뛰어나다.&lt;/li&gt;
&lt;li&gt;구글이 어떠한 팀이 뛰어난지 조사해본 결과 다음 3가지 중요 포인트를 발견했다.
&lt;ol&gt;
&lt;li&gt;팀에 누가 있는지보다 팀원들이 서로 어떻게 상호작용하고 일을 어떻게 바라보는지가 훨씬 중요하다.&lt;/li&gt;
&lt;li&gt;성공적 팀의 특징을 찾았는데 압도적으로 높은 예측력을 보인 변수는 심리적 안전감이었다.&lt;/li&gt;
&lt;li&gt;팀 토론 등을 통해 심리적 안전감을 높일 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;심리적 안전감이란 내 생각이나 의견, 질문, 걱정, 혹은 실수가 드러났을 때 처벌 받거나 놀림받지 않을 거라는 믿음이다.&lt;/li&gt;
&lt;li&gt;심리적 안전감을 통해서 팀 토론 등으로 개선시킬 수 있다. 또한 새로운 것을 도입할 때 팀 리더와 관리자가 매일매일 팀원들과 마이크로 인터랙션을 하는 형태를 보여주어야 한다. 일상에서 조금씩 신뢰를 쌓는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;쾌속-학습팀&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BE%8C%EC%86%8D-%ED%95%99%EC%8A%B5%ED%8C%80&quot; aria-label=&quot;쾌속 학습팀 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 쾌속 학습팀&lt;/h2&gt;
&lt;p&gt;IT 업계에 있다보면 빠르게 기술적 변화를 해야하는 경우가 많다. 그런데 학습 속도는 이 사람이 기존에 얼마나 연차가 높고 수술 성공률이 높았는지와는 상관이 없다.&lt;/p&gt;
&lt;p&gt;빠른 학습을 하는 팀의 리더는 기술적 탁월함만을 지닌 리더가 아니라 학습 환경을 만들 수 있는 리더였다. 팀원을 선발할 때 협동적으로 하고, 선발 기준도 얼마나 협력을 잘하는지 등을 보고 뽑는다. 또한 새로운 것에 대해서 기술적 도전보다 조직적 도전으로 받아드려서 개개인이 새로운 기술을 익힌다는 것보다 함께 일하는 새로운 방법을 만든다고 생각하도록 했다.&lt;/p&gt;
&lt;p&gt;빠르게 학습하지 못하는 팀은 냉소적이었다. 또한 냉소주의는 전염성이 강하다. 학습 속도가 빠른 팀은 이 팀원이 된 것을 자랑스럽게 생각하고 자부심을 느낀다. 학습이 빠른 팀은 심리적으로 보호가 되어 있었다. 새로운 것을 제안하고 시도하는데 열려 있다.&lt;/p&gt;
&lt;p&gt;현실에서는 팀이 없거나 내가 팀장이 아닌 경우가 많다. 이럴 때는 나의 학습 환경을 만드는 것에서 출발해야 한다. 학습과 일을 분리하지 말고 하나로 만들어야 한다. 계획만 짜지 말고 지금 당상 시도해서 업무를 개선하는 것을 시도해 보아야한다. “작지만 유용한 프로그램들을 매일 작성할 것을 추천한다.”&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;프로젝트-확률론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%95%EB%A5%A0%EB%A1%A0&quot; aria-label=&quot;프로젝트 확률론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 프로젝트 확률론&lt;/h2&gt;
&lt;p&gt;여러 명이 자기의 작업을 가지고 진행을 할 때 특정 날짜까지 모두 완료할 수 있는(AND 조건) 확률은 매우 낮다. 애자일로 일을 진행하면 &lt;strong&gt;애자일은 좋은 일에 대해서는 ‘그리고’ 확률을 ‘또는’ 확률로, 나쁜 일에 대해서는 ‘또는’ 확률을 ‘그리고’ 확률로 바꾼다&lt;/strong&gt;. 좋은 것을 알았으면 그것을 공유하여 또는 확률로 바꾸고 나쁜일에 대해서는 여러 사람이 중복 검토를 해서 구멍이 나지 않도록 그리고 확률로 바꾸는 식으로 진행을 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;어떠한 조직이 성공적인 성과를 내는 데에 가장 중요한 것은 도구도, 각 사람의 역량도 아닌 ‘관리’이다. 여기서 관리라고 하는 것은 사람에게 일을 효과적으로 분배하고 동기를 고취시키는 것이다.&lt;/li&gt;
&lt;li&gt;‘객관성 자체가 주관적이다.’,  ‘감정을 배제하고는 결정을 내릴 수 없다.’ 등등의 문장들이 와 닿았다. 항상 동의했던 말이다. 결국 사람이 사람과 소통하는 것이고 무엇보다 중요한 것은 사람대 사람간의 신뢰이다!!&lt;/li&gt;
&lt;li&gt;고독한 영웅적인 천재는 조직에 이득이 되지 않을 수 있다.. 💡&lt;/li&gt;
&lt;li&gt;조직원들에게 신뢰적인 안정감을 주는 것, 그래서 더 좋은 의견을 마음껏 내세울 수 있는 것이 중요하다. (다음 팀 프로젝트에서는 이 부분을 더욱 신경써보고 싶다.)&lt;/li&gt;
&lt;li&gt;왜 협력하는 것이 더 좋은가? 에 대한 질문에 그냥 좋은게 좋은거지 라고 생각했다. 하지만 여기서 확실한 이유를 말해준다. 두 명 이상의 사람이 협력하려면 서로 다른 시각을 가진 것을 설명하기 위해서 &lt;strong&gt;추상성&lt;/strong&gt;을 더해 설명해야 한다. 이 과정에서 많은 해결책이 나올 수 있다 !!!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B4%80%EB%A6%AC%EC%9E%90%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot;&gt;🌩 소프트웨어 관리자의 우선순위&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%98%91%EB%A0%A5%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%B6%94%EC%83%81%ED%99%94&quot;&gt;🌩 협력을 통한 추상화&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%8B%A0%EB%A2%B0%EB%8A%94-%EA%B9%8E%EB%8A%94-%EA%B3%B5%EC%9C%A0%EC%9D%B8%EA%B0%80-%EC%8B%A0%EB%A2%B0%EB%A5%BC-%EC%8C%93%EB%8A%94-%EA%B3%B5%EC%9C%A0%EC%9D%B8%EA%B0%80&quot;&gt;🌩 신뢰는 깎는 공유인가 신뢰를 쌓는 공유인가&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%9D%EA%B4%80%EC%84%B1%EC%9D%98-%EC%A3%BC%EA%B4%80%EC%84%B1&quot;&gt;🌩 객관성의 주관성&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-%EC%BD%94%EC%B9%AD&quot;&gt;🌩 효과적인 코칭&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%95%98%ED%96%A5%EC%8B%9D-%EC%A0%91%EA%B7%BC%EC%9D%98-%ED%95%A8%EC%A0%95&quot;&gt;🌩 하향식 접근의 함정&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%82%BC%ED%88%AC%EC%95%95-%EB%AA%A8%ED%98%95&quot;&gt;삼투압 모형&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%84%EB%AC%B8%EA%B0%80%ED%8C%80%EC%9D%B4-%EC%8B%A4%ED%8C%A8%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;🌩 전문가팀이 실패하는 이유&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%BE%8C%EC%86%8D-%ED%95%99%EC%8A%B5%ED%8C%80&quot;&gt;🌩 쾌속 학습팀&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%95%EB%A5%A0%EB%A1%A0&quot;&gt;🌩 프로젝트 확률론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[리액티브 시리즈 - 2. Spring WebFlux]]></title><description><![CDATA[💡 Intro…]]></description><link>https://yjksw.github.io/reactive-programming-2/</link><guid isPermaLink="false">https://yjksw.github.io/reactive-programming-2/</guid><pubDate>Sat, 04 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;앞에서 리액티브 프로그래밍에 대해서 다뤘었다.&lt;/li&gt;
&lt;li&gt;한마디로 리액티브 프로그래밍에 대해서 정의하자면 &lt;strong&gt;비동기/논블로킹 이벤트 드리븐 개발과 배압을 통해 적은 수의 쓰레드로 생상자가 소비자를 압도하지 못하며 확장성있는 개발이 가능하게 하는 프로그래밍 기법&lt;/strong&gt;이라고 할 수 있다.&lt;/li&gt;
&lt;li&gt;리액티브 프로그래밍은 가용성(CPU utilization이라고 볼 수 있는 영역)과 응답성(오류가 생겨도 빠르게 응답 가능)을 향상시키므로 프로그램의 효율성과 성능을 높인다.&lt;/li&gt;
&lt;li&gt;함수형 프로그래밍도 관련 중요 키워드이다. 리액티브 프로그래밍은 함수형 프로그래밍(선언형, 함수 조합, 등등)을 활용한다.&lt;/li&gt;
&lt;li&gt;Spring WebFlux는 Spring Framework5에서 추가된 모듈이다. 스프링이 리액티브 스택 웹 어플리케이션을 구축할 수 있도록 리액티브 스트림 API를 지원해 &lt;strong&gt;논블로킹/비동기식&lt;/strong&gt;으로 동작할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt; 
&lt;h2 id=&quot;spring-webflux-란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-webflux-%EB%9E%80&quot; aria-label=&quot;spring webflux 란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Spring WebFlux 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;기존의 Spring Web MVC는 Servlet API, Servlet Container에서 동작하도록 되어 있으므로 전통적인 동기/블로킹 방식만 지원했다.&lt;/li&gt;
&lt;li&gt;리액티브 스택 프레임워크인 Spring WebFlux는 &lt;strong&gt;fully non-blocking backpressure&lt;/strong&gt;로 동작하는 &lt;strong&gt;리액티브 스트림&lt;/strong&gt;을 지원한다.&lt;/li&gt;
&lt;li&gt;스프링 프레임워크에서 spring-webmvc와 spring-webflux는 &lt;strong&gt;공존&lt;/strong&gt;할 수 있으며 각 모듈은 optional이다. 즉, 둘다 사용할 수도 있고 하나의 모듈만 사용할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt; 
&lt;h2 id=&quot;spring-webflux-탄생이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-webflux-%ED%83%84%EC%83%9D%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;spring webflux 탄생이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Spring WebFlux 탄생이유&lt;/h2&gt;
&lt;p&gt;한 문장으로 말하면 &lt;strong&gt;1) 적은 수의 스레드&lt;/strong&gt;로 &lt;strong&gt;2) 최대한의 동시성&lt;/strong&gt;을 핸들링하여 &lt;strong&gt;3)적은 하드웨어 리소스&lt;/strong&gt;를 사용하기 위한 &lt;strong&gt;4) 비동기 웹 스택&lt;/strong&gt;이 필요했기 때문이라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;기존의 Servlet API에도 논블로킹 I/O를 할 수 있지만 해당 API를 사용하면 기본적으로 동기적(&lt;code class=&quot;language-text&quot;&gt;Filter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Servlet&lt;/code&gt;)이며 블로킹(&lt;code class=&quot;language-text&quot;&gt;getParameter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;getPart&lt;/code&gt;)한 나머지 Servlet API를 사용하기 어려워진다. 따라서 완전히 논블로킹한 환경에서 동작할 수 있는 공통 API가 생겨나게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;또 다른 이유는 함수형 프로그래밍 때문이다.&lt;/strong&gt; 자바8에 람다 및 스트림 등의 문법이 추가되면서 자바로 함수형 API를 구현할 수 있는 환경이 갖추어지기 시작했다. 이는 비동기 로직을 지원하고 논블로킹 어플리케이션을 구현할 수 있는 통로가 되며 Spring에서도 그러한 특성을 지원하는 WebFlux를 탄생시키게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;웹에서-비동기논블로킹의-필요성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9%EC%97%90%EC%84%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1&quot; aria-label=&quot;웹에서 비동기논블로킹의 필요성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹에서 비동기/논블로킹의 필요성&lt;/h3&gt;
&lt;p&gt;스프링은 웹 프레임워크이니 근본적인 개념보다 웹에 국한한여 생각해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;웹에서 병목을 유발하는 것은 외부 장치에 대한 I/O 작업인 경우가 많다. 즉, 요청당 하나의 스레드가 할당되어야 하지만 해당 스레드가 블로킹 되어 있는 상태인 경우가 훨씬 많다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이때 수많은 요청이 들어오게 되어 thread pool에 있는 스레드 개수 이상의 요청이 들어오게 되면 스레드에 대한 대기로 인해 latency가 급격히 느려지는 Thread Pool Hell이 발생하게 된다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144712817-0bea67a0-5be8-4f10-b403-19e09721a383.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그렇다고 스레드를 추가로 생성하는 것은 오버헤드가 큰 작업이며 잦은 context switching으로 오히려 CPU utilization이 떨어져 비효율이 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 적은 수의 스레드로 동시성을 높이기 위해서는 스레드가 블로킹 되어 있지 않고 외부 I/O 작업이 일어날 때 필요한 다른 작업을 수행하도록 해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;점점 더 MSA가 대두되면서 다수의 마이크로서비스로 분리되어 서비스간 메시지 통신을 하는 경우가 잦아졌다. 이런 외부 통신이 많아진 만큼 이 모든 요청을 동기/블로킹 방식으로 처리하면 동시성이 떨어지게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 비동기/논블로킹 형식의 프로그래밍의 필요성이 더욱 강조되기 시작한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt; 
&lt;h2 id=&quot;spring-mvc-vs-spring-webflux&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-mvc-vs-spring-webflux&quot; aria-label=&quot;spring mvc vs spring webflux permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Spring MVC vs. Spring WebFlux&lt;/h2&gt;
&lt;h3 id=&quot;구체적으로-어떻게-더-좋은-걸까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EA%B1%B8%EA%B9%8C&quot; aria-label=&quot;구체적으로 어떻게 더 좋은 걸까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구체적으로 어떻게 더 좋은 걸까?&lt;/h3&gt;
&lt;p&gt;우선 동기/비동기, 블록/논블록에 대한 기본적인 이해가 있다는 것을 전제하에 설명한다. 비동기/논블록 방식이 적용되면 여러 외부 I/O 작업이나 API 호출이 필요할 때 각 경과시간의 합 만큼의 시간이 소요된다. 하지만 비동기/논블록 방식이 적용되는 리액티브라면 각 경과시간 중 최대시간 만큼의 시간이 소요된다.&lt;/p&gt;
&lt;p&gt;어떻게 이런 효과를 (적은 스레드를 가지고!!) 내는지 이해하기 위해서는 리액티브에 빠질 수 없는 키워드인 &lt;strong&gt;event-driven&lt;/strong&gt;을 잘 이해해야한다. 일반적으로 event-driven이라고 한다면 다음 그림을 떠올리면 된다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144712827-31460842-a91c-4d90-a53d-91eb797c6421.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;주 업무를 하는 주체는 Event loop, Events, Event Handlers이다. 사용자나 외부 요인에 의해 이벤트가 발생하면 이벤트 루프는 해당 이벤트를 받아서 관리하고 알맞은 핸들러에 넘기는 역할을 한다. 핸들러는 해당 이벤트를 처리한다.&lt;/p&gt;
&lt;p&gt;여기서 Event loop는 적은 스레드를 가지고 운용할 수 있다. 따라서 이전에는 각 이벤트에 대한 스레드가 각각 필요했다면 event-driven 형태에선 아무리 이벤트가 많이 발생하더라도 스레드 풀에 있는 적정량의 스레드(주로 CPU 코어 개수거나 두배)로 관리 및 처리할 수 있다.&lt;/p&gt;
&lt;p&gt;번외로 event-driven의 탄생이유에 대해서 말해보자면, 이전에는 예상 가능하게 순차적으로 프로그래밍 진행되곤 했다. 하지만 최근이 GUI가 발전하고 점점 더 사용자와의 인터랙션이 많아지면서 제어할 수 없는 유저 이벤트가 많아지면서 이런 방식이 생겨나고 많이 사용되게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;spring-webflux-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-webflux-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;spring webflux 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring WebFlux 구조&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144713050-4d280534-1b6c-43c6-8bd1-fa37d4f7fa31.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;전반적인 Spring WebFlux의 구조를 보면서 리액티브 프로그래밍이 어떻게 적용되었는지 살펴보자.&lt;/p&gt;
&lt;p&gt;사용자 요청이 들어오면 Event loop를 통해서 event가 되어 관리가 된다. 이때 하나의 요청에 하나의 스레드가 배정되는 것이 아니라 적은 스레드로 이벤트 루프에서 관리할 수 있다. 이후 이벤트는 비동기/논블록으로 연산을 처리한다. 연산이 끝나면 콜백 함수로 처리하고 응답한다.&lt;/p&gt;
&lt;p&gt;이렇게 Spring WebFlux는 더 효율적으로 I/O를 제어하여 좋은 성능을 낸다. 앞서 언급했던 점점 더 MSA 추세로 여러 서비스가 네트워크 호출을 해야하는 시기에는 더욱 효율적일 수 있다.&lt;/p&gt;
&lt;p&gt;주의해야할 점은 한 곳이라도 동기/블로킹이 되는 곳이 있다면 아무런 효용이 없다는 것이다. 결국 동기/블로킹 호출하는 API에서 병목이 일어나기 때문이다.&lt;/p&gt;
&lt;p&gt;현재 Spring WebFlux의 WebClient로 외부 API를 리액티브 방식으로 처리할 수 있지만 여전히 DB connection과 관련해서는 논블로킹 라이브러리가 많이 사용되고 있지 않다. (R2DBC, jasync sql 등등이 개발중이라고 한다.)&lt;/p&gt;
&lt;br&gt; 
&lt;h2 id=&quot;spring-webflux-무조건-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-webflux-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;spring webflux 무조건 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Spring WebFlux 무조건 좋을까?&lt;/h2&gt;
&lt;p&gt;당연한 이야기겠지만 Spring WebFlux가 무조건 좋지는 않다. (개발에 트레이드 오프는 항상 있으므로!) 그럼 언제 무엇을 쓰는 것이 좋을까? 정답은 없지만 스프링 공식문서에 Spring MVC와 WebFlux를 비교하고 설명한 포인트들을 짚어보자.&lt;/p&gt;
&lt;p&gt;아래 그림은 두개의 공통점과 차이점을 표현한 다이어그램이다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144713072-84bc054d-8073-4090-b2c9-3433ad45db2b.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;스프링 공식문서에서는 몇가지 상황에 어떠한 것을 제안하는지 적혀있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선 Spring MVC로 어플리케이션이 정상동작하면 굳이 바꿀필요는 없다. 명령형 프로그래밍은 개발하기도, 이해하기도, 디버깅하기도 더 좋다. 즉, 생산성이 더 좋다는 것이다. 리액티브 개념은 이제 막 발전중이기 때문에 기존의 명령형에 비해 라이브러리도 부족하다.&lt;/li&gt;
&lt;li&gt;만일 자바8의 람다나 코틀린을 사용하는 가벼운 함수형 웹 프레임워크에 관심이 있다면 WebFlux는 좋은 선택이다. WebFlux는 작은 어플리케이션이나 복잡하지 않은 요구사항을 구현한 마이크로서비스에 적합하다.&lt;/li&gt;
&lt;li&gt;MSA에서는 각 어플리케이션이 Spring MVC나 Spring WebFlux를 혼합해서 사용하고 있을 수 있다. 어노테이션 기반의 프로그래밍 모델은 위 두 프레임워크를 재사용하기도 편하게 해준다.&lt;/li&gt;
&lt;li&gt;어느 어플리케이션에 무엇을 쓸지 헷갈린다면 가장 간단한 방법은 의존성을 체크해보는 것이다. 만일 플로킹 persistence API의 일종인 JPA, JDBC 등을 사용하거나 블로킹 네트워크 API를 사용하고 있다면 Spring MVC가 더 적합하다. 물론 Reactor나 RxJava등을 통해 블로킹 작업을 별도의 스레드에서 처리하도록 하는 것이 가능하지만 여전히 논블로킹 웹 스택의 장점을 온전히 활용하지 못하는 경우다.&lt;/li&gt;
&lt;li&gt;만일 지금 Spring MVC 어플리케이션을 쓰고 있고 외부 API를 호출해야 한다면 리액티브 &lt;code class=&quot;language-text&quot;&gt;webClient&lt;/code&gt;를 활용해보는 것을 추천한다. 각 요청에 대한 latency가 향상되며 그 장점이 극대화된다.&lt;/li&gt;
&lt;li&gt;스프링 공식 문서에 이런 내용도 있어서 놀랐다. 공식문서에 따르면 만일 팀에서 적용하고자 한다면 논블로킹이나 선언형 프로그래밍으로 전환하기 위해서는 매우 가파른 러닝커브가 존재한다는 것을 염두해두라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선 가장 효율적으로 전환하는 방식은 현재 구조에서 reactive한 &lt;code class=&quot;language-text&quot;&gt;webClient&lt;/code&gt; 부터 적용해보는 것이다. 그리고 나서 점진적으로 적용을 시작하고 변화로부터 얻는 효용을 계산해보기를 추천한다. 공식문서에서 말하기를 “예상하건데 어플리케이션 전반적인 측면에서 논블로킹 선언형으로의 전환은 불필요할 것이다” 라고 언급한다. 따라서 만일 전환으로 인한 분명한 효용이 눈에 보이지 않거든 우선 논블로킹 I/O가 어떻게 동작하는지부터 공부하기를 추천한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144713083-097806d8-8c1a-4a39-a480-9704274c4bc4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;다음 &lt;a href=&quot;https://dzone.com/articles/raw-performance-numbers-spring-boot-2-webflux-vs-s&quot;&gt;링크&lt;/a&gt;에서는 Springboot와 webFlux의 성능을 측정해 보았다. 초반에 성능이 비슷한 구간이 분명히 있다. 만일 지금 환경이 그 구간이라면 전환은 불필요하다. 오히려 단점이 될 수 있는 것이 기존의 방식은 매우 직관적으고 코드를 작성하고, 디버깅하고, 이해하기 쉽기 때문에 생상성 측면에서 훨씬 뛰어나다.&lt;/p&gt;
&lt;br&gt; 
&lt;h2 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;먼저, 스프링 공식문서는 매우 친절하다!!&lt;/li&gt;
&lt;li&gt;리액티브에 대해서 나름 깊이(힘들게) 공부하고 난 뒤에 WebFlux에 대해서 다시보니 좀 이해가 되는 것 같다.&lt;/li&gt;
&lt;li&gt;그래서 여기서 러닝커브가 높으므로 이것이 생산성을 떨어뜨릴 수 있으므로 반드시 꼭 필요한 효용성이 눈에 보일 때 적용하라고 한 것이 무엇보다 많이 와닿았다.&lt;/li&gt;
&lt;li&gt;점점 더 요청이 많아지고 Thread pool의 스레드가 부족하니 나온 해결책이라는 배경을 알게되니 굉장히 흥미로웠다. 불편함을 찾고 문제를 해결하는 것이 멋있다고 느껴졌다.&lt;/li&gt;
&lt;li&gt;나는 기술로 불편을 해결한 적이 있나 하는 고민을 요즘 많이 하게 된다. 비생산적이고 비효율적인 환경이나 루틴을 문제의식 없이 받아드리기 보다 적극적으로 해결해보자는 생각이 든다.&lt;/li&gt;
&lt;li&gt;번외로 &lt;a href=&quot;https://www.reactivemanifesto.org/&quot;&gt;Reactive Manifesto&lt;/a&gt; 내용과 내장되어 있는 용어집도 정리해보고 싶다 🙌&lt;/li&gt;
&lt;li&gt;처음에 정말 이해가 안갔는데… 일단 계속 또 보고 또 보고 또 보면 결국 이해가 되는구나 …💦&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://heeyeah.github.io/spring/2020-02-29-web-flux/&quot;&gt;https://heeyeah.github.io/spring/2020-02-29-web-flux/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html&quot;&gt;https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-webflux&quot;&gt;https://www.baeldung.com/spring-webflux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://alwayspr.tistory.com/44&quot;&gt;https://alwayspr.tistory.com/44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://deepakpol.wordpress.com/2015/09/29/event-driven-and-reactive-architecture/&quot;&gt;https://deepakpol.wordpress.com/2015/09/29/event-driven-and-reactive-architecture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/raw-performance-numbers-spring-boot-2-webflux-vs-s&quot;&gt;https://dzone.com/articles/raw-performance-numbers-spring-boot-2-webflux-vs-s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juneyr.dev/reactive-programming&quot;&gt;https://juneyr.dev/reactive-programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#spring-webflux-%EB%9E%80&quot;&gt;🌩 Spring WebFlux 란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#spring-webflux-%ED%83%84%EC%83%9D%EC%9D%B4%EC%9C%A0&quot;&gt;🌩 Spring WebFlux 탄생이유&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9B%B9%EC%97%90%EC%84%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1&quot;&gt;웹에서 비동기/논블로킹의 필요성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#spring-mvc-vs-spring-webflux&quot;&gt;🌩 Spring MVC vs. Spring WebFlux&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EA%B1%B8%EA%B9%8C&quot;&gt;구체적으로 어떻게 더 좋은 걸까?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-webflux-%EA%B5%AC%EC%A1%B0&quot;&gt;Spring WebFlux 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#spring-webflux-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;🌩 Spring WebFlux 무조건 좋을까?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JCF 파헤치기 1 - 기본 & ArrayList]]></title><description><![CDATA[💡 Intro…]]></description><link>https://yjksw.github.io/java-collection-framework-1/</link><guid isPermaLink="false">https://yjksw.github.io/java-collection-framework-1/</guid><pubDate>Fri, 03 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;데이터의 그룹을 저장하는 클래스들을 표준화한 프로그래밍 방식&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;컬렉션 프레임워크는 다수의 데이터를 다루는 여러 클래스를 제공하여 개발자의 부담을 덜어준다.&lt;/li&gt;
&lt;li&gt;인터페이스와 다형성을 이용해서 객체지향적으로 설계가 되어 있기 때문에 추상적이고 재사용성이 높은 좋은 프레임워크이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;핵심-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B5%EC%8B%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;핵심 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 핵심 인터페이스&lt;/h2&gt;
&lt;p&gt;컬렉션에 담기는 데이터를 크게 3가지로 나누어 각각을 인터페이스로 정의해두었다. 그리고 3가지 중 List, Set의 공통점을 뽑아 따로 인터페이스로 추상화 되어 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144552104-6d0d4ba5-92c9-464a-8e14-3580a0972f6c.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;각 인터페이스와 특징은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List: 순서가 있으며 중복이 허용된 데이터의 집합
&lt;ul&gt;
&lt;li&gt;ArrayList, LinkedList, Stack, Vector, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set: 순서가 없으며 중복을 허용하지 않는 데이터의 집합
&lt;ul&gt;
&lt;li&gt;HashSet, TreeSet, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map: 키와 값의 쌍으로 이루어진 데이터의 집합이며 순서를 유지하지 않으며 키는 중복을 허용하지 않음
&lt;ul&gt;
&lt;li&gt;HashMap, TreeMap, Hashtable, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;모든 컬렉션 클래스는 위 3개의 인터페이스 중 하나를 구현하고 있으며 해당 인터페이스의 이름이 클래스명에 포함되어 있다. (예외로 Vector, Hashtable, Stack 같이 이전에 이미 존재하던 것들은 이름에 인터페이스명을 포함하고 있지 않기도 하다. 기존 호환을 위해 남겨져 있기는 하나 되도록 새로 정의된 컬렉션 클래스를 쓰는 것을 추천한다.)&lt;/p&gt;
&lt;h3 id=&quot;collection-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#collection-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;collection 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection 인터페이스&lt;/h3&gt;
&lt;p&gt;컬렉션 클래스에 저장된 데이터를 읽고, 추가하고 삭제하는 등 컬렉션을 다루는 기본적인 메서드들을 정의&lt;/p&gt;
&lt;p&gt;예시)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add, addAll, clear, contains, equals, isEmpty, remove, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;list-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;list 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List 인터페이스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상속계층도&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144552206-76fe42b0-368c-4c8c-a4b3-2907d8c1ac14.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;set-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#set-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;set 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set 인터페이스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상속계층도&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144552215-20cedfd3-3a44-4d56-ab5a-0f69b24fa62d.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;map-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#map-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;map 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Map 인터페이스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상속계층도&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144552224-6c84a3c4-28cf-4608-8d19-aad933cfa988.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;값을 반환하는 &lt;code class=&quot;language-text&quot;&gt;values()&lt;/code&gt; 의 반환 타입은 Collection이고, &lt;code class=&quot;language-text&quot;&gt;keySet()&lt;/code&gt;의 반환 타입은 Set이다. 전자는 중복을 허용하고 후자는 중복을 허용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mapentry-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mapentry-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;mapentry 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Map.Entry 인터페이스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Map 인터페이스 내부에는 Map.Entry 라는 인터페이스가 하나 더 있다.&lt;/li&gt;
&lt;li&gt;Map에 저장되는 &lt;strong&gt;key-value 쌍을 다루기 위해 내부적으로 정의한 인터페이스&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;객체지향적으로 설계하도록 유도한 인터페이스이며, Map 인터페이스를 구현하면 Map.Entry 인터페이스도 함께 구현해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		
		&lt;span class=&quot;token class-name&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token class-name&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token class-name&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;V&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;arraylist&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#arraylist&quot; aria-label=&quot;arraylist permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 ArrayList&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Object 배열을 이용하여 순차적으로 데이터를 저장한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbstractList&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RandomAccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Cloneable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Serializable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; elementData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;왜-code-classlanguage-textelementdatacode-는-code-classlanguage-texttrasientcode-설정이-되어-있을까-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-code-classlanguage-textelementdatacode-%EB%8A%94-code-classlanguage-texttrasientcode-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%90%98%EC%96%B4-%EC%9E%88%EC%9D%84%EA%B9%8C-&quot; aria-label=&quot;왜 code classlanguage textelementdatacode 는 code classlanguage texttrasientcode 설정이 되어 있을까  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 &lt;code class=&quot;language-text&quot;&gt;elementData&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;trasient&lt;/code&gt; 설정이 되어 있을까? 🤔&lt;/h3&gt;
&lt;p&gt;우선 &lt;code class=&quot;language-text&quot;&gt;transient&lt;/code&gt;는 해당 클래스를 직렬화 할 때 직렬화 대상이 되지 않도록 하는 키워드이다. 그럼 핵심 데이터를 담는 &lt;code class=&quot;language-text&quot;&gt;elementData&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;transient&lt;/code&gt; 설정이 되어 있다면 직렬화 대상에서 제외가 될 텐데 왜 이런 설정이 되어 있을까?&lt;/p&gt;
&lt;p&gt;우선 짚고 넘어가고 싶은 것은 직렬화는 좋은 기술이지만 고려해야할 부분들이 매우 많은 까다로운 기술이라는 것이다. 자세한 것은 다음 &lt;a href=&quot;https://www.youtube.com/watch?v=3iypR-1Glm0&quot;&gt;링크&lt;/a&gt;를 참고해보자.&lt;/p&gt;
&lt;p&gt;따라서 ArrayList 클래스를 보면 &lt;code class=&quot;language-text&quot;&gt;serialize&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;deserialize&lt;/code&gt; 하는 메소드인 &lt;code class=&quot;language-text&quot;&gt;writeObject()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;readObject()&lt;/code&gt;를 직접 구현하고 있다.&lt;/p&gt;
&lt;h3 id=&quot;배열의-초기-크기는-어떻게-산정이-될까-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B4%88%EA%B8%B0-%ED%81%AC%EA%B8%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%B0%EC%A0%95%EC%9D%B4-%EB%90%A0%EA%B9%8C-&quot; aria-label=&quot;배열의 초기 크기는 어떻게 산정이 될까  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열의 초기 크기는 어떻게 산정이 될까? 🤔&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;초기 크기를 지정한 경우의 내부 구현을 살펴보자.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; initialCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialCapacity &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elementData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;initialCapacity&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialCapacity &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elementData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EMPTY_ELEMENTDATA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Illegal Capacity: &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; initialCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;초기 값이 0 이라면 &lt;code class=&quot;language-text&quot;&gt;EMTPY_ELEMENTDATA&lt;/code&gt; 라는 것을 지정하고 아니라면 입력 값 크기 만큼의 배열을 선언한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;초기 크기를 지정하지 않은 경우의 내부 구현을 살펴보자.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; DEFAULTCAPACITY_EMPTY_ELEMENTDATA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elementData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;빈 Object 배열을 선언하여 할당한다.&lt;/li&gt;
&lt;li&gt;하지만 주로 ArrayList를 활용할 때 초기 크기 뿐 아니라 이후에도 크기를 정해주지 않았으며 그냥 element를 추가만 하는 경우가 많았다.&lt;/li&gt;
&lt;li&gt;그러면 언제 배열의 크기를 재할당 하는 것일까? 다음 코드를 살펴보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; elementData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; elementData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        elementData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    elementData&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// element를 add 하는 로직&lt;/span&gt;
    modCount&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; elementData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; minCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; elementData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elementData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCapacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//추가 공간이 필요한 경우 capacity를 늘리는 로직 &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList는 내부적으로 size라는 인스턴스 변수를 두고 몇개의 요소들이 있는지 트랙킹한다. 새로운 요소를 추가할 때 이 추가 공간이 있는지 확인하고 없다면 &lt;code class=&quot;language-text&quot;&gt;grow()&lt;/code&gt; 메소드를 호출한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;grow()&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;Arrays.copyOf()&lt;/code&gt;를 사용하여 새로운 크기 만큼의 배열을 생성하고 기존 데이터를 옮긴다.&lt;/li&gt;
&lt;li&gt;시스템 적으로 오버헤드가 많고 처리시간이 많이 소요되는 작업이므로 ArrayList를 사용할때는 저장할 개수보다 조금 더 여유있기 기본 사이즈를 할당하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;내용 추가 예정 ‼️ 안 끝남 주의 ‼️&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바의 정석&lt;/li&gt;
&lt;li&gt;Java 내부구현 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%95%B5%EC%8B%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;🌩 핵심 인터페이스&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#collection-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;Collection 인터페이스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;List 인터페이스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#set-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;Set 인터페이스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#map-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;Map 인터페이스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mapentry-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;Map.Entry 인터페이스&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#arraylist&quot;&gt;🌩 ArrayList&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-elementdata-%EB%8A%94-trasient-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%90%98%EC%96%B4-%EC%9E%88%EC%9D%84%EA%B9%8C-&quot;&gt;왜 &lt;code class=&quot;language-text&quot;&gt;elementData&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;trasient&lt;/code&gt; 설정이 되어 있을까? 🤔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B4%88%EA%B8%B0-%ED%81%AC%EA%B8%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%B0%EC%A0%95%EC%9D%B4-%EB%90%A0%EA%B9%8C-&quot;&gt;배열의 초기 크기는 어떻게 산정이 될까? 🤔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[함께 자라기 🌱 읽자 - Part 1. 자라기]]></title><description><![CDATA[💡 Intro 개발바닥의 김영한님 편을 보다가 꼭 추천하실 책이 김창준님의 함께 자라기라고 하셔서 바로 주문했다. 이 책을 읽으면서 얻고 싶은 것은…]]></description><link>https://yjksw.github.io/growing-together-1/</link><guid isPermaLink="false">https://yjksw.github.io/growing-together-1/</guid><pubDate>Fri, 03 Dec 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개발바닥의 김영한님 편을 보다가 꼭 추천하실 책이 김창준님의 &lt;em&gt;함께 자라기&lt;/em&gt;라고 하셔서 바로 주문했다.&lt;/li&gt;
&lt;li&gt;이 책을 읽으면서 얻고 싶은 것은 3가지였다.
&lt;ul&gt;
&lt;li&gt;내가 지금 성장하고 있는 방법이 잘 하고 있는 방법인가&lt;/li&gt;
&lt;li&gt;요즘 그렇게도 강조하는 ‘함께’라는 것이 개발자에게는 어떤 의미인가&lt;/li&gt;
&lt;li&gt;최근 진행한 7명 팀 프로젝트를 더 잘 할 수 있는 부분은 무엇이 있었을까&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 글은 첫번째 파트인 &lt;strong&gt;자라기&lt;/strong&gt; 파트이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;자라기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%9D%BC%EA%B8%B0&quot; aria-label=&quot;자라기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌱 자라기&lt;/h2&gt;
&lt;p&gt;시간에 비례하여 실력이 상승하지 않는다. 중요한 것은 얼마나 오랜 기간 학습했느냐보다 얼마나 많은 &lt;strong&gt;의도적 수련&lt;/strong&gt;을 했는지다. &lt;strong&gt;업무를 하면서 의도적 수련을 할 수 있는 방법은 애자일 철학을 활용하는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;애자일에서 학습은 소프트웨어 개발에 큰 병목 중 하나이다. 그 이유는 일반 프로젝트에서 피드백의 주기가 느려서 결정을 내리고 학습을 한 후 다시 피드백을 받응ㄹ 시기에 이전에 내린 결정에 대한 이유를 기억하기 어렵다.&lt;/p&gt;
&lt;p&gt;하지만 애자일 프로젝트에서는 당장 한 행동에 대한 피드백을 10분, 한시간, 하루 주기로 빠르고 지속적으로 받아 다음 주기에 교정할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) 피드백을 짧은 주기로 얻는 것 2) 실수를 교정할 기회가 있는 것&lt;/strong&gt;이 학습에 중요한 요소이다.&lt;/p&gt;
&lt;p&gt;실력이 좋은 사람은 당시에 어떤 결정을 어떠한 이유로 내렸는지 자세히 기록하고 나중에 다시 확인하여 피드백을 반드시 얻는다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;자기계발은-복리로-돌아온다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C%EC%9D%80-%EB%B3%B5%EB%A6%AC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4&quot; aria-label=&quot;자기계발은 복리로 돌아온다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자기계발은 복리로 돌아온다&lt;/h3&gt;
&lt;p&gt;꾸준히 자기계발에 시간을 쏟으면 그것이 1년, 2년 뒤에 성장해서 돌아온다. 지식이나 능력은 복리로 이자가 붙는다.&lt;/p&gt;
&lt;p&gt;이러한 복리의 원칙은 개인 뿐 아니라 조직에도 연관이 있다. 복리 조직은 첫 주기 만든 결과물로 다음 주기에 더 좋은 위치에서 다음 결과물을 만들어낸다. 결과물이 다음 단계의 도구가 된다.&lt;/p&gt;
&lt;p&gt;A, B, C 작업으로 진행해라. A는 첫 작업, B는 개선하는 작업, C는 개선 작업을 개선하는 것이다.&lt;/p&gt;
&lt;p&gt;그러기 위해서는 개인이나 조직에서 더하기보다 곱하기를 해야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;자신이 이미 가지고 있는 것들을 잘 활용하라
&lt;ul&gt;
&lt;li&gt;새로운 것을 유입하기보다 이미 가지고 있는 것을 연결하여 시너지 효과가 나게 한다.&lt;/li&gt;
&lt;li&gt;새로운 것은 이미 가지고 있는 것과 연결하도록 해라&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;외부 물질을 체화하라
&lt;ul&gt;
&lt;li&gt;하지만 내부 순환만 하면 수렴할 위험이 있기 때문에 외부 자극을 받으면 좋다.&lt;/li&gt;
&lt;li&gt;하지만 외부 자극을 빨리 자기화 해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자신을 개선하는 프로세스에 대해 생각해 보라
&lt;ul&gt;
&lt;li&gt;A를 돌아보는 회고/반성 활동을 주기적으로 해라.&lt;/li&gt;
&lt;li&gt;나를 개선하는 과정을 어떻게 개선할지 고민해라.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;피드백을 자주 받아라
&lt;ul&gt;
&lt;li&gt;사이클 주기를 짧게 두어서 작은 실험을 해 순환율을 높여라.&lt;/li&gt;
&lt;li&gt;일찍, 자주 실패해라. 실패에서 학습하라&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자신의 능력을 높여주는 도구와 환경을 점진적으로 만들어라.
&lt;ul&gt;
&lt;li&gt;완벽한 환경에서 시작하기 보다 점진적으로 자신의 환경을 개선시켜라.&lt;/li&gt;
&lt;li&gt;완벽한 환경은 어느날 갖추어지기는 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;학습-프레임-vs-실행-프레임&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%99%EC%8A%B5-%ED%94%84%EB%A0%88%EC%9E%84-vs-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A0%88%EC%9E%84&quot; aria-label=&quot;학습 프레임 vs 실행 프레임 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;학습 프레임 vs. 실행 프레임&lt;/h3&gt;
&lt;p&gt;학습 프레임은 학습을 하고 성장하기 위한 것에 초점이 맞추어져 있고, 실행 프레임은 잘하고자 하는 것에 초점이 맞추어져 있다. 실행 프레임은 목표를 달성하고 나면 더이상 이야기하지 않고, 학습 프레임은 지속적으로 관심을 가지고 하는 경향이 있다.&lt;/p&gt;
&lt;p&gt;업무를 하거난 학습하기 어려운 조건이라고 하더라도 학습과 성장의 기회를 찾고 그 조건에서 자신에게 유리한 조건을 찾는 사람이 있다.&lt;/p&gt;
&lt;p&gt;“업무적으로 꼭 해야하는 건 아니지만 당신이 도와주는 사람은 누구이고, 또 당신이 도움을 요청하는 사람은 누구입니까?”라고 했을 때 업무 성과가 좋은 사람들이 더 좋은 대답을 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;똑같은 1년차도, 1년차 밖에 되지 않아서 혼자 코드와 책을 보며 공부하는 사람이 있고, 1년차 밖에 되지 않아서 많은 사람들에게 물어보고 많은 스터디를 하고 부딪히며 도움을 주려고 하는 사람이 있다. 후자가 더 많은 잠재력이 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;달인이-되는-비결&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%AC%EC%9D%B8%EC%9D%B4-%EB%90%98%EB%8A%94-%EB%B9%84%EA%B2%B0&quot; aria-label=&quot;달인이 되는 비결 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;달인이 되는 비결&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;명확한 동기&lt;/li&gt;
&lt;li&gt;피드백 제때 받기&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;전문성을-높이는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EB%AC%B8%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;전문성을 높이는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전문성을 높이는 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;타당성(어떠한 일을 하는데 규칙이나 인과관계)과 피드백이 있어야 한다.&lt;/li&gt;
&lt;li&gt;일하는 방식과 개발하는 방식을 바꿔서 타당성과 피드백을 높여야 한다.
&lt;ul&gt;
&lt;li&gt;타당성을 높이기 위해 변수를 제한하고 실험을 하면서 규칙성과 인과관계를 찾으려고 노력해야한다.&lt;/li&gt;
&lt;li&gt;상사, 고객 등에게 적극적으로 피드백을 요청한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;당신이-제자리걸음인-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%9D%B8-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;당신이 제자리걸음인 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;당신이 제자리걸음인 이유&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실력을 높이기 위해서는 &lt;strong&gt;의도적 수련&lt;/strong&gt;이 중요하다.
&lt;ul&gt;
&lt;li&gt;의도적 수련이 되려면 현재 나의 실력과 작업의 난이도가 비슷해야한다.&lt;/li&gt;
&lt;li&gt;난이도와 실력이 엇비슷해야 &lt;strong&gt;몰입&lt;/strong&gt;을 경험할 수 있다.&lt;/li&gt;
&lt;li&gt;i + 1 처럼 딱 한단계 높은 수준으로 학습해야 유의미하게 진전한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실력이 늘지 않는 이유는 너무 난이도가 낮아 지루한 환경에 있거나 너무 어려워 의욕을 잃는 환경에 있기 때문이다. 뛰어난 사람들은 자신의 실력보다 조금 더 어려운 것에 끝임없이 도전한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;제자리걸음에서-벗어나기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0&quot; aria-label=&quot;제자리걸음에서 벗어나기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제자리걸음에서 벗어나기&lt;/h3&gt;
&lt;p&gt;현재 난이도가 낮아서 지루함을 느끼는 경우&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실력 낮추기: 평소에 쓰는 보조도구 없애거나 실력을 발휘하기 어려운 환경 만들어서 도전하기&lt;/li&gt;
&lt;li&gt;난이도 높이기: 남들보다 일을 더 효율적으로 하기 위해 직접 나만의 도구 만들어서 활용하기 등등&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;현재 난이도가 높아서 불안함을 느끼는 경우&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실력 높이기:
&lt;ol&gt;
&lt;li&gt;사회적 접근: 나보다 뛰어난 전문가의 도움을 받기 (인터넷, 책, 상사 등등)&lt;/li&gt;
&lt;li&gt;도구적 접근: 좋은 도구의 도움 받기. 디버거, 코드 분석툴, 라이브러리 등등&lt;/li&gt;
&lt;li&gt;내관적 접근: 비슷한 일을 했던 경험을 되살려 비유적으로 문제를 해결&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;난이도 낮추기:
&lt;ol&gt;
&lt;li&gt;먼저 자신이 맡은 일의 가장 간단한 아기 버전을 첫번째 목표로 삼기. 낮은 난이도에 먼저 도전한 그룹이 더 정확도가 높다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;동적인-균형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%9D%B8-%EA%B7%A0%ED%98%95&quot; aria-label=&quot;동적인 균형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적인 균형&lt;/h3&gt;
&lt;p&gt;메타인지 전략: 난이도와 실력은 계속 바뀐다. 중요한 것은 자신의 상태(지루한지 불안한지)를 지속적으로 체크하고 알아차리는 것이 꼭 필요하다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;프로그래밍-언어-배우기의-달인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%9D%98-%EB%8B%AC%EC%9D%B8&quot; aria-label=&quot;프로그래밍 언어 배우기의 달인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그래밍 언어 배우기의 달인&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;인지적 작업 분석을 한다.&lt;/strong&gt; 프로그래밍 언어를 배울 때 어떻게 효과적으로 배울 수 있을까?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;튜토리얼을 읽을 때 뭘 만들지 생각하고 읽는다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;적극적 읽기를 한다 - 작성할 프로그램을 염두에 두고 읽다가 프로그램을 만들 수 있으면 멈추고 만든 후에 다음에 만들 것을 생각하고 돌아온다. 무언가를 읽을 때 구체적인 질문이나 목적을 가지고 있는 방법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공부할 때 표준 라이브러리 소스코드를 읽는다.
&lt;ul&gt;
&lt;li&gt;실제 해당 언어의 스타일을 따르는 사용례이므로 해당 언어의 표준 라이브러리 코드를 읽는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공부 중 다른 사람의 코드에 내가 필요한 기능을 추가한다.
&lt;ul&gt;
&lt;li&gt;자신이 필요한 기능을 직접 추가하여 사용해보는 것이다.&lt;/li&gt;
&lt;li&gt;이때 중요한 것은 초기 단계에 내가 추가할 수 있는 작고 간단한 추가 기능을 생각해내는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇듯 이미 잘하고 있는 사람에게서 많은 것을 배울 수 있다. 하지만 전문가에게 단순히 잘하는 방법에 대해서 물어보면 유의미한 대답을 얻기는 힘들다. &lt;strong&gt;구체적인 사건에 대해서 말하도록 유도&lt;/strong&gt;하고 그 안에서 잘하는 방법을 파악할 수 있도록 이끌어내는 것도 중요하다. (예를들어 제일 최근에 배운 언어는 무엇이고 어떻게 학습했는지 물어보는 것.)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;실수는-예방하는-것이-아니라-관리하는-것이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%88%98%EB%8A%94-%EC%98%88%EB%B0%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;실수는 예방하는 것이 아니라 관리하는 것이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실수는 예방하는 것이 아니라 관리하는 것이다&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;실수 예방&lt;/strong&gt;은 실수가 생기지 않도록 계속 주의하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;실수 관리&lt;/strong&gt;는 실수를 했을 때 그것이 나쁜 결과가 되기 전에 얼른 발견하여 고치고 그것에 대해서 학습하는 것이다.&lt;/p&gt;
&lt;p&gt;실수 예방 문화에서는 실수가 일어나면 당사자를 비난하고 처벌하여 협력하거나 실수에 대해서 논의하기를 꺼리게 된다. 실수 관리는 나쁜 결과 이전에 회복하도록 돕고, 실수를 공개하고, 그것에 대해서 이야기하며 고치도록 하는 분위기가 형성된다.&lt;/p&gt;
&lt;p&gt;다양한 실수를 경험하고 그 사례를 배워서 어떻게 대처해야하는지 배우는 것이 더 중요하다. 예방법보다 대처법을 배우자.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;나홀로-전문가에-대한-미신&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AF%B8%EC%8B%A0&quot; aria-label=&quot;나홀로 전문가에 대한 미신 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;나홀로 전문가에 대한 미신&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;좋은 기술에 대한 전문가가 가서 그것을 적용하면 성공적으로 변화가 이루어질 것이라고 생각하는 것은 미신이다.&lt;/li&gt;
&lt;li&gt;성공적으로 좋은 기술이 한 사람에 의해서 어떤 팀에 전파가 되기 위해서는 &lt;strong&gt;사회적 자본과 기술&lt;/strong&gt;이 필요하다.
&lt;ul&gt;
&lt;li&gt;팀원들을 설득하고 주변에 물어봐서 도움을 받을 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;주변에서 그것이 왜 필요하고 좋은지 인지하지 못한다면 아무리 좋은 것이라도 적용하게 되기 힘들다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사람 사이에는 신뢰가 있어야 하며 그것으로 인해 변화를 일으킬 수 있다. 그 신뢰가 사회적 자본이다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;사회적 기술이 뛰어나서 사람 사이에 신뢰를 잘 구축하며 커뮤니케이션한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;따라서 전문가는 기술에 더해서 사회적 자본과 사회적 기술이 뛰어난 사람이다 ‼️&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓴다.&lt;/li&gt;
&lt;li&gt;전문가는 고독한 천재가 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;어떤 기술적 지식을 전달할 때 사회적 맥락 속에서 가르치고 경험하게 하도록 노력해야한다.
&lt;ul&gt;
&lt;li&gt;도움받기, 피드백 주고받기, 영향력 미치기, 가르치고 배우기, 위임하기 등등.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그 조직에 신뢰를 받아야지 필요한 기술을 전파하고 적용할 수 있다. 프로그래밍 능력 중 커뮤니케이션은 필수 부분이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;잦은 피드백과 실수를 교정하는 것!!&lt;/strong&gt; 자라기 파트를 관통하는 두 키워드이다 &lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;스스로에 대한 회고, 다른사람이 주는 피드백, 실수를 했을 때 자책보다 문제에 집중하여 실수를 관리하는 것이 매우 중요하다.&lt;/li&gt;
&lt;li&gt;나는 내 스스로를 좀 몰아세우면서 학습하는 스타일인데, 개발은 그렇게 학습했을 때 프로그래밍에 대한 흥미만 떨어지고 추진력을 얻지 못했다. 이 책에서 말한 것처럼 적절한 난이도에 메타인지와 점진적인 개선을 통해서 멘탈도 관리하며 성장하는 것이 중요한 것 같다는 것이 절실히 느껴졌다.&lt;/li&gt;
&lt;li&gt;마지막에 책에서 “뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓴다”, “이제는 프로그래밍을 잘한다는 정의 안에 의사소통 능력을 그 일부로 보게 된 겁니다” 라는 문장이 굉장히 임팩트 있었다.
&lt;ul&gt;
&lt;li&gt;기술에는 사회적 자본(신뢰)이 뒷받침 되어야 한다. 그렇지 않으면 해당 기술이 얼마나 좋은지는 소용이 없어질 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9E%90%EB%9D%BC%EA%B8%B0&quot;&gt;🌱 자라기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C%EC%9D%80-%EB%B3%B5%EB%A6%AC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4&quot;&gt;자기계발은 복리로 돌아온다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%99%EC%8A%B5-%ED%94%84%EB%A0%88%EC%9E%84-vs-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A0%88%EC%9E%84&quot;&gt;학습 프레임 vs. 실행 프레임&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%AC%EC%9D%B8%EC%9D%B4-%EB%90%98%EB%8A%94-%EB%B9%84%EA%B2%B0&quot;&gt;달인이 되는 비결&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%84%EB%AC%B8%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;전문성을 높이는 방법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%9D%B8-%EC%9D%B4%EC%9C%A0&quot;&gt;당신이 제자리걸음인 이유&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0&quot;&gt;제자리걸음에서 벗어나기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%9D%B8-%EA%B7%A0%ED%98%95&quot;&gt;동적인 균형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%9D%98-%EB%8B%AC%EC%9D%B8&quot;&gt;프로그래밍 언어 배우기의 달인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%A4%EC%88%98%EB%8A%94-%EC%98%88%EB%B0%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4&quot;&gt;실수는 예방하는 것이 아니라 관리하는 것이다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AF%B8%EC%8B%A0&quot;&gt;나홀로 전문가에 대한 미신&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[리액티브 시리즈 - 1. 리액티브 프로그래밍 기본]]></title><description><![CDATA[💡 Intro 트래픽이 증가하고 사용자가 기대하는 요청시간은 더 빠른 응답을 원하게 되면서 리액티브 프로그래밍이라는 개념이 대두가 되기 시작했다. Java…]]></description><link>https://yjksw.github.io/reactive-programming-1/</link><guid isPermaLink="false">https://yjksw.github.io/reactive-programming-1/</guid><pubDate>Tue, 30 Nov 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;트래픽이 증가하고 사용자가 기대하는 요청시간은 더 빠른 응답을 원하게 되면서 리액티브 프로그래밍이라는 개념이 대두가 되기 시작했다.&lt;/li&gt;
&lt;li&gt;Java 진영에서는 물론이고 현재 공부하고 있는 스프링 어플리케이션에서도 리액티브 개념을 구현한 모듈이 추가되고 활용되고 있다.&lt;/li&gt;
&lt;li&gt;리액티브 프로그래밍을 키워드 중심으로 알아본다. (선언형, 리액티브 스트림, pub-sub 구조, 비동기, 옵저버 패턴 등등)&lt;/li&gt;
&lt;li&gt;리액티브 프로그래밍이 주요 개념이 된 이유에 대해서 고민해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;리액티브-프로그래밍이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;리액티브 프로그래밍이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 리액티브 프로그래밍이란?&lt;/h2&gt;
&lt;h3 id=&quot;reativex&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reativex&quot; aria-label=&quot;reativex permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ReativeX&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://reactivex.io/&quot;&gt;ReativeX&lt;/a&gt;는 옵저버 스트림을 활용한 비동기 프로그래밍을 위한 API이다. 그리고 이것을 구현한 여러 구현체들이 있다.&lt;/p&gt;
&lt;p&gt;나 같은 경우는 자바 언어를 주로 사용하는데 자바 진영에서도 리액티브 API를 구현한 RxJava가 있고, 자바9 부터 리액티브 프로그래밍을 구현할 수 있는 Flow 클래스를 제공한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;reactive---무엇에-반응한다는-것인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reactive---%EB%AC%B4%EC%97%87%EC%97%90-%EB%B0%98%EC%9D%91%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;reactive   무엇에 반응한다는 것인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reactive - 무엇에 반응한다는 것인가?&lt;/h3&gt;
&lt;p&gt;Reactive는 반응하다 라는 뜻이다. 리액티브 프로그래밍은 Publisher가 발행한 데이터(요청)에 대해서 반응을 하기 때문에 리액티브 프로그래밍이라고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터가 즉각 반응을 한다는 것은 무슨 뜻일까 ?&lt;/p&gt;
&lt;p&gt;기존 명령형 프로그램과 비교해보자. 기존 명령형 프로그래밍은 어떠한 기능을 어떻게 할 것인지에 대한 코드가 있고 이것을 하드웨어가 차례로 실행한다.&lt;/p&gt;
&lt;p&gt;리액티브 프로그래밍은 “데이터의 흐름”을 정의하고 데이터 스트림을 그 흐름에서 선언한대로 데이터를 처리하고 구독한 subscriber가 처리된 데이터에 대한 마지막 행위를 한다. (예, 콘솔에 출력한다 등등)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;조금 이해하기 어렵다면 다음 그림을 보자.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144062234-b2c15364-5290-4f49-b7c0-fe7af972d5da.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 그림에서 Publisher는 Click Stream이다.&lt;/p&gt;
&lt;p&gt;Click Stream에서 발생된 데이터의 흐름에 반응하여 마지막 subscriber가 filter된 데이터를 처리한다.&lt;/p&gt;
&lt;p&gt;(위 그림에서 Subscriber까지 표시되지는 않았다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 스트림은  map → filter 파이프라인을 거치며 정제되며 마지막 데이터 스트림을 구독자가 처리하는 것이 반응형 프로그래밍이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터의 흐름에 따라서 데이터가 변한다면 즉각적으로 반응하여 다른 결과를 출력하게 되기 때문에 반응형 프로그래밍이라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;어떻게-반응할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%98%EC%9D%91%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;어떻게 반응할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어떻게 반응할까?&lt;/h3&gt;
&lt;p&gt;반응형 프로그래밍에서 등장하는 키워드를 살펴보자. 가장 대표적인 반응형 비동기 프로그래밍 API인 ReactiveX 홈페이지를 참고했다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144062576-d4d01ae9-71d6-4feb-bb53-8f675a1938e6.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;옵저버 패턴&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;첫번째 키워드는 옵저버 패턴이다.&lt;/p&gt;
&lt;p&gt;옵저버 패턴이란 특정 객체의 상태를 관찰하는 관찰자(observer)들을 등록하고 해당 객체에 상태변화가 있을 때마다 메서드를 통해서 객체가 자신에게 등록된 관찰자들에게 통지하는 디자인 패턴이다.&lt;/p&gt;
&lt;p&gt;(Pub/sub 모델로도 알려져있지만 완전히 동일한 것은 아니다. 차이점은 다음 [링크](&lt;a href=&quot;https://jistol.github.io/software&quot;&gt;https://jistol.github.io/software&lt;/a&gt; engineering/2018/04/11/observer-pubsub-pattern/)를 참고해보자.&lt;/p&gt;
&lt;p&gt;내가 자주 사용하는 언어인 자바에서도 멀티 스레드 환경에서 안정적으로 옵저버 패턴을 활용할 수 있는 인터페이스와 클래스를 제공한다.&lt;/p&gt;
&lt;p&gt;관찰 당하는 객체는 Observable이라는 클래스를 상속하여 사용할 수 있고, 관찰하는 객체들은 Observer 인터페이스를 구현할 수 있다. synchronized 키워드를 통해서 필요시 동시성을 제어한다. (백터를 조작하는 과정 등등)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Iterator 패턴&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;두번째 키워드는 이터레이터 패턴이다.&lt;/p&gt;
&lt;p&gt;이터레이터 패턴이란 컬렉션의 생김새나 구현방법을 노출시키지 않으면서 컬렉션 내부에 접근할 수 있는 패턴이다. &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt; 와 같은 것을 호출하는 것만으로 컬렉션의 다음 element에 접근할 수 있다. 즉, 일종의 pull 방식이다.&lt;/p&gt;
&lt;p&gt;리액티브 프로그래밍에 대해서 설명할 때 이터레이터 패턴이 등장하는 이유는 BackPressure 때문이다. Publisher가 Subscriber가 감당하기 어려운 만큼의 양을 push 할 수 있으니, Subscriber가 오버플로우 되지 않도록 하는 것이 backpressure이다.&lt;/p&gt;
&lt;p&gt;여기서 이터레이터 패턴을 사용하여 감당 가능한 만큼의 데이터를 요청(pull)하여 처리한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/144062711-c1892c27-6b65-43a3-ba9d-59ae7526c50c.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;함수형 프로그래밍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;세번째 키워드는 함수형 프로그래밍이다.&lt;/p&gt;
&lt;p&gt;함수형 프로그래밍의 핵심은 선언형 프로그래밍이라는 것이다. 즉, 어떻게 할 것인지에 대한 구구절절한 구현이 있으면 발생 가능한 사이드 이펙트가 많으니 선언형으로 무엇을 할지를 선언하고 해당 함수를 조합하여 구현하는 것이다.&lt;/p&gt;
&lt;p&gt;마틴 파울러는 함수형 프로그래밍을 “Functional Programming is programming without assignment statements”라고 말했다. 변수를 선언하고 대입하여 구현하는 기존 프로그래밍과 다르게 함수형 프로그래밍은 작은 문제를 해결하기 위한 여러 함수들을 조합하여 결과를 낸다.&lt;/p&gt;
&lt;p&gt;리액티브 스트림에서는 함수형 프로그래밍을 활용하여 데이터를 가공한다. 상단의 사진에 COMBINE 부분을 보면 어떤 느낌으로 사용하는지 알 수 있을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;왜-이렇게-뜨는-개념일까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%9C%A8%EB%8A%94-%EA%B0%9C%EB%85%90%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;왜 이렇게 뜨는 개념일까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 왜 이렇게 뜨는 개념일까?&lt;/h2&gt;
&lt;p&gt;인터넷과 모바일이 보급되면서 사용자 관련 데이터와 트래픽은 점점 더 늘어나고 있다. 그렇기 때문에 기존에 전통적인 블록킹 동기 방식의 요청 처리는 사용자가 원하는 만큼이 속도를 내지도 못하고 처리량이 현저히 낮은 문제가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;기존의 요청 처리 방식&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1개의 요청 당 1개의 스레드를 할당하여 처리한다.&lt;/p&gt;
&lt;p&gt;하지만 요청마다 스레드를 생성하는 것은 비용이 큰 작업이기 때문에 대부분 Thread pool을 사용하여 요청을 처리한다.&lt;/p&gt;
&lt;p&gt;특정 스레드가 할당된 요청이 블로킹 상태에 오래 머무르게 되고, thread pool에 있는 스레드를 모두 사용하면 결국 timeout이 발생하게 된다. 즉, 사용되지 않지만 점유되어 있는 스레드에 의한 비효율로 여러 요청을 빠르게 처리할 수 없다.(CPU는 일할 수 있음에도 불구하고 말이다!)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그렇다면 스레드 개수를 늘릴 수 없을까?&lt;/p&gt;
&lt;p&gt;스레드 개수를 늘리면 과도한 context switching이 발생하여 오히려 CPU utilization을 떨어뜨릴 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;리액티브 스트림의 요청 처리 방식&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;많은 요청을 처리하기 위해서 많은 스레드를 사용하지 않는다. (주로 CPU 코어 * 2 만큼만 만들어서 사용)&lt;/p&gt;
&lt;p&gt;이벤트 루프 기반의 비동기 논블로킹 방식을 사용하기 때문에 적은 수의 스레드로 많은 요청을 처리할 수 있으며 블로킹 상태에 스레드가 점유되어 낭비되는 일이 거의 없어진다.&lt;/p&gt;
&lt;p&gt;비동기/논블로킹이라면 호출되는 함수의 작업 완료 여부를 책임지지 않아도 되는 비동기와 호출된 함수로 넘어간 제어권이 바로 리턴되어 다른 일을 처리할 수 있도록 하는 논블로킹의 조합이다. 따라서 스트림을 블록하지 않고 비동기로 처리하면 CPU utilization을 극대화 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;헷갈리는-개념들-잡고가기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%97%B7%EA%B0%88%EB%A6%AC%EB%8A%94-%EA%B0%9C%EB%85%90%EB%93%A4-%EC%9E%A1%EA%B3%A0%EA%B0%80%EA%B8%B0&quot; aria-label=&quot;헷갈리는 개념들 잡고가기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 헷갈리는 개념들 잡고가기&lt;/h2&gt;
&lt;h3 id=&quot;reactive-stream-vs-reactive-programming-vs-reactive-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reactive-stream-vs-reactive-programming-vs-reactive-system&quot; aria-label=&quot;reactive stream vs reactive programming vs reactive system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reactive Stream vs. Reactive Programming vs. Reactive System&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;위에 말한 특징들 대부분이 Reactive Stream이다.&lt;/li&gt;
&lt;li&gt;이런 Reactive Stream을 사용한 프로그램이 Reactive Programming이다.&lt;/li&gt;
&lt;li&gt;Reactive Programming은 연관 키워드로 Event-driven, Reactive System은 Message-driven 이 많이 등장한다. 즉 전자는 한 어플리케이션 관점이고 후자는 전체 시스템 아키텍쳐의 관점으로 바라보아야한다.&lt;/li&gt;
&lt;li&gt;여러 Reactive Programming 컴포넌트들을 모아놓았다고 Reactive System인 것은 아니다. Reactive Manifesto에 나온 리액티브 특징을 살린 시스템 아키텍쳐여야 Reactive System이라고 할 수 있을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;완전 새로운 개념이다 !! 마치 객체지향을 처음 공부했을 때처럼 실체가 있는 기술이 아니라 어떠한 형태의 프로그래밍 기법이니 더 개념 잡기가 어렵고 낯설었던 것 같다.&lt;/li&gt;
&lt;li&gt;면접을 보거나 프로젝트를 진행할 때 사용자를 고려하면 대량의 트래픽 처리와 동시성 문제는 빠지지 않는 주제인 것 같다.&lt;/li&gt;
&lt;li&gt;거의 모든 사람의 손에 모바일과 PC가 들려있으므로 리액티브 프로그래밍이 효율적인 요청처리와 동시성 측면에서도 좋은 해결책인 듯 싶다.&lt;/li&gt;
&lt;li&gt;이제 리액티브 프로그래밍의 기본 개념을 잡았으니 스프링 webflux에서 어떻게 이 개념을 활용하고 적용했는지 알아볼 수 있겠다!!&lt;/li&gt;
&lt;li&gt;모던 자바 인 액션과 자바의 정석에서도 자바의 리액티브 프로그래밍에 대해서 다루었다. 해당 부분을 읽고 정리해보는 것도 다음 목표이다. 관련 키워드는 Rx Java, Java Flow 등등이다. (모두 읽어보았으나 아직은 너무 어려웠다😭  추후 다시 도전)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sightstudio.tistory.com/14&quot;&gt;https://sightstudio.tistory.com/14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactivex.io/&quot;&gt;https://reactivex.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;리액티브 매니페스토: &lt;a href=&quot;https://reactivemanifesto.org/ko&quot;&gt;https://reactivemanifesto.org/ko&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80&quot;&gt;🌩 리액티브 프로그래밍이란?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#reativex&quot;&gt;ReativeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reactive---%EB%AC%B4%EC%97%87%EC%97%90-%EB%B0%98%EC%9D%91%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80&quot;&gt;Reactive - 무엇에 반응한다는 것인가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%98%EC%9D%91%ED%95%A0%EA%B9%8C&quot;&gt;어떻게 반응할까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%9C%A8%EB%8A%94-%EA%B0%9C%EB%85%90%EC%9D%BC%EA%B9%8C&quot;&gt;🌩 왜 이렇게 뜨는 개념일까?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%97%B7%EA%B0%88%EB%A6%AC%EB%8A%94-%EA%B0%9C%EB%85%90%EB%93%A4-%EC%9E%A1%EA%B3%A0%EA%B0%80%EA%B8%B0&quot;&gt;🌩 헷갈리는 개념들 잡고가기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#reactive-stream-vs-reactive-programming-vs-reactive-system&quot;&gt;Reactive Stream vs. Reactive Programming vs. Reactive System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JVM 구조 알아보기]]></title><description><![CDATA[💡 Intro JVM은 자바의 큰 장점 중 하나로 이 가상머신이 깔려있는 운영체제에서는 모두 동일하게 자바 클래스 파일이 실행될 수 있다. JVM의 기본 구조를 알아보자 🙌 🌩 JVM 메모리 구조 1) Class Loader…]]></description><link>https://yjksw.github.io/java-jvm/</link><guid isPermaLink="false">https://yjksw.github.io/java-jvm/</guid><pubDate>Wed, 17 Nov 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JVM은 자바의 큰 장점 중 하나로 이 가상머신이 깔려있는 운영체제에서는 모두 동일하게 자바 클래스 파일이 실행될 수 있다.&lt;/li&gt;
&lt;li&gt;JVM의 기본 구조를 알아보자 🙌&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-jvm-메모리-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-jvm-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot; jvm 메모리 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 JVM 메모리 구조&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1) Class Loader 2) Execution Engine 3) Garbage Collector 4) Runtime Data Area&lt;/strong&gt; 4가지로 나뉘어져 있다.&lt;/p&gt;
&lt;h3 id=&quot;class-loader&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#class-loader&quot; aria-label=&quot;class loader permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class Loader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JVM 내로 클래스 파일을 로드하고 링크를 통해 배치하는 작업을 수행한다.&lt;/li&gt;
&lt;li&gt;런타임 시에 동적으로 클래스를 로드한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;execution-engine&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#execution-engine&quot; aria-label=&quot;execution engine permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Execution Engine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클래스 로더가 Runtime Data Area에 배치한 바이트 코드들을 명령어 단위로 읽어서 실행하는 작업을 수행한다.&lt;/li&gt;
&lt;li&gt;최초 JVM에서는 인터프리터 방식이어서 느렸지만 JIT 컴파일러로 변경되면서 실행이 빠르다는 장점이 있다.&lt;/li&gt;
&lt;li&gt;모든 코드 JIT으로 하지 않고 인터프리터로 하다가 일정한 기준이 넘어가면 JIT 컴파일러 방식으로 실행한다.
&lt;ul&gt;
&lt;li&gt;한번 읽어서 기계어로 변경한 소스코드는 변역하지 않는다.&lt;/li&gt;
&lt;li&gt;저장소에 저장하여 반복되는 코드는 한꺼번에 컴파일하여서 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;garbage-collector&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#garbage-collector&quot; aria-label=&quot;garbage collector permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Garbage Collector&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;힙 메모리 영역에 객체 중 더이상 참조되지 않는 객체들을 제거하는 역할을 한다.
&lt;ul&gt;
&lt;li&gt;Reference Counting 혹은 Mark-and-sweep 방식을 사용&lt;/li&gt;
&lt;li&gt;Minor GC(eden, survivor1, survivor2)와 Major GC(old)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;runtime-data-area&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#runtime-data-area&quot; aria-label=&quot;runtime data area permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Runtime Data Area&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션이 실행할 때 사용되는 데이터를 적재하는 영역
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Method Area&lt;/strong&gt; → 모든 스레드가 공유하는 메모리 영역으로 클래스, 인터페이스, 메소드, 필드, static 변수 등의 바이트 코드를 보관&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heap Area&lt;/strong&gt; → 모든 스레드가 공유하며 new 키워드로 생성된 객체와 배열이 생성되는 영역&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stack Area&lt;/strong&gt; → 메서드 호출시마다 스택 프레임을 생성하여 매개변수, 지역변수, 리턴 값, 연산 시 값들을 임시로 저장하며 메서드 수행이 끝나면 프레임을 삭제&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PC Register&lt;/strong&gt; → 쓰레드 시작 시 생성되며 스레드마다 하나씩 존재하고 무슨 명령어를 실행할지 명령의 주소 보관&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Native Method Stack&lt;/strong&gt; → 자바 외 언어로 작성된 네이티브 코드를 저장하는 메모리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JVM의 구조를 알고 있어야지 자바 코드가 실행되는 부분이 일종의 ‘매직’처럼 남아있지 않고 구체화 되어서 그려질 것 같다.&lt;/li&gt;
&lt;li&gt;공부를 할수록 그냥 되는줄 알았던 부분들이 차츰차츰 명료해지는 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-jvm-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0&quot;&gt;🌩 JVM 메모리 구조&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#class-loader&quot;&gt;Class Loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#execution-engine&quot;&gt;Execution Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#garbage-collector&quot;&gt;Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#runtime-data-area&quot;&gt;Runtime Data Area&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[스프링 3대 개념 - IoC/DI, AOP, PSA]]></title><description><![CDATA[💡 Intro 스프링에서 어느날 등장한 개념은 아니고 어떠한 이름으로든 사용이 되고 있던 기술인데 스프링에서 더 잘 사용되도록 특정 형태를 부여했다. 이 3가지 기술들이 그 자체로 스프링이기보다 POJO…]]></description><link>https://yjksw.github.io/spring-ioc-aop-psa/</link><guid isPermaLink="false">https://yjksw.github.io/spring-ioc-aop-psa/</guid><pubDate>Tue, 16 Nov 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스프링에서 어느날 등장한 개념은 아니고 어떠한 이름으로든 사용이 되고 있던 기술인데 스프링에서 더 잘 사용되도록 특정 형태를 부여했다.&lt;/li&gt;
&lt;li&gt;이 3가지 기술들이 그 자체로 스프링이기보다 POJO 기반 엔터프라이즈 개발을 편하게 해줄 수 있는 일종의 도구이다. 즉, 객체지향적인 구현에 충실하면서 자연스럽게 등장하게 된 결과라고 할 수 있다.&lt;/li&gt;
&lt;li&gt;스프링에서 제공하는 PSA, AOP만 사용하는 것이 아니라 그 개념을 차출하여 객체지향적 구현을 하는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-iocdi&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-iocdi&quot; aria-label=&quot; iocdi permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 IoC/DI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AOP, PSA도 IoC/DI에 바탕을 두고 있는 기술이다.&lt;/li&gt;
&lt;li&gt;느슨한 결합을 위해 인터페이스를 두고 실제 구현체를 DI를 통해 외부에서 주입하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;왜-강한-결합보다-느슨한-결합이-나은가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B0%95%ED%95%9C-%EA%B2%B0%ED%95%A9%EB%B3%B4%EB%8B%A4-%EB%8A%90%EC%8A%A8%ED%95%9C-%EA%B2%B0%ED%95%A9%EC%9D%B4-%EB%82%98%EC%9D%80%EA%B0%80&quot; aria-label=&quot;왜 강한 결합보다 느슨한 결합이 나은가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 강한 결합보다 느슨한 결합이 나은가?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;유연한 확장이 가능하게 하기 위해서 → OCP&lt;/li&gt;
&lt;li&gt;변경에 닫혀있다는 것은 &lt;strong&gt;재사용이 가능하다&lt;/strong&gt; 라는 뜻이다.
&lt;ul&gt;
&lt;li&gt;A → B 의존관계일 때 B가 변경이 되어도 A가 아무 영향을 받지 않으면 A 입장에서는 폐쇄이며 B 관점에서는 유연한 확장이다.&lt;/li&gt;
&lt;li&gt;B가 B1, B2, B3로 바뀔수도 있고, A는 그대로 재사용이 가능하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;di의-활용-방법-및-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#di%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95-%EB%B0%8F-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;di의 활용 방법 및 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DI의 활용 방법 및 장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;핵심기능의 변경
&lt;ul&gt;
&lt;li&gt;구현체를 바꿀 수 있다.&lt;/li&gt;
&lt;li&gt;예를 들어 DAO를 사용하고 그 구현을 JDBC, JPA 하이버네이트, JDO 등으로 바꿀 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;핵심기능의 동적인 변겅
&lt;ul&gt;
&lt;li&gt;애플리케이션 동작 중간에 의존 대상을 다이나믹하게 변경할 수 있다.&lt;/li&gt;
&lt;li&gt;예를들어 사용자의 입력에 따라서 다른 DataSource를 사용하게 만들 수 있다.&lt;/li&gt;
&lt;li&gt;기술적으로 프록시를 활용한 것인데 이것은 DI 없이는 불가능한 기술이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;부가기능의 추가
&lt;ul&gt;
&lt;li&gt;핵심 기능은 그대로 둔 채 부가기능을 추가하는 데코레이터 패턴과 같은 것이다.&lt;/li&gt;
&lt;li&gt;DI를 사용해서 데코레이터 패턴을 쉽게 적용할 수 있다.&lt;/li&gt;
&lt;li&gt;클라이언트 코드에는 영향을 주지 않으면서 부가기능 추가가 가능하다.&lt;/li&gt;
&lt;li&gt;부가 작업을 특정 오브젝트를 대상으로 하는 것이 아니라 많은 대상으로 일반화 한다면 AOP가 되는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터페이스의 변경
&lt;ul&gt;
&lt;li&gt;클라이언트에서 사용하는 인터페이스와 오브젝트의 인터페이스가 일치하지 않을 때 DI를 활용하여 어댑터 패턴을 응용할 수 있다.&lt;/li&gt;
&lt;li&gt;예를 들어 A가 B인터페이스에 의존하지만 C 오브젝트를 사용하고자 할 때, B 인터페이스를 상속하고 C기능을 제공하는 어댑터를 구현하여 해결할 수 있다.&lt;/li&gt;
&lt;li&gt;일반화하여 인터페이스가 다양한 구현을 같은 방식으로 사용하도록 할 수도 있다. → PSA
&lt;ul&gt;
&lt;li&gt;구현체는 다양하지만 클라이언트 입장에서는 같은 방식으로 늘 사용하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프록시
&lt;ul&gt;
&lt;li&gt;필요한 시점에서 실제로 사용할 오브젝트를 초기화해고 지연된 로딩을 적용할 때 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;템플릿과 콜백
&lt;ul&gt;
&lt;li&gt;작업의 흐름 사이에 자주 바뀌는 부분을 템플릿과 콜백으로 만들고 DI 원리를 사용하면 코드를 간결하게 구현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;싱글톤과 오브젝트 스코프
&lt;ul&gt;
&lt;li&gt;DI하는 오브젝트의 생명주기를 제어할 수 있다. DI를 컨테이너가 한다면 오브젝트의 생명주기를 마음대로 관리하고 제어할 수 있다.&lt;/li&gt;
&lt;li&gt;기본 스코프는 싱글톤이다. 웹 엔터프라이즈는 수많은 클라이언트를 대상으로 서비스를 제공해야하기 때문에 여러 스레드의 요청을 동시에 처리할 수 있도록 하기 위해서다.&lt;/li&gt;
&lt;li&gt;전통적인 싱글톤은 오브젝트에 많은 제약을 가했지만 IoC 방식의 싱글톤은 자유로운 설계가 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;테스트
&lt;ul&gt;
&lt;li&gt;오브젝트를 효과적으로 테스트하기 위해서는 오브젝트가 고립되어야 한다.&lt;/li&gt;
&lt;li&gt;다른 오브젝트와 협력하는 부분을 테스트하기 위해서는 환경 전체를 테스트해야한다는 부담감이 있다.&lt;/li&gt;
&lt;li&gt;DI를 한다면 의존 오브젝트를 대신하여 스텁 혹은 목 오브젝트 같이 테스트 대역을 할 수 있다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;번외) stub과 mock의 차이&lt;/p&gt;
&lt;p&gt;stub은 더미 객체를 사용하여 실제로 동작하는 것 처럼 보이도록 하는 것이다. 상태검증을 한다.&lt;/p&gt;
&lt;p&gt;mock은 기대값을 명세하고 특정 결과를 반환하도록 하는 것이다. 행위검증을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;-aop&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-aop&quot; aria-label=&quot; aop permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 AOP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;관점 지향 프로그래밍이라고도 많이 알려져 있다.&lt;/li&gt;
&lt;li&gt;관심사가 같은 코드를 분리해 객체지향의 원칙에 따라서 분리하고 응집된 것들을 한 곳에 모으는 것이 좋다.&lt;/li&gt;
&lt;li&gt;트랜잭션의 경우
&lt;ul&gt;
&lt;li&gt;트랜잭션은 한 곳에 모을 수 없고 여기저기에 흩어져있다. 따라서 모듈화가 힘들다.&lt;/li&gt;
&lt;li&gt;부가기능이기 때문에 스스로 독립적인 방식으로 존재하는 것이 어렵다.&lt;/li&gt;
&lt;li&gt;흩어져있는 부가로직을 분리하여 중복되지 않고, 변경이 필요한 경우 한 곳만 변경할 수 있도록 하는 것이 AOP의 역할이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aspect는 부가 기능을 정의한 advice와 해당 advice를 적용할 포인트컷을 가지고 있다.&lt;/li&gt;
&lt;li&gt;부가기능이 핵심기능 모듈에 침투하면서 핵심기능을 파악하고 수정하고 테스트하기 어렵다.&lt;/li&gt;
&lt;li&gt;AOP와 OOP
&lt;ul&gt;
&lt;li&gt;AOP와 OOP가 대체관계라고 생각할 수 있지만 사실 보조하는 기술이다.&lt;/li&gt;
&lt;li&gt;부가기능이 핵심기능 안으로 침투하면 핵심기능에 객체지향 기술을 부여하기 힘들고 테스트하기 어려움으로 AOP로 해당 로직을 분리하여 객체지향적인 가치를 지킬 수 있도록 해주는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-psa&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-psa&quot; aria-label=&quot; psa permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 PSA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;환경과 세부 기술의 변화와 관계없이 일관된 방식으로 기술에 접근할 수 있다.&lt;/li&gt;
&lt;li&gt;POJO 코드가 JavaEE에 직접 노출되지 않도록 해준다.
&lt;ul&gt;
&lt;li&gt;예를 들어서 트랜잭션이라는 엔터프라이즈 기술을 직접 POJO에 노출하는 것이 아니라 일관적인 서비스 추상화 기술의 형태로 제공해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대신 설정을 통해 추상화 된 부분에 어떤 기술을 할 것인지 지정해주어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스프링 프레임워크의 목적은 “엔터프라이즈 기술을 사용하되 비즈니스 로직을 객체지향적으로 구현하고자 하는 것”이다.&lt;/li&gt;
&lt;li&gt;이해하기 어려운 스프링 프레임워크의 기술도 이 관점으로 보면 나름 이해할 수 있다.&lt;/li&gt;
&lt;li&gt;그리고 그 모든 기술의 기반은 바로 DI 다 !! 추상적으로 구현하여 확장성을 보장하고 변경에 자유로운 객체지향적 코드를 구현할 수 있도록 해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-iocdi&quot;&gt;🌩 IoC/DI&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B0%95%ED%95%9C-%EA%B2%B0%ED%95%A9%EB%B3%B4%EB%8B%A4-%EB%8A%90%EC%8A%A8%ED%95%9C-%EA%B2%B0%ED%95%A9%EC%9D%B4-%EB%82%98%EC%9D%80%EA%B0%80&quot;&gt;왜 강한 결합보다 느슨한 결합이 나은가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#di%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95-%EB%B0%8F-%EC%9E%A5%EC%A0%90&quot;&gt;DI의 활용 방법 및 장점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-aop&quot;&gt;🌩 AOP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-psa&quot;&gt;🌩 PSA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[스프링, POJO 프레임워크가 무슨 뜻일까]]></title><description><![CDATA[💡 Intro POJO에 대해서 ‘그냥 자바 객체요!’라고 말하는 것 이상으로 이해해보자. POJO기반 프레임워크란 무엇인지 이해해보고 스프링에서 POJO…]]></description><link>https://yjksw.github.io/spring-pojo/</link><guid isPermaLink="false">https://yjksw.github.io/spring-pojo/</guid><pubDate>Mon, 15 Nov 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;POJO에 대해서 ‘그냥 자바 객체요!’라고 말하는 것 이상으로 이해해보자.&lt;/li&gt;
&lt;li&gt;POJO기반 프레임워크란 무엇인지 이해해보고 스프링에서 POJO는 어떠한 형태를 띄는지 알아보자&lt;/li&gt;
&lt;li&gt;스프링이 개발의 복잡도를 낮춰주고 효과적으로 프로그래밍을 할 수 있도록 구체적으로 &lt;strong&gt;어떻게&lt;/strong&gt; 가능하게 하는지 공부해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-pojo-란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-pojo-%EB%9E%80&quot; aria-label=&quot; pojo 란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 POJO 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;유명한 스프링의 삼각형으로 기본 컨텍스트를 맞추고 설명을 시작해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스프링은 POJO에 주요기술인 IoC/DI, AOP, PSA를 사용한 코드와 POJO가 어떻게 관계를 맺고 동작하는지 정의한 설계정보로 구분된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/142145957-19052d27-8363-4f06-9a36-5527c8eaf391.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링에서 DI는 &lt;strong&gt;유연하게 확장 가능한 오브젝트를 만들고, 그 관계를 외부에서 dynamic하게 설정해주는 것&lt;/strong&gt;이며 스프링에서는 이 아이디어를 전반에 걸쳐서 적용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POJO는 EJB처럼 복잡하고 제한이 많은 기술로 엔터프라이즈 애플리케이션의 비지니스 로직을 구현하는 것보다 순수 자바 객체를 사용하여 비지니스 로직을 구현하는 것이 더 좋다고 생각하여 나온 개념이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pojo의-조건&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pojo%EC%9D%98-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;pojo의 조건 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;POJO의 조건&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;특정 규약에 종속되지 않는다.
&lt;ul&gt;
&lt;li&gt;자바 언어와 필요 API를 제외하고 다른 것에 종속되지 말아야 한다.
&lt;ul&gt;
&lt;li&gt;특정 규약에 따른 비지니스 컴포넌트를 만들어야하면 POJO가 아니다.&lt;/li&gt;
&lt;li&gt;또한 특정 클래스를 상속해서 만들어야하면 POJO가 아니다 → 단일 상속 제한 때문에 객체지향적인 설계 기법을 적용하기 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 환경에 종속되지 않는다.
&lt;ul&gt;
&lt;li&gt;특정 무언가가 없는 환경에서 그대로 사용하기가 어렵다면 POJO가 아니다.&lt;/li&gt;
&lt;li&gt;그렇다면 JPA를 사용하는 Service 클래스는 POJO라고 할 수 있을까? 🤔
&lt;ul&gt;
&lt;li&gt;Service 클래스에서 의존하고 있는 JPA 레파지토리는 구현체인 하이버네이트에 의존하기 보다는 표준 스펙을 정의한 인터페이스이다. 따라서 POJO 프레임워크를 제공하는 것이라고 할 수 있다.&lt;/li&gt;
&lt;li&gt;그런 도메인의 인터페이스에 의존하는 서비스는 POJO라고 할 수 있을 것 같다.&lt;/li&gt;
&lt;li&gt;개인적인 의견이므로 틀리면 댓글로 얼마든지 알려주세요 🙌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 벤더의 서버나 프레임워크 안에서만 동작 가능한 코드는 POJO가 아니다.&lt;/li&gt;
&lt;li&gt;웹이라는 환경정보나 웹 기술을 담고 있는 클래스나 인터페이스를 사용하는 것은 POJO가 아니다.
&lt;ul&gt;
&lt;li&gt;예를 들어 비즈니스 코드에 HttpServletRequest나 HttpSession 등의 API가 등장하거나 클래스에서 그것을 직접 이용한다면 POJO가 아니다.&lt;/li&gt;
&lt;li&gt;웹 이외의 클라이언트는 해당 객체를 사용하지 못하며 독립적으로 테스트하기 어려워진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;어노테이션을 쓰면 POJO가 아니다 라고 말할수는 없다. 해당 어노테이션이 환경에 종속되지 않고 부가적인 정보를 담고 있다면 POJO라고 할 수 있다.
&lt;ul&gt;
&lt;li&gt;만일 해당 어노테이션이 element에 특정 기술에 환경에 종속적인 정보를 담고 있다면 POJO라고 할 수 없다.
&lt;ul&gt;
&lt;li&gt;개인적인 의견) 따라서 JPA의 &lt;code class=&quot;language-text&quot;&gt;@Entity&lt;/code&gt;가 붙은 클래스는 POJO라고 할 수 없을 것 같다. @Id가 반드시 있어야하는 등의 제약사항이 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그렇다고 위 2조건을 만족하는 나머지가 모두 POJO인 것은 아니다!
&lt;ul&gt;
&lt;li&gt;객체지향적인 자바의 언어를 잘 활용한 것이 POJO이다.&lt;/li&gt;
&lt;li&gt;재사용이 가능하고 상속과 다형성을 적용하여 객체지향적으로 설계된 오브젝트를 말한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;pojo의-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pojo%EC%9D%98-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;pojo의 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;POJO의 장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기술과 환경에 종속되지 않으면 깔끔한 코드를 짤 수 있으며 순수 비즈니스 로직을 담을 수 있다.&lt;/li&gt;
&lt;li&gt;테스트 작성이나 검증이 쉽다.&lt;/li&gt;
&lt;li&gt;기술이나 환경의 변화에 취약하지 않다.&lt;/li&gt;
&lt;li&gt;재사용이 가능하고, 변경에 자유로우며, 확장이 용이한 객체지향적 설계가 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-pojo-프레임워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-pojo-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC&quot; aria-label=&quot; pojo 프레임워크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 POJO 프레임워크&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;“스프링의 정수는 엔터프라이즈 서비스 기능을 POJO에 제공하는 것” 이라고 한다.&lt;/li&gt;
&lt;li&gt;즉, 트랜잭션과 같이 엔터프라이즈 시스템에서 필요한 기술을 순수 자바 객체에서 가능하게 한다는 것이다.&lt;/li&gt;
&lt;li&gt;다시 말하면 엔터프라이즈 서비스 기술과 자바 객체(POJO)를 효과적으로 분리했다는 의미이며 스프링의 가장 큰 장점이다.&lt;/li&gt;
&lt;li&gt;POJO 프로그래밍이 가능하도록 기술적인 기반을 제공하는 것이 POJO 프레임워크이다. 하이버네이트와 스프링이 대표적인 POJO 프레임워크이다.&lt;/li&gt;
&lt;li&gt;스프링은 POJO 기반으로 구현하고 엔터프라이즈 환경의 서비스와 기술을 POJO 방식으로 구현된 코드에 적용할 수 있다.
&lt;ul&gt;
&lt;li&gt;비즈니스 로직과 엔터프라이즈 기술을 분리하여 구성한다.&lt;/li&gt;
&lt;li&gt;스프링은 기술영역에만 관여하고 비즈니스 로직을 다루는 POJO에서 모습을 드러내지 않는다.&lt;/li&gt;
&lt;li&gt;데이터 액세스 로직이나 웹 UI 로직에서 최소한의 방법으로 관여한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개발자가 POJO 프레임워크를 사용한다고 해서 자동으로 객체지향적인 코드를 짜는 것은 아니다.&lt;/li&gt;
&lt;li&gt;객체지향적 코드가 가능한 기반에서 어떻게 효과적으로 객체지향적 설계를 잘 할지는 개발자의 남은 몫이다.
&lt;ul&gt;
&lt;li&gt;JVM, JDK API, 디자인패턴에 대해서 잘 공부하고 적용할 수 있도록 공부해야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-pojo-%EB%9E%80&quot;&gt;🌩 POJO 란?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pojo%EC%9D%98-%EC%A1%B0%EA%B1%B4&quot;&gt;POJO의 조건&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pojo%EC%9D%98-%EC%9E%A5%EC%A0%90&quot;&gt;POJO의 장점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-pojo-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC&quot;&gt;🌩 POJO 프레임워크&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[추상클래스와 인터페이스 더 이상 헷갈리지 않기]]></title><description><![CDATA[💡 Intro…]]></description><link>https://yjksw.github.io/java-abstract-vs-interface/</link><guid isPermaLink="false">https://yjksw.github.io/java-abstract-vs-interface/</guid><pubDate>Mon, 15 Nov 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스와 추상클래스의 차이를 명확하게 구분해보자.&lt;/li&gt;
&lt;li&gt;언제 무엇을 쓰는 것이 좋은지 나름의 정의를 내려본다.&lt;/li&gt;
&lt;li&gt;상속의 위험성에 대해서 고민해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-추상클래스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4&quot; aria-label=&quot; 추상클래스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 추상클래스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;추상 클래스는 “미완성 설계도” 이다.&lt;/li&gt;
&lt;li&gt;공통부분을 우선 정의한 미완성 설계도를 만들고 각기 다른 상황에 대해서 추가로 구현할 수 있다.
&lt;ul&gt;
&lt;li&gt;완성되지 않은 abstract 메소드를 포함하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추상클래스는 abstract 메소드가 있다는 것을 제외하고는 일반클래스와 동일하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상속은 자손 클래스를 만드는데 조상 클래스를 사용하는 것&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;추상화는 자손 클래스의 공통부분을 뽑아내서 조상 클래스를 만드는 것&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;상속&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D&quot; aria-label=&quot;상속 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;추상클래스를 &lt;code class=&quot;language-text&quot;&gt;extends&lt;/code&gt; 하는 명령어가 상속에서 사용되기 때문에 두 개념이 혼용되어서 사용되기도 한다. 엄밀히 말하면 두 개념이 겹칠수도 있지만 완전히 동일한 것은 아니다.&lt;/li&gt;
&lt;li&gt;상속이란 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것
&lt;ul&gt;
&lt;li&gt;적은 양의 코드로 새로운 클래스를 작성할 수 있고 공통부분을 관리할 수 있다는 장점이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상속은 is-a 관계로 표현될 수 있다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;**final&lt;/code&gt;로 정의된 클래스가 아니라면 모두 상속이 가능하다. 추상클래스는 그 일부분이다.**&lt;/li&gt;
&lt;li&gt;상속을 할 때 주의할 점 ‼️
&lt;ul&gt;
&lt;li&gt;상속은 조상 클래스의 캡슐화가 깨지는 위험이 있다.&lt;/li&gt;
&lt;li&gt;또한 조상 클래스와 자손 클래스간의 강한 결합이기 때문에 조상 클래스 메서드에 변화가 생기면 자손 클래스에 아무런 변화가 없음에도 다르게 동작할 수 있다.&lt;/li&gt;
&lt;li&gt;따라서 상속보다는 &lt;strong&gt;조합&lt;/strong&gt;을 사용하도록 추천한다. (Deck는 Card를 가지고 있다 와 같은 경우에 조합 사용 has-a 관계)&lt;/li&gt;
&lt;li&gt;일반 클래스는 &lt;code class=&quot;language-text&quot;&gt;final&lt;/code&gt;을 추가하여 상속을 막거나 미완성 설계도인 abstract 클래스를 정의하도록 추천한다.
&lt;ul&gt;
&lt;li&gt;또한 추상클래스의 부모 메소드를 수정하지 않는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;왜-자바는-단일-상속일까-single-inheritance&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EC%9E%90%EB%B0%94%EB%8A%94-%EB%8B%A8%EC%9D%BC-%EC%83%81%EC%86%8D%EC%9D%BC%EA%B9%8C-single-inheritance&quot; aria-label=&quot;왜 자바는 단일 상속일까 single inheritance permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 자바는 단일 상속일까? (single inheritance)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다중상속을 하게 되면 복합적인 기능을 가진 클래스를 손쉽게 구현할 수 있지만 클래스 간 관계가 굉장히 복잡해진다.&lt;/li&gt;
&lt;li&gt;여러 다른 클래스로 상속받은 멤버의 이름이나 메서드가 같은 경우 구별도 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot; 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 인터페이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스는 “기본 설계도”이다. (추상클래스는 “미완성 설계도”)&lt;/li&gt;
&lt;li&gt;인터페이스는 면대면이 만나는 부분이라는 뜻을 가지고 있으며 2개의 구성요소가 상호작용할 수 있도록 접속 경계를 연결하는 부분이다. (플러그와 같은 역할)&lt;/li&gt;
&lt;li&gt;인터페이스끼리 상속받을 수 있으며 다중상속이 가능하다.&lt;/li&gt;
&lt;li&gt;인터페이스는 &lt;code class=&quot;language-text&quot;&gt;implements&lt;/code&gt; 를 사용해서 구현하며 다중구현이 가능하다.&lt;/li&gt;
&lt;li&gt;인터페이스는 구현 메서드나 멤버 필드가 없다.
&lt;ul&gt;
&lt;li&gt;default 메서드가 가능하도록 jdk1.8부터 추가가 되었고, static 변수만 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터페이스는 해당 인터페이스를 구현하는 모든 클래스가 특정 메소드를 반드시 구현하도록 강제하는 역할을 한다 → 따라서 명세의 역할을 한다고도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;추상클래스와의-차이점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot; aria-label=&quot;추상클래스와의 차이점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;추상클래스와의 차이점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 구현메서드 존재 여부, 필드 존재 여부, 다중 상속 및 구현에 대한 차이점이 존재한다&lt;/li&gt;
&lt;li&gt;추상클래스는 공통기능에 대한 재사용과 정제의 역할을 한다. (정제란 불완전한 행동을 완전하게 만드는 것을 의미)&lt;/li&gt;
&lt;li&gt;인터페이스는 구현체가 특정 메소드가 반드시 존재하도록 하는 역할을 하여 특정 기능을 반드시 제공한다는 것을 보장하는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;동일-메서드를-가진-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9D%BC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;동일 메서드를 가진 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동일 메서드를 가진 인터페이스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;동일한 메서드 명과 시그니처를 가진 메서드가 두 개의 인터페이스에 있을때는 어떻게 할까?
&lt;ul&gt;
&lt;li&gt;이때는 컴파일 오류로 충돌을 해결해야만 컴파일이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;추상클래스와 인터페이스는 역할 자체가 다르다.
&lt;ul&gt;
&lt;li&gt;추상 클래스는 정제의 역할을 인터페이스는 기능 구현 강제의 역할을 한다.&lt;/li&gt;
&lt;li&gt;인터페이스를 통해서는 중복을 해결할 수 없다. 어떤 두 요소가 연결되기 위해 사전에 정의한 기능들이 모두 구현이 된다는 것을 보장할 뿐이다.&lt;/li&gt;
&lt;li&gt;상속은 부모 클래스의 캡슐화가 깨지기 때문에 조합을 이용하는 것이 더 적절하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4&quot;&gt;🌩 추상클래스&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D&quot;&gt;상속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%EC%9E%90%EB%B0%94%EB%8A%94-%EB%8B%A8%EC%9D%BC-%EC%83%81%EC%86%8D%EC%9D%BC%EA%B9%8C-single-inheritance&quot;&gt;왜 자바는 단일 상속일까? (single inheritance)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;🌩 인터페이스&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;추상클래스와의 차이점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EC%9D%BC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;동일 메서드를 가진 인터페이스&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[사용자 레벨 스레드 vs. 커널 레벨 스레드]]></title><description><![CDATA[💡 Intro 효율적인 프로그래밍을 위해 멀티 스레드 환경에서 구동을 할 때가 많다. 멀티 스레드의 간단한 장점과 항상 헷갈렸던 사용자 레벨 스레드 vs. 커널 레벨 스레드에 대해서 알아보자. 🌩 Multi-thread 장점…]]></description><link>https://yjksw.github.io/os-user-kernel-thread/</link><guid isPermaLink="false">https://yjksw.github.io/os-user-kernel-thread/</guid><pubDate>Wed, 10 Nov 2021 14:10:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;효율적인 프로그래밍을 위해 멀티 스레드 환경에서 구동을 할 때가 많다.&lt;/li&gt;
&lt;li&gt;멀티 스레드의 간단한 장점과 항상 헷갈렸던 사용자 레벨 스레드 vs. 커널 레벨 스레드에 대해서 알아보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-multi-thread-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-multi-thread-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot; multi thread 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Multi-thread 장점&lt;/h2&gt;
&lt;h3 id=&quot;1-응답성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%91%EB%8B%B5%EC%84%B1&quot; aria-label=&quot;1 응답성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 응답성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션의 일부분이 봉쇄되거나 긴 작업을 실행하더라도 다른 부분의 프로그램이 계속 실행되는 것을 허용하기 때문에 사용자의 입장에서 응답성이 증가한다.&lt;/li&gt;
&lt;li&gt;예를 들어 다운로드가 오래 걸리는 파일을 다운로드 하면서 사용자와의 상호작용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-자원-공유-resource-sharing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9E%90%EC%9B%90-%EA%B3%B5%EC%9C%A0-resource-sharing&quot; aria-label=&quot;2 자원 공유 resource sharing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 자원 공유 resource sharing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스는 완전히 별도의 메모리 공간을 할당받기 때문에 (code, data, heap) 서로 통신하기 위해서는 공유 메모리를 사용하거나 메세지 전달 기법 (IPC)를 사용해야한다.&lt;/li&gt;
&lt;li&gt;스레드는 속한 프로세스의 자원을 공유하기 때문에 한 프로그램이 &lt;strong&gt;같은 주소 내에서 여러개의 다른 작업을 하는 단위&lt;/strong&gt;로 나뉘어질 수 있다는 이점이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-경제성-economy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EA%B2%BD%EC%A0%9C%EC%84%B1-economy&quot; aria-label=&quot;3 경제성 economy permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 경제성 economy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 자원을 공유하므로 메모리 측면과 문맥교환 오버헤드 측면에서 경제적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-규모-가변성-scalability&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EA%B7%9C%EB%AA%A8-%EA%B0%80%EB%B3%80%EC%84%B1-scalability&quot; aria-label=&quot;4 규모 가변성 scalability permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 규모 가변성 scalability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;멀티코어 환경에서 각각의 스레드가 다른 코어에서 병렬로 실행될 수 있기 때문에 이점이 증가한다.&lt;/li&gt;
&lt;li&gt;단일 스레드라면 코어의 개수와 상관없이 한번에 한 개의 처리기에서만 실행되지만 멀티코어에 멀티스레드라면 병렬성을 증가시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-multi-thread-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-multi-thread-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot; multi thread 모델 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Multi-thread 모델&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스레드는 사용자 스레드와 커널 스레드로 나뉜다.
&lt;ul&gt;
&lt;li&gt;사용자 스레드는 사용자 수준에서 관리되며 os가 관여하지 않는다.&lt;/li&gt;
&lt;li&gt;사용자 수준의 라이브러리를 사용하여 생성되고 커널의 개입을 받지 않는다.&lt;/li&gt;
&lt;li&gt;커널 스레드는 os에 의해 직접 지원되고 관리된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다양한 Mutli-thread 모델이 있는 이유는 스레드가 작업을 처리하기 위해서는 CPU를 점유해야하기 때문에 궁극적으로는 사용자 스레드와 커널 스레드간의 어떠한 연관관계가 존재해야 하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;모델-3가지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8-3%EA%B0%80%EC%A7%80&quot; aria-label=&quot;모델 3가지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델 3가지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다대일 모델
&lt;ul&gt;
&lt;li&gt;여러 사용자 스레드를 하나의 커널 스레드에 사상하며 스레드 관리는 사용자 레벨의 스레드 라이브러리가 수행한다.&lt;/li&gt;
&lt;li&gt;한 스레드가 봉쇄 상태에 들어가면 커널 스레드가 함께 봉쇄 상태에 들어가게 되므로 모두 봉쇄된다.&lt;/li&gt;
&lt;li&gt;한번에 하나의 스레드만 커널에 접근이 가능하기 때문에 멀티코어 환경에서 병렬로 실행될 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일대일 모델
&lt;ul&gt;
&lt;li&gt;하나의 사용자 스레드를 각각 하나의 커널 스레드로 사상한다.&lt;/li&gt;
&lt;li&gt;하나의 스레드가 봉쇄상태에 들어가더라도 다른 스레드가 커널 스레드와 매핑되어 작업을 처리할 수 있으므로 멀티코어 환경에서 더 병렬성을 제공한다.&lt;/li&gt;
&lt;li&gt;사용자 레벨에서 스레드를 하나 생성할 때 커널의 스레도 생성해야 하기 대문에 오버헤드가 발생한다. 따라서 이 모델을 사용할 경우 대부분 시스템에 의해 지원되는 스레드 개수를 제한한다.&lt;/li&gt;
&lt;li&gt;Linux가 대표적인 일대일 모델을 사용하는 os이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다대다 모델
&lt;ul&gt;
&lt;li&gt;여러 사용자 스레드를 여러 커널 스레드에 사상한다. (사용자 스레드 ≤ 커널 스레드 숫자로 사상한다)&lt;/li&gt;
&lt;li&gt;다대일 모델과 일대일 모델의 단점을 극복한다.
&lt;ul&gt;
&lt;li&gt;진정한 동시성을 지원하지 못하는 단점과, 스레드 개수에 제한이 있는 단점을 커버한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;개발자는 원하는 만큼 스레드를 생성하고 여러개의 커널 스레드에 의해 병렬성을 보장한다. 따라서 하나의 스레드가 봉쇄상태에 들어가더라도 다른 커널 스레드에 의해 실행을 스케줄 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-thread-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-thread-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot; thread 스케줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Thread 스케줄링&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;사용자 스레드와 커널 스레드가 나뉘지만 os에서 스캐줄링 되는 대상은 커널 스레드이다.&lt;/li&gt;
&lt;li&gt;사용자 스레드는 스레드 라이브러리에 의해서 관리되고 커널은 사용자 스레드의 존재에 대해서 알지 못하기 때문에 궁극적으로 사용자 스레드는 커널 스레드에 사상되어야 한다.&lt;/li&gt;
&lt;li&gt;따라서 사용자 수준과 커널 수준의 스레드 스케줄링에 대해서 간략히 다루어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;경쟁-범위-contention-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%BD%EC%9F%81-%EB%B2%94%EC%9C%84-contention-scope&quot; aria-label=&quot;경쟁 범위 contention scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;경쟁 범위 Contention scope&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Process-Contention scope(PCS)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;다대일, 다대다 모델에서는 스레드 라이브러리가 사용자 스레드를 가용한 커널 스레드에 스케줄링한다.&lt;/li&gt;
&lt;li&gt;동일한 프로세스의 스레드들끼리 CPU를 경쟁하는 형태&lt;/li&gt;
&lt;li&gt;스레드 라이브러리가사용자 스레드를 ‘가용한 LWP(Light Weight Process) 상에서 스케줄한다’ 라고 하더라도 그것이 CPU 점유를 의미하지 않는다. CPU 점유는 커널 스레드의 스캐줄링이 필요하다.&lt;/li&gt;
&lt;li&gt;주로 우선순위에 따라서 행해지며 가장 높은 우선순위를 선점하여 스캐줄링한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System-Contention scope(SCS)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;실제 CPU에서 실행되기 위해서 os가 커널 스레드를 물리적 CPU로 스캐줄링 해야한다.&lt;/li&gt;
&lt;li&gt;어느 커널 스레드가 CPU를 점유할 것인지 결정하는 형태&lt;/li&gt;
&lt;li&gt;SCS 스캐줄링은 시스템 상의 모든 스레드 사이에서 일어난다.&lt;/li&gt;
&lt;li&gt;일대일 모델 같은 경우 오직 SCS만 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;한번도 제대로 이해하지 못했는데 os를 처음부터 차근차근 공부하며 ‘커널’에 대한 이해도를 쌓은 후 공부하니 조금 더 감이 잡히는 듯 하다.&lt;/li&gt;
&lt;li&gt;사용자 스레드의 이점이 아직 그렇게 잘 와닿지 않는다. 우선 하나의 프로세스 내에서 여러 작업 단위를 나눈다는 점만 이해하고 넘어가야겠다.&lt;/li&gt;
&lt;li&gt;자바의 Thread와 스레드 라이브러리에 대해서 더 깊이 공부해 봐야겠다 🙌&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;[참고자료]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating System 공룡책&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-multi-thread-%EC%9E%A5%EC%A0%90&quot;&gt;🌩 Multi-thread 장점&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%9D%91%EB%8B%B5%EC%84%B1&quot;&gt;1. 응답성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%9E%90%EC%9B%90-%EA%B3%B5%EC%9C%A0-resource-sharing&quot;&gt;2. 자원 공유 resource sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EA%B2%BD%EC%A0%9C%EC%84%B1-economy&quot;&gt;3. 경제성 economy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EA%B7%9C%EB%AA%A8-%EA%B0%80%EB%B3%80%EC%84%B1-scalability&quot;&gt;4. 규모 가변성 scalability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-multi-thread-%EB%AA%A8%EB%8D%B8&quot;&gt;🌩 Multi-thread 모델&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8-3%EA%B0%80%EC%A7%80&quot;&gt;모델 3가지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-thread-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot;&gt;🌩 Thread 스케줄링&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B2%BD%EC%9F%81-%EB%B2%94%EC%9C%84-contention-scope&quot;&gt;경쟁 범위 Contention scope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[스프링의 싱글톤 레지스트리]]></title><description><![CDATA[💡 Intro 왜 하필 스프링 인가? 라는 질문을 던지게 되면서 스프링이 가지고 있느 장점에 대해서 고민해보았다. 그 중 기존의 싱글톤 패턴의 한계를 뛰어넘은 스프링 싱글톤 레지스트리를 알게 되었다. 이전에 단순히 스프링이 싱글톤 scope…]]></description><link>https://yjksw.github.io/spring-singleton-registry/</link><guid isPermaLink="false">https://yjksw.github.io/spring-singleton-registry/</guid><pubDate>Wed, 10 Nov 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;왜 하필 스프링 인가? 라는 질문을 던지게 되면서 스프링이 가지고 있느 장점에 대해서 고민해보았다.&lt;/li&gt;
&lt;li&gt;그 중 기존의 싱글톤 패턴의 한계를 뛰어넘은 스프링 싱글톤 레지스트리를 알게 되었다. 이전에 단순히 스프링이 싱글톤 scope으로 객체를 관리하여 여러 요청이 동시에 들어오는 환경에서 안정적으로 서비스할 수 있다는 장점을 들었지만 싱글톤 패턴과 어떻게 다른지 알지 못했다.&lt;/li&gt;
&lt;li&gt;그래서 알아보자 🙌&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-싱글톤-패턴이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80&quot; aria-label=&quot; 싱글톤 패턴이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 싱글톤 패턴이란?&lt;/h2&gt;
&lt;h3 id=&quot;왜-싱글톤-패턴이어야-할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%B4%EC%96%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 싱글톤 패턴이어야 할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 싱글톤 패턴이어야 할까&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하나의 서버에 초당 수많은 요청이 도착하고 처리되어야 한다. 요청이 올 때마다 서버에서 관련 객체를 생성하는 것은 굉장히 큰 오버헤드이다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떤 오버헤드가 발생할 수 있을까 ?&lt;/p&gt;
&lt;p&gt;주로 서버는 여러 계층의 레이어를 지나고 여러 비지니스 오브젝트들이 협력하여 요청을 처리한다.&lt;/p&gt;
&lt;p&gt;요청 하나당 대충 5개 정도의 오브젝트가 생성되고, 초딩 300개의 요청, 1분에 18000개의 요청이 발생한다면 18000 * 5 만큼의 새로운 오브젝트가 생성된다.&lt;/p&gt;
&lt;p&gt;오브젝트 생성도 비용이지만 생성된 오브젝트를 처리하여 메모리를 관리하는 GC도 오버헤드다. (GC의 동작원리를 살펴보자 🙌)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 스프링은 요청을 서비스 해주는 객체를 하나만 만들고 그것을 공유할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;하나의 객체만 생성하여 공유할 수 있는 것이 싱글톤 패턴이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;싱글톤-패턴이-가지고-있는-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%B4-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8A%94-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;싱글톤 패턴이 가지고 있는 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;싱글톤 패턴이 가지고 있는 단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;private 생성자 이므로 상속이 불가능하여 객체지향의 특징을 활용할 수 없다.&lt;/li&gt;
&lt;li&gt;싱글톤은 테스트하기 어려우며 서버환경에서 동시에 여러 요청이 들어오기 때문에 하나만 만들어지는 것을 보장할 수 없다.
&lt;ul&gt;
&lt;li&gt;싱글톤 객체는 만들어지는 방식이 제한적이므로 Mock 객체로 대체하는 것이 어렵다. 또한 생성자로 다이나믹하게 의존 객체를 주입하기 어렵기 때문에 일부 대체하려는 경우 해당 오브젝트를 테스트용으로 아예 만들어서 사용할 수밖에 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;싱글톤은 전역상태를 만들기 때문에 객체지향적으로 보았을 때 바람직하지 못하다.
&lt;ul&gt;
&lt;li&gt;static 필드와 메서드를 사용하며 싱글톤을 static 메서드를 통해 어느 곳에서든 접근할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-싱글톤-레지스트리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC&quot; aria-label=&quot; 싱글톤 레지스트리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 싱글톤 레지스트리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스프링은 위에서 언급한 이유로 특정 서비스 객체들(빈)을 싱글톤으로 만든다. 하지만 위에서 나온 싱글톤 패턴을 그대로 사용하기보다 단점을 보완한 상태를 사용한다.&lt;/li&gt;
&lt;li&gt;싱글톤 패턴의 단점을 보완하기 위해 나온 것이 스프링의 &lt;strong&gt;싱글톤 레지스트리&lt;/strong&gt;이다. 스프링 컨테이너가 싱글톤 레지스트리의 역할을 하여 빈을 싱글톤으로 관리한다.
&lt;ul&gt;
&lt;li&gt;private 생성자로 객체의 생성을 막는 방법이 아니라 일반 자바 클래스를 싱글톤으로 활용할 수 있도록 지원한다.&lt;/li&gt;
&lt;li&gt;생성, 관계설정, 사용에 대한 제어권이 컨테이너에게 있기 때문에 일반 자바 클래스도 싱글톤으로 관리될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;public 생성자를 사용할 수 있기 때문에 필요하다면 새로운 오브젝트를 생성하고 Mock 오브젝트로 대체하는 등의 작업을 할 수 있다.&lt;/li&gt;
&lt;li&gt;객체지향적 설계와 디자인 패턴 적용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;--싱글톤이기-때문에-주의할-점-️&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#--%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%B4%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90-%EF%B8%8F&quot; aria-label=&quot;  싱글톤이기 때문에 주의할 점 ️ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩  싱글톤이기 때문에 주의할 점 ‼️&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;멀티 스레드 환경에서 여러 스레드가 싱글톤에 동시접근 할 수 있기 때문에 상태 관리를 주의해야한다.
&lt;ul&gt;
&lt;li&gt;대부분은 stateless하게 만들어져야 한다. 내부 상태값의 동시수정이 이루어지는 경우 매우 위험하기 때문이다.(읽기 전용은 제외)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;싱글톤에서 필요한 정보는 상태없이 어떻게 관리할까?
&lt;ul&gt;
&lt;li&gt;파라미터, 로컬 변수, 리턴 값 등을 이용한다.&lt;/li&gt;
&lt;li&gt;위 변수들은 스택 영역에 독립적으로 저장이 되기 때문에 스레드마다 분리되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-스프링의-빈의-scope는-모두-싱글톤일까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EB%B9%88%EC%9D%98-scope%EB%8A%94-%EB%AA%A8%EB%91%90-%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot; 스프링의 빈의 scope는 모두 싱글톤일까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 스프링의 빈의 scope는 모두 싱글톤일까&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;우선, scope 란?
&lt;ul&gt;
&lt;li&gt;scope는 범위라는 뜻의 용어이고 여기서는 스프링의 빈이 &lt;strong&gt;1) 언제 생성되고 2) 언제까지 존재하며 3) 어디까지 적용되는지&lt;/strong&gt;를 말한다.&lt;/li&gt;
&lt;li&gt;기본적인 스프링 빈의 scope는 싱글톤이며 빈의 생명주기는 스프링 컨테이너와 함께한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이외의 scope도 존재한다!
&lt;ul&gt;
&lt;li&gt;프로토타입 Prototype scope
&lt;ul&gt;
&lt;li&gt;컨테이너에 빈을 요청할 때마다 매번 새로운 오브젝트를 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;요청 Request scope
&lt;ul&gt;
&lt;li&gt;새로운 HTTP 요청이 생길 때마다 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세션 Session scope
&lt;ul&gt;
&lt;li&gt;웹의 세션과 유사하게 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yjksw/jwp-dashboard-mvc&quot;&gt;Spring MVC를 직접 구현해보는 미션&lt;/a&gt;에서 component scanning으로 빈을 등록했던 것을 떠올리며 위 개념을 학습했더니 더 와닿았다.&lt;/li&gt;
&lt;li&gt;기존의 싱글톤 패턴이 안티패턴인데 멀티 스레드 환경에서는 싱글톤을 사용해야하는 것을 스프링 컨테이너로 해결한 것이 신선했다.&lt;/li&gt;
&lt;li&gt;스프링은 프레임워크이고 프레임워크에 종속적일수록 자바의 이점을 활용하기 어렵다고 생각했는데 이제야 조금씩 &lt;em&gt;토비의 스프링&lt;/em&gt;에서 스프링 프레임워크가 자바의 객체지향적인 장점을 잘 살릴 수 있는 프레임워크라고 한 것이 이해되는 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;토비의 스프링&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80&quot;&gt;🌩 싱글톤 패턴이란?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%B4%EC%96%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot;&gt;왜 싱글톤 패턴이어야 할까&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%B4-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8A%94-%EB%8B%A8%EC%A0%90&quot;&gt;싱글톤 패턴이 가지고 있는 단점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC&quot;&gt;🌩 싱글톤 레지스트리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#--%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%B4%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90-%EF%B8%8F&quot;&gt;🌩  싱글톤이기 때문에 주의할 점 ‼️&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EB%B9%88%EC%9D%98-scope%EB%8A%94-%EB%AA%A8%EB%91%90-%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%BC%EA%B9%8C&quot;&gt;🌩 스프링의 빈의 scope는 모두 싱글톤일까&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🛋 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[내가 꿈꾸는 프로그래머에 대해 궁금한 사람들은 보시오 🙌]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/goal-as-programmer/</link><guid isPermaLink="false">https://yjksw.github.io/goal-as-programmer/</guid><pubDate>Wed, 27 Oct 2021 12:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 우아한테크코스 막바지 글쓰기 미션 때 제출한 글 입니다. 진솔한 마음으로 써서 올려봅니다 😶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;내가-꿈꾸는-프로그래머로서의-삶&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%B4%EA%B0%80-%EA%BF%88%EA%BE%B8%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%82%B6&quot; aria-label=&quot;내가 꿈꾸는 프로그래머로서의 삶 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내가 꿈꾸는 프로그래머로서의 삶&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;처음 프로그래머를 꿈꾸게 된 명확한 이유가 있다. 프로그래밍은 많은 사람에게 영향을 줄 수 있는 가장 좋은 도구이기 때문이다. 나이가 많거나 적거나, 물질적으로 풍요롭거나 아니거나, 어떤 언어를 쓰거나 상관없이 대부분의 사람은 기술을 접할 수 있는 기기를 하나씩 가지고 있다. 한 애플리케이션을 전 세계가 쓰기도 하고, 특정 플랫폼을 통해 콘텐츠가 확 퍼지기도 한다. 그렇기에 내가 꿈꾸는 프로그래머로의 삶은 많은 사람에게 선한 영향력을 끼치는 것이다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;굉장히 붕 뜬 이상주의자처럼 들릴 수도 있지만 사실 나는 그런 사람은 아니다. 한때 MBTI 검사를 하면 감정을 나타내는 수치인 F가 빵점이 나올 정도로 (지금은 많이 바뀌었다) 기본이 이성적인 사람이다. 흔히 이성적이며 현실적인 사람에 대해서 이야기할 때 부정적이고 “현실적으로 안 된다”라고 말하는 사람이라고 형용한다. 나도 그런 사람 중 일인자라고 자부할 수 있는 사람이었는데, 그렇지 않은 현실을 만들고 그 현실 속에서 살아가는 좋은 사람들을 만나면서 바뀌었다. 그리고 누군가에게 이렇다 할 변화를 만들어내는 것도 현실에 안주하지 않고 그 이상을 꿈꾸는 사람들이라는 것을 목격하면서 내 가치관이 변했다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;그렇다고 붕 뜨면서 말도 안 되는 꿈만 꾸는 것은 아무래도 적성에 맞지 않는다. 곰곰이 고민해보았을 때 꿈을 현실로 만들 방법 중 가장 현실적이며 합리적인 리소스로 실현할 수 있는 방법이 프로그래밍이라고 생각했다. 지금은 그 프로그래밍에 대한 역량을 키워야 할 때다. 선한 목적과 꿈이 실력을 키워주지는 않는다. 다만 분명한 목적이 있다면 그것이 없는 다른 이들보다 훨씬 멀리 오래 갈 수 있을 거라 생각한다. 괜히 부푼 꿈만 말하면서 상응하는 실력이 없는 사람이 되기는 싫다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;프로그래밍을 처음 시작한 때부터 지금까지 내 가치관이 불분명했던 적은 없다. 나에게 프로그래밍은 그 자체가 목적이기보다 선한 목적을 이루기 위한 좋은 도구이다. 그 때문에 내 블로그 이름도 &lt;em&gt;FromCoding&lt;/em&gt; 코딩으로 시작되는 무언가를 암시하는 이름으로 정했다. 깃헙에 소개 글도 마찬가지이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;일상에 스미는 좋은 기술로 사람이 사람을 돕는 문화를 꿈꾸는 개발자입니다👩‍💻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘날에는 누구든지 기술을 사용하기 때문에 프로그래밍은 일상에 침투하기 가장 좋은 수단이다. 무언가가 많은 사람의 일상이 되면 그것은 하나의 문화가 된다. 마치 배달의 민족이 배달문화를 만들고 당근마켓이 또 하나의 문화가 된 것처럼 말이다. 그것이 선한 문화라면 사람이 사람을 돕는 가장 자연스러운 방법일 것이다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;마지막으로 쑥스러운 마음에 굳이 밝히지 않았던 &lt;em&gt;코다&lt;/em&gt;라는 별명에 내재된 뜻을 말해보려고 한다. 누가 물어보면 그냥 우리 집 고양이 이름이라고 소개했지만 (맞는 말이긴 하다) ‘코딩이 다가 아닌 개발자’라는 나만의 의미를 담고 있다. 코딩이 다가 아니라 그것이 끼치는 영향까지 고려하는 개발자, 그래서 항상 선한 뜻을 실현하고자 하는 개발자가 내가 꿈꾸는 프로그래머로의 삶이다. 일단 코딩이 다가 아니라면 적어도 코딩은 잘해야 한다는 뜻이기도 하다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;마지막 글이라고 나름의 인생관을 적어보자면 나는 아무래도 나 혼자 행복하자고 사는 삶은 좀 시시한 것 같다. 언젠가는 끝나는 인생이기도 하고 행복 자체가 목적이라면 행복의 그릇을 조금 줄인다면 금방 행복해질 수 있다. (나만 해도 좋은 사람들과 때 되면 밥을 먹을 수 있기만 해도 매우 행복….) 또 나 혼자 잘 살기에는 세상에는 너무 많은 사람이 함께 살고 있다. 아직 걸음마 단계를 거치고 있는 예비 프로그래머이지만 내 꿈을 실현하기 위해 가장 좋은 방법을 찾고 열심히 발전하고 있는 것 같아서 나름 뿌듯하다. 그 과정이 재미있는 건 덤이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Springboot의 TestRestTemplate 알아보기]]></title><description><![CDATA[다음은 TestRestTemplate 링크 를 번역하면서 공부한 글입니다. 🙌 기존에 RestTemplate을 활용하여 통합테스트를 많이 했을 것이다. 스프링부트에는 굉장히 비슷하게 동작하는 TestRestTemplate…]]></description><link>https://yjksw.github.io/spring-boot-testresttemplate/</link><guid isPermaLink="false">https://yjksw.github.io/spring-boot-testresttemplate/</guid><pubDate>Sun, 24 Oct 2021 13:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;a href=&quot;%5Bhttps://www.baeldung.com/spring-boot-testresttemplate%5D(https://www.baeldung.com/spring-boot-testresttemplate)&quot;&gt;TestRestTemplate 링크&lt;/a&gt; 를 번역하면서 공부한 글입니다. 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt; 
&lt;p&gt;기존에 RestTemplate을 활용하여 통합테스트를 많이 했을 것이다. 스프링부트에는 굉장히 비슷하게 동작하는 TestRestTemplate이 있다.
두가지 모두 통합테스트에서 유용하며 HTTP API를 다룰 수 있다. TestRestTemplate의 예시를 한번 들여다보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt; testRestTemplate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testRestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;FOO_RESOURCE_URL &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RestTemplate과 거의 유사한 형테를 지니고 있다. 하지만 TempRestTemplate은 RestTemplate을 확장하지 않으며 몇가지 다른 기능을 제공한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-testresttemplate은-무엇이-다를까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-testresttemplate%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%BC%EA%B9%8C&quot; aria-label=&quot; testresttemplate은 무엇이 다를까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 TestRestTemplate은 무엇이 다를까?&lt;/h2&gt;
&lt;h3 id=&quot;1-auth-credentials을-설정할-수-있는-생성자를-제공한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-auth-credentials%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 auth credentials을 설정할 수 있는 생성자를 제공한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Auth Credentials을 설정할 수 있는 생성자를 제공한다.&lt;/h3&gt;
&lt;p&gt;TestRestTemplate을 생성할 때 기본 authentication을 설정하여 생성할 수 있다. 그러면 해당 인스턴스를 활용한 모든 요청이 해당 credential이 적용된 채로 수행된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt; testRestTemplate
 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;passwd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testRestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;URL_SECURED_BY_AUTHENTICATION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;2-httpclientoption을-제공하는-생성자를-제공한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-httpclientoption%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 httpclientoption을 제공하는 생성자를 제공한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. HttpClientOption을 제공하는 생성자를 제공한다.&lt;/h3&gt;
&lt;p&gt;기타 다른 Http 옵션등을 설정할 수 있다. Enum을 제공하며 &lt;code class=&quot;language-text&quot;&gt;ENABLE_COOKIES&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;ENABLE_REDIRECTS&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;SSL&lt;/code&gt; 이 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt; testRestTemplate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token string&quot;&gt;&quot;passwd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HttpClientOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ENABLE_COOKIES&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testRestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;URL_SECURED_BY_AUTHENTICATION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;3-새로운-메소드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%A9%94%EC%86%8C%EB%93%9C&quot; aria-label=&quot;3 새로운 메소드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 새로운 메소드&lt;/h3&gt;
&lt;p&gt;생성자 뿐 아니라 &lt;code class=&quot;language-text&quot;&gt;withBasicAuth()&lt;/code&gt; 라는 메소드를 통해서 authentication을 추가할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt; testRestTemplate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testRestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withBasicAuth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;passwd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;URL_SECURED_BY_AUTHENTICATION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;-resttemplate과-testresttemplate-둘다-사용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-resttemplate%EA%B3%BC-testresttemplate-%EB%91%98%EB%8B%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot; resttemplate과 testresttemplate 둘다 사용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 RestTemplate과 TestRestTemplate 둘다 사용하기&lt;/h2&gt;
&lt;p&gt;TestRestTemplate은 RestTemplate의 wrapper로 활용될 수 있다. 예를 들어 이미 restTemplate으로 구현된 레거시 코드가 있다면 wrapper로 TestRestTemplate으로 전환해 손쉽게 사용이 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;RestTemplateBuilder&lt;/span&gt; restTemplateBuilder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RestTemplateBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
restTemplateBuilder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;restTemplate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt; testRestTemplate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestRestTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;restTemplateBuilder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testRestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  FOO_RESOURCE_URL &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;-결론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot; 결론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 결론&lt;/h2&gt;
&lt;p&gt;TestRestTemplate은 단순히 RestTemplate의 확장버전이 아니다. 오히려 더 간단하게 통합테스트를 할 수 있고 유용하게 authentication을 설정할 수 있는 대체안이다. Apache Http 클라이언트를 커스텀할 수 있으며 RestTemplate의 wrapper 클래스로도 활용될 수 있다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-testresttemplate%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%BC%EA%B9%8C&quot;&gt;🌩 TestRestTemplate은 무엇이 다를까?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-auth-credentials%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4&quot;&gt;1. Auth Credentials을 설정할 수 있는 생성자를 제공한다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-httpclientoption%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4&quot;&gt;2. HttpClientOption을 제공하는 생성자를 제공한다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%A9%94%EC%86%8C%EB%93%9C&quot;&gt;3. 새로운 메소드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-resttemplate%EA%B3%BC-testresttemplate-%EB%91%98%EB%8B%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;🌩 RestTemplate과 TestRestTemplate 둘다 사용하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B2%B0%EB%A1%A0&quot;&gt;🌩 결론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Springboot 테스트 다시 한번 알아보기_중요한 건 여러 번 😊]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/spring-boot-test-2/</link><guid isPermaLink="false">https://yjksw.github.io/spring-boot-test-2/</guid><pubDate>Sat, 23 Oct 2021 13:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음 &lt;a href=&quot;%5Bhttps://www.baeldung.com/spring-boot-testing%5D(https://www.baeldung.com/spring-boot-testing)&quot;&gt;링크&lt;/a&gt;를 읽고 정리한 내용입니다 🙌 &lt;br&gt; 이전에 작성했던 &lt;a href=&quot;https://yjksw.github.io/spring-boot-test/&quot;&gt;글&lt;/a&gt;이 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;스프링부트에서 지원하는 여러 테스팅 기법들을 통해서 단위 테스트나 스프링 컨텍스트를 띄우는 통합 테스트를 진행할 수 있다.
사전 준비로는 스프링부트 프로젝트에 &lt;code class=&quot;language-text&quot;&gt;org.springframwork.boot.spring-boot-start-test&lt;/code&gt; 의존성을 추가해야한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-springboottest-통합테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-springboottest-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot; springboottest 통합테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 @SpringBootTest 통합테스트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;통합테스트는 어플리케이션의 여러 레이어의 통합 로직을 테스트 하는 것이다. 따라서 mocking을 하지 않는다.&lt;/li&gt;
&lt;li&gt;원칙적으로는 통합테스트는 단위테스트와 분리되어 있어야하며 실행 또한 분리해서 실행해야 한다. 다른 profile 환경으로 나누고 통합테스트만을 분리하여 실행해야한다.
&lt;ul&gt;
&lt;li&gt;이렇게 해야하는 이유 중 하나는 통합 테스트는 어플리케이션 컨텍스트를 띄우는 작업을 필요로 하기 때문에 상대적으로 긴 시간이 소요된다.&lt;/li&gt;
&lt;li&gt;또한 실제 데이터베이스의 실행을 필요로 하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt; 은 컨테이너 전체를 띄우는데 유용하다. 이 어노테이션은 테스트에 사용될 ApplicationContext를 생성하여 테스트를 진행한다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;SpringBootTest.webEnvironment.MOCK&lt;/code&gt; 을 통해 mock 서블릿 환경에서 컨테이너를 실행할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@TestPropertySource&lt;/code&gt; 어노테이션을 통해 properties 파일을 지정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-testconfiguration-을-활용한-테스트-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-testconfiguration-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95&quot; aria-label=&quot; testconfiguration 을 활용한 테스트 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 @TestConfiguration 을 활용한 테스트 설정&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;는 어플리케이션 컨텍스트 전체를 띄우는 것이기 때문에 &lt;code class=&quot;language-text&quot;&gt;@Autowired&lt;/code&gt; 를 통해 자동주입하는 bean 은 모두 컴포넌트 스캔을 통한다는 것이다.&lt;/li&gt;
&lt;li&gt;하지만 테스트를진행하면서실제 어플리케이션 컨텍스트와 다른 테스트용 설정 빈들을 주입하고 싶을 수 있다. 이때 &lt;code class=&quot;language-text&quot;&gt;@TestConfiguration&lt;/code&gt; 어노테이션을 활용한다.&lt;/li&gt;
&lt;li&gt;사용하는 방법은 2가지 이다.
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;static inner class&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplIntegrationTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@TestConfiguration&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplTestContextConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;employeeService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token comment&quot;&gt;// implement methods&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt; employeeService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;separated test configuration class&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@TestConfiguration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplTestContextConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;employeeService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;token comment&quot;&gt;// implement methods &lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@TestConfiguration&lt;/code&gt;이 명시된 클래스는 component scanning에서 제외되어 있다. 따라서 해당 설정을 사용하고 싶은 테스트에 &lt;code class=&quot;language-text&quot;&gt;@Import&lt;/code&gt; 어노테이션을 통해 명시해주어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplTestContextConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplIntegrationTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt; employeeService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// remaining class code&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-mockbean-을-활용한-모킹&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-mockbean-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%AA%A8%ED%82%B9&quot; aria-label=&quot; mockbean 을 활용한 모킹 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 @MockBean 을 활용한 모킹&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;특정 layer의 로직만 테스트하고 싶은 경우 해당 layer나 클래스가 의존하고 있는 다른 빈의 동작에 대해서는 크게 상관하고 싶지 않을때가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;@MockBean&lt;/code&gt;을 활용하여 실제 의존 빈을 사용하는 것이 아니라 해당 빈이 지정된 값을 반환하도록 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplIntegrationTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@TestConfiguration&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImplTestContextConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;employeeService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeService&lt;/span&gt; employeeService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EmployeeRepository&lt;/span&gt; employeeRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// write test cases here&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 다음과 같이 &lt;code class=&quot;language-text&quot;&gt;EmployeeRepository&lt;/code&gt; 의 행동을 지정하고  테스트를 돌리면 EmployeeService 에서 repository 부분은 지정한 것과 같이 행동한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; alex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;employeeRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;whenValidName_thenEmployeeShouldBeFound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; employeeService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEmployeeByName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
     &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;found&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-datajpatest-를-활용한-통합테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-datajpatest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot; datajpatest 를 활용한 통합테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 @DataJpaTest 를 활용한 통합테스트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Persistence layer를 테스트하고 JPA를 사용하고 있다면 &lt;code class=&quot;language-text&quot;&gt;@DataJpaTest&lt;/code&gt; 어노테이션이 해당 레이어를 테스트하는 여러 세팅을 해준다.
&lt;ul&gt;
&lt;li&gt;H2 설정&lt;/li&gt;
&lt;li&gt;Hibernate, Spring Data, Datasource 설정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@EntityScan&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;SQL 로깅 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;테스트 이전에 데이터베이스에 테스트 데이터를 미리 넣을 수 있도록 &lt;code class=&quot;language-text&quot;&gt;TestEntityManager&lt;/code&gt;를 활용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-webmvctest-를-활용한-단위-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-webmvctest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot; webmvctest 를 활용한 단위 테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 @WebMvcTest 를 활용한 단위 테스트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주로 Controller는 Serivce에 의존한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller에 대한 단위테스트를 진행하기 위해서는 service layer 코드를 모킹해야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이때 &lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt; 어노테이션을 활용할 수 있다. 이 어노테이션은 Spring MVC 인프라를 자동으로 설정해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주로 &lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt; 하나의 컨트롤러에 국한되며 &lt;code class=&quot;language-text&quot;&gt;@MockBean&lt;/code&gt; 어노테이션을 활용해 의존 객체를 모킹할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt; 는 또한 &lt;code class=&quot;language-text&quot;&gt;MockMvc&lt;/code&gt; 에 대한 자동설정을 해 전체 HTTP 서버를 구동하지 않고 MVC 컨트롤러를 테스트할 수 있도록 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;givenEmployees_whenGetEmployees_thenReturnJsonArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; alex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; allEmployees &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAllEmployees&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;allEmployees&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    mvc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/employees&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APPLICATION_JSON&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$[0].name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-각종-자동화-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B0%81%EC%A2%85-%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot; 각종 자동화 테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 각종 자동화 테스트&lt;/h2&gt;
&lt;p&gt;스프링부트에서는 전체 어플리케이션의 일부분을 로딩하고 특정 레이어만 테스트할 수 있는 자동화 어노테이션을 많이 제공한다. 설명한 몇가지를 소개해보려보 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@JdbcTest : JPA 어플리케이션을 테스트하는데 사용될 수 있다. 하지만 이 어노테이션이 사용되는 테스트는 DataSource를 필요로하는 테스트 이다.&lt;/li&gt;
&lt;li&gt;@DataRedisTest : Redis 어플리케이션을 테스트할 수 있는 어노테이션이다. @RedisHash 클래스를 스캔하고 Spring Data Redis 레포지토리를 default 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80%EC%A0%90&quot; aria-label=&quot; 느낀점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛋 느낀점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스프링부트 테스트는 &lt;a href=&quot;https://yjksw.github.io/spring-boot-test/&quot;&gt;이전 글&lt;/a&gt;에서도 한번 다루었던 이야기 이다. 다시 한번 쓰게 된 이유는 &lt;a href=&quot;https://github.com/yjksw/jwp-refactoring&quot;&gt;레거시 리팩토링 미션&lt;/a&gt;을 진행하면서 코드를 보호하는 테스트의 정도에 대한 고민이 되었기 때문이다.&lt;/li&gt;
&lt;li&gt;테스트를 작성할수록 어느정도의 테스트까지 작성하는 것이 좋은지는 정답이 없는 것 같다. 다만 테스트 코드 내에서 모순이 있어 항상 성공하는 테스트를 만들지 않기 위해서 주의해야한다. 또한 실패하는 케이스에 대한 작성도 꼼꼼히 해야 한다.&lt;/li&gt;
&lt;li&gt;테스트코드는 다다익선일까 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-springboottest-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;🌩 @SpringBootTest 통합테스트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-testconfiguration-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95&quot;&gt;🌩 @TestConfiguration 을 활용한 테스트 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-mockbean-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%AA%A8%ED%82%B9&quot;&gt;🌩 @MockBean 을 활용한 모킹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-datajpatest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;🌩 @DataJpaTest 를 활용한 통합테스트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-webmvctest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;🌩 @WebMvcTest 를 활용한 단위 테스트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-%EA%B0%81%EC%A2%85-%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;🌩 각종 자동화 테스트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80%EC%A0%90&quot;&gt;🛋 느낀점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[내가 또 보기 위한 TCP 혼잡제어]]></title><description><![CDATA[🌩 왜 혼잡제어가 필요할까? 라우터에 패킷이 몰리면 패킷이 유실되고 패킷을 재전송 하면서 네트워크는 더 혼잡해진다. 송신측에서 이러한 문제를 해결하기 위해 전송속도를 줄이는 혼잡 제어를 사용한다. 🌩 AIMD Additive Increase…]]></description><link>https://yjksw.github.io/tcp-congestion-control/</link><guid isPermaLink="false">https://yjksw.github.io/tcp-congestion-control/</guid><pubDate>Fri, 22 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-왜-혼잡제어가-필요할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%99%9C-%ED%98%BC%EC%9E%A1%EC%A0%9C%EC%96%B4%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C&quot; aria-label=&quot; 왜 혼잡제어가 필요할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 왜 혼잡제어가 필요할까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;라우터에 패킷이 몰리면 패킷이 유실되고 패킷을 재전송 하면서 네트워크는 더 혼잡해진다.&lt;/li&gt;
&lt;li&gt;송신측에서 이러한 문제를 해결하기 위해 전송속도를 줄이는 혼잡 제어를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-aimd&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-aimd&quot; aria-label=&quot; aimd permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 AIMD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Additive Increase, Mutiplicative Decrese&lt;/li&gt;
&lt;li&gt;패킷을 하나씩 보내고 문제없이 도착하면 window 크기를 1개씩 증가한다.&lt;/li&gt;
&lt;li&gt;패킷 전송에 실패하면 속도를 절반으로 줄인다.&lt;/li&gt;
&lt;li&gt;이 경우 나중에 네트워크에 진입한 쪽이 처음에는 불리하지만 점점 동일한 평형상태가 되기 때문에 공정하다.&lt;/li&gt;
&lt;li&gt;네트워크 혼잡을 미리 감지하지는 못하고 혼잡하면 대역폭을 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139091747-767ffc1e-b9a7-4894-9445-17930ef59391.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-slow-start&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-slow-start&quot; aria-label=&quot; slow start permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Slow Start&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AIMD는 처음 전송속도를 올리는 것이 너무 느리다는 단점이 있다.&lt;/li&gt;
&lt;li&gt;slow start는 처음에는 문제가 없다면 윈도우 사이즈를 지수함수꼴로 증가한다.&lt;/li&gt;
&lt;li&gt;혼잡 현상이 발생하면 window사이즈를 1로 떨어뜨린다. 하지만 이때는 네트워크의 혼잡율을 어느정도 예상할 수 있다.&lt;/li&gt;
&lt;li&gt;따라서 혼잡 현상이 발생했던 window size의 크기의 반까지 지수함수 꼴로 증가시키고 이후부터 1씩 완만하게 증기시킨다. (임계점에 다다르면 지수함수는 너무 급격하므로 1씩 윈도우를 증가시킨다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139091821-279101d0-e464-4644-a803-3ea6a7c2a678.png&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139091877-c00e5fdd-d52f-4280-9f76-3ba9587b225a.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-fast-retransmit-빠른-재전송&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-fast-retransmit-%EB%B9%A0%EB%A5%B8-%EC%9E%AC%EC%A0%84%EC%86%A1&quot; aria-label=&quot; fast retransmit 빠른 재전송 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Fast Retransmit 빠른 재전송&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;패킷을 받는 쪽에서 패킷이 도착하지 않고 다음 패킷이 도착하더라도 ACK를 보내는데 이때 잘 도착한 패킷의 다음 패킷을 ACK로 보낸다.&lt;/li&gt;
&lt;li&gt;그러면 중복된 ACK 패킷이 계속 도착하므로 이때는 문제가 된 순번의 패킷을 재전송 해줄수 있다.&lt;/li&gt;
&lt;li&gt;중복된 패킷을 3개 받으면 재전송을 하는데, 혼잡임을 감지하고 window size를 반으로 줄이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139092293-9e27653f-f3aa-44fd-867c-c2327be7b57f.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-fast-recovery-빠른-회복&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-fast-recovery-%EB%B9%A0%EB%A5%B8-%ED%9A%8C%EB%B3%B5&quot; aria-label=&quot; fast recovery 빠른 회복 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Fast Recovery 빠른 회복&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;혼잡한 상태가 되면 window를 1이 아닌 반으로 줄이고 선형증가시킨다.&lt;/li&gt;
&lt;li&gt;혼잡상황을 한번 겪으면 순수 AIMD 방식으로 동작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-tcp-reno&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-tcp-reno&quot; aria-label=&quot; tcp reno permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 TCP Reno&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위 기법들을 사용한 TCP 혼잡제어이다.&lt;/li&gt;
&lt;li&gt;먼저 slow start로 시작하고 임계점을 넘어가면 1씩 설정하여 윈도우 사이즈를 높인다.&lt;/li&gt;
&lt;li&gt;위의 3 ACK Duplicated와 타임아웃을 구분하여 각기 다른 방식을 취한다.
&lt;ul&gt;
&lt;li&gt;3 ACK Duplicated라면 윈도우 사이즈를 반으로 줄이고 선형적으로 증가시킨다.&lt;/li&gt;
&lt;li&gt;타임아웃이 발생하면 윈도우 크기를 1로 줄이고 slow start를 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139091995-e0f1f659-47c8-486a-b7c4-d9ddc7ee2c9a.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://evan-moon.github.io/2019/11/26/tcp-congestion-control/&quot;&gt;https://evan-moon.github.io/2019/11/26/tcp-congestion-control/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EC%99%9C-%ED%98%BC%EC%9E%A1%EC%A0%9C%EC%96%B4%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C&quot;&gt;🌩 왜 혼잡제어가 필요할까?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-aimd&quot;&gt;🌩 AIMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-slow-start&quot;&gt;🌩 Slow Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-fast-retransmit-%EB%B9%A0%EB%A5%B8-%EC%9E%AC%EC%A0%84%EC%86%A1&quot;&gt;🌩 Fast Retransmit 빠른 재전송&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-fast-recovery-%EB%B9%A0%EB%A5%B8-%ED%9A%8C%EB%B3%B5&quot;&gt;🌩 Fast Recovery 빠른 회복&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-tcp-reno&quot;&gt;🌩 TCP Reno&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[내가 또 보기 위한 운영체제 Deadlock]]></title><description><![CDATA[💡 INTRO 팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 10…]]></description><link>https://yjksw.github.io/os-deadlock/</link><guid isPermaLink="false">https://yjksw.github.io/os-deadlock/</guid><pubDate>Fri, 22 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다.&lt;/li&gt;
&lt;li&gt;실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다.&lt;/li&gt;
&lt;li&gt;기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다.&lt;/li&gt;
&lt;li&gt;따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다.&lt;/li&gt;
&lt;li&gt;따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-keywords&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-keywords&quot; aria-label=&quot; keywords permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 KEYWORDS&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  교착상태 특징
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  필요 조건들&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  자원 할당 그래프 ..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  교착상태 처리 방법
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  교착상태 예방
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  상호 배제 Mutual Exclusion&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  점유하여 대기 Hold and Wait&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  비선점 No Preemption&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  순환 대기 Circular Wait&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  교착상태 회피
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  안전 상태 Safe State&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  자원 할당 그래프 알고리즘 Resource-Allocation Graph Algorithm&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  은행원 알고리즘 Banker’s Algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  교착상태 탐지 Deadlock Detection&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  교착상태 회복
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  프로세스 종료 Process Termination&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  자원 선점 Resource Preemption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-교착상태-deadlock&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-deadlock&quot; aria-label=&quot; 교착상태 deadlock permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 교착상태 Deadlock&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;둘 이상의 프로세스 혹은 스레드가 다른 프로세스/스레드가 가지고 있는 자원을 기다리면서 무한대기 루프에 빠지는 것이다.&lt;/li&gt;
&lt;li&gt;자원은 I/O 디바이스, CPU cycle, 메모리, 세마포어 등등&lt;/li&gt;
&lt;li&gt;예를 들어 바이너리 세마포어 2개가 있는데 2개를 모두 획득해야 임계 영역에 들어갈 수 있다면 교착상태에 빠질 가능성이 생긴다.
&lt;ul&gt;
&lt;li&gt;P0 → P(A); P(B);&lt;/li&gt;
&lt;li&gt;P1 → P(B); P(A);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;발생조건-4가지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%9C%EC%83%9D%EC%A1%B0%EA%B1%B4-4%EA%B0%80%EC%A7%80&quot; aria-label=&quot;발생조건 4가지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;발생조건 4가지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상호 배제
&lt;ul&gt;
&lt;li&gt;한번에 하나의 프로세스만 자원을 사용할 수 있다. 사용하고 싶은 다른 프로세스는 해제할 때까지 기다려야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;점유 대기
&lt;ul&gt;
&lt;li&gt;자원을 하나 보유하고 다른 프로세스에 할당된 자원을 점유하기 위해 대기하는 프로세스가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비선점
&lt;ul&gt;
&lt;li&gt;다른 프로세스에게 할당된 자원을 강제로 빼앗을 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;순환 대기
&lt;ul&gt;
&lt;li&gt;대기 프로세스의 집합이 순환 형태로 자원을 대기하고 있어야 한다. 즉, 원하는 자원을 이어서 순환 사이클이 만들어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 4가지를 모두 만족해야지 데드락이 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;자원-할당-그래프-resource-allocation-graph&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84-resource-allocation-graph&quot; aria-label=&quot;자원 할당 그래프 resource allocation graph permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자원 할당 그래프 Resource Allocation Graph&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 자원 할당 상태를 표현해주는 그래프이다.&lt;/li&gt;
&lt;li&gt;각각 프로세스, 자원이 노드로 있으며 프로세스 → 자원 edge는 프로세스의 자원 요청, 자원 → 프로세스 edge는 해당 프로세스의 자원 소유를 뜻한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;자원 할당 그래프에 사이클이 없으면 데드락이 아니다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;사이클이 있다면 맞을 수도 아닐 수도 있다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;각 리소스 당 하나의 프로세스만 요청을 보내고 있다면 데드락이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 인스턴스가 요청을 보내고 있다면 데드락 가능성이 있는 것이다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139089988-7833eebb-8fc4-4571-8ed8-4bbe254e85cc.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;왼쪽은 데드락, 오른쪽은 데드락이 아니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-교착상태-처리-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot; 교착상태 처리 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 교착상태 처리 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;교착상태 예방
&lt;ul&gt;
&lt;li&gt;자원 할당을 하면서 데드락 발생조건 4가지 중 하나가 일어나지 않도록 하는 것이다.&lt;/li&gt;
&lt;li&gt;자원이 소모되고, 성능이 낮아지며, 기아 현상을 겪을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;교착상태 회피
&lt;ul&gt;
&lt;li&gt;자원 요청의 부가적인 정보를 통해 데드락 가능성이 없는 경우에만 자원을 할당한다.&lt;/li&gt;
&lt;li&gt;보수적으로 자원을 할당하여 시스템에 비효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;교착상태 탐지
&lt;ul&gt;
&lt;li&gt;데드락 발생을 허용하고 탐지가 된다면 데드락을 회복시키는 방법이다.&lt;/li&gt;
&lt;li&gt;탐지하는데 오버헤드가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;교착상태 무시
&lt;ul&gt;
&lt;li&gt;데드락을 시스템이 책임지지 않는다.&lt;/li&gt;
&lt;li&gt;자주 발생하는 상황이 아니므로 대부분은 os는 데드락 무시를 채택한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교착상태-예방&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9&quot; aria-label=&quot;교착상태 예방 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착상태 예방&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상호 배제
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 자원을 공유할 수 있다면 데드락이 발생하지 않지만 공유할 수 없는 상황이므로 이 조건을 배제하기는 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;점유하여 대기 Hold and Wait
&lt;ul&gt;
&lt;li&gt;프로세스가 자원을 소유하면서 다른 자원을 요청할 수 없도록 한다. 애초에 필요한 모든 자원을 할당받거나 일부를 받지 못한 경우 보유 자원을 모두 반납하고 다시 자원을 요청하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비선점 No Preemption
&lt;ul&gt;
&lt;li&gt;만일 한 프로세스가 다른 자원을 기다리는 경우 보유된 자원은 선점되도록 한다.&lt;/li&gt;
&lt;li&gt;모든 자원을 다 얻을 수 있을 때 해당 프로세스가 시작된다.&lt;/li&gt;
&lt;li&gt;상태를 쉽게 저장하고 로딩할 수 있는 자원에서 주로 사용된다. (cpu, memory)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;순환대기 Circular Wait
&lt;ul&gt;
&lt;li&gt;자원에 할당 순서를 정한다. 예를 들어 R1, R2 순서대로 자원을 할당 받도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교착상태-회피&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC&quot; aria-label=&quot;교착상태 회피 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착상태 회피&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;안전 상태 Safe State
&lt;ul&gt;
&lt;li&gt;프로세스가 시작될 때 사용할 자원의 최대 요구량을 알 수 있다.&lt;/li&gt;
&lt;li&gt;현재 가용 자원량을 판단하여 프로세스가 요구한 자원최대량 보다 많을 경우에만 프로세스에게 자원을 할당한다.&lt;/li&gt;
&lt;li&gt;시스템이 safe state에 있다면 데드락이 없고 unsafe state에 있다면 데드락 발생 가능성이 있는 것이다.&lt;/li&gt;
&lt;li&gt;따라서 시스템이 unsafe state에 들어가지 않도록 보장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자원 할당 그래프 알고리즘 Resource-Allocation Graph Algorithm
&lt;ul&gt;
&lt;li&gt;자원 할당 그래프를 보고 사이클이 생기지 않는 경우에만 자원을 할당한다.&lt;/li&gt;
&lt;li&gt;사이클 생성 여부 조사시 O(n^2) 시간이 걸린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;은행원 알고리즘 Banker’s Algorithm
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allocation -  현재 프로세스에 할당된 자원량&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Max - 프로세스가 요구할 수 있는 최대 자원량&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Available - 자원당 가용 자원량&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Need - 프로세스가 현재 추가로 요구할 수 있는 자원량 (Max - Allocation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래 그림에서 P1의 Need는 현재 가용 자원으로 할당될 수 있으나, P1의 최대 자원량보다 현재 갸용 자원량이 적으므로 보수적으로 자원을 할당하지 않는다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139090079-ad692f17-888d-4acd-bc10-ef49b281df84.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교착상태-탐지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%83%90%EC%A7%80&quot; aria-label=&quot;교착상태 탐지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착상태 탐지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데드락이 발생했을 때 그것을 후속처리한다.&lt;/li&gt;
&lt;li&gt;탐지하는 방법
&lt;ul&gt;
&lt;li&gt;만일 자원당 인스턴스가 하나인 경우 → 자원 할당 그래프의 사이클은 데드락이다.
&lt;ul&gt;
&lt;li&gt;wait-for graph 알고리즘 사용
&lt;ul&gt;
&lt;li&gt;자원 할당 그래프와 비슷한 형태이지만 프로세스만 노드로 구성되어 있다.&lt;/li&gt;
&lt;li&gt;P0 → P1은 P0이 P1의 자원을 기다리는 경우이다.&lt;/li&gt;
&lt;li&gt;wait-for graph에 사이클이 존재하는지 주기적으로 조사한다. (O(n^2))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자원당 여러 인스턴스 인 경우 → 은행원 알고리즘과 유사한 방법을 활용한다.
&lt;ul&gt;
&lt;li&gt;자원을 요청하고 있지 않은 프로세스들이 보유한 자원은 반환된 자원이라고 가정한다.&lt;/li&gt;
&lt;li&gt;은행원 알고리즘으로 safe state를 찾아간다. 하지만 safe state를 찾을 수 없다면 데드락이다.&lt;/li&gt;
&lt;li&gt;이때 회복을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;교착상태-회복&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%EB%B3%B5&quot; aria-label=&quot;교착상태 회복 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착상태 회복&lt;/h3&gt;
&lt;p&gt;데드락 회복 2가지 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process Termination 프로세스 죽이기
&lt;ul&gt;
&lt;li&gt;데드락이 걸린 프로세스를 모두 죽인다.&lt;/li&gt;
&lt;li&gt;데드락이 풀릴 때까지 프로세스를 하나씩 죽인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Preemption
&lt;ul&gt;
&lt;li&gt;비용을 최소화 할 victim을 설정하여 해당 프로세스를 재시작한다.&lt;/li&gt;
&lt;li&gt;하지만 동일한 프로세스가 계속 victim으로 선정되면 기아현상이 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;교착상태-무시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C&quot; aria-label=&quot;교착상태 무시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착상태 무시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데드락은 잘 발생하지 않는다.&lt;/li&gt;
&lt;li&gt;만일 발생하면 시스템에 이상해지고 사용자가 알아서 프로세스를 죽이도록 한다.&lt;/li&gt;
&lt;li&gt;데드락을 예방하고 처리하는 것은 시스템 오버헤드가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kpuls.tistory.com/61&quot;&gt;https://kpuls.tistory.com/61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chanhuiseok.github.io/posts/cs-2/&quot;&gt;https://chanhuiseok.github.io/posts/cs-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-keywords&quot;&gt;🌩 KEYWORDS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-deadlock&quot;&gt;🌩 교착상태 Deadlock&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%9C%EC%83%9D%EC%A1%B0%EA%B1%B4-4%EA%B0%80%EC%A7%80&quot;&gt;발생조건 4가지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84-resource-allocation-graph&quot;&gt;자원 할당 그래프 Resource Allocation Graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95&quot;&gt;🌩 교착상태 처리 방법&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9&quot;&gt;교착상태 예방&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC&quot;&gt;교착상태 회피&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%83%90%EC%A7%80&quot;&gt;교착상태 탐지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%EB%B3%B5&quot;&gt;교착상태 회복&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C&quot;&gt;교착상태 무시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[내가 또 보기 위한 운영체제 프로세스 동기화]]></title><description><![CDATA[💡 INTRO 팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 10…]]></description><link>https://yjksw.github.io/process_synchronization/</link><guid isPermaLink="false">https://yjksw.github.io/process_synchronization/</guid><pubDate>Thu, 21 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다.&lt;/li&gt;
&lt;li&gt;실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다.&lt;/li&gt;
&lt;li&gt;기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다.&lt;/li&gt;
&lt;li&gt;따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다.&lt;/li&gt;
&lt;li&gt;따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-keyword&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-keyword&quot; aria-label=&quot; keyword permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 KEYWORD&lt;/h2&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  경쟁 상태 Race Condition&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  임계 영역 문제 The Critical-Section Problem&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  피터슨 해결안 Peterson’s Solution - 소프트웨어 측면&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  &lt;strong&gt;세마포어 Semaphores &amp;#x26; 뮤텍스 Mutex&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt;  동기화 문제들
&lt;ul&gt;
&lt;li&gt;유한 버퍼 문제&lt;/li&gt;
&lt;li&gt;Readers-writers 문제&lt;/li&gt;
&lt;li&gt;식사하는 철학자들 문제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-경쟁-상태-race-condition&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B2%BD%EC%9F%81-%EC%83%81%ED%83%9C-race-condition&quot; aria-label=&quot; 경쟁 상태 race condition permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 경쟁 상태 Race condition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 간은 각기 다른 메모리에 존재하기 때문에 통신을 위해서는 공유 데이터를 사용한다. 또한 커널을 공유자원으로 사용한다.&lt;/li&gt;
&lt;li&gt;이러한 공유 자원에 대해 여러 프로세스가 동시에 접근을 시도한다면 접근하는 프로세스의 순서에 따라서 결과값이 달라져 일관성을 헤친다.&lt;/li&gt;
&lt;li&gt;이러한 상황을 race condition 이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;race-condition-발생하는-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#race-condition-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9&quot; aria-label=&quot;race condition 발생하는 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Race condition 발생하는 상황&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;커널 작업 중 인터럽트 발생
&lt;ul&gt;
&lt;li&gt;커널은 모든 프로세스가 공유하는 부분이기 때문에 race condition이 발생할 수 있다.&lt;/li&gt;
&lt;li&gt;인터럽트 수행 코드가 반영이 되지 않을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 system call로 커널모드일 때 문맥 교환 발생
&lt;ul&gt;
&lt;li&gt;프로세스1이 커널모드에서 데이터를 조작하는 중 시간초과가 되어 문맥 교환이 일어나고 프로세스2가 실행된다.&lt;/li&gt;
&lt;li&gt;프로세스2가 모두 수행한 후 프로세스1이 다시 로드되어 중단되었던 코드를 이어서 실행한다. (이때 저장된 레지스터 값들을 다시 로드하여 이어한다)&lt;/li&gt;
&lt;li&gt;프로세스1이 저장했던 값으로 재진행 후 결과값이 저장되기 때문에 수행되었던 공유 자원에 대한 프로세스2의 수행은 반영되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;멀티 프로세서 환경에서 공유 메모리 내의 커널 데이터에 접근할 때
&lt;ul&gt;
&lt;li&gt;멀티 프로세서는 동시에 작업을 할 수 있는 CPU 처리기가 2대 이상이다.&lt;/li&gt;
&lt;li&gt;두 코어가 동시에 커널 내부의 공유 데이터에 접근하여 조작하는 경우 race condition이 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;경쟁 조건이 발생하기 쉬운 커널 자료구조
&lt;ul&gt;
&lt;li&gt;메모리를 할당하는 자료구조&lt;/li&gt;
&lt;li&gt;프로세스 리스트를 유지하는 자료구조&lt;/li&gt;
&lt;li&gt;인터럽트 처리를 위한 자료구조&lt;/li&gt;
&lt;li&gt;열린 파일 리스트를 저장하는 자료구조 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-임계-영역-문제-the-critical-section-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-%EB%AC%B8%EC%A0%9C-the-critical-section-problem&quot; aria-label=&quot; 임계 영역 문제 the critical section problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 임계 영역 문제 The Critical-Section Problem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;여러 프로세스가 데이터를 공유할 때 각 프로세스에서 공유 데이터를 접근하는 부분의 코드&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 부분을 불분명한 순서나 동시에 작업하는 경우 데이터 일관성을 헤치는 중요한 구역이므로 &lt;strong&gt;임계 영역&lt;/strong&gt;이라고 부른다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기본적으로 공유 데이터를 지키기 위한 운영체제의 특징은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 프로세스가 자신의 임계 영역 (다른 프로세스들과 공유하는 데이터를 조작하는 부분)에서 실행 중이라면 다른 프로세스들은 자신의 임계 영역에 들어갈 수 없다.&lt;/li&gt;
&lt;li&gt;이미 한 프로세스가 공유 데이터를 조작 중이므로 다른 프로세스는 임계 영역에 접근하지 못한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계 영역과 관련하여 대부분의 프로세스는 다음과 같은 코드 구조를 가진다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	// 진입 영역
		
		// 임계 영역

	// 퇴출 영역

		// 나머지 영역
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TRUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;임계-영역-해결안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-%ED%95%B4%EA%B2%B0%EC%95%88&quot; aria-label=&quot;임계 영역 해결안 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;임계 영역 해결안&lt;/h3&gt;
&lt;p&gt;다음 3가지 조건을 충족해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상호 배제 Mutual Exclusion
&lt;ul&gt;
&lt;li&gt;하나의 프로세스가 임계 영역에서 실행 중이라면 다른 프로세스는 자신의 임계 영역에서 실행할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;진행 Process
&lt;ul&gt;
&lt;li&gt;임계 영역이 비어있을 때 진입하고자 하는 프로세스가 있다면 그 중에서 반드시 임계 영역에 진입할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유한 대기 Bounded Waiting
&lt;ul&gt;
&lt;li&gt;한 프로세스가 임계 영역에 진입을 요청했다면 무한으로 기다리지 않고 반드시 들어갈 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;즉, 요청 프로세스가 있다면 진입하고자 하는 다른 프로세스들에게는 제한이 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;운영체제에서-임계-영역을-다루는-2가지-접근&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%97%90%EC%84%9C-%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-2%EA%B0%80%EC%A7%80-%EC%A0%91%EA%B7%BC&quot; aria-label=&quot;운영체제에서 임계 영역을 다루는 2가지 접근 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제에서 임계 영역을 다루는 2가지 접근&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;선점형 커널
&lt;ul&gt;
&lt;li&gt;프로세스가 커널 모드에서 실행되는 동안 선점하는 것을 허용한다.&lt;/li&gt;
&lt;li&gt;경쟁 조건 발생 위험이 있으므로 잘 설계해야 하지만 더 선호하는 커널이다.&lt;/li&gt;
&lt;li&gt;실시간 프로그래밍에 적합하며 민첩한 응답이 가능하다.&lt;/li&gt;
&lt;li&gt;따라서 프로세스 동기화에 대한 내용은 선점형 커널인 경우 그 문제를 해결하는 방법이라고 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비선점형 커널
&lt;ul&gt;
&lt;li&gt;프로세스가 커널 모드에서 실행되는 동안 선점을 허용하지 않는다.&lt;/li&gt;
&lt;li&gt;커널 안에 실행 중인 프로세스가 하나 뿐이기 때문에 경쟁 조건을 염려할 필요가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;-피터슨-알고리즘-petersons-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%94%BC%ED%84%B0%EC%8A%A8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-petersons-algorithm&quot; aria-label=&quot; 피터슨 알고리즘 petersons algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 피터슨 알고리즘 Peterson’s Algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;단 두개의 프로세스에 대한 임계영역의 해결 방법이다.&lt;/li&gt;
&lt;li&gt;임계 영역에 들어가고 싶다면 flag를 true로 바꾼다.&lt;/li&gt;
&lt;li&gt;다른 프로세스에게 차례를 넘긴다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;임계 영역에 들어가기 전에 상대 프로세스가 임계 영역에 접근하고 싶은지 먼저 확인한다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;while(flag[j] &amp;amp;&amp;amp; turn == j);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상대가 자원을 쓰고 싶지 않거나 (⇒ &lt;code class=&quot;language-text&quot;&gt;flag[j] == false&lt;/code&gt;) 내 차례라면 (⇒ &lt;code class=&quot;language-text&quot;&gt;turn ≠ j&lt;/code&gt;) 임계 영역에 들어갈 수 있다.&lt;/li&gt;
&lt;li&gt;상대가 자원을 쓰고 싶고 (⇒ &lt;code class=&quot;language-text&quot;&gt;flag[j] == true&lt;/code&gt;) 상대의 차례라면 (⇒ &lt;code class=&quot;language-text&quot;&gt;turn == j&lt;/code&gt;) while에 갇혀서 임계 영역에 들어가기 전에 대기한다.
&lt;ul&gt;
&lt;li&gt;busy wait 이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;turn&lt;/code&gt; 이 단 하나의 변수이기 때문에 임계 영역 문제를 해결할 수 있는 경우이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  flag&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;			
  turn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				
  while&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; turn &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  // critical section
  
  flag&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  // remainder section

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; while&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;피터슨-알고리즘-증명&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%BC%ED%84%B0%EC%8A%A8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A6%9D%EB%AA%85&quot; aria-label=&quot;피터슨 알고리즘 증명 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;피터슨 알고리즘 증명&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;그렇다면 피터슨 알고리즘은 위 임계 영역 해결안 조건 3가지를 충족할까?&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;상호 배제
&lt;ul&gt;
&lt;li&gt;둘다 지나가고 싶어서 flag 값을 true로 지정하여도 turn인 프로세스만 임계 영역에 들어갈 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;진행
&lt;ul&gt;
&lt;li&gt;하나의 프로세스가 빠져나올 때 해당 프로세스의 flag를 false로 진행하므로 다른 프로세스가 들어갈 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유한 대기
&lt;ul&gt;
&lt;li&gt;j 프로세스가 들어가고 싶을 때 turn은 i로 지정하고 i가 들어가고 싶을 때 그 반대로 지정하므로 반드시 상대 프로세스가 먼저 진입하고 싶다면 할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;때문에 모든 프로세스는 유한 대기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;-세마포어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4&quot; aria-label=&quot; 세마포어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 세마포어&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공유 자원의 접근을 제한하는 방법의 일종이며 자원의 개수 (S)를 통해서 몇개의 프로세스가 진입할 수 있는지를 판단한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두 가지 연산&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 두 연산은 반드시 atomic 하게 실행이 되며 인터럽트 될 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P: 임계 영역에 들어가기 전에 수행&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;P&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	S--&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 진입 여부를 자원 개수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V: 임계 영역에서 나올 때 수행&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;V&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	S++&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;자원을 반납하며 대기 중인 프로세스를 깨운다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 두 연산을 이용해 다음과 같은 흐름으로 진행된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;P&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

//-- 임계 구역 -- //

V&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세마포어는 두 가지로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;카운팅 세마포어
&lt;ul&gt;
&lt;li&gt;세마포어의 값이 양의 정수값을 가지며 이 값만큼의 프로세스 혹은 스레드를 자원에 허락한다.&lt;/li&gt;
&lt;li&gt;동기화 대상이 2개 이상이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이진 세마포어 (⇒  뮤텍스)
&lt;ul&gt;
&lt;li&gt;세마포어 값이 1이며 0, 1 만 가능하다.&lt;/li&gt;
&lt;li&gt;동기화 대상이 2개 뿐이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동작 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;임계 영역에 접근하고 싶은 프로세스 혹은 스레드는 P(S) 를 호출한다.
&lt;ul&gt;
&lt;li&gt;만일 세마포어 값이 0이면 진입할 수 없는 상태이므로 대기한다. (락이 걸린다)&lt;/li&gt;
&lt;li&gt;자원이 해체되면 임계 영역에 들어갈 수 있는데 이때 세마포어 값을 하나 감소시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;임계 영역에서 나오는 프로세스는 V(S)를 호출한다.
&lt;ul&gt;
&lt;li&gt;자원을 반납하므로 세마포어 값을 하나 증가시킨다.&lt;/li&gt;
&lt;li&gt;이때 대기 중이던 다른 프로세스가 while 문에서 나와 자원을 할당 받을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-뮤텍스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%AE%A4%ED%85%8D%EC%8A%A4&quot; aria-label=&quot; 뮤텍스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 뮤텍스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이진 세마포어 라고도 불린다.&lt;/li&gt;
&lt;li&gt;상호 배제 Mutual Exclusion 의 앞 부분을 따서 Mutex라고 부른다.&lt;/li&gt;
&lt;li&gt;임계 영역에 들어갈 때 Lock 을 가지고 들어간다.
&lt;ul&gt;
&lt;li&gt;다른 프로세스는 임계 영역에 들어갈 수 없다.&lt;/li&gt;
&lt;li&gt;해당 프로세스는 Lock(뮤텍스)를 소유할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;임계 영역에서 나올 때는 lock 을 반납하고 다른 프로세스에게 넘겨준다.
&lt;ul&gt;
&lt;li&gt;피터슨 알고리즘이 뮤텍스의 일종이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;뮤텍스와-세마포어의-차이점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AE%A4%ED%85%8D%EC%8A%A4%EC%99%80-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot; aria-label=&quot;뮤텍스와 세마포어의 차이점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뮤텍스와 세마포어의 차이점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;세마포어는 뮤텍스를 포괄하는 개념이다.
&lt;ul&gt;
&lt;li&gt;이진 세마포어가 뮤텍스다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세마포어는 그 값만큼 프로세스나 쓰레드가 공유자원에 접근할 수 있지만 뮤텍스는 1개만 가능하다.&lt;/li&gt;
&lt;li&gt;뮤텍스는 소유될 수 있으므로 해당 lock 을 소유하는 프로세스가 반드시 반납해야하지만, &lt;strong&gt;세마포어는 소유할 수 없는 것이며 락을 걸지 않은 프로세스나 스레드도 락을 해제할 수 있다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-동기화-문제들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8F%99%EA%B8%B0%ED%99%94-%EB%AC%B8%EC%A0%9C%EB%93%A4&quot; aria-label=&quot; 동기화 문제들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 동기화 문제들&lt;/h2&gt;
&lt;h3 id=&quot;유한-버퍼-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%ED%95%9C-%EB%B2%84%ED%8D%BC-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;유한 버퍼 문제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유한 버퍼 문제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;유한한 버퍼에 아이템을 저장(생상)하고 빼내오는(소비) 문제를 뮤텍스와 세마포어로 해결한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용 값&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutex : 1로 초기화 되며 버퍼풀에 접근할 수 있는 락을 의미&lt;/li&gt;
&lt;li&gt;empty : 버퍼에 남은 빈 공간의 수&lt;/li&gt;
&lt;li&gt;full : 버퍼에 채워진 공간의 수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세마포어를 통해 버퍼의 크기를 파악하여 생산 혹은 소비할 수 있는지 판단한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세마포어를 통과하면 버퍼에 아이템을 넣고 빼기 위한 조작을 하기 위해 뮤텍스 락을 잠군다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생산자 프로세스 구조&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	// 버퍼에 추가할 아이템 생성

	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;empty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 빈 공간이 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 이하라면 wait, 빈 공간이 생기면 통과
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼를 조작하는 락이 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;이라면 wait, 락을 획득하면 통과

	// 버퍼에 아이템 추가 

	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼를 조작할 수 있는 락 반납
	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;full&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼가 한칸 채워졌음을 알림
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소비자 프로세스 구조&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;full&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼에 아무 아이템이 없어 full 이 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;이하라면 wait, 아이템이 생기면 통과
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼 조작 락 획득

	// 버퍼에서 아이템 빼기 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;소비&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼 조작 락 반납
	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;empty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 버퍼에 아이템이 빠졌음을 알림

	// 빼낸 아이템 사용
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;readers-writers-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#readers-writers-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;readers writers 문제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Readers-Writers 문제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하나의 데이터베이스가 다수의 프로세스간에 공유될 때 읽는 프로세스(readers)와 읽고 쓰는 프로세스(writers)를 구분하여 접근하도록 하는 방법이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Readers 끼리는 공유데이터에 동시 접근 해도 문제가 발생하지 않지만 writer는 다른 reader 혹은 writer와 겹치면 문제가 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 writer가 실행되는 동안 공유 데이터베이스에 mutual exclusion을 보장하도록 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이때 reader 혹은 writer가 기아상태 되지 않도록 문제를 해결해야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용 값&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;readcount : 현재 읽기를 수행하고 있는 프로세스 개수&lt;/li&gt;
&lt;li&gt;mutex : readcount를 갱신하기 위한 락이며 1로 초기화&lt;/li&gt;
&lt;li&gt;wrt : 쓰기를 위한 락이며 1로 초기화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writer 프로세스 구조&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	// 쓰기 작업

	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reader 프로세스 구조&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // readcount 갱신을 위한 락 획득
	readcount++&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 읽기 프로세스 개수 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 증가
	
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;readcount &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; // 만일 최초 읽기 프로세스라면 
		wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 쓰기가 진행 중인지 확인하고 쓰기 중이라면 대기, 아니라면 쓰기 락을 획득하고 통과

	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // readcount 갱신을 위한 락 반납

	// 읽기 작업 수행

	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
	readcount--&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 읽기 수행 완료 후 프로세스 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 감소

	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;readcount &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; // 만일 읽기 프로세스가 하나도 없다면
		signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 쓰기 락 반납하여 쓰기 프로세스 진행가능하도록 함

	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;식사하는-철학자들-문제-the-dining-philosophers-problems&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4-%EB%AC%B8%EC%A0%9C-the-dining-philosophers-problems&quot; aria-label=&quot;식사하는 철학자들 문제 the dining philosophers problems permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;식사하는 철학자들 문제 The Dining-Philosophers Problems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다섯명의 철학자들이 원탁에 있고 다섯개의 젓가락이 철학자들 사이에 하나씩 놓여있다. 가운데 공유 밥은 한 개이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자신의 오른쪽 젓가락이나 왼쪽의 젓가락이 없다면 먹을 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;교착상태나 기아를 발생시키지 않고 여러 스레드에 여러 자원을 할당해야하는 경우다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;철학자 i의 구조&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;세마포어 값은 chopstick&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 이다. 

&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chopstick&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chopstick&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; % &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	// 먹기

	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chopstick&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	signal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chopstick&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; % &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	// 생각하기
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동시에 두 철학자가 식사하지 않도록 보장하지만 교착상태를 야기할 가능성이 있다. 그 해결책이 몇개 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최대 4명의 철학자만 앉게 한다.&lt;/li&gt;
&lt;li&gt;한 철학자가 두개의 젓가락을 모두 집을 수 있을 때만 허용한다.&lt;/li&gt;
&lt;li&gt;홀수번 철학자는 왼쪽부터 집고, 짝수번 철학자는 오른쪽 부터 집도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;교착상태를 해결하면 기아상태를 주의해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-참고링크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC&quot; aria-label=&quot; 참고링크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 참고링크&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hibee.tistory.com/297&quot;&gt;https://hibee.tistory.com/297&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dduddublog.tistory.com/25&quot;&gt;https://dduddublog.tistory.com/25&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jhnyang.tistory.com/37&quot;&gt;https://jhnyang.tistory.com/37&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;세마포어 &amp;#x26; 뮤테스
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/104&quot;&gt;https://mangkyu.tistory.com/104&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@conatuseus/OS-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4%EC%99%80-%EB%AE%A4%ED%85%8D%EC%8A%A4&quot;&gt;https://velog.io/@conatuseus/OS-세마포어와-뮤텍스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@kwoncharles/%EB%AE%A4%ED%85%8D%EC%8A%A4-mutex-%EC%99%80-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4-semaphore-%EC%9D%98-%EC%B0%A8%EC%9D%B4-de6078d3c453&quot;&gt;https://medium.com/@kwoncharles/뮤텍스-mutex-와-세마포어-semaphore-의-차이-de6078d3c453&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sycho-lego.tistory.com/11&quot;&gt;https://sycho-lego.tistory.com/11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공룡책&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-keyword&quot;&gt;🌩 KEYWORD&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B2%BD%EC%9F%81-%EC%83%81%ED%83%9C-race-condition&quot;&gt;🌩 경쟁 상태 Race condition&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#race-condition-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9&quot;&gt;Race condition 발생하는 상황&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-%EB%AC%B8%EC%A0%9C-the-critical-section-problem&quot;&gt;🌩 임계 영역 문제 The Critical-Section Problem&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-%ED%95%B4%EA%B2%B0%EC%95%88&quot;&gt;임계 영역 해결안&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%97%90%EC%84%9C-%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-2%EA%B0%80%EC%A7%80-%EC%A0%91%EA%B7%BC&quot;&gt;운영체제에서 임계 영역을 다루는 2가지 접근&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%ED%94%BC%ED%84%B0%EC%8A%A8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-petersons-algorithm&quot;&gt;🌩 피터슨 알고리즘 Peterson’s Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%BC%ED%84%B0%EC%8A%A8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A6%9D%EB%AA%85&quot;&gt;피터슨 알고리즘 증명&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4&quot;&gt;🌩 세마포어&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%AE%A4%ED%85%8D%EC%8A%A4&quot;&gt;🌩 뮤텍스&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AE%A4%ED%85%8D%EC%8A%A4%EC%99%80-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;뮤텍스와 세마포어의 차이점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8F%99%EA%B8%B0%ED%99%94-%EB%AC%B8%EC%A0%9C%EB%93%A4&quot;&gt;🌩 동기화 문제들&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%A0%ED%95%9C-%EB%B2%84%ED%8D%BC-%EB%AC%B8%EC%A0%9C&quot;&gt;유한 버퍼 문제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#readers-writers-%EB%AC%B8%EC%A0%9C&quot;&gt;Readers-Writers 문제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4-%EB%AC%B8%EC%A0%9C-the-dining-philosophers-problems&quot;&gt;식사하는 철학자들 문제 The Dining-Philosophers Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC&quot;&gt;🌩 참고링크&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[하이버네이트 default-batch-fetch-size 가 안되는 현상 😢]]></title><description><![CDATA[💡 Intro JPA를 프로젝트에서 사용하면서 연관 엔티티를 호출할 때 생기는 N+1을 해결한 경험이 있다. 이때 해결 방법으로 hibernate의 를 yml…]]></description><link>https://yjksw.github.io/jpa-default-batch-fetch-size-not-working/</link><guid isPermaLink="false">https://yjksw.github.io/jpa-default-batch-fetch-size-not-working/</guid><pubDate>Thu, 21 Oct 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JPA를 &lt;a href=&quot;https://github.com/woowacourse-teams/2021-pick-git&quot;&gt;프로젝트&lt;/a&gt;에서 사용하면서 연관 엔티티를 호출할 때 생기는 N+1을 해결한 경험이 있다. 이때 해결 방법으로 hibernate의 &lt;code class=&quot;language-text&quot;&gt;default_batch_fetch_size&lt;/code&gt;를 yml에 설정하여 해결했었다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yjksw.github.io/jpa-query-bug/&quot;&gt;참고링크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yjksw.github.io/jpa-query-bug/#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;해결부분&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로젝트를 전반적으로 체크하던 와중에 위 설정에 의한 in query가 실행되지 않고 여전히 N+1 문제가 발생하는 부분을 발견하였다.&lt;/li&gt;
&lt;li&gt;해당 현상을 공유하기 위해 글을 작성한다. (여전히 이유는 못 찾았다 😢)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-code-classlanguage-texthiberbatedefault_batch_fetch_sizecode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-code-classlanguage-texthiberbatedefault_batch_fetch_sizecode&quot; aria-label=&quot; code classlanguage texthiberbatedefault_batch_fetch_sizecode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 &lt;code class=&quot;language-text&quot;&gt;hiberbate.default_batch_fetch_size&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;우선 간단하게 위 설정에 대해서 짚고 넘어가보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설정할 수 있는 방법은 두 가지 이다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@BatchSize(size={sizeNum})&lt;/code&gt; 어노테이션 활용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클래스, 메소드, 필드 레벨에서 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;해당 사이즈 만큼의 상위 엔티티 id가 in query로 나간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;spring.jpa.properties.hibernate.default_batch_fetch_size={batchSize}&lt;/code&gt;를 application.properties에 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전역적으로 적용이 되어서 상위 엔티티의 lazy loading된 하위 엔티티를 한꺼번에 in query로 로딩한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hibernate javadocs 공식 문서에 다음과 같이 서술한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Defines&lt;/span&gt; size &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; batch loading of collections or lazy &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt; For&lt;/span&gt; example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@BatchSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

will initialize up &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; lazy &lt;span class=&quot;token class-name&quot;&gt;Product&lt;/span&gt; entity proxies at a time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@BatchSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

will initialize up &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; lazy collections of products at a time&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;즉, 속한 collection이나 lazy entities 들을 한꺼번에 batch로 로딩해준다.&lt;/li&gt;
&lt;li&gt;Batch로 로딩할 경우 하나의 쿼리로 연관 엔티티를 한꺼번에 가지고 올 수 있어서 성능이 향상된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다음 &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html&quot;&gt;Hibernate Document&lt;/a&gt;를 확인해보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@BatchSize specifies a “batch size” for fetching instances of this class by identifier. Not yet loaded instances are loaded batch-size at a time (default 1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;not yet loaded instance&lt;/em&gt;를 batch로 로딩할 수 있는 설정이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-본-프로젝트-문제-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%B3%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9&quot; aria-label=&quot; 본 프로젝트 문제 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 본 프로젝트 문제 상황&lt;/h2&gt;
&lt;h3 id=&quot;entity-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entity-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;entity 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entity 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다소 복잡하지만 우리 프로젝트에서의 상황을 살펴보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조금 이해하기 쉽게 프로젝트의 일부 엔티티 관계를 그림으로 표현해 보았다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;35%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138268405-8ada5b7b-278a-4c6f-971c-9fddc4e5c44f.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자는 포트폴리오를 만들고 본인이 진행한 여러 프로젝트들을 포함시킬 수 있다.&lt;/li&gt;
&lt;li&gt;각 프로젝트마다 프로젝트를 나타내는 태그를 여러개 추가할 수 있다. 예를 들어 Java, Web 등등의 태그로 키워드를 나열할 수 있다.&lt;/li&gt;
&lt;li&gt;프로젝트와 태그는 다대다 관계이기 때문에 중간 테이블인 ProjectTag로 연결되어 있다.&lt;/li&gt;
&lt;li&gt;ProjectTag는 프로젝트 id와 태그 id를 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드가 더 편한 사람들을 위해 Entity를 추가해본다. 편의를 위해 getter, 생성자, 다른 메소드와 관련 없는 필드들은 생략한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Portfolio.java&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Portfolio&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 다른 필드 생략 &lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;portfolio&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; projects&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project.java&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 다른 필드 생략 &lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;project&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProjectTag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; tags&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ProjectTag.java&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    uniqueConstraints &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@UniqueConstraint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columnNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tag_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProjectTag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tag_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tag&lt;/span&gt; tag&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Project&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tag.java&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nullable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unique &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MAX_TAG_LENGTH&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;문제상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9&quot; aria-label=&quot;문제상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제상황&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;동일한 Assembler(같은 코드)로 응답 DTO를 만들때 포트폴리오를 조회할 때는 in 쿼리로 나가고, 포트폴리오를 업데이트 할 때는 n+1 쿼리가 나간다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;readOnly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PortfolioResponseDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserDto&lt;/span&gt; userDto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Portfolio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; portfolio &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; portfolioRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findPortfolioByUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userDto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isGuest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NoSuchPortfolioException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; portfolioDtoAssembler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPortfolioResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; portfolioRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Portfolio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// default_batch_fetch_size로 인한 In 쿼리 수행 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PortfolioResponseDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PortfolioRequestDto&lt;/span&gt; portfolioRequestDto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserDto&lt;/span&gt; userDto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Portfolio&lt;/span&gt; portfolio &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; portfolioRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolioRequestDto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;NoSuchPortfolioException&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userDto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isOwnedBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UnauthorizedException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolioDtoAssembler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPortfolio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolioRequestDto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    entityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; portfolioDtoAssembler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPortfolioResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolio&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Tag를 lazy loading 할때 n+1 쿼리 발생&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/woowacourse-teams/2021-pick-git/blob/develop/backend/pick-git/src/main/java/com/woowacourse/pickgit/portfolio/application/PortfolioService.java&quot;&gt;전체 코드보기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;쿼리 결과&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// read 메소드 실행 시 &lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Hibernate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 
select
    tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id as id1_13_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name as name2_13_0_ 
from
    tag tag0_ 
where
    tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id in &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// update 메소드 실행 시 &lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Hibernate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 
select
    tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id as id1_13_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name as name2_13_0_ 
from
    tag tag0_ 
where
    tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Hibernate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 
    select
        tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id as id1_13_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name as name2_13_0_ 
    from
        tag tag0_ 
    where
        tag0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;위 쿼리가 수행되는 &lt;code class=&quot;language-text&quot;&gt;Portfolio -&gt; PortfolioResponseDto&lt;/code&gt; 로 변환시키는 assembler의 코드는 다음과 같다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;필드가 많아서 당황스럽겠지만 Project 부분만 보고 감만 잡으면 된다. (* 표시해둔 곳)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;간단히 말하면 get을 통해 lazy loading 하위 엔티티의 값을 가져온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PortfolioResponseDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toPortfolioResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Portfolio&lt;/span&gt; portfolio&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PortfolioResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isProfileImageShown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getProfileImageUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getIntroduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCreatedAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUpdatedAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;toContactResponsesDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;toProjectResponsesDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getProjects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// *&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;toSectionResponsesDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;portfolio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProjectResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toProjectResponsesDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Projects&lt;/span&gt; projects&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// *&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; projects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toProjectResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProjectResponseDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toProjectResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Project&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TagResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toTagResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// *&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProjectResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStartDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEndDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getImageUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TagResponseDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toTagResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProjectTag&lt;/span&gt; tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// *&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TagResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTagId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-이상현상-들여다보기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%9D%B4%EC%83%81%ED%98%84%EC%83%81-%EB%93%A4%EC%97%AC%EB%8B%A4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot; 이상현상 들여다보기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 이상현상 들여다보기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 코드로 들여다보기는 복잡하여 파악하기 어려움으로 동일한 상황을 간단한 테스트코드로 재현해보았다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;entity-구조-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entity-%EA%B5%AC%EC%A1%B0-1&quot; aria-label=&quot;entity 구조 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entity 구조&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Member.java&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// getter 및 생성자 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Team.java&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// getter 및 생성자 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;상황-재현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%ED%99%A9-%EC%9E%AC%ED%98%84&quot; aria-label=&quot;상황 재현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상황 재현&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;먼저 application.properties에 다음 설정을 해주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;properties&quot;&gt;&lt;pre class=&quot;language-properties&quot;&gt;&lt;code class=&quot;language-properties&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;spring.jpa.properties.hibernate.default_batch_fetch_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음은 In 쿼리가 정상동작하는 테스트코드다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Member 리스트 조회 시 Team을 lazy loading 할 때 in 쿼리 Team이 한꺼번에 조회된다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;team_inquery_working&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TeamA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TeamB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; members &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Member 를 조회하는 쿼리가 생성된다.&lt;/span&gt;
    members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Team 을 조회하는 쿼리가 in 쿼리로 수행된다.&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamNames&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[실행 Query]&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Hibernate: 
select
    team0_.id as id1_1_0_,
    team0_.name as name2_1_0_ 
from
    team team0_ 
where
    team0_.id in (
        ?, ?
    )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다음은 프로젝트 상황은 동일하게 재현한 in 쿼리가 수행되지 않는 테스트코드다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team을 initialize 할 때 in 쿼리가 수행되지 않는다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;team_inquery_notWorking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; savedTeamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TeamA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; savedTeamB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TeamB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedTeamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Team은 프록시 객체다.&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedTeamB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; members &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 영속성 컨텍스트에 있는 Member를 로딩한다.&lt;/span&gt;
    members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 각 멤버의 개수만큼 team을 select하는 쿼리를 실행한다.&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamNames&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[실행 Query]&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Hibernate: 
    select
        team0_.id as id1_1_0_,
        team0_.name as name2_1_0_ 
    from
        team team0_ 
    where
        team0_.id=?

Hibernate: 
    select
        team0_.id as id1_1_0_,
        team0_.name as name2_1_0_ 
    from
        team team0_ 
    where
        team0_.id=?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;findAll()&lt;/code&gt;로 전체 멤버를 조회할 수 있지만, 그렇다면 두번째 테스트코드의 경우 모든 멤버가 영속성 컨텍스트에 있음에도 불구하고 영속성 컨텍스트는 전체 데이터인지 알 수 없기 때문에 Member를 조회하는 쿼리를 날린다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;영속성 컨텍스트에 이미 있는 엔티티를 가져온다는 것을 확인하기 위해 Member를 &lt;code class=&quot;language-text&quot;&gt;findById()&lt;/code&gt;로 가져왔다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-help&quot; aria-label=&quot; help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 Help&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;default_batch_fetch_size&lt;/code&gt; 설정이 먹히지 않는 이유로 &lt;strong&gt;해당 엔티티 (대상 엔티티 혹은 상위 엔티티)가 영속성 컨텍스트에서 관리되지 않을 경우&lt;/strong&gt;를 생각해볼 수 있다. 위 개념에서 다루었듯이 아직 초기화 되지 않은 collections 혹은 lazy products에 대해서 한꺼번에 로딩해주는 역할을 하기 때문이다. 만일 하위 엔티티가 영속성 컨텍스트에서 관리되고 있지 않다면 로딩할 프록시 또한 없을 것이고 상위 엔티티가 관리되고 있지 않다면 연관관계를 파악할 수 없으므로 in 쿼리에 인자로 보낼 id 값이 없을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 테스트 코드를 보았을 때 첫번째와 두번째 상황을 요약해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;첫번째 테스트코드 - in 쿼리 동작&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Member가 &lt;code class=&quot;language-text&quot;&gt;findById&lt;/code&gt;로 조회되고 Team은 프록시 객체이다. (Lazy loading)&lt;/li&gt;
&lt;li&gt;Member 리스트의 팀 목록을 조회할 때 Team의 Id가 in 쿼리로 들어간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두번째 테스트코드 - in 쿼리 동작 안함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Team은 이미 존재한다.&lt;/li&gt;
&lt;li&gt;새로운 Member를 생성하고 Team을 &lt;code class=&quot;language-text&quot;&gt;em.getReference()&lt;/code&gt;를 통해 Team의 프록시 객체를 Member의 Team을 지정한다. 이후 &lt;code class=&quot;language-text&quot;&gt;save()&lt;/code&gt;를 통해서 Member 엔티티를 저장하고 flush 하여 데이터베이스에 반영한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;findAll()&lt;/code&gt;를 통헤 멤버 List를 가져온다. 이때 영속성 컨텍스트에 있는 Member가 조회된다.&lt;/li&gt;
&lt;li&gt;해당 Member의 Team은 &lt;code class=&quot;language-text&quot;&gt;em.getReference()&lt;/code&gt;로 조회된 프록시 객체이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다음과 같은 이유로 두 테스트코드가 같은 상황이라고 생각한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Member가 영속성 컨텍스트에 실제 엔티티로 관리되고 있다는 것.&lt;/li&gt;
&lt;li&gt;Member와 연관된 Team 엔티티가 모두 프록시 객체이며 영속성 컨텍스트에 있다는 것.&lt;/li&gt;
&lt;li&gt;연관관계는 두 경우 모두 잘 매핑이 되어 있다는 것.
&lt;ul&gt;
&lt;li&gt;두번째 테스트코드의 마지막 &lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt; 이후 &lt;code class=&quot;language-text&quot;&gt;clear()&lt;/code&gt;를 통해 영속성 컨텍스를 한번 초기화 하면 in 쿼리가 정상동작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 조회된 Member 리스트의 내부를 디버깅해 들여다 보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In query가 정상 동작하는 members&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138413600-1ec9f61a-5161-48a0-9919-fdbbcb1f88f7.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In query가 동작하지 않는 members&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;75%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138413853-021c8bab-ada8-49f5-9497-bac041da22ce.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;디버깅했을 때 두가지 상태가 모두 똑같지만 하나는 in 쿼리가 동작하고 하나는 동작하지 않는 이유를 결국 못 찾았다. 😢&lt;/li&gt;
&lt;li&gt;우선은 현상만 기록하고 계속 알아볼 예정이다 !!&lt;/li&gt;
&lt;li&gt;혹시 아시는 분은 .. 연락주세요.. 깃헙이나 이메일, 댓글 아무거나 환영 !! 🎉&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;apiref.com/hibernate5/BatchSize.html&quot;&gt;apiref.com/hibernate5/BatchSize.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html&quot;&gt;https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wckhg89.tistory.com/10&quot;&gt;https://wckhg89.tistory.com/10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-hiberbatedefault_batch_fetch_size&quot;&gt;🌩 &lt;code class=&quot;language-text&quot;&gt;hiberbate.default_batch_fetch_size&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%B3%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9&quot;&gt;🌩 본 프로젝트 문제 상황&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#entity-%EA%B5%AC%EC%A1%B0&quot;&gt;Entity 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9&quot;&gt;문제상황&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%9D%B4%EC%83%81%ED%98%84%EC%83%81-%EB%93%A4%EC%97%AC%EB%8B%A4%EB%B3%B4%EA%B8%B0&quot;&gt;🌩 이상현상 들여다보기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#entity-%EA%B5%AC%EC%A1%B0-1&quot;&gt;Entity 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%83%81%ED%99%A9-%EC%9E%AC%ED%98%84&quot;&gt;상황 재현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-help&quot;&gt;🌩 Help&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH9. 디스크 관리]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH9. 디스크 관리를 읽고 정리한 내용입니다 🙌 🌩 들어가기 전 컴퓨터 시스템의 대표적인 2차 저장장치이다. 메모리는 휘발성이지만 디스크는 데이터를 영구저장할 수 있다. 🌩…]]></description><link>https://yjksw.github.io/operating-system-8/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-8/</guid><pubDate>Mon, 18 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH9. 디스크 관리&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-들어가기-전&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84&quot; aria-label=&quot; 들어가기 전 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 들어가기 전&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 시스템의 대표적인 2차 저장장치이다.&lt;/li&gt;
&lt;li&gt;메모리는 휘발성이지만 디스크는 데이터를 영구저장할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-디스크의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot; 1 디스크의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 디스크의 구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;디스크 외부에서 디스크를 일정크기 저장공간들로 이루어진 1차원 배열로 취급한다.
&lt;ul&gt;
&lt;li&gt;그 저장공간들을 논리 블록 logical block 이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크에 데이터가 저장될 때 논리블록 단위로 저장되고, 입출력도 논리블록 단위로 전송된다.&lt;/li&gt;
&lt;li&gt;데이터 접근을 위해 배열처럼 블록 인덱스를 디스크에 전달하고 디스크 컨트롤러가 해당 논리블록의 물리적 위치를 찾아 요청 데이터에 대한 입출력 작업을 수행한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;섹터 sector&lt;/strong&gt; - 논리 블록이 저장된 물리적 위치
&lt;ul&gt;
&lt;li&gt;논리블록과 섹터는 1대1 매핑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크는 마그네틱 원판들로 구성되며 원판은 트랙, 트랙은 섹터로 나뉜다.&lt;/li&gt;
&lt;li&gt;원판의 동일한 위치의 트랙들을 실린더라고 부른다.&lt;/li&gt;
&lt;li&gt;디스크의 가장 바깥 실린더의 첫 트랙의 첫 섹터가 섹터 0 이다.&lt;/li&gt;
&lt;li&gt;데이터 입출력은 디스크의 암 arm이 섹터가 위치한 실린더로 이동하여 워판이 회전하고 디스크 헤드가 섹터 위치에 도달해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-디스크--스캐줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-%EB%94%94%EC%8A%A4%ED%81%AC--%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81&quot; aria-label=&quot; 2 디스크  스캐줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. 디스크  스캐줄링&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;디스크 접근시간 access time: 탐색 시간 seek time, 회전지연 시간 rotational latency, 전송시간 transfer time 으로 구분된다
&lt;ul&gt;
&lt;li&gt;탐색시간 - 디스크 헤드를 해당 실린더 위치로 이동시키는 시간&lt;/li&gt;
&lt;li&gt;회전지연시간 - 디스크게 회전해서 읽으려고 쓰는 섹터가 헤드 위치에 도달하는 시간&lt;/li&gt;
&lt;li&gt;전송시간 - 섹터의 데이터가 실제로 섹터에 읽고 쓰는데 소요되는 시간&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크 입출력 효율 향상 - 디스크 입출력의 접근시간을 최소화
&lt;ul&gt;
&lt;li&gt;회전지연시간과 전송시간은 수치가 작고 운영체제에서 통제하기 어려운 부분이다.&lt;/li&gt;
&lt;li&gt;따라서 탐색시간을 줄여야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크 스캐줄링 disk scheduling
&lt;ul&gt;
&lt;li&gt;여러 섹터들의 입출력 요청을 어떠한 순서로 처리할지 결정하는 매커니즘&lt;/li&gt;
&lt;li&gt;가장 중요한 목표는 디스크 헤드의 이동거리를 줄이는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-fcfs-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-fcfs-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;1 fcfs 스케줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) FCFS 스케줄링&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;디스크에 먼저 들어온 요청을 먼저 처리하는 방식이다.&lt;/li&gt;
&lt;li&gt;효율성이 매우 떨어진다. 헤드가 긴 거리를 왕복하여 왔다갔다 할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-sstf-shortest-seek-time-first-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-sstf-shortest-seek-time-first-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;2 sstf shortest seek time first 스케줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) SSTF Shortest Seek Time First 스케줄링&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;헤드의 현재 위치로 가장 가까운 위치의 요청을 먼저 처리하는 알고리즘&lt;/li&gt;
&lt;li&gt;디스크 입출력 효율성을 증가시키지만 기아 starvation 현상을 발생시킬 수 있다.
&lt;ul&gt;
&lt;li&gt;현재 헤드에서 가까운 요청이 계속 들어오면 떨어진 곳 요청은 무한대기해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그래도 이동거리 측면에서 가장 우수한 알고리즘은 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-scan-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;3 scan 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) SCAN 알고리즘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;헤드가 디스크 원판 안쪽 끝과 바깥쪽 끝을 오가며 경로에 존재하는 모든 요청을 처리한다.&lt;/li&gt;
&lt;li&gt;디스크 어떤 위치에 요청이 오는지 상관없이 정해진 방향으로 이동하며 길에 있는 요청들을 처리한다.&lt;/li&gt;
&lt;li&gt;한쪽 방향 끝으로 가면 다린 쪽 끝으로 방향을 바꾸어 그 경로 요청들의 다 처리한다.&lt;/li&gt;
&lt;li&gt;엘리베이터와 비슷한 알고리즘이라서 엘리베이터 스캐줄링 알고리즘 elevator scheduling algorithm이라고 부르기도 한다.&lt;/li&gt;
&lt;li&gt;너무 오래 기다리게 하거나 불필요한 헤드의 이동이 발생하지 않으므로 효율성과 형평성을 모두 만족하는 알고리즘이다.&lt;/li&gt;
&lt;li&gt;하지만 가장 바깥쪽 실린더보다 가운데 위치한 실린더가 더 자주 서비스 받는 편차가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-c-scan-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-c-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;4 c scan 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) C-SCAN 알고리즘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Circular-scan 알고리즘은 한쪽끝에서 다른 쪽 끝으로 이동하며 길목의 모든 요청을 처리한다.&lt;/li&gt;
&lt;li&gt;하지만 헤드가 도달해 방향을 바꾸고 요청 처리보다 다시 출발점으로 이동만한다.&lt;/li&gt;
&lt;li&gt;이동거리는 조금 길어지지만 탐색시간의 편차를 줄일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-look과-c-look-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-look%EA%B3%BC-c-look-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;5 look과 c look 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) LOOK과 C-LOOK 알고리즘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SCAN 알고리즘은 요청 존재 여부와 관계없이 헤드가 무조건 디스크 한쪽 끝에서 다른 쪽 끝으로 이동한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOOK 알고리즘은 헤드가 한쪽으로 이동하다가 그 방향에 대기중인 요청이 없다면 방향을 바꾼다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C-LOOK은 LOOK 알고리즘에서 한쪽 방향으로 이동할 때만 요청을 처리하는 것이다. -&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SCAN, C-SCAN, LOOK, C-LOOK 등의 알고리즘이 디스크 입출력이 많은 시스템에서 FCFS나 SSTF에 비해 효울적이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-다중-디스크-환경에서의-스캐줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%EB%8B%A4%EC%A4%91-%EB%94%94%EC%8A%A4%ED%81%AC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81&quot; aria-label=&quot; 3 다중 디스크 환경에서의 스캐줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 다중 디스크 환경에서의 스캐줄링&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;다중 디스크를 사용
&lt;ul&gt;
&lt;li&gt;동일한 정보를 디스크에 중복 저장하여 인기있는 데이터를 여러 디스크에서 동시 서비스 할 수 있다.&lt;/li&gt;
&lt;li&gt;일부 디스크 오류에도 지속적 서비스가 가능하다.&lt;/li&gt;
&lt;li&gt;시스템 성능과 신뢰성을 동시에 향상시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다중 디스크 시스템에서는 작업을 수행할 디스크를 결정하는 문제도 처리해야한다.&lt;/li&gt;
&lt;li&gt;스케줄링 목적에 따라 요청 처리 디스크를 결정하는 기준이 달라진다.
&lt;ul&gt;
&lt;li&gt;탐색시간을 줄이면 헤드의 위치가 데이터와 가장 가까운 디스크를 선택&lt;/li&gt;
&lt;li&gt;거시적인 관점에서 디스크간의 부하균형 Load balancing 을 이루도록 스케줄링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;최근에는 전력 소모를 줄이는 것이 중요한 목표이다.
&lt;ul&gt;
&lt;li&gt;일부 디스크에 요청을 집중시키고 나머지 디스크는 회전을 정지시키는 것이 효과적이다.&lt;/li&gt;
&lt;li&gt;일부 디스크만으로 요청 처리가 가능한 경우에서만 성립된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-디스크의-저전력-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EC%A0%80%EC%A0%84%EB%A0%A5-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot; 4 디스크의 저전력 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 디스크의 저전력 관리&lt;/h2&gt;
&lt;h3 id=&quot;1-비활성화-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;1 비활성화 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 비활성화 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;전력 소모 기준으로 4가지 디스크의 상태
&lt;ul&gt;
&lt;li&gt;활동 active
&lt;ul&gt;
&lt;li&gt;현재 읽거나 쓰는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공회전 idle
&lt;ul&gt;
&lt;li&gt;회전중이나 읽거나 쓰지는 않는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;준비 standby
&lt;ul&gt;
&lt;li&gt;회전하지 않지만 인터페이스가 활성화된 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;휴면 sleep
&lt;ul&gt;
&lt;li&gt;회전하지도 않고 인터페이스도 비활성화된 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;활동과 공회전을 활성상태, 준비와 휴먼을 비활성 상태로 부른다.&lt;/li&gt;
&lt;li&gt;비활성 상태는 회전이 일어나지 않으므로 요청이 없다면 비활성 상태가 절감 측면에서 좋다.&lt;/li&gt;
&lt;li&gt;하지만 각 상태로 전환할 때 부가적인 전력 및 시간이 소모된다. 따라서 매번 비활성 상태로 바꾸는 것은 오히려 비효율적일 수 있다.&lt;/li&gt;
&lt;li&gt;후속 요청까지 일정 시간 이상인 경우에만 회전을 정지 시키는 것이 전력 소모 절감에 좋다.
&lt;ul&gt;
&lt;li&gt;미래 요청 도착 시점과 간격을 잘 예측하는 것이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크 비활성 시점 결정하는 방법
&lt;ul&gt;
&lt;li&gt;시간기반 timeout based&lt;/li&gt;
&lt;li&gt;예측기반 prediction based&lt;/li&gt;
&lt;li&gt;확률기반 stochastic based&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-회전속도-조절-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%9A%8C%EC%A0%84%EC%86%8D%EB%8F%84-%EC%A1%B0%EC%A0%88-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;2 회전속도 조절 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 회전속도 조절 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rotation Per Minute RPM을 가변적으로 조절하여 디스크 전력 소모를 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-디스크의-데이터-배치-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%B0%EC%B9%98-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;3 디스크의 데이터 배치 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 디스크의 데이터 배치 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;디스크 내에 복제본 replica를 많이 만들어 헤드 위치에 가까운 복제본을 접근하도록 하여 응답시간과 전력 소모량을 절감한다.&lt;/li&gt;
&lt;li&gt;쓰기연산의 일관성 문제가 있을 수 있으나, 가까운 복제본에만 데이터를 쓰고, 나머지 복제본들은 주소 테이블에서 무효화 연산을 수행하여 쓰기연산 효율성을 높일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-버퍼캐싱-및-사전인출-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%B2%84%ED%8D%BC%EC%BA%90%EC%8B%B1-%EB%B0%8F-%EC%82%AC%EC%A0%84%EC%9D%B8%EC%B6%9C-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;4 버퍼캐싱 및 사전인출 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 버퍼캐싱 및 사전인출 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;디스크가 활성 상태일 때 헤드 위치로부터 가까운 데이터를 사전인출 prefetching 하여 디스크 비활성화 가능성을 높여 전력을 줄일 수 있다.&lt;/li&gt;
&lt;li&gt;데드라인을 꼭 지켜야하는 요청이 아니라면 디스크의 활성상태 여부에 따라 요청을 지연시키는 방식도 사용한다.&lt;/li&gt;
&lt;li&gt;통합하여, 디스크가 저전력 모드라면 입출력 처리를 최대한 지연시켰다가 디스크가 정상 전력 모드라면 사전인출을 공격적으로 해서 디스크의 상태 변화 횟수를 최소화하는 방법을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-쓰기전략을-통한-저전력-디스크-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%93%B0%EA%B8%B0%EC%A0%84%EB%9E%B5%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%A0%80%EC%A0%84%EB%A0%A5-%EB%94%94%EC%8A%A4%ED%81%AC-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;5 쓰기전략을 통한 저전력 디스크 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 쓰기전략을 통한 저전력 디스크 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;해당 디스크가 비활성 상태일 때는 쓰기를 하지 않고 디스크가 활성 상태일 때 쓰는 방식으로 전력 소모를 젉감한다.&lt;/li&gt;
&lt;li&gt;일단 블록들을 로그 디스크에 썼다가 디스크 활성 상태일 때 디스크에 쓰기연산을 수행하는 방식도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84&quot;&gt;🌩 들어가기 전&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot;&gt;🌩 1. 디스크의 구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-2-%EB%94%94%EC%8A%A4%ED%81%AC--%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81&quot;&gt;🌩 2. 디스크  스캐줄링&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-fcfs-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot;&gt;1) FCFS 스케줄링&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-sstf-shortest-seek-time-first-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot;&gt;2) SSTF Shortest Seek Time First 스케줄링&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;3) SCAN 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-c-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;4) C-SCAN 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-look%EA%B3%BC-c-look-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;5) LOOK과 C-LOOK 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-3-%EB%8B%A4%EC%A4%91-%EB%94%94%EC%8A%A4%ED%81%AC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81&quot;&gt;🌩 3. 다중 디스크 환경에서의 스캐줄링&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EC%A0%80%EC%A0%84%EB%A0%A5-%EA%B4%80%EB%A6%AC&quot;&gt;🌩 4. 디스크의 저전력 관리&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-%EA%B8%B0%EB%B2%95&quot;&gt;1) 비활성화 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%ED%9A%8C%EC%A0%84%EC%86%8D%EB%8F%84-%EC%A1%B0%EC%A0%88-%EA%B8%B0%EB%B2%95&quot;&gt;2) 회전속도 조절 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%B0%EC%B9%98-%EA%B8%B0%EB%B2%95&quot;&gt;3) 디스크의 데이터 배치 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EB%B2%84%ED%8D%BC%EC%BA%90%EC%8B%B1-%EB%B0%8F-%EC%82%AC%EC%A0%84%EC%9D%B8%EC%B6%9C-%EA%B8%B0%EB%B2%95&quot;&gt;4) 버퍼캐싱 및 사전인출 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%EC%93%B0%EA%B8%B0%EC%A0%84%EB%9E%B5%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%A0%80%EC%A0%84%EB%A0%A5-%EB%94%94%EC%8A%A4%ED%81%AC-%EA%B8%B0%EB%B2%95&quot;&gt;5) 쓰기전략을 통한 저전력 디스크 기법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH8. 가상 메모리]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH…]]></description><link>https://yjksw.github.io/operating-system-7/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-7/</guid><pubDate>Sun, 17 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH8. 가상 메모리&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-들어가기-전&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84&quot; aria-label=&quot; 들어가기 전 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 들어가기 전&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;시분할 환경에서는 여러 프로세스가 동시에 메모리에 올라와서 수행되기 때문에 어떤 메모리에 어느 정도의 메모리를 할당해야할지가 문제이다.&lt;/li&gt;
&lt;li&gt;운영체제는 몇몀 프로그램에게 집중적으로 메모리를 할당하고 시간이 흐른다음 메모리를 회수하여 다른 프로그램에게 집중적으로 메모리를 할당하는 방식을 택한다.
&lt;ul&gt;
&lt;li&gt;프로그램마다 프로세스를 빠르게 수행하기 위해서 확보해야하는 최소한의 메모리 크기가 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 전체가 올라가는 것이 아니라 스왑 영역에 일부분은 내려놓기 때문에 프로세스 입장에서 물리 메모리 크기 제약은 생각하지 않게 된다.&lt;/li&gt;
&lt;li&gt;또한 운영체제는 각 프로세스가 자기만 메모리에 올라간 것처럼 여겨질 수 있는 가장 메모리를 지원한다.
&lt;ul&gt;
&lt;li&gt;각자의 주소 공간을 가정하여 모든 프로세스가 0번지부터 시작한다.&lt;/li&gt;
&lt;li&gt;일부는 스왑 영역에 일부는 메모리에 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 주소 공간을 메모리로 적재하는 단위에 따라 가상메모리 기법은 요구 페이징 (demand paging) 방식과 요구 세그멘테이션 (demand segmentation) 으로 구현된다.
&lt;ul&gt;
&lt;li&gt;대부분 요구 페이징을 사용하고 요구 세그먼테이션은 페이지드 세그먼테이션 기법을 사용하는 경우에 많이 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-요구-페이징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95&quot; aria-label=&quot; 1 요구 페이징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 요구 페이징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;당장 사용될 페이지만 메모리에 올리는 방식이다.&lt;/li&gt;
&lt;li&gt;요구 페이징은 특정 페이지에 대한 CPU의 요청이 들어온 후에 페이지를 메모리에 적재한다.&lt;/li&gt;
&lt;li&gt;장점
&lt;ul&gt;
&lt;li&gt;메모리 사용량 감소&lt;/li&gt;
&lt;li&gt;프로세스 전체를 메모리에 올리는 입출력 오버헤드 감소&lt;/li&gt;
&lt;li&gt;사용하지 않을 주소 영역의 입출력은 안해도 되므로 응답시간 단축&lt;/li&gt;
&lt;li&gt;시스템이 더 많은 프로세스를 수용할 수 있도록 함&lt;/li&gt;
&lt;li&gt;프로그램이 물리적 메모리의 용량 제약에서 벗어남&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;어떤 페이지가 메모리에 존재하고 어떤 페이지가 메모리에 존재하지 않은지 구별이 필요하다.
&lt;ul&gt;
&lt;li&gt;유효-무효 비트 (valid-invalid bit)를 두어 각 페이지가 메모리에 존재하는지 표시한다.&lt;/li&gt;
&lt;li&gt;페이지 테이블의 각 엔트리에 저장된다.&lt;/li&gt;
&lt;li&gt;프로세스 시작 전 모든 페이지의 유효-무효 비트는 무효값이다.&lt;/li&gt;
&lt;li&gt;특정 페이지가 참조되면 유효값으로 바뀌고 스왑 영역으로 쫓겨나면 다시 무효값이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유효-무효 비트는 페이지가 속한 영역을 프로세스가 사용하지 않는 경우도 표시한다.&lt;/li&gt;
&lt;li&gt;CPU 참조 페이지가 메모리에 올라와 있지 않아서 무효값인 경우를 페이지 부재 page fault 라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-요구-페이징의-페이지-부재-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;1 요구 페이징의 페이지 부재 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 요구 페이징의 페이지 부재 처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 무효 페이지에 접근하면 주소 변환 담당 하드웨어 MMU가 페이지 부재 트랩 page fault trap을 발생시킨다.&lt;/li&gt;
&lt;li&gt;제어권이 커널모드로 전환되어 운영체제의 페이지 부재 처리루틴 page fulat handler가 호출되어 다음 순서로 페이지 부재를 처리한다.
&lt;ol&gt;
&lt;li&gt;해당 페이지에 대한 접근이 적법한지 체크
&lt;ul&gt;
&lt;li&gt;사용되지 않는 주소 영역이거나 해당 페이지에 대한 접근 권한을 위반 protection violation한 경우 해당 프로세스를 종료&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;적법하다면 물리 메모리의 비어있는 프레임 frame을 할당받아 그 공간에 해당 페이지를 읽는다.
&lt;ul&gt;
&lt;li&gt;비어있는 프레임이 없다면 기존에 메모리에 올라와 있는 페이지 중 하나를 디스크로 쫓아낸다. (스왑 아웃)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;페이지 부재로 페이지를 메모리에 적재하기까지 오랜 시간이 걸리기 때문에 페이지 부재 프로세스는 봉쇄 상태가 된다. (CPU 제어권이 없어진다)
&lt;ul&gt;
&lt;li&gt;CPU 레지스터 상태 및 카운터값을 PCB에 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크 입출력이 완료되고 인터럽트가 발생하면 페이지 테이블의 페이지 유효-무효 비트를 유효로 설정하고 봉쇄 상태 프로세스를 준비큐로 옮긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-요구-페이징의-성능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%EC%84%B1%EB%8A%A5&quot; aria-label=&quot;2 요구 페이징의 성능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 요구 페이징의 성능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;페이지 부재의 발생 빈도&lt;/strong&gt;로 성능에 가장 큰 영향을 미친다.&lt;/li&gt;
&lt;li&gt;페이지가 메모리에 있다면 메모리 접근 시간만 걸리지만 페이지 부재가 일어나면 많은 오버헤드가 동반된다.
&lt;ul&gt;
&lt;li&gt;페이지 부재 발생 처리 오버헤드&lt;/li&gt;
&lt;li&gt;스왑 아웃 오버헤드&lt;/li&gt;
&lt;li&gt;수왑 인 오버헤드&lt;/li&gt;
&lt;li&gt;프로세스 재시작 오버헤드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-페이지-교체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4&quot; aria-label=&quot; 2 페이지 교체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. 페이지 교체&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;물리 메모리에 빈 프레임이 존재하지 않는다면 올라와 있는 페이를 스왑 아웃 시켜야하는데 그것을 페이지 교체라고 한다. page replacement&lt;/li&gt;
&lt;li&gt;어떤 페이지를 쫓아낼 것인지 교체 알고리즘 replacement algorithm으로 결정한다.
&lt;ul&gt;
&lt;li&gt;페이지 부재를 최소화 하는 것이 알고리즘의 목표이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이지 교체 알고리즘은 페이지 참조열 page reference string에 대한 페이지 부재율을 계산하여 평가한다.&lt;/li&gt;
&lt;li&gt;페이지가 이미 메모리에 올라와 있으면 hit 아니면 페이지 부재이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-최적-페이지-교체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%B5%9C%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4&quot; aria-label=&quot;1 최적 페이지 교체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 최적 페이지 교체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 먼 미래에 참조될 페이지를 쫓아내는 방법이다.&lt;/li&gt;
&lt;li&gt;빌레디 최적 알고리즘, MIN, OPT, Belady’s optimal algorithm 라고 부른다.&lt;/li&gt;
&lt;li&gt;미래에 어떤 페이지가 어떤 순서로 참조될지 미라 알고 있는 전제로 알고리즘을 운영하므로 실제 시스템에서 사용할 수 있는 알고리즘은 아니다. ⇒ 오프라인 알고리즘&lt;/li&gt;
&lt;li&gt;빌레디 최적 알고리즘은 실제 시스템에 활용되기 보다 다른 알고리즘의 성능의 상한선을 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-선입선출-알고리즘-fifo&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-fifo&quot; aria-label=&quot;2 선입선출 알고리즘 fifo permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 선입선출 알고리즘 FIFO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;페이지 교체 시 물리 메모리에 가장 먼저 올라온 페이지를 우선 내쫓는다.&lt;/li&gt;
&lt;li&gt;비효율적인 상황이 발생할 가능성이 있다. 물리 메모리 공간이 늘어나도 페이지 참조 순서에 따라서 성능이 더 나빠질 수도 있다.&lt;/li&gt;
&lt;li&gt;FIFO에서 물리 메모리 영역에 올라갔는데도 페이지 부재가 늘어난 상황을 FIFO 이상 현상 (FIFO anomaly)라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-lru-least-recently-used&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-lru-least-recently-used&quot; aria-label=&quot;3 lru least recently used permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) LRU Least Recently Used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리 참조 성향 중 시간지역성 (temporal locality) 라는 것이 있다.
&lt;ul&gt;
&lt;li&gt;최근 참조된 페이지가 가까운 미래에 다시 참조될 가능성이 높은 성질이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 성질을 이용하여 페이지 교체 시 가장 오래전에 참조한 페이지를 쫓아낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-lfu-least-frequently-used&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-lfu-least-frequently-used&quot; aria-label=&quot;4 lfu least frequently used permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) LFU Least Frequently Used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;페이지 참조 횟수로 교체 페이지를 결정한다.&lt;/li&gt;
&lt;li&gt;과거에 참조 횟수 reference count가 가장 적었던 페이지를 교체하도록 한다.&lt;/li&gt;
&lt;li&gt;여러개의 페이지가 후보라면 그 중 하나를 임의로 선정하며 주로 상대적으로 오래 전에 참조된 페이지를 스왑 아웃한다.&lt;/li&gt;
&lt;li&gt;LFU의 페이지 참조 횟수 계산 방식
&lt;ol&gt;
&lt;li&gt;Incache-LFU
&lt;ul&gt;
&lt;li&gt;페이지가 물리 메모리에 올라온 후부터 참조 횟수를 카운트 한다.&lt;/li&gt;
&lt;li&gt;메모리에서 쫓겨났다가 다시 올라오면 참조 횟수를 1부터 시작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perfect-LFU
&lt;ul&gt;
&lt;li&gt;그 페이지의 과거 참조 횟수를 모두 카운ㅌ한다.&lt;/li&gt;
&lt;li&gt;정확하나 메모리에서 쫓겨난 페이지 참조 기록까지 보관해야하는 오버헤드가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;LFU는 LRU 보다 오랜 시간 동안의 참조 기록을 반영하고 장기적 시간 규모의 참조 성향을 고려한다.&lt;/li&gt;
&lt;li&gt;하지만 LFU는 시간에 따른 페이지 참조 변화를 반영하지 못하며 구현이 LRU보다 복잡하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-클럭-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%81%B4%EB%9F%AD-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;5 클럭 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 클럭 알고리즘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LRU, LFU 는 참조 시각, 참조 횟수를 소프트웨어적으로 유지하고 비교하므로 알고리즘 운영 비용이 발생한다.&lt;/li&gt;
&lt;li&gt;클럭 알고리즘은 하드웨어의 지원으로 알고리즘의 운영 오버헤드를 줄인 것이다.&lt;/li&gt;
&lt;li&gt;클럭 알고리즘은 LRU를 근사시킨 알고리즘으로 NUR Not Used Recently 또는 NRU Not recently Used 라고 불린다.&lt;/li&gt;
&lt;li&gt;오래전에 참조된 페이지 중 하나를 교체하는데 가장 오래된 것은 보장할 수 없다.&lt;/li&gt;
&lt;li&gt;하드웨어의 지원이 있기 때문에 LRU에 비해 페이지 관리가 빠르고 효율적이다.
&lt;ul&gt;
&lt;li&gt;대부분이 클럭 알고리즘으로 페이지 교체 알고리즘을 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클럭알고리즘은 페이지 프레임의 참조비트를 순차적으로 조사한다.
&lt;ul&gt;
&lt;li&gt;참조비트는 각 프레임에 존재하며 해당 프레임의 페이지가 참조될 때 하드웨어로 1로 자동 세팅된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클럭 알고리즘은 참조비트가 1인 페이지를 0으로 바꾸고 지나간다. 참조비트가 0인 페이지는 교체한다.
&lt;ul&gt;
&lt;li&gt;즉, 시간을 한바퀴 돌 동안 참조되지 않은 페이지들을 교체하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 클럭 주기동안 참조된 페이지를 메모리에 유지시켜둠으로 페이지 부재를 줄이기 때문에 2차 기회 알고리즘 second chance algorithm이라고 하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-페이지-프레임의-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%94%84%EB%A0%88%EC%9E%84%EC%9D%98-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot; 3 페이지 프레임의 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 페이지 프레임의 할당&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;어느 프로세스에게  얼만큼의 페이지 프레임을 할당할지 결정한다.&lt;/li&gt;
&lt;li&gt;기본적인 할당 알고리즘 allocation algorithm은 다음 3가지 이다.
&lt;ol&gt;
&lt;li&gt;균등할당 equal allocation - 모든 프로세스에게 페이지 프레임을 균일하게 할당&lt;/li&gt;
&lt;li&gt;비례할당 proportional allocation - 프로세스의 크기에 비례해 프레임 할당&lt;/li&gt;
&lt;li&gt;우선순위 할당 priority allocation - 프로세스의 우선순위에 따라 프레임 할당
&lt;ul&gt;
&lt;li&gt;당장 CPU에서 실행될 프로세스에게 더 많은 페이지 프레임을 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;하지만 할당 알고리즘으로 프로세스 페이지 참조 특성을 제대로 반영하지 못할 수도 있다.
&lt;ul&gt;
&lt;li&gt;현재 수행중인 프로세스가 지나치게 많으면 프로세스당 할당되는 메모리가 과도하게 적다.&lt;/li&gt;
&lt;li&gt;프로세스를 정상적으로 수행하려면 일정 수준 이상의 페이지 프레임을 각 프로세스에게 할당해야한다. (여러 프레임을 동시에 참조하기 때문이다. 코드, 데이터 영역 등등)&lt;/li&gt;
&lt;li&gt;반복문인 경우 관련 페이지를 한꺼번에 올리는 것이 성능에 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;종합적으로 각 프로세스의 프레임 수를 결정할 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-전역교체와-지역교체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EC%A0%84%EC%97%AD%EA%B5%90%EC%B2%B4%EC%99%80-%EC%A7%80%EC%97%AD%EA%B5%90%EC%B2%B4&quot; aria-label=&quot; 4 전역교체와 지역교체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 전역교체와 지역교체&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;교체 페이지를 결정할 때 교체 대상 프레임의 범위에 따라서 교체 방법을 전역교체 global replacement, 지역교체  local replacement로 구분한다.&lt;/li&gt;
&lt;li&gt;전역 교체 - 모든 페이지 프레임이 교체 대상
&lt;ul&gt;
&lt;li&gt;다른 프로세스에게 할당된 프레임도 빼앗을 수 있다.&lt;/li&gt;
&lt;li&gt;프로세스별 프레임 할당량이 조절될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;지역 교체 - 현재 수행 중인 프로세스에게 할당된 프레임 내에서만 교체 대상을 선정
&lt;ul&gt;
&lt;li&gt;지역 교체는 프로세스마다 프레임을 미리 할당한다.&lt;/li&gt;
&lt;li&gt;LRU, LFU 알고리즘을 프로세스별로 독자적 운영하면 지역교체가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-스레싱-thrashing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%EC%8A%A4%EB%A0%88%EC%8B%B1-thrashing&quot; aria-label=&quot; 5 스레싱 thrashing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 스레싱 thrashing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 원활하게 수행되기 위해서는 일정 수준 이상의 페이지 프레임을 할당받아야한다.
&lt;ul&gt;
&lt;li&gt;집중적으로 참조되는 페이지를 한꺼번에 적재하지 않으면 페이지 부재율이 높아진다.&lt;/li&gt;
&lt;li&gt;입출력이 많아지므로 CPU 이용률이 떨어진다.&lt;/li&gt;
&lt;li&gt;위 현상을 스레싱이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운영체제는 CPU 이용률이 낮다는 것은 메모리에 올라온 프로세스의 수가 적기 때문이라고 판단한다. 따라서 CPU 이용률이 떨어지면 운영체제는 메모리에 올라와 있는 프로세스 수를 늘린다.&lt;/li&gt;
&lt;li&gt;다중 프로그래밍의 정도 Multi-programming Degree MPD 라고 부른다.
&lt;ul&gt;
&lt;li&gt;CPU 이용률이 낮으면 운영체제는 MPD를 높인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;과도하게 MPD가 높아지면 각 프로세스에게 할당되는 메모리가 줄어들고 필요한 최소한 프레임 할당이 어렵다.&lt;/li&gt;
&lt;li&gt;따라서 페이지 부재가 더 빈번하게 발생하게 되고 디스크 I/O 작업이 많이 일어나며서 문맥교환으로 다른 프로세스에게 CPU를 넘긴다.&lt;/li&gt;
&lt;li&gt;반복되면서 CPU는 문맥교환과 페이지 부재 처리를 하느라 바빠지고 CPU이용률이 떨어지게 된다.
&lt;ul&gt;
&lt;li&gt;그러면 또 운영체제는 메모리에 프로세스를 더욱 올려 상황을 악화시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이것을 방지하기 위해 MPD를 조절하는 알고리즘으로 &lt;strong&gt;1) 워킹셋 알고리즘 2) 페이지 부재 빈도 알고리즘&lt;/strong&gt;이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-워킹셋-알고리즘-working-set-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9B%8C%ED%82%B9%EC%85%8B-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-working-set-algorithm&quot; aria-label=&quot;1 워킹셋 알고리즘 working set algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 워킹셋 알고리즘 working-set algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;지역성 집합 locality set: 프로세스가 특정 주소 영역을 집중적으로 참조하는 경향&lt;/li&gt;
&lt;li&gt;워킹셋 알고리즘은 이런 지역성 집합이 메모리에 동시에 올라갈 수 있도록 보장해주는 메모리 관리 알고리즘이다.&lt;/li&gt;
&lt;li&gt;한꺼번에 메모리에 올라와야하는 페이지 집합을 working set으로 정의하여 한꺼번에 메모리에 올라갈 수 있을 때만 메모리를 할당한다.
&lt;ul&gt;
&lt;li&gt;그렇지 않다면 프로세스에 할당된 페이지 프레임을 모두 반납시키고 프로세스 전체를 스왑아웃시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다중 프로그래밍의 정도를 조절하고 스레싱을 방지한다.&lt;/li&gt;
&lt;li&gt;구현 방법
&lt;ul&gt;
&lt;li&gt;한꺼번에 올라갈 워킹셋을 정의하기 위해 워킹셋 윈도우 working-set window를 사용한다.&lt;/li&gt;
&lt;li&gt;워킹셋 윈도우는 특정 시간동안 참조된 페이지의 중복제거된 집합이다. 그 시간 이후 워킹셋에 포함된 페이지만 메모리에 유지되고 아닌 페이지는 메모리에서 쫓겨난다.&lt;/li&gt;
&lt;li&gt;워킹셋의 크기의 합이 프레임의 수보다 크면 일부 프로세스를 스왑 아웃 시켜 프레임에 워킹셋이 모두 올라갈 수 있도록 보장한다.
&lt;ul&gt;
&lt;li&gt;MPD 를 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만일 프레임이 남으면 스왑 아웃 프로세스를 다시 메모리에 올려 워킹셋을 할당한다.
&lt;ul&gt;
&lt;li&gt;MPD를 증가시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;윈도우 크기의 결정이 중요하다.
&lt;ul&gt;
&lt;li&gt;너무 작으면 지역성 집합 수용이 어렵댜.&lt;/li&gt;
&lt;li&gt;크면 MPD가 감소하여 CPU 이용률이 낮아질 수 잇다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-페이지-부재-빈도-알고리즘-pff-page-fault-frequency&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EB%B9%88%EB%8F%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-pff-page-fault-frequency&quot; aria-label=&quot;2 페이지 부재 빈도 알고리즘 pff page fault frequency permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 페이지 부재 빈도 알고리즘 PFF page fault frequency&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 페이지 부재율을 주기적으로 조사하여 근거해 프로세스 할당 메모리를 동적으로 조절한다.&lt;/li&gt;
&lt;li&gt;어떤 프로세스의 페이지 부재율이 시스템의 상한값을 넘으면 이 프로세스에게 할당된 프레임 수가 부족하다고 판단한다.
&lt;ul&gt;
&lt;li&gt;프레임을 추가로 할당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추가로 할당할 프레임이 없으면 일부 프로세스를 스왑 아웃시켜 프로세스의 수를 조절한다.&lt;/li&gt;
&lt;li&gt;부재율이 하한값 이하로 떨어지면 지나치게 많은 프레임을 할당받은 것으로 간주하고 할당 프레임 수를 줄인다.&lt;/li&gt;
&lt;li&gt;이렇게 다 조절 후 프레임이 남으면 스왑 아웃 프로세스에게 프레임을 할당한다.
&lt;ul&gt;
&lt;li&gt;MPD 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84&quot;&gt;🌩 들어가기 전&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95&quot;&gt;🌩 1. 요구 페이징&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EC%B2%98%EB%A6%AC&quot;&gt;1) 요구 페이징의 페이지 부재 처리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%EC%84%B1%EB%8A%A5&quot;&gt;2) 요구 페이징의 성능&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4&quot;&gt;🌩 2. 페이지 교체&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%B5%9C%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4&quot;&gt;1) 최적 페이지 교체&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-fifo&quot;&gt;2) 선입선출 알고리즘 FIFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-lru-least-recently-used&quot;&gt;3) LRU Least Recently Used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-lfu-least-frequently-used&quot;&gt;4) LFU Least Frequently Used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%ED%81%B4%EB%9F%AD-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;5) 클럭 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-3-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%94%84%EB%A0%88%EC%9E%84%EC%9D%98-%ED%95%A0%EB%8B%B9&quot;&gt;🌩 3. 페이지 프레임의 할당&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%EC%A0%84%EC%97%AD%EA%B5%90%EC%B2%B4%EC%99%80-%EC%A7%80%EC%97%AD%EA%B5%90%EC%B2%B4&quot;&gt;🌩 4. 전역교체와 지역교체&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-5-%EC%8A%A4%EB%A0%88%EC%8B%B1-thrashing&quot;&gt;🌩 5. 스레싱 thrashing&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%9B%8C%ED%82%B9%EC%85%8B-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-working-set-algorithm&quot;&gt;1) 워킹셋 알고리즘 working-set algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EB%B9%88%EB%8F%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-pff-page-fault-frequency&quot;&gt;2) 페이지 부재 빈도 알고리즘 PFF page fault frequency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH7. 메모리 관리]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH7. 메모리 관리를 읽고 정리한 내용입니다 🙌 🌩 들어가기 전 우리가 흔히 사용하는 컴퓨터 주소 체계는 32비트 혹은 64비트로 나뉘어져 있다. 32비트면 3…]]></description><link>https://yjksw.github.io/operating-system-6/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-6/</guid><pubDate>Sat, 16 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH7. 메모리 관리&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-들어가기-전&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84&quot; aria-label=&quot; 들어가기 전 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 들어가기 전&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;우리가 흔히 사용하는 컴퓨터 주소 체계는 32비트 혹은 64비트로 나뉘어져 있다.
&lt;ul&gt;
&lt;li&gt;32비트면 32개의 비트로 주소를 표현할 수 있는 것이다.&lt;/li&gt;
&lt;li&gt;2^32가지 다른 메모리 위치를 구분할 수 있다.&lt;/li&gt;
&lt;li&gt;컴퓨터는 바이트 단위(8비트)로 주소를 부여한다. 따라서 2^32 바이트 만큼의 메모리 공간에 서로 다른 주소를 할당할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;32 비트를 계층적으로 묶어서 관리한다.&lt;/li&gt;
&lt;li&gt;보통 4KB (2^12 바이트) 단위로 묶어서 페이지(page)를 구성한다.
&lt;ul&gt;
&lt;li&gt;페이지 내에서 주소를 구분하기 위해서는 12비트가 필요하다. 따라서 32비트 중 하위 12비트는 페이지 내에서 주소를 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-주소-바인딩&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%EC%A3%BC%EC%86%8C-%EB%B0%94%EC%9D%B8%EB%94%A9&quot; aria-label=&quot; 1 주소 바인딩 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 주소 바인딩&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 주소 공간 (address space)는 프로그램이 실행되기 위해 메모리에 적재되면 프로세스를 위한 독자적인 주소 공간이 생성된다.
&lt;ul&gt;
&lt;li&gt;논리적 주소 (logical address) 혹은 가상 주소 (virtual address)라고 부른다.&lt;/li&gt;
&lt;li&gt;CPU는 논리적 주소에 근거해 명령을 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;논리적 주소는 프로세스 마다 &lt;strong&gt;독립적&lt;/strong&gt;으로 할당되고 모두 0번지부터 시작한다.&lt;/li&gt;
&lt;li&gt;물리적 주소 (physical address)는 물리적 메모리에 실제로 올라가는 위치이다.
&lt;ul&gt;
&lt;li&gt;물리적 메모리의 낮은 주소에는 운영체제가 올라가고 높은 주소에는 사용자 프로세스들이 올라간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리 참조를 할 때 프로세스의 논리적 주소가 물리적 주소의 어느 위치인지 확인해야하는 주소 바인딩 (address binding)이라는 작업이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;주소-바인딩-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%86%8C-%EB%B0%94%EC%9D%B8%EB%94%A9-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;주소 바인딩 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주소 바인딩 방식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;물리 메모리 주소가 결정되는 시기에 따라서 분류된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;컴파일 타임 바인딩 (compile time binding)
&lt;ul&gt;
&lt;li&gt;프로그램을 컴파일할 때 물리적 메모리 주소가 결정&lt;/li&gt;
&lt;li&gt;컴파일 시점에 해당 프로그램이 물리적 메모리 몇 번지에 위치할 것인지 결정&lt;/li&gt;
&lt;li&gt;프로그램이 절대주소로 적재된다는 뜻으로 절대코드를 생성하는 바인딩 (absolute code)&lt;/li&gt;
&lt;li&gt;프로그램의 물리적 주소를 변경하고 싶다면 프로그램을 다시 컴파일해야한다.&lt;/li&gt;
&lt;li&gt;비현실적이며 현대 시분할 컴퓨팅 환경에서는 잘 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로드 타임 바인딩 (load time binding)
&lt;ul&gt;
&lt;li&gt;프로그램이 시작될 때 물리적 메모리 주소가 결정&lt;/li&gt;
&lt;li&gt;loader의 책임하에 물리적 메모리 주소가 부여되고 프로그램 종료까지 물리적 메모리상의 위치가 고정
&lt;ul&gt;
&lt;li&gt;로더는 사용자 프로그램을 메모리에 적재시키는 프로그램&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컴파일러가 재배치 가능 코드(relocatable code)를 생성한 경우에 가능한 주소 바인딩 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실행시간 바인딩 (execution time binding or run time binding)
&lt;ul&gt;
&lt;li&gt;프로그램 시작 후에도 물리적 메모리 주소가 변경될 수 있음&lt;/li&gt;
&lt;li&gt;CPU가 메모리 주소를 참조할 때마다 데이터가 물리적 메모리의 어느 위치에 있는지 주소 매핑 테이블 (address mapping table)을 참조해 바인딩을 점검&lt;/li&gt;
&lt;li&gt;기준 레지스터 (base register)와 한계 레지스터 (limit register) 를 포함하여 MMU (Memeory Management Unit)이라는 하드웨어적 자원 뒷받침이 필요
&lt;ul&gt;
&lt;li&gt;MMU는 논리적 주소를 물리적 주소로 매핑해주는 하드웨어 장치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;mmu-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mmu-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;mmu 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MMU 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MMU를 사용하여 주소 변환하는 기본적인 방식&lt;/li&gt;
&lt;li&gt;MMU 기법은 논리적 주소값에 기준 레지스터 값을 더해 물리적 주소값을 얻어낸다.
&lt;ul&gt;
&lt;li&gt;기준 레지스터는 재배치 레지스터 (reload register)라고도 하며 프로세스의 물리적 메모리 시작 주소를 가지고 있다.&lt;/li&gt;
&lt;li&gt;offset 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MMU 기법은 프로그램의 주소가 물리적 메모리에 연속적으로 적재된 것을 가정한다.&lt;/li&gt;
&lt;li&gt;따라서 물리적 메모리의 시작 주소만 알면 변환을 쉽게 할 수 있으며 사용자 프로그램이나 CPU는 물리적 메모리를 알 필요 없이 논리적 메모리 주소만 다룬다.&lt;/li&gt;
&lt;li&gt;프로세스마다 고유의 메모리 주소를 가지고 있기 때문에 같은 주소 (논리적 메모리 주소 100번지)도 각기 다른 물리적 메모리 위치를 가리켜야한다.
&lt;ul&gt;
&lt;li&gt;이것을 기준 레지스터를 해당 프로세스에 맞는 값으로 설정하므로 여러 프로세스에 대한 주소 매핑을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;메모리-보안-memory-protection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%EC%95%88-memory-protection&quot; aria-label=&quot;메모리 보안 memory protection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 보안 Memory protection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리에 여러 프로세스가 올라가 있기 때문에 한 프로세스가 다른 프로세스의 물리적 주소를 참조하여 문제가 발생할수도 있다.&lt;/li&gt;
&lt;li&gt;한계 레지스터 (limit register)를 이용하여 해당 프로세스가 자신의 주소 공간을 넘어 메모리를 참조하면 (base register + limit register) 트랩을 발생시켜 해당 프로세스를 종료시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-메모리-관리와-관련된-용어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC%EC%99%80-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%9A%A9%EC%96%B4&quot; aria-label=&quot; 2 메모리 관리와 관련된 용어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. 메모리 관리와 관련된 용어&lt;/h2&gt;
&lt;h3 id=&quot;1-동적로딩-dynamic-loading&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8F%99%EC%A0%81%EB%A1%9C%EB%94%A9-dynamic-loading&quot; aria-label=&quot;1 동적로딩 dynamic loading permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 동적로딩 dynamic loading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로그램이 동시에 메모리에 올라가서 수행되는 다중 프로그래밍(multi-programming) 환경에서 메모리 효율을 높이는 기법이다.&lt;/li&gt;
&lt;li&gt;프로세스가 시작될 때 그 프로세스의 주소 공간 전체를 물리적 메모리에 올리는 것이 아니라 해당 부분이 호출될 때 메모리에 적재되는 방식이다.
&lt;ul&gt;
&lt;li&gt;프로그램의 오류 처리루틴 등등은 가끔씩만 사용되는 방어용 코드이므로 항상 적재될 필요는 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;필요하지 않은 코드가 한꺼번에 적재되어 메모리가 낭비되는 것을 막아 메모리를 효율적으로 사용할 수 있도록 한다.
&lt;ul&gt;
&lt;li&gt;프로그램 자체에서 구현 가능하고 운영체제가 라이브러리로 지원하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-동적연결-dynamic-linking&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%8F%99%EC%A0%81%EC%97%B0%EA%B2%B0-dynamic-linking&quot; aria-label=&quot;2 동적연결 dynamic linking permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 동적연결 dynamic linking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;연결은 개발자가 작성한 소스코드를 컴파일하여 생성된 object file과 이미 컴파일된 라이브러리 파일 library file을 묶어 하나의 실행파일을 생성하는 과정이다.&lt;/li&gt;
&lt;li&gt;동적연결은 이 연결을 프로그램 실행 시점까지 지연시키는 기법이다.
&lt;ul&gt;
&lt;li&gt;정적 연결 static linking은 미리 작성된 코드와 라이브러리 코드가 합쳐져서 실행파일이 생성된다.&lt;/li&gt;
&lt;li&gt;따라서 실행파일의 크기가 크고 동일한 라이브러리를 각 프로세스가 개별적으로 메모리에 적재하여 물리적 메모리가 낭비된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동적연결은 라이브러리가 실행시점에 연결되어 실행파일에 라이브러리 코드가 포함되어 있지 않고 라이브러리 함수 호출 시 라이브러리에 연결된다.&lt;/li&gt;
&lt;li&gt;동적연결을 위해 코드의 라이브러리 호출 부분에 스텁 stub이라는 작은 코드를 둔다.
&lt;ul&gt;
&lt;li&gt;stub으로 해당 라이브러리가 메모리에 존재하는지 보고 있다면 그 주소에서 직접 참조하고 없다면 디스크에서 라이브러리를 메모리로 적재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공동으로 사용하는 라이브러리는 한번 적재하여 메모리 효율을 높인다.&lt;/li&gt;
&lt;li&gt;운영체제의 지원이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-중첩-overlays&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A4%91%EC%B2%A9-overlays&quot; aria-label=&quot;3 중첩 overlays permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 중첩 overlays&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 주소 공간을 분할해 실제 필요한 부분만 메모리에 적재하는 기법이다.&lt;/li&gt;
&lt;li&gt;동적로딩과 비슷하나 중첩의 배경은 초창기에 물리적 메모리의 공간이 부족하여 프로세스의 주소 공간을 분할해 당장 필요한 부분을 올리고 해당 부분의 실행이 끝나면 나머지 부분을 올려서 실행한 기법이다. (단일 프로세스를 올릴 때 메모리가 부족한 경우..)
&lt;ul&gt;
&lt;li&gt;동적로딩은 다중 프로그래밍 환경에서 메모리 이용률을 높이기 위한 기법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;중첩은 운영체제의 지원이 없고 프로그래머가 직접 구현되어야 했으며 따라서 수작업 중첩(manual overlays)라고도 부른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-스와핑-swapping&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%8A%A4%EC%99%80%ED%95%91-swapping&quot; aria-label=&quot;4 스와핑 swapping permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 스와핑 swapping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리에 올라온 프로세스의 주소공간 전체를 스왑 영역에 일시적으로 내려놓는 것이다.&lt;/li&gt;
&lt;li&gt;스왑 영역을 백킹스토어 backing store 라고도 부른다.
&lt;ul&gt;
&lt;li&gt;디스크 내에서 파일 시스템과는 별도로 존재한다.&lt;/li&gt;
&lt;li&gt;스왑 영역은 디스크에 일시적으로 저장하여 저장기간이 짧은 저장공간이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스왑 영역은 다수의 프로세스를 담을 수 있는 충분한 저장공간이면서 접근 속도가 보장되어야 한다.&lt;/li&gt;
&lt;li&gt;스와핑은 프로세스 종료 후 디스크에 프로세스를 내려놓는 것이 아니라, 특정 이유로 &lt;strong&gt;수행 중인 프로세스&lt;/strong&gt;를 메모리에서 디스크로 내려놓는 것이다.
&lt;ul&gt;
&lt;li&gt;디스크 → 메모리 : 스왑인&lt;/li&gt;
&lt;li&gt;메모리 → 디스크: 스왑아웃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스와핑 과정
&lt;ul&gt;
&lt;li&gt;스와퍼 swapper라고 불리는 중기 스캐줄러(medium-term scheduler)로 스왑시킬 프로세스를 선정&lt;/li&gt;
&lt;li&gt;해당 프로세스는 메모리에 올라가있는 전체 내용이 스왑 영역으로 스왑 아웃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스와핑의 중요 역할은 메모리의 프로세스 수를 조절하는 것이다.
&lt;ul&gt;
&lt;li&gt;degree of multiprogramming 다중 프로그래밍의 정도를 조절한다.&lt;/li&gt;
&lt;li&gt;메모리에 너무 많은 양의 프로세스가 올라와있으면 시스템 전체 성능이 떨어지기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컴파일 타임 바인딩&lt;/strong&gt;과 &lt;strong&gt;로드 타임 바인딩&lt;/strong&gt;은 스왑 아웃된 프로세스가 스왑인 될 때 동일한 메모리 위치로 올라가야한다.&lt;/li&gt;
&lt;li&gt;스와핑에서 스왑 영역에 프로세스의 주소 공간이 순차적으로 저장된다.
&lt;ul&gt;
&lt;li&gt;스와핑 소요시간은 디스크 탐색시간이나 회전지연시간(rotational latency)보다 디스크 섹터에서 실제 데이터를 읽고 쓰는 전송시간 transfer time이 대부분을 차지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-물리적-메모리의-할당방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%EB%AC%BC%EB%A6%AC%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%ED%95%A0%EB%8B%B9%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot; 3 물리적 메모리의 할당방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 물리적 메모리의 할당방식&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제 상주 영역과 사용자 프로세스영역으로 나뉜다.
&lt;ul&gt;
&lt;li&gt;운영체제 상주 영역은 인터럽트 벡터와 함께 낮은 주소 영역을 사용한다.&lt;/li&gt;
&lt;li&gt;운영체제 커널이 위치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자 프로세스 영역은 연속할당(contiguous allocation)과 불연속할당(noncontiguous alloation) 방식으로 나뉜다.
&lt;ul&gt;
&lt;li&gt;연속할당 - 각각의 프로세스를 물리적 메모리 연속적인 공간에 올림
&lt;ul&gt;
&lt;li&gt;물리적 메모리를 다수의 분할로 나누어 하나의 분할에 하나의 프로세스가 적재&lt;/li&gt;
&lt;li&gt;분할은 고정분할(fixed partition allocation)과 가변분할(variable partition allocation) 방식으로 나뉜다. 고정분할은 미리 메모리를 나누어 놓는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;불연속 할당 - 하나의 프로세스를 물리적 메모리 여러 영역에 분산하여 적재하는 방식
&lt;ul&gt;
&lt;li&gt;동일한 페이지로 잘라서 메모리에 페이지 단위로 적재시키는 페이징(paging) 기법&lt;/li&gt;
&lt;li&gt;프로그램 주소 공간을 코드, 데이터, 스택 등 의미있는 단위인 세그먼트로 나누는 세그멘테이션(segmentation) 기법이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-연속할당-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%97%B0%EC%86%8D%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;1 연속할당 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 연속할당 방식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;고정분할이나 가변분할로 나뉘어진 크기에 프로세스를 연속적으로 적재한다.&lt;/li&gt;
&lt;li&gt;고정분할 방식
&lt;ul&gt;
&lt;li&gt;물리적 메모리를 주어진 개수만큼 영구적인 분할(partition)으로 나누고 각 분할에 하나의 프로세스를 적재한다.&lt;/li&gt;
&lt;li&gt;분할의 크기가 모두 같을수도 다를수도 있다.&lt;/li&gt;
&lt;li&gt;메모리에 올릴 수 있는 프로세스의 수가 분할개수 만큼으로 고정되어 있고 수행 가능한 프로그램의 최대 크기가 정해져있다. (분할의 최대크기)&lt;/li&gt;
&lt;li&gt;외부조각(external fragmentation)과 내부조각(internal fragmentation)이 발생할 수 있다.
&lt;ul&gt;
&lt;li&gt;외부조각은 분할이 비었는데 프로그램의 크기보다 작아서 적재하는 못하는 경우 발생&lt;/li&gt;
&lt;li&gt;내부조각은 프로그램에게 배정되었는데 조각의 크기가 상대적으로 커서 내부에 사용하지 않는 메모리 공간이 생기는 경우 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가변분할 방식
&lt;ul&gt;
&lt;li&gt;적재되는 프로그램의 크기에 따라 분할의 크기와 개수가 동적으로 변하는 방식이다.
&lt;ul&gt;
&lt;li&gt;관리를 위한 프로그래밍 기법이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램의 크기만큼 분할하므로 내부조각은 발생하지 않는다. 하지만 외부조각은 여전히 발생한다.&lt;/li&gt;
&lt;li&gt;중요한 점은 주소 공간의 크기가 n인 프로세스를 메모리에 올릴 때 메모리 가용공간 중 어느 위치에 올릴지 이다.
&lt;ul&gt;
&lt;li&gt;동적 메모리 할당 문제 dynamic storage-allocation problem 이라고 한다.&lt;/li&gt;
&lt;li&gt;가용공간은 사용되지 않은 메모리 공간이고 산발적으로 존재한다.&lt;/li&gt;
&lt;li&gt;연속할당 기법에서는 프로세스 전체를 담을 수 있는 가용공간을 찾아야한다.&lt;/li&gt;
&lt;li&gt;운영체제는 이미 사용중인 메모리와 가용 공간에 대한 정보를 유지하여 가용 공간을 효율적으로 관리해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동적 메모리 할당 문제 해결 방법 3가지
&lt;ol&gt;
&lt;li&gt;크기가 n 이상인 가용 공간 중 가장 먼저 찾아지는 공간에 프로세스를 할당하는 최초적합 (first-fit) 방법
&lt;ul&gt;
&lt;li&gt;가용공간을 모두 탐색하지 않으므로 시간적인 면에서 효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;크기가 n 이상인 가장 작은 가용 공간을 찾아가곳에 프로세스를 할당하는 최적적합(best-fit) 방법
&lt;ul&gt;
&lt;li&gt;가용공간 리스트가 크기순으로 정렬되어 있지 않는다면 모든 가용공간 리스트를 탐색하여 시간적 오버헤드가 발생&lt;/li&gt;
&lt;li&gt;다수의 매우 작은 가용 공간들이 생성될 수 있다는 단점&lt;/li&gt;
&lt;li&gt;공간적인 면에서 효율적인 장점이 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가용 공간 중 가장 크기가 큰 곳에 새로운 프로그램을 할당하는 최악적합(worst-fit) 방법
&lt;ul&gt;
&lt;li&gt;가용 공간 리스트를 탐색하는 시간적 오버헤드 발생&lt;/li&gt;
&lt;li&gt;상대적으로 더 큰 프로그램을 담을 수 있는 가용 공간을 빨리 소진한다는 문제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;최초척합과 최적적합 방식이 최악적합 방식에 비해 속도와 공간 이용률 측면에서 효과적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컴팩션 compaction - 가변분할 방식에서 외부조각 문제를 해결하는 방법
&lt;ul&gt;
&lt;li&gt;물리적 메모리 중 프로세스에 의해 사용중인 메모리 영역을 한쪽으로 몰고 가용 공간들을 다른 한쪽으로 모아 하나의 큰 가용 공간을 만드는 방법&lt;/li&gt;
&lt;li&gt;수행 중인 프로세스의 메모리상의 위치를 상당 부분 이동시키므로 비용이 많이 든다.&lt;/li&gt;
&lt;li&gt;중간에 일부 가용 공간이 발생하더라도 적은 수의 메모리 이동으로 효율적인 컴팩션을 수행해야하는데 이론적으로 복잡하다.&lt;/li&gt;
&lt;li&gt;수행 중인 프로세스의 물리적 메모리 위치를 옮겨야하므로 프로그램 시간 도중에 프로세스의 주소가 동적으로 바뀌는 실행시간 바인딩 방식이 지원될 때만 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-불연속할당-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B6%88%EC%97%B0%EC%86%8D%ED%95%A0%EB%8B%B9-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;2 불연속할당 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 불연속할당 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로세스가 물리적 메모리의 여러 위치에 분산되어 올라갈 수 있는 메모리 할당 기법이다.&lt;/li&gt;
&lt;li&gt;하나의 프로그램을 동일한 크기로 나누는 페이징 기법&lt;/li&gt;
&lt;li&gt;크기가 일정하지 않지만 의미 단위로 나누는 세그멘테이션 기법&lt;/li&gt;
&lt;li&gt;세그멘테이션이 기본이지만 이것을 다시 동일한 크기의 페이지로 나누는 페이지드 세그멘테이션(paged segmentation)으로 나뉜다&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-페이징-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%ED%8E%98%EC%9D%B4%EC%A7%95-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot; 4 페이징 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 페이징 기법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 주소 공간을 &lt;strong&gt;동일한 크기의 페이지 단위&lt;/strong&gt;로 나누어 &lt;strong&gt;물리적 메모리의 서로 다른 위치&lt;/strong&gt;에 페이지들을 저장하는 방식&lt;/li&gt;
&lt;li&gt;프로세스 일부는 백킹스토어, 일부는 물리 메모리에 혼재할 수 있다.&lt;/li&gt;
&lt;li&gt;메모리를 페이지와 동일한 크기인 프레임(frame)으로 미리 나눈다.
&lt;ul&gt;
&lt;li&gt;동적 메모리 할당 문제가 발생하지 않는 장점&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;주소 변환 절차가 연속할당 방식에 비해 다소 복잡하다.
&lt;ul&gt;
&lt;li&gt;하나의 프로세스도 여러 페이지 단위로 물리적 메모리에서의 위치가 상이하기 때문이다.&lt;/li&gt;
&lt;li&gt;따라서 프로세스 별 페이지 테이블(page table)을 가져 각 페이지가 물리 프로세스의 어느 frame에 매핑되는지 아는 주소 변환 엔트리를 가진다.
&lt;ul&gt;
&lt;li&gt;페이지 테이블은 페이지 개수만큼 엔트리를 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스 주소 공간과 물리적 메모리가 모두 같은 크기의 페이지 단위이기 때문에 빈 공간은 항상 활용 가능하다.
&lt;ul&gt;
&lt;li&gt;하지만 프로세스가 페이지 단위로 나누어 떨어지지 않기 때문에 마지막 조각의 마지막 페이지에서 내부조각이 발생할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-주소-변환-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;1 주소 변환 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 주소 변환 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 사용하는 논리적 주소를 번호(p)와 페이지 오프셋(d)로 나누어 주소 변환(address translation)에 사용한다.
&lt;ul&gt;
&lt;li&gt;페이지 번호는 페이지별 주소 변환 정보를 담고있는 페이지 테이블 접근 인덱스(index)로 사용&lt;/li&gt;
&lt;li&gt;해당 인덱스의 항목(entry)에는 페이지의 물리적 메모리상 기준 주소(base address) 시작 위치가 저장&lt;/li&gt;
&lt;li&gt;페이지 오프셋은 하나의 페이지 내에서의 변위(displacement)를 알려준다.
&lt;ul&gt;
&lt;li&gt;기준 주소값 + 변위값으로 논리적 주소에 대응하는 물리적 주소를 얻는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-페이지-테이블의-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;2 페이지 테이블의 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 페이지 테이블의 구현&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;페이징 기법에서 주소 변환을 하기 위한 자료구조이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실행중인 프로세스의 페이지 테이블에 접근하기 위해 2개 레지스터를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블 기준 레지스터(page-table base register) PTBR
&lt;ul&gt;
&lt;li&gt;물리적 메모리 내에서 페이지 테이블의 시작위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이지 테이블 길이 레지스터(page-table length register) PTLR
&lt;ul&gt;
&lt;li&gt;페이지 테이블의 크기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;페이징에서 메모리에 접근하려면 &lt;strong&gt;1) 페이지 테이블 접근을 위해 메모리 접근 2) 주소 변환된 메모리에 접근&lt;/strong&gt; 이렇게 두번 메모리에 접근하여 오버헤드가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블 접근 오버헤드를 줄이고 메모리 접근 속도를 향상시키기 위해 TLB(Translation Look-aside Buffer) 고속 주소 변환용 하드웨어 캐시가 사용되기도 한다.&lt;/li&gt;
&lt;li&gt;메모리에 비해 TLB는 비싸기 때문에 빈번히 참조되는 페이지에 대한 주소변환 정보만 담는다. 따라서 TLB에 요청 페이지의 주소 변환 정보가 있을 수도 있고 없을 수도 있다.&lt;/li&gt;
&lt;li&gt;TLB에 존재한다면 얻고 그렇지 않다면 메인 메모리 페이지 테이블로부터 프레임 번호를 알아내도록 한다.&lt;/li&gt;
&lt;li&gt;문맥 교환시 이전 프로세스의 주소변환 정보를 담는 TLB를 초기화해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/141051950-79afbe37-5ee2-4627-876c-a51de9083ca5.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLB와 페이지 테이블의 정보 구조 차이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블에는 페이지 주소 변환 정보가 페이지 번호에 따라 순차적으로 들어있으므로 페이지 번호로 바로 항모겡 접근하여 프레임 번호를 구할 수 있다.&lt;/li&gt;
&lt;li&gt;TLB는 모든 페이지에 대한 주소 변환 정보를 가지고 있는 것이 아니기 때문에 페이지 번호와 프레임 번호가 쌍으로 저장되어야 한다. (두 값이 모두 있어야한다. 페이징 테이블은 프레임 번호만 순차적으로 있다. 그림참조)&lt;/li&gt;
&lt;li&gt;TLB에 있는지 확인하려면 모든 엔트리를 다 찾아봐야하는 오버헤드가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLB 엔트리를 모두 탐색하는 오버헤드를 줄이기위해 병렬탐색(parallel search)이 가능한 연관 레지스터(associative register)를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TLB 항목을 동시에 탐색할 수 있는 기능이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-계층적-페이징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%95&quot; aria-label=&quot;3 계층적 페이징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 계층적 페이징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블에 메모리의 상당 부분이 소요되어 실제 사용 가능한 메모리 공간이 줄어드는 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;페이지 테이블로 낭비되는 공간을 줄이기 위해 2단계 페이징(two-level paging)을 기법을 사용한다.&lt;/li&gt;
&lt;li&gt;외부 페이지 테이블 (outer page table)과 내부 페이지 테이블 (inner page table)을 사용하고 사용하지 않는 주소 공간은 외부 페이지 테이블 항목을 null로 두어 대응하는 내부 페이지 테이블 항목을 설정하지 않아 메모리 낭비를 줄인다.
&lt;ul&gt;
&lt;li&gt;하지만 주소변환을 위해 페이지 테이블을 2개 접근해야하므로 시간적 손해가 있다.&lt;/li&gt;
&lt;li&gt;TLB를 사용해 접근 속도를 높일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/141052309-99c2a925-799e-4da8-838c-816ca979b37d.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-역페이지-테이블-inverted-page-table&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%97%AD%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94-inverted-page-table&quot; aria-label=&quot;4 역페이지 테이블 inverted page table permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 역페이지 테이블 inverted page table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;물리적 메모리의 페이지 프레임 하나당 페이지 테이블 항목을 하나씩 둔다.&lt;/li&gt;
&lt;li&gt;논리적 주소에 대한 페이지 테이블을 만드는 것이 아니라 물리적 주소에 대한 페이지 테이블을 만드는 것이다.
&lt;ul&gt;
&lt;li&gt;각 프로세스마다 페이지 테이블을 두지 않고 시스템 전체에 대한 페이지 테이블을 하나만 둔다.&lt;/li&gt;
&lt;li&gt;페이지 테이블의 각 항목은 &lt;strong&gt;어느 프로세스의 어느 페이지&lt;/strong&gt;가 이 프레임에 저장되었는지 정보를 보관한다.
&lt;ul&gt;
&lt;li&gt;pid와 페이지 번호 p를 담는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;물리적 주소에서 논리적 주소를 얻기 수월한 방법이므로 어느 정도의 비효율적인 측면이 있다.
&lt;ul&gt;
&lt;li&gt;주소 변환 요청이 들어오면 페이지 테이블을 다 탐색해야하고 시간을 소요한다.&lt;/li&gt;
&lt;li&gt;따라서 페이지 테이블을 메모리에 유지하는 대신 연관 레지스터 (associative register)에 보관히 전체 항목을 병렬 탐색 가능하게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/141052223-35660eb2-db9c-4f94-8496-a89a587b06d0.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-공유-페이지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EA%B3%B5%EC%9C%A0-%ED%8E%98%EC%9D%B4%EC%A7%80&quot; aria-label=&quot;5 공유 페이지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 공유 페이지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;공유 코드(shared code)는 여러 프로세스에 의해 공통으로 사용될 수 있도록 작성된 코드이다.
&lt;ul&gt;
&lt;li&gt;메모리 공간의 효율적인 사용을 위함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;재진입 가능 코드 (re-entrant code) 또는 순수 코드 (pure code)로 불리며 read-only 특성을 가진다.&lt;/li&gt;
&lt;li&gt;공유 페이지(shared page)는 공유 코드를 담고있는 페이지이다.&lt;/li&gt;
&lt;li&gt;공유 페이지는 여러 프로세스에 공유되기 때문에 물리 메모리에 하나만 적재되어 메모리를 효율적으로 사용할 수 있다.
&lt;ul&gt;
&lt;li&gt;문서 편집기를 공유 페이지 사용해서 작성한 경우, 이 프로세스를 여러개 수행시켜도 공유 코드를 담은 페이지는 하나만 올라간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공유 코드는 읽기 전용이며 논리적 주소에서 같은 위치에 있어야하는 제약점도 있다.&lt;/li&gt;
&lt;li&gt;대비되는 개념으로 사유 페이지(private page)가 있다.
&lt;ul&gt;
&lt;li&gt;프로세스별로 독자적으로 사용하는 페이지이며 논리적 주소 공간 중 어디에 있어도 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/141052240-708a31c5-6b2e-48b4-beee-b6cf66b8fcca.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-메모리-보호&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%ED%98%B8&quot; aria-label=&quot;6 메모리 보호 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) 메모리 보호&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리 보호를 위한 보호 비트(protection bit)와 유효-무효 비트(valid-invalid bit)를두고 있다.&lt;/li&gt;
&lt;li&gt;보호 비트
&lt;ul&gt;
&lt;li&gt;각 페이지에 대한 접근 권한 내용을 담는다.&lt;/li&gt;
&lt;li&gt;읽기-쓰기/읽기 전용 등의 접근 권한을 설정하여 ‘어떠한’ 접근을 제한한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유효-무효 비트
&lt;ul&gt;
&lt;li&gt;해당 페이지의 내용이 유효한지 내용을 담는다.&lt;/li&gt;
&lt;li&gt;유효로 세팅한다면 해당 메모리 프레임에 그 페이지가 존재하여 접근이 허용된다.&lt;/li&gt;
&lt;li&gt;무효라면 프로세스가 그 주소 부분을 사용하지 않거나 해당 페이지가 물리적 메모리가 아닌 백킹 스토에어에 존재하여 &lt;strong&gt;해당 메모리 프레임&lt;/strong&gt;에 접근 권한이 없는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-세그멘테이션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98&quot; aria-label=&quot; 5 세그멘테이션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 세그멘테이션&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 주소 공간을 의미있는 단위인 세그먼트(segment)로 나누어 물리적 메모리에 올리는 기법이다.&lt;/li&gt;
&lt;li&gt;프로세스는 코드, 데이터, 스택 등인 논리적 단위로 구성된다. 이것에 따라서 나눈다.
&lt;ul&gt;
&lt;li&gt;많게는 프로그램 함수 하나하나를 세그먼트로 정의할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;크기가 균일하지 않으며 통째로 메모리에 적재되지 않고 나누어져 메모리에 적재되어 페이징과 유사하다.&lt;/li&gt;
&lt;li&gt;균일하지 않은 세그먼트들을 적재하기 때문에 그것을 관리하는 오버헤드가 있다.&lt;/li&gt;
&lt;li&gt;논리적 주소가 &lt;strong&gt;&amp;#x3C;세그먼트 번호, 오프셋&gt;&lt;/strong&gt; 으로 나뉘어 사용되어 몇번째 세그먼트와 해당 세그먼트 내에서 오프셋 정보를 나타낸다.&lt;/li&gt;
&lt;li&gt;세그먼트 테이블을 사용한다.
&lt;ul&gt;
&lt;li&gt;기준점(base)와 한계점(limit)을 가지고 있다.&lt;/li&gt;
&lt;li&gt;기준점은 물리 메모리에서 시작위치, 한계점은 세그먼트의 길이이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;두 register의 도움을 받는다.
&lt;ul&gt;
&lt;li&gt;세그먼트 테이블 기준 레지스터 STBR (Segment Table Base Register)
&lt;ul&gt;
&lt;li&gt;세그먼트 테이블이 물리 메모리 어느 위치에 있는지 시작주소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세그먼트 테이블 길이 레지스터 STLR (Segment Table Legnth Register)
&lt;ul&gt;
&lt;li&gt;해당 프로세스의 주소 공간이 몇개의 세그먼트로 구성되었는지 세그먼트 개수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;논리적 주소를 물리적 주소로 변환하기 전 두 가지를 확인한다.
&lt;ol&gt;
&lt;li&gt;요청된 세그먼트 번호가 STLR에 저장된 값보다 작은 값인지
&lt;ol&gt;
&lt;li&gt;아니라면 존재하지 않는 세그먼트 접근이므로 예외상황 발생&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;논리적 주소의 오프셋 값이 그 세그먼트의 길이보다 작은지
&lt;ol&gt;
&lt;li&gt;테이블의 해당 항목의 한계점과 논리적 주소의 오프셋을 비교&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;페이징 기법과 마찬가지로 보호비트와 유효비트를 둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/141052384-1976d0e9-efce-440b-bd42-469064f09aac.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 특정 세그먼트를 공유해 사용하는 공유 세그먼트(shared segment) 개념이 있다.
&lt;ul&gt;
&lt;li&gt;공유 세그먼트는 공유하는 모든 프로세스의 동일한 논리적 주소에 있어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세그먼트는 의미 단위로 나뉘어지므로 공유와 보안 측면에서 페이징 기법보다 효과적이다.
&lt;ul&gt;
&lt;li&gt;주소 공간의 일부를 공유하거나 접근 권한 제어 등이 가능하다.&lt;/li&gt;
&lt;li&gt;의미 단위로 업무를 수행할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하지만 길이가 균일하지 않아서 물리적 메모리에 외부조각이 발생한다.
&lt;ul&gt;
&lt;li&gt;세그먼트를 어느 가용 공간에 할당할 문제도 있다.&lt;/li&gt;
&lt;li&gt;최초적합과 최적적합 방식이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-6-페이지드-세그먼테이션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-6-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%93%9C-%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%85%8C%EC%9D%B4%EC%85%98&quot; aria-label=&quot; 6 페이지드 세그먼테이션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 6. 페이지드 세그먼테이션&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;페이징과 세그먼테이션의 장점을 취하는 기법이다.&lt;/li&gt;
&lt;li&gt;의미단위로 세그먼트를 나누고 세그먼트의 길이가 동일한 크기의 페이지들의 집합으로 이루어지도록 한다.&lt;/li&gt;
&lt;li&gt;물리 메모리 적재는 페이지 단위로 한다.&lt;/li&gt;
&lt;li&gt;하나의 세그먼트 크기를 페이지크기의 배수가 되도록 하여 외부조각 문제를 해결하고 세그먼트 단위로 공유나 접근 권한 보호가 이루어질 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;주소 변환을 위해 &lt;strong&gt;1) 외부의 세그먼트 테이블 2) 내부의 페이지 테이블&lt;/strong&gt; 두가지를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;#x3C;세그먼트 번호, 오프셋&gt;&lt;/strong&gt; 으로 논리주소가 구성되었다.
&lt;ul&gt;
&lt;li&gt;세그먼트 번호로 세그먼트 테이블에 접근하여 세그먼트의 길이와 세그먼트의 페이지 테이블 시작주소를 얻는다.
&lt;ul&gt;
&lt;li&gt;세그먼트 길이와 논리주소의 오프셋을 비교하여 메모리 접근 유효성을 검사한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오프셋을 상위, 하위로 나누어 상위는 세그먼트 내의 페이지 테이블 번호로 사용하고 하위는 페이지 내에서의 변위로 사용한다.&lt;/li&gt;
&lt;li&gt;페이지 번호로 페이지 테이블 항목에서 물리적 메모리의 프레임 위치를 얻는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84&quot;&gt;🌩 들어가기 전&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-%EC%A3%BC%EC%86%8C-%EB%B0%94%EC%9D%B8%EB%94%A9&quot;&gt;🌩 1. 주소 바인딩&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A3%BC%EC%86%8C-%EB%B0%94%EC%9D%B8%EB%94%A9-%EB%B0%A9%EC%8B%9D&quot;&gt;주소 바인딩 방식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mmu-%EA%B8%B0%EB%B2%95&quot;&gt;MMU 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%EC%95%88-memory-protection&quot;&gt;메모리 보안 Memory protection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-2-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC%EC%99%80-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%9A%A9%EC%96%B4&quot;&gt;🌩 2. 메모리 관리와 관련된 용어&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EB%8F%99%EC%A0%81%EB%A1%9C%EB%94%A9-dynamic-loading&quot;&gt;1) 동적로딩 dynamic loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%8F%99%EC%A0%81%EC%97%B0%EA%B2%B0-dynamic-linking&quot;&gt;2) 동적연결 dynamic linking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%A4%91%EC%B2%A9-overlays&quot;&gt;3) 중첩 overlays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%8A%A4%EC%99%80%ED%95%91-swapping&quot;&gt;4) 스와핑 swapping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-3-%EB%AC%BC%EB%A6%AC%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%ED%95%A0%EB%8B%B9%EB%B0%A9%EC%8B%9D&quot;&gt;🌩 3. 물리적 메모리의 할당방식&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%97%B0%EC%86%8D%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D&quot;&gt;1) 연속할당 방식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%B6%88%EC%97%B0%EC%86%8D%ED%95%A0%EB%8B%B9-%EA%B8%B0%EB%B2%95&quot;&gt;2) 불연속할당 기법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%ED%8E%98%EC%9D%B4%EC%A7%95-%EA%B8%B0%EB%B2%95&quot;&gt;🌩 4. 페이징 기법&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98-%EA%B8%B0%EB%B2%95&quot;&gt;1) 주소 변환 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EA%B5%AC%ED%98%84&quot;&gt;2) 페이지 테이블의 구현&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%95&quot;&gt;3) 계층적 페이징&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%97%AD%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94-inverted-page-table&quot;&gt;4) 역페이지 테이블 inverted page table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%EA%B3%B5%EC%9C%A0-%ED%8E%98%EC%9D%B4%EC%A7%80&quot;&gt;5) 공유 페이지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%ED%98%B8&quot;&gt;6) 메모리 보호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-5-%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98&quot;&gt;🌩 5. 세그멘테이션&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-6-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%93%9C-%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%85%8C%EC%9D%B4%EC%85%98&quot;&gt;🌩 6. 페이지드 세그먼테이션&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH6. CPU 스케줄링]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH6. CPU 스케줄링를 읽고 정리한 내용입니다 🙌 🌩 INTRO CPU는 PC가 가리키는 명령어를 하나씩 수행하기 때문에 효율적으로 관리해야한다. 기계어 명령은 다음 3가지로 나뉜다. CPU…]]></description><link>https://yjksw.github.io/operating-system-5/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-5/</guid><pubDate>Fri, 15 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH6. CPU 스케줄링&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU는 PC가 가리키는 명령어를 하나씩 수행하기 때문에 효율적으로 관리해야한다.&lt;/li&gt;
&lt;li&gt;기계어 명령은 다음 3가지로 나뉜다.
&lt;ol&gt;
&lt;li&gt;CPU 내에서 수행되는 명령
&lt;ol&gt;
&lt;li&gt;ADD 명령&lt;/li&gt;
&lt;li&gt;수행 속도 빠르며 일반명령&lt;/li&gt;
&lt;li&gt;CPU 버스트&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;메모리 접근을 필요로 하는 명령
&lt;ol&gt;
&lt;li&gt;LOAD 명령&lt;/li&gt;
&lt;li&gt;메모리에 있는 데이터를 CPU로 읽는 명령&lt;/li&gt;
&lt;li&gt;CPU 명령보다는 오래 걸리지만 비교적 빠르며 일반명령&lt;/li&gt;
&lt;li&gt;CPU 버스트&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;입출력을 동반하는 명령
&lt;ol&gt;
&lt;li&gt;입출력 작업이필요한 경우이며 오랜 시간이 소요&lt;/li&gt;
&lt;li&gt;특권명령으로 운영체제를 통해 서비스를 대행해야한다.&lt;/li&gt;
&lt;li&gt;I/O 버스트&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;CPU 수행은 위 명령어의 조합과 반복으로 이루어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각 프로그램마다 위 명령어들의 비율이 다르며 CPU 연산이 많이 이루어지는 것을 CPU 바운드 프로세스, I/O 연산이 많이 일어나는 것을 I/O 바운트 프로세스라고 한다.
&lt;ul&gt;
&lt;li&gt;I/O 바운드 프로세스는 사용자 인터렉션이 많은 대화형 프로그램이 해당된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램마다 CPU 사용패턴이 다르므로 버스트가 균일하지 않다. 때문에 효율적인 CPU 스캐줄링이 필요하다.&lt;/li&gt;
&lt;li&gt;컴퓨터에서 수행되는 대부분의 프로세스는 다수의 짧은 CPU 버스트와 소수의 긴 CPU 버스트로 구성이 된다.
&lt;ul&gt;
&lt;li&gt;CPU 버스트가 짧은 프로세스들은 대화형 작업으로 사용자와 인터렉션을 하며 입력을 받아서 연산을 수행하는 것이다.&lt;/li&gt;
&lt;li&gt;이런 작업은 빠른 응답을 위해 CPU의 빠른 서비스를 필요로 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 스캐줄링 시 버스트가 짧은 프로세스에게 우선적으로 CPU를 사용할 수 있도록 하는 스캐줄링이 필요하다.
&lt;ul&gt;
&lt;li&gt;I/O 바운드 프로세스의 우선순위를 높이는 것이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I/O 바운드 프로세스에게 우선권을 주면 I/O 장치의 효율성을 높이며 CPU 연산을 하는 동안 I/O 장치가 휴먼 상태인 것도 방지할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-cpu-스캐줄러&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-cpu-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%9F%AC&quot; aria-label=&quot; 1 cpu 스캐줄러 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. CPU 스캐줄러&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제의 코드로 준비 상태에 있는 프로세스들 중 어느 프로세스에게 CPU를 할당할지 결정한다.&lt;/li&gt;
&lt;li&gt;대표적으로 &lt;strong&gt;타이머 인터럽트가 발생&lt;/strong&gt;하면 CPU 스캐줄러가 호출되며 준비 큐에 있는 프로세스 중 하나를 선택해서 CPU를 할당한다.&lt;/li&gt;
&lt;li&gt;다음과 같은 경우에도 호출된다.
&lt;ol&gt;
&lt;li&gt;실행상태 프로세스는 I/O 요청 등에 의해 봉쇄 상태로 바뀌는 경우 - 비선점형&lt;/li&gt;
&lt;li&gt;실행상태 프로세스가 타이머 인터럽트로 준비 상태로 바뀌는 경우 - 선점형&lt;/li&gt;
&lt;li&gt;봉쇄상태 프로세스가 I/O 작업이 완료되어 인터럽트가 발생하고 준비상태로 바뀌는 경우 - 선점형&lt;/li&gt;
&lt;li&gt;CPU의 실행상태에 있던 프로세스가 종료되는 경우 - 비선점형&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;스캐줄링 방식 2가지가 있다.
&lt;ul&gt;
&lt;li&gt;비선점형 (nonpreemptive) 방식
&lt;ul&gt;
&lt;li&gt;CPU를 차지한 프로세스가 스스로 반납하기 전에 CPU를 뺏기지 않는 방법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;선점형 (preemptive) 방식
&lt;ul&gt;
&lt;li&gt;프로세스에게서 CPU를 강제로 빼앗을 수 있는 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 빼앗는 방법
&lt;ul&gt;
&lt;li&gt;할당시간 time quantum을 부여하여 타이머 인터럽트를 발생시켜서 빼앗는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-디스패처&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B2%98&quot; aria-label=&quot; 2 디스패처 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. 디스패처&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;다음 프로세스에게 CPU를 이양하는 작업을 수행하는 운영체제의 코드를 dispatcher라고 부른다.
&lt;ul&gt;
&lt;li&gt;현재 프로세스의 문맥을 해당 프로세스의 PCB에 저장하고&lt;/li&gt;
&lt;li&gt;새로운 프로세스의 문맥을 PCB로부터 CPU에 복원한다.&lt;/li&gt;
&lt;li&gt;시스템의 상태를 사용자 모드로 전환하고 사용자 프로그램에게 CPU 제어권을 넘긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 과정이 걸리는 시간은 디스패처 지연시간 dispatch latency라고 하며 문맥교환 오버헤드에 해당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-스캐줄링의-성능-평가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80&quot; aria-label=&quot; 3 스캐줄링의 성능 평가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 스캐줄링의 성능 평가&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2가지 지표
&lt;ul&gt;
&lt;li&gt;시스템 관점 지표
&lt;ul&gt;
&lt;li&gt;CPU 이용률 및 처리량&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자 관점 지표
&lt;ul&gt;
&lt;li&gt;소요시간, 대기시간, 응답시간 등 기다린 시간&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU utilization
&lt;ul&gt;
&lt;li&gt;전체 시간 중 CPU가 일을 한 시간 비율이며 이용률은 시스템 전체 성능과 밀접하게 관련있다.&lt;/li&gt;
&lt;li&gt;CPU의 휴면 idle 상태를 최대한 줄이는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;처리량 throughput
&lt;ul&gt;
&lt;li&gt;주어진 시간 동안 준비 큐에서 기다리고 있는 프로세스 중 몇개를 끝냈는지를 나타낸다.
&lt;ul&gt;
&lt;li&gt;CPU 버스트를 완료한 프로세스 수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;처리량을 높이기 위해서는 CPU 버스트가 짧은 프로세스에게 우선적으로 CPU를 할당하는 것이 유리하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소요시간 turnaround time
&lt;ul&gt;
&lt;li&gt;프로세스가 CPU를 요청한 시점부터 원하는 만큼 CPU를 다 쓰고 CPU 버스트가 끝날 때까지 걸린 시간&lt;/li&gt;
&lt;li&gt;준비큐에서 기다린 시간 + CPU 사용한 시간&lt;/li&gt;
&lt;li&gt;각 소요시간은 프로그램의 시작 및 종료 시간보다 CPU 버스트 단위로 별도로 측정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대기시간 waiting time
&lt;ul&gt;
&lt;li&gt;CPU 버스트 기간 중 프로세스가 준비 큐에서 CPU를 얻기 위해 기다린 시간의 합&lt;/li&gt;
&lt;li&gt;시분할 시스템에서는 한번의 CPU 버스트 중 준비큐에서 기다린 시간이 많을 수 있으며 이것의 합이다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;응답시간 response time
&lt;ul&gt;
&lt;li&gt;프로세스가 준비 큐에 들어온 이후 첫번째 CPU 획득까지 걸린 시간&lt;/li&gt;
&lt;li&gt;타이머 인터럽트 주기가 짧을 경우 프로세스가 빨리 돌아가서 응답시간이 줄어드므로 향상된다.&lt;/li&gt;
&lt;li&gt;대화형 시스템에 적합한 성능 척도이며 사용자 입장에서 가장 중요한 척도이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-스캐줄링-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot; 4 스캐줄링 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 스캐줄링 알고리즘&lt;/h2&gt;
&lt;h3 id=&quot;선입선출-스케줄링-fcfs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-fcfs&quot; aria-label=&quot;선입선출 스케줄링 fcfs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;선입선출 스케줄링 FCFS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 준비 큐에 도착한 시간 순대로 CPU를 할당하는 방식&lt;/li&gt;
&lt;li&gt;해당 프로세스가 자발적으로 CPU를 반납할 때까지 CPU를 빼앗기지 않는다.&lt;/li&gt;
&lt;li&gt;때로 비효율적인 결과를 초래한다.
&lt;ul&gt;
&lt;li&gt;CPU 버스트가 긴 프로세스가 짧은 프로세스 여러 개 보다 먼저 도착하면 CPU를 잠깐 사용하고 I/O 작업을 할 수 있는 프로세스가 앞의 긴 프로세스 하나 때문에 오래 기다려야 한다.&lt;/li&gt;
&lt;li&gt;I/O 장치 이용률도 떨어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;먼저 도착한 프로세스의 버스트 길이에 따라 평균 대기시간이 크게 달라진다.&lt;/li&gt;
&lt;li&gt;convoy effect 콘보이 현상 - CPU 버스트가 짧은 프로세스가 버스트가 긴 프로세스부터 나중에 도착해 오랜 시간을 기다려야 하는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;최단작업-우선-스캐줄링-sjf-shortest-job-first&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EB%8B%A8%EC%9E%91%EC%97%85-%EC%9A%B0%EC%84%A0-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-sjf-shortest-job-first&quot; aria-label=&quot;최단작업 우선 스캐줄링 sjf shortest job first permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최단작업 우선 스캐줄링 SJF (Shortest Job First)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU 버스트가 가장 짧은 프로세스에게 가장먼저 CPU를 할당하는 방식으로 프로세스의 준비 큐에서 기다리는 전체적인 시간이 줄어든다.&lt;/li&gt;
&lt;li&gt;대기시간을 가장 짧게 하는 최적 알고리즘이다.&lt;/li&gt;
&lt;li&gt;비선점형 방식과 선점형 방식
&lt;ul&gt;
&lt;li&gt;비선점형은 CPU를 획득하면 해당 프로세스가 CPU를 자진 반납하기 전까지 CPU 할당&lt;/li&gt;
&lt;li&gt;선점형은 CPU에서 버스트가 가장 짧은 프로세스에게 할당하더라도 중간에 더 짧은 버스트 프로세스가 도착하면 CPU를 빼앗아 더 짧은 프로세스에게 우선 부여하는 방식
&lt;ul&gt;
&lt;li&gt;현재 진행 중이던 프로세스의 &lt;strong&gt;남은 버스트 시간&lt;/strong&gt;보다 더 짧은 경우이다.&lt;/li&gt;
&lt;li&gt;SRTF Shortest Remaining Time First 라고도 부른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일반적으로 프로세스가 한꺼번에 도착하지 않으므로 선점형 방식이 평균 대기시간을 가장 많이 줄일 수 있는 방법이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하지만 프로세스의 CPU 버스트 시간을 미리 알 수 없다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;따라서 CPU 시간을 예측하여 스캐줄링한다.&lt;/li&gt;
&lt;li&gt;이전 CPU 버스트 시간의 예측값과 실제값의 반영정도를 매개변수로 한 공식을 사용한다.&lt;/li&gt;
&lt;li&gt;과거의 CPU 버스트 시간들을 통해 미래 CPU 버스트 시간을 예측하는 것인데 최근 것일수록 가중치를 눂여서 반영하는 형식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;평균 대기시간을 최소화 하기는 하지만 평균 CPU 버스트 시간이 긴 프로세스는 준비큐에서 무한정 기다려야하는 문제가 발생한다.
&lt;ul&gt;
&lt;li&gt;기아 현상 starvation이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;우선순위-스케줄링-priority-scheduling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-priority-scheduling&quot; aria-label=&quot;우선순위 스케줄링 priority scheduling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;우선순위 스케줄링 priority scheduling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;준비 큐에서 기다리는 프로세스 중 우선순위가 가장 높은 프로세스에게 먼저 CPU를 할당한다.&lt;/li&gt;
&lt;li&gt;우선순위 값을 할당하며 숫자가 적은 것이 우선순위가 높은것으로 판단한다.&lt;/li&gt;
&lt;li&gt;우선순위값의 정의는 여러가지이다.
&lt;ul&gt;
&lt;li&gt;CPU 버스트 시간을 그 값으로 정하면 SJF 알고리즘과 동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;선점형과 비선점형이 있다.
&lt;ul&gt;
&lt;li&gt;선점형은 수행중인 프로세스 보다 높은 우선순위 프로세스가 들어오면 선점하여 CPU를 할당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기아 현상이 발생할 수 있다.
&lt;ul&gt;
&lt;li&gt;우선순위가 높은 프로세스가 계속 들어올 경우 CPU를 계속 할당받지 못하는 프로세스가 있을 수 있다.&lt;/li&gt;
&lt;li&gt;노화 aging 기법을 사용한다.
&lt;ul&gt;
&lt;li&gt;기다리는 시간이 길어지면 우선순위를 조금씩 높여서 CPU를 할당받을 수 있게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;라운드-로빈-스캐줄링-round-robin-scheduling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-round-robin-scheduling&quot; aria-label=&quot;라운드 로빈 스캐줄링 round robin scheduling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라운드 로빈 스캐줄링 round robin scheduling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;시분할 시스템의 성질을 가장 잘 이용한 스캐줄링 방식이다.&lt;/li&gt;
&lt;li&gt;각 프로세스가 &lt;strong&gt;CPU를 연속적으로 사용할 수 있는 시간이 제한되며 시간이 경과하면 CPU를 회수&lt;/strong&gt;해 다른 프로세스에게 할당한다.&lt;/li&gt;
&lt;li&gt;할당 시간 time quantum - CPU를 연속적으로 사용할 수 있는 최대시간
&lt;ul&gt;
&lt;li&gt;할당시간이 너무 길면 FCFS와 동일해진다.&lt;/li&gt;
&lt;li&gt;할당시간이 너무 짧으면 문맥교환의 오버헤드가 커진다.&lt;/li&gt;
&lt;li&gt;일반적으로 수십밀리초 정도의 규모로 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;n 개의 프로세스에 q만큼의 할당시간이라고 하면 모든 프로세스는 적어도 (n-1)q 시간 이내에 적어도 한번 CPU를 할당받을 수 있다.
&lt;ul&gt;
&lt;li&gt;대화형 프로세스에 빠른 응답시간을 보장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;n 개의 프로세스에 q만큼의 할당시간이라고 하면 모든 프로세스는 적어도 (n-1)q 시간 이내에 적어도 한번 CPU를 할당받을 수 있다.
&lt;ul&gt;
&lt;li&gt;대화형 프로세스에 빠른 응답시간을 보장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 버스트가 긴 프로세스는 대기 시간이 비례해서 길어지고 적게 쓰는 프로세스는 대기시간도 짧아진다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SJF 보다 평균 대기 시간은 길지만 응답시간은 더 짧다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;할당시간이 만료되면 타이머 인터럽트로 CPU를 회수한다. 만일 CPU 버스트 시간이 할당 시간보다 짧으면 자진 반납한다.
&lt;ul&gt;
&lt;li&gt;짧은 프로세스는 빨리 CPU를 얻으며 긴 프로세스도 불이익 당하지 않아서 매우 공정하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;소요시간과 대기시간이 CPU 버스트의 길이와 비례하여 공정하다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;FCFS와 비교했을 때 FCFS는 하나씩 프로세스를 끝마쳐 가므로 해당 프로세스의 소요시간 및 대기 시간이 짧아지지만 라운드 로빈 스케줄링은 CPU를 조금씩 같이 쓰고 거의 동시에 끝나게 되어 소요시간 및 대기시간이 가장 긴 프로세스에 어느정도 맞춰진다.
&lt;ul&gt;
&lt;li&gt;동일한 CPU 버스트 시간을 가진 프로세스들이 도착할 경우 평균 소요시간 및 대기시간이 길어지지만 여전히 평균 응답시간은 더 짧다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하지만 주로 프로세스의 CPU 버스트 시간이 균일하지 않으므로 라운드 로빈 스캐줄링 기법이 타당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;멀티레벨-큐-multi-level-queue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%81%90-multi-level-queue&quot; aria-label=&quot;멀티레벨 큐 multi level queue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;멀티레벨 큐 multi-level queue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;큐를 여러개 분할해 관리하는 스캐줄링 기법이다.&lt;/li&gt;
&lt;li&gt;어떤 줄의 프로세스에 CPU를 할당하며 프로세스를 어떤 줄에 세워야할지 고려해야한다.&lt;/li&gt;
&lt;li&gt;성격이 다른 프로세스들을 별도로 관리하고 각각의 성격에 맞는 스케줄링을 큐마다 적용한다.
&lt;ul&gt;
&lt;li&gt;예를 들어 대화형 작업과 그렇지 않은 작업을 따로 두어 대화형 작업에 우선적으로 CPU를 할당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일반적으로 전위큐 (foreground queue)와 후위큐(background queue)로 분할하여 운영한다.
&lt;ul&gt;
&lt;li&gt;전위큐는 응답시간을 짧게하기 위한 라운드 로빈 스캐줄링&lt;/li&gt;
&lt;li&gt;후위큐는 계산 위주 작업으로 응답시간이 중요하지 않은 FCFS 스캐줄링 기법으로 문맥교환 오버헤드를 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;큐 자체에 대한 스캐줄링도 필요하다.
&lt;ul&gt;
&lt;li&gt;가장 쉬운 방법은 고정 우선순위 방식 fixed priority scheduling 이다.
&lt;ul&gt;
&lt;li&gt;우선순위가 높은 큐를 먼저 서비스하고 해당 큐가 비면 우선순위가 낮은 큐를 서비스한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;타임 슬라이스 time slice 방식
&lt;ul&gt;
&lt;li&gt;큐의 기아 현상을 해소하기위해 각 큐에 CPU 시간을 적절한 비율로 할당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;멀티레벨-피드백-큐-multilevel-feedback-queue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%94%BC%EB%93%9C%EB%B0%B1-%ED%81%90-multilevel-feedback-queue&quot; aria-label=&quot;멀티레벨 피드백 큐 multilevel feedback queue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;멀티레벨 피드백 큐 multilevel feedback queue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;멀티레벨큐와 비슷하나 프로세스가 하나의 큐에서 다른 큐로 이동할 수 있다.
&lt;ul&gt;
&lt;li&gt;예를 들어 노화 기법을 사용하여 우선순위가 낮은 큐에서 높은 큐로 이동할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;큐의 수, 각 큐의 스캐줄링 알고리즘, 프로세스를 상위 큐로 승격시키는 기준, 프로세스를 강등시키는 기준, 프로세스가 도착할 대 큐를 결정하는 기준 등을 고려해야한다.&lt;/li&gt;
&lt;li&gt;일반적인 멀티레벨 피드백 큐는
&lt;ul&gt;
&lt;li&gt;3개의 큐로 구성되며 우선순위 순으로 라운드로빈 (할당시간 5) → 라운드로빈 (할당시간 10) → FCFS 이다.&lt;/li&gt;
&lt;li&gt;대화형 서비스는 빨리 작업을 완료할 수 있다.&lt;/li&gt;
&lt;li&gt;모든 프로세스들은 처음에 상위 큐에 있다가 할당시간만큼 서비스 되고 나서 버스트 기간이 남으면 하위 큐로 강등된다.&lt;/li&gt;
&lt;li&gt;큐는 최상위 큐가 비었을 때 하위 큐가 서비스 받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;다중처리기-스케줄링-multi-processor-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%B2%98%EB%A6%AC%EA%B8%B0-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-multi-processor-system&quot; aria-label=&quot;다중처리기 스케줄링 multi processor system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중처리기 스케줄링 multi-processor system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;각 CPU 별로 줄을 세워야하므로 더 복잡하다.&lt;/li&gt;
&lt;li&gt;일부 CPU에 작업이 편중될 수도 있는데 이것을 방지하기 위해 적절히 분산되도록 부하균형(load balancing) 매커니즘이 필요하다.&lt;/li&gt;
&lt;li&gt;대칭형 다중처리
&lt;ul&gt;
&lt;li&gt;CPU가 각자 알아서 스케줄링을 결정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비대칭형 다중처리
&lt;ul&gt;
&lt;li&gt;하나의 CPU가 다른 CPU 스캐줄링 및 데이터 접근을 책임진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;실시간-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;실시간 스케줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실시간 스케줄링&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;각 작업마다 데드라인이 있어서 반드시 처리해야하는 real-time system에서 사용된다.&lt;/li&gt;
&lt;li&gt;경성 실시간 시스템 hard real-time system과 연성 실시간 시스템 soft real-time system 으로 나뉜다.
&lt;ul&gt;
&lt;li&gt;전자는 미사일 원자로 제어 등 반드시 정확해야하는 시스템&lt;/li&gt;
&lt;li&gt;후자는 위험하지는 않은 멀티미디어 스트리밍 시스템&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데드라인이 얼마 남지 않은 요청을 먼저 처리하는 EDF earliest dedline first 스캐줄링을 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-스캐줄링-알고리즘의-평가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%8F%89%EA%B0%80&quot; aria-label=&quot; 5 스캐줄링 알고리즘의 평가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 스캐줄링 알고리즘의 평가&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;큐잉 모델
&lt;ul&gt;
&lt;li&gt;확률분포 등 수학적으로 구해서 평가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;구현 및 실측
&lt;ul&gt;
&lt;li&gt;실제로 수행하여 커널을 컴파일하여 실행시간 측정하여 평가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시물레이션
&lt;ul&gt;
&lt;li&gt;가상 CPU 스캐줄링 프로그램을 작성하여 결과를 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;🌩 INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-cpu-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%9F%AC&quot;&gt;🌩 1. CPU 스캐줄러&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-2-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B2%98&quot;&gt;🌩 2. 디스패처&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-3-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80&quot;&gt;🌩 3. 스캐줄링의 성능 평가&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;🌩 4. 스캐줄링 알고리즘&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-fcfs&quot;&gt;선입선출 스케줄링 FCFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B5%9C%EB%8B%A8%EC%9E%91%EC%97%85-%EC%9A%B0%EC%84%A0-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-sjf-shortest-job-first&quot;&gt;최단작업 우선 스캐줄링 SJF (Shortest Job First)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-priority-scheduling&quot;&gt;우선순위 스케줄링 priority scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-round-robin-scheduling&quot;&gt;라운드 로빈 스캐줄링 round robin scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%81%90-multi-level-queue&quot;&gt;멀티레벨 큐 multi-level queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%94%BC%EB%93%9C%EB%B0%B1-%ED%81%90-multilevel-feedback-queue&quot;&gt;멀티레벨 피드백 큐 multilevel feedback queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%B2%98%EB%A6%AC%EA%B8%B0-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-multi-processor-system&quot;&gt;다중처리기 스케줄링 multi-processor system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot;&gt;실시간 스케줄링&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-5-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%8F%89%EA%B0%80&quot;&gt;🌩 5. 스캐줄링 알고리즘의 평가&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[넷플릭스에서 60000ms 만에 리눅스 서버 성능을 진단하는 방법 10가지]]></title><description><![CDATA[이 글은 다음 링크를 번역하며 공부한 글입니다 🙌 💡 Intro 성능 테스트에 관련한 공부 및 적용을 하면서 좋은 아티클을 추천 받았다. (Thanks to 제리 👍) 관련 명령어들에 대해서 공부하고 각 칼럼이 의미하는 os…]]></description><link>https://yjksw.github.io/netflix-performance-analysis/</link><guid isPermaLink="false">https://yjksw.github.io/netflix-performance-analysis/</guid><pubDate>Fri, 15 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 다음 &lt;a href=&quot;https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55&quot;&gt;링크&lt;/a&gt;를 번역하며 공부한 글입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;성능 테스트에 관련한 공부 및 적용을 하면서 좋은 아티클을 추천 받았다. (Thanks to 제리 👍)&lt;/li&gt;
&lt;li&gt;관련 명령어들에 대해서 공부하고 각 칼럼이 의미하는 os 및 네트워크 기초 지식을 메꾸보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-uptime&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-uptime&quot; aria-label=&quot;1 uptime permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. uptime&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;uptime&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;:51:26 up &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;:31, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; user, load average: &lt;span class=&quot;token number&quot;&gt;30.02&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;26.43&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;19.02&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;실행되기를 기다리는 프로세스의 갯수를 출력한다. 리눅스 시스템에서는 CPU를 기다리는 프로세스와 uninterruptible I/O (disk I/O) 에 의해 프로세스가 막혀있을 수 있다. 따라서 이 수치를 통해서 리소스 부하를 간편하게 확인 할 수 있다.&lt;/li&gt;
&lt;li&gt;위 세개의 번호는 각각 1분, 5분, 15분 간 실행되지 못하고 대기 중인 프로세스 갯수를 나타낸다. 시간 추이에 따른 부하 상태를 통해 상황을 유추할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-dmesg--tail&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-dmesg--tail&quot; aria-label=&quot;2 dmesg  tail permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. dmesg | tail&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;dmesg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1880957.563150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; perl invoked oom-killer: &lt;span class=&quot;token assign-left variable&quot;&gt;gfp_mask&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;0x280da, &lt;span class=&quot;token assign-left variable&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;token assign-left variable&quot;&gt;oom_score_adj&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1880957.563400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Out of memory: Kill process &lt;span class=&quot;token number&quot;&gt;18694&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;perl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; score &lt;span class=&quot;token number&quot;&gt;246&lt;/span&gt; or sacrifice child
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1880957.563408&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Killed process &lt;span class=&quot;token number&quot;&gt;18694&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;perl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2320864.954447&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; TCP: Possible SYN flooding on port &lt;span class=&quot;token number&quot;&gt;7001&lt;/span&gt;. Dropping request.  Check SNMP counters.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;마지막 10개의 시스템 메세지를 출력한다. 여기서 성능에 이슈를 일으킨 에러 메세지를 확인할 수 있다. oom-killer나 TCP 요청 드랍 같은 경우를 확인할 수 있으므로 필수다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-vmstat-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-vmstat-1&quot; aria-label=&quot;3 vmstat 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. vmstat 1&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b swpd   &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt;   buff  cache   si   so    bi    bo   &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;   cs us sy &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt; wa st
&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200889792&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;73708&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;591828&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;96&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200889920&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;73708&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;591860&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13284&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4282&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;98&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200890112&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;73708&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;591860&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9501&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2154&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200889568&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;73712&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;591856&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11900&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2459&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200890208&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;73712&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;591860&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15898&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4840&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;98&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
^C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;가상 메모리 stat를 보여준다. 서버의 중요한 statistics를 출력한다.&lt;/li&gt;
&lt;li&gt;vmstat 명령어와 1을 클릭하면 1초마다 서버의 statictics를 출력한다. (단 첫번째 행은 서버가 부팅되었을 때부터의 평균 수치를 보여준다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;중요한-칼럼&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%91%EC%9A%94%ED%95%9C-%EC%B9%BC%EB%9F%BC&quot; aria-label=&quot;중요한 칼럼 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;중요한 칼럼&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;r&lt;/strong&gt;: CPU에서 실행되는 프로세스와 기다리고 있는 프로세스 숫자이다. I/O에 의해 생기는 부하를 제외하고 CPU에 대해서만 보여주기 때문에 load average의 원인이 CPU인지 아닌지를 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;참고로, “r” 칼럼 값이 CPU 코어 갯수보다 많다면 saturation 상황이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;free&lt;/strong&gt;: 비어있는 메모리를 kilobytes 단위로 보여준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;si, so&lt;/strong&gt;: swap-ins, swap-outs를 보여준다. 이 값이 0이 아니라면 메모리 부족이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;us, sy, id, wa, st&lt;/strong&gt;: CPU 시간을 분할하여 모든 CPU 시간의 평균 정보를 보여준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user time, system time(kernel), idle, wait I/O, stolen time(다른 게스트, Xen 등등) 지표를 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 user + system time을 통해 CPU가 바쁜 상태인지 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wait I/O에 특정 값이 유지된다면 disk 병목 현상이 있다고 볼 수 있다. 이 경우는 작업이 disk I/O 작업을 기다리느라 CPU 가 유휴 상태에 있는 때이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System time은 I/O 작업을 하기 위해서 필수이다. high system time 평균은 20% 이상이며 이런 수치를 보이면 커널이 I/O 작업을 비효율적으로 처리하고 있다고 볼 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 사용률(user-level)은 평균 90% 이상일 수도 있으나 이것이 꼭 문제를 뜻하는 것은 아니다. CPU에 부하가 걸리고 있는지는 “r” 칼럼을 통해서 판단해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;#x26;blogId=ggaibi1004&amp;#x26;logNo=221398356656&quot;&gt;여기서&lt;/a&gt; 각 칼럼에 대한 자세한 설명을 확인할 수 있다. 개인적으로 매우 유용하게 참고하고 있다. &lt;a href=&quot;https://im-recording-of-sw-studies.tistory.com/30&quot;&gt;여기도..&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-mpstat--p-all-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-mpstat--p-all-1&quot; aria-label=&quot;4 mpstat  p all 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. mpstat -P ALL 1&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mpstat -P ALL &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
Linux &lt;span class=&quot;token number&quot;&gt;3.13&lt;/span&gt;.0-49-generic &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;titanclusters-xxxxx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  07/14/2015  _x86_64_ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; CPU&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle
07:38:50 PM  all  &lt;span class=&quot;token number&quot;&gt;98.47&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.75&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.78&lt;/span&gt;
07:38:50 PM    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;96.04&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2.97&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.99&lt;/span&gt;
07:38:50 PM    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;97.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2.00&lt;/span&gt;
07:38:50 PM    &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;98.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;
07:38:50 PM    &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;96.97&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;3.03&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;CPU 코어 별 CPU 시간을 출력한다. 이것을 통해 한 코어에 프로세스가 집중되어 비효율적이지는 않은지 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;만일 하나의 CPU에 부하가 심하다면 single thread application에 의한 부하일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;5-pidstat-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-pidstat-1&quot; aria-label=&quot;5 pidstat 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. pidstat 1&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pidstat &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
Linux &lt;span class=&quot;token number&quot;&gt;3.13&lt;/span&gt;.0-49-generic &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;titanclusters-xxxxx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  07/14/2015    _x86_64_    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; CPU&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

07:41:02 PM   &lt;span class=&quot;token environment constant&quot;&gt;UID&lt;/span&gt;       PID    %usr %system  %guest    %CPU   CPU  Command
07:41:03 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.94&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.94&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  rcuos/0
07:41:03 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;4214&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;5.66&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;5.66&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;11.32&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;  mesos-slave
07:41:03 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;4354&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.94&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.94&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.89&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;  java
07:41:03 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;6521&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1596.23&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.89&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1598.11&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;  java
07:41:03 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;6564&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1571.70&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;7.55&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1579.25&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;  java
07:41:03 PM &lt;span class=&quot;token number&quot;&gt;60004&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;60154&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.94&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;4.72&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;5.66&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  pidstat

07:41:03 PM   &lt;span class=&quot;token environment constant&quot;&gt;UID&lt;/span&gt;       PID    %usr %system  %guest    %CPU   CPU  Command
07:41:04 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;4214&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;6.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;2.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;8.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;  mesos-slave
07:41:04 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;6521&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1590.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1591.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;  java
07:41:04 PM     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;6564&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1573.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;10.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1583.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;  java
07:41:04 PM   &lt;span class=&quot;token number&quot;&gt;108&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;6718&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  snmp-pass
07:41:04 PM &lt;span class=&quot;token number&quot;&gt;60004&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;60154&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;4.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;5.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  pidstat
^C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pidstat는 프로세스 별 top 명령어 같은 느낌이다. 하지만 rollling 방식으로 매 시간마다의 모니터링 결과를 출력해준다.&lt;/li&gt;
&lt;li&gt;이 명령을 통해 시간에 흐름에 따른 패턴을 확인할 수 있고, 현상을 기록할 수 있는 장점이 있다.&lt;/li&gt;
&lt;li&gt;위 예시를 보면 2개의 자바 프로세스가 CPU를 과하게 소비하고 있음을 알 수 있다.&lt;/li&gt;
&lt;li&gt;위에서 &lt;code class=&quot;language-text&quot;&gt;%CPU&lt;/code&gt; 칼럼은 서버의 모든 CPU를 포함한 수치이다. 따라서 1591%라는 수치는 해당 자바 프로세스가 거의 16개의 CPU를 소비하고 있음을 나타낸다. (리눅스에서 CPU 사용률은 주로 각 CPU 당 100%의 수치로 그 합을 의미한다)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;6-iostat--xz-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-iostat--xz-1&quot; aria-label=&quot;6 iostat  xz 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. iostat -xz 1&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ iostat -xz &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
Linux &lt;span class=&quot;token number&quot;&gt;3.13&lt;/span&gt;.0-49-generic &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;titanclusters-xxxxx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  07/14/2015  _x86_64_ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; CPU&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          &lt;span class=&quot;token number&quot;&gt;73.96&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;3.73&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.03&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.06&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;22.21&lt;/span&gt;

Device:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
xvda        &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.23&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.21&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.18&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;4.52&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;2.08&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;34.37&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;9.98&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;13.80&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;5.42&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2.44&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.09&lt;/span&gt;
xvdb        &lt;span class=&quot;token number&quot;&gt;0.01&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.02&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;8.94&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;127.97&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;598.53&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;145.79&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.43&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.78&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.28&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.25&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.25&lt;/span&gt;
xvdc        &lt;span class=&quot;token number&quot;&gt;0.01&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.02&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;8.86&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;127.79&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;595.94&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;146.50&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.45&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;1.82&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.30&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.27&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.26&lt;/span&gt;
dm-0        &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.69&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;2.32&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;10.47&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;31.69&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;28.01&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.01&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;3.23&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.71&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;3.98&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.13&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.04&lt;/span&gt;
dm-1        &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.94&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.01&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;3.78&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;8.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.33&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;345.84&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.04&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;346.81&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.01&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
dm-2        &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.09&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.07&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;1.35&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.36&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;22.50&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;2.55&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;0.23&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;5.62&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1.78&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0.03&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
^C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;블록 디바이스 (disks)를 확인하기 매우 좋은 명령어다. 해당 디바이스의 부하와 퍼포먼스까지 확인할 수 있다. 다음 칼럼들을 유의해서 보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;r/s, w/s, rkB/s, wkB/s&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;위 수치들은 1초 동안 해당 디바이스에게 전달된 읽기, 쓰기, Kbytes 읽기, Kbytes 쓰기이다.&lt;/li&gt;
&lt;li&gt;디바이스의 작업량 정도를 확인할 수 있다. 이 수치가 지나치게 높다면 과부하에 의한 성능 문제가 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;await&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ms 단위의 I/O 평균 시간이다. 이것은 어플리케이션이 queue에 있는 시간과 서비스되는 시간이 모두 포함된 시간이다.&lt;/li&gt;
&lt;li&gt;예상보다 긴 평균시간은 디바이스 포화 여부 혹은 디바이스에 오류 가능성을 의미할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;avgqu-sz&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;디바이스의 평균 요청 수이다. 1 보다 큰 수치는 포화상태의 근거일 수 있다. (여러 디스크에 대한 가장 디바이스 같은 경우 요청을 병렬로 처리할 수 있긴 하다는 것을 참고)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%util&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;디바이스 사용률이다. 매 초마다 디바이스가 처리하고 있는 퍼센트를 나타닌다.&lt;/li&gt;
&lt;li&gt;디바이스 마다 상이하지만 60% 보다 큰 수치는 주로 좋지 않은 성능을 나타낸다. (await 칼럼에서 함께 확인할 수 있는 상태이다)&lt;/li&gt;
&lt;li&gt;100%에 가까운 것은 포화상태임을 뜻한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;만일 storage device가 여러 물리 디스크 앞에 있는 논리 디스크라면 100% 의 사용률은 어떤 I/O 프로세스가 100% 시간동안 처리되고 있으나 실제 물리 디스크는 포화상태가 아닐 수도 있다.&lt;/li&gt;
&lt;li&gt;참고할 것은 disk I/O의 낮은 성능이 어플리케이션의 성능을 저하시키는 요인이 아닐 수도 있다는 것이다. 많은 기술들은 I/O 작업을 비동기로 처리하여 어플리케이션이 봉쇄상태에 머물거나 지연시간(latency)에 영향이 가지 않도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;7-free--m&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-free--m&quot; aria-label=&quot;7 free  m permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. free -m&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt; -m
             total       used       &lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt;     shared    buffers     cached
Mem:        &lt;span class=&quot;token number&quot;&gt;245998&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;24545&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;221453&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;83&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;59&lt;/span&gt;        &lt;span class=&quot;token number&quot;&gt;541&lt;/span&gt;
-/+ buffers/cache:      &lt;span class=&quot;token number&quot;&gt;23944&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;222053&lt;/span&gt;
Swap:            &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;중요 칼럼 (가장 오른쪽 칼럼)
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;buffers&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;버퍼 캐시이며 block device I/O 에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cached&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;페이지 캐시이며 file systems에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;위 두 칼럼의 수치가 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;이 아니도록 주의하자. 0 이라면 disk I/O가 빈번하게 발생하며(&lt;code class=&quot;language-text&quot;&gt;iostat&lt;/code&gt;으로 확인) 가장 느린 연산이므로 최악의 성능을 낸다. 위 경우 Mbytes 이상의 여유 공간을 가지고 있으니 양호한 상태이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;/+ buffers/cache&lt;/code&gt; 은 &lt;code class=&quot;language-text&quot;&gt;free&lt;/code&gt; 수치에 대해서 더 명확하게 알려준다.
&lt;ul&gt;
&lt;li&gt;운영체제의 물리 메모리는 그 빈 공간을 캐싱을 하기 위해서 사용한다. 하지만 프로세스가 필요로 하다면 곧바로 회수하여 필요한 프로세스에게 할당한다. 따라서 엄밀히 말하먄 캐시 데이터가 차지하고 있는 메모리의 용량도 free에 포함되어야 마땅하다.&lt;/li&gt;
&lt;li&gt;이 수치의 free는 캐시 데이터 메모리 용량까지 포함한 수치이다.&lt;/li&gt;
&lt;li&gt;이 부분에 대한 많은 혼란이 있기에 관련 &lt;a href=&quot;https://www.linuxatemyram.com/&quot;&gt;사이트&lt;/a&gt;가 따로 있을 정도이다. (ㅋㅋㅋㅋ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;리눅스에서 &lt;a href=&quot;https://itsfoss.com/what-is-zfs/&quot;&gt;ZFS&lt;/a&gt; 라는 향상된 file system을 사용하고 있다면 위 수치가 더 혼란스러울 수 있다. ZFS는 별도의 캐시가 존재하며 &lt;code class=&quot;language-text&quot;&gt;free -m&lt;/code&gt; 에 제대로 반영이 되지 않기 때문이다.
&lt;ul&gt;
&lt;li&gt;시스템이 가용 가능한 메모리 공간이 적어보이지만 ZFS 캐시에 의해 가용 가능한 메모리가 존재할 수도 있다는 것을 참고하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;8-sar--n-dev-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-sar--n-dev-1&quot; aria-label=&quot;8 sar  n dev 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. sar -n DEV 1&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sar -n DEV &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
Linux &lt;span class=&quot;token number&quot;&gt;3.13&lt;/span&gt;.0-49-generic &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;titanclusters-xxxxx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  07/14/2015     _x86_64_    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; CPU&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:49 AM      eth0  &lt;span class=&quot;token number&quot;&gt;18763.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;5032.00&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;20686.42&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;478.30&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:49 AM        lo     &lt;span class=&quot;token number&quot;&gt;14.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;14.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;1.36&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;1.36&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:49 AM   docker0      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:50 AM      eth0  &lt;span class=&quot;token number&quot;&gt;19763.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;5101.00&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;21999.10&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;482.56&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:50 AM        lo     &lt;span class=&quot;token number&quot;&gt;20.00&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;20.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;3.25&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;3.25&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:16:50 AM   docker0      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
^C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이 명령어를 통해 네트워크 인터페이스 처리량을 확인할 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;rxkB/s&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;txkB/s&lt;/code&gt; 를 통해 작업량을 확인하고 한계치에 다다랐는지 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;위 예시를 보면 eth0 는 22 Mbytes/s (176 Mbits/sec) 이다. (1 Gbit/sec 제한 보다 낮은 수치이다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;%ifutil&lt;/code&gt; 칼럼을 통해 디바이스 사용률을 확인할 수 있다. (full-duplex인 경우 양쪽 방향의 최대값이다) 이것은 정확한 수치를 알기 어렵고 사용하지 않는 0.00 수치를 보이기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;9-sar--n-tcpetcp-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-sar--n-tcpetcp-1&quot; aria-label=&quot;9 sar  n tcpetcp 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. sar -n TCP,ETCP 1&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sar -n TCP,ETCP &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
Linux &lt;span class=&quot;token number&quot;&gt;3.13&lt;/span&gt;.0-49-generic &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;titanclusters-xxxxx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  07/14/2015    _x86_64_    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; CPU&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:19 AM  active/s passive/s    iseg/s    oseg/s
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:20 AM      &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;10233.00&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;18846.00&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:20 AM      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:20 AM  active/s passive/s    iseg/s    oseg/s
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:21 AM      &lt;span class=&quot;token number&quot;&gt;1.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;8359.00&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;6039.00&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:17:21 AM      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0.00&lt;/span&gt;
^C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;중요한 TCP 수치에 대해서 보여준다.
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;active/s&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;로컬에서 시작된 초당 TCP 커넥션 개수 (&lt;code class=&quot;language-text&quot;&gt;connect()&lt;/code&gt;를 명령어로 시작된 커넥션)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;passive/s&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;리모트에서 시작된 초당 TCP 커넥션 개수 (&lt;code class=&quot;language-text&quot;&gt;accept()&lt;/code&gt;로 연결된 커넥션)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;retrans/s&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;초당 TCP 재전송량&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;active와 passive 수는 서버 부하를 대략적으로 산출할 수 있는 좋은 수치이다.
&lt;ul&gt;
&lt;li&gt;새롭게 들어온 passive 커넥션 개수와 내보내지고 있는 active 커넥션 개수&lt;/li&gt;
&lt;li&gt;active를 outbound, passive을 inbound 수치로 판단할 수 있으나 정확히 그렇지만은 않다. (&lt;a href=&quot;http://localhost&quot;&gt;localhost&lt;/a&gt;와 localhost connection의 차이를 고려해보라)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네트워크 재전송량은 네트워크 혹은 서버 이슈 일 수 있다.
&lt;ul&gt;
&lt;li&gt;네트워크 문제라면 네트워크가 안정적이지 않은 네트워크 일 수 있다.&lt;/li&gt;
&lt;li&gt;혹은 서버 과부화로 인해 패킷이 유실되는 문제일 수도 있다.&lt;/li&gt;
&lt;li&gt;위 예시에서는 초당 1개의 TCP 커넥션이 재전송되고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;10-top&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-top&quot; aria-label=&quot;10 top permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. top&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;top&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;top&lt;/span&gt; - 00:15:40 up &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;:56,  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; user,  load average: &lt;span class=&quot;token number&quot;&gt;31.09&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;29.87&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;29.92&lt;/span&gt;
Tasks: &lt;span class=&quot;token number&quot;&gt;871&lt;/span&gt; total,   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; running, &lt;span class=&quot;token number&quot;&gt;868&lt;/span&gt; sleeping,   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; stopped,   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; zombie
%Cpu&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;96.8&lt;/span&gt; us,  &lt;span class=&quot;token number&quot;&gt;0.4&lt;/span&gt; sy,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; ni,  &lt;span class=&quot;token number&quot;&gt;2.7&lt;/span&gt; id,  &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; wa,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; hi,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; si,  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; st
KiB Mem:  &lt;span class=&quot;token number&quot;&gt;25190241&lt;/span&gt;+total, &lt;span class=&quot;token number&quot;&gt;24921688&lt;/span&gt; used, &lt;span class=&quot;token number&quot;&gt;22698073&lt;/span&gt;+free,    &lt;span class=&quot;token number&quot;&gt;60448&lt;/span&gt; buffers
KiB Swap:        &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; total,        &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; used,        &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; free.   &lt;span class=&quot;token number&quot;&gt;554208&lt;/span&gt; cached Mem

   PID &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
 &lt;span class=&quot;token number&quot;&gt;20248&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.227t &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.012t  &lt;span class=&quot;token number&quot;&gt;18748&lt;/span&gt; S  &lt;span class=&quot;token number&quot;&gt;3090&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;5.2&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;29812&lt;/span&gt;:58 java
  &lt;span class=&quot;token number&quot;&gt;4213&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2722544&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;64640&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;44232&lt;/span&gt; S  &lt;span class=&quot;token number&quot;&gt;23.5&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;233&lt;/span&gt;:35.37 mesos-slave
 &lt;span class=&quot;token number&quot;&gt;66128&lt;/span&gt; titancl+  &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;24344&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2332&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1172&lt;/span&gt; R   &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;:00.07 &lt;span class=&quot;token function&quot;&gt;top&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;5235&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;38&lt;/span&gt;.227g &lt;span class=&quot;token number&quot;&gt;547004&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;49996&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.7&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;:02.74 java
  &lt;span class=&quot;token number&quot;&gt;4299&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;.015g &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.682g  &lt;span class=&quot;token number&quot;&gt;16836&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1.1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;:14.42 java
     &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;33620&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2920&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;1496&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;:03.82 init
     &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;:00.02 kthreadd
     &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;:05.35 ksoftirqd/0
     &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; root       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; -20       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;:00.00 kworker/0:0H
     &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;:06.94 kworker/u256:0
     &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; root      &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; S   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;:38.05 rcu_sched&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;top&lt;/code&gt; 명령어는 이전에 다룬 다른 명령어로 확인할 수 있는 수치를 전반적으로 포함한 지표들을 보여준다. 때문에 편리하게 사용된다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;top&lt;/code&gt; 명령어의 단점은 시간의 흐름에 따른 패턴 확인이 어렵고 당시 전반적인 서버의 상태만을 확인할 수 있다는 것이다. 시간의 흐름에 따른 패턴을 확인하고 싶다면 &lt;code class=&quot;language-text&quot;&gt;vmstat&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;pidstat&lt;/code&gt; 으로 확인할 수 있다. (rolling output을 보여준다)&lt;/li&gt;
&lt;/ul&gt;
 &lt;br&gt;
 &lt;br&gt;
&lt;h2 id=&quot;-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot; 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;확실히 os 에 대한 지식이 필요한 것을 느꼈다. os와 네트워크 공부와 병행하며 지표를 살피니 의미하는 바를 잘 이해할 수 있었다.&lt;/li&gt;
&lt;li&gt;서버의 부하를 살펴보려면 크게 CPU부하, I/O 디바이스 부하, 네트워크 부하를 확인해야한다.&lt;/li&gt;
&lt;li&gt;어플리케이션을 구현하고 제대로 서비스 하기 위해서는 서버를 제대로 모니터링하고 미리 어느 정도를 감당할 수 있는지 확인할 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;또한 지표를 보고 어느 부분을 개선하여 성능을 개선시킬 수 있을지도 판단할 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;결국 경험이 답이다…!!&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55&quot;&gt;https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-uptime&quot;&gt;1. uptime&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-dmesg--tail&quot;&gt;2. dmesg | tail&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-vmstat-1&quot;&gt;3. vmstat 1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A4%91%EC%9A%94%ED%95%9C-%EC%B9%BC%EB%9F%BC&quot;&gt;중요한 칼럼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-mpstat--p-all-1&quot;&gt;4. mpstat -P ALL 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#5-pidstat-1&quot;&gt;5. pidstat 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#6-iostat--xz-1&quot;&gt;6. iostat -xz 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#7-free--m&quot;&gt;7. free -m&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#8-sar--n-dev-1&quot;&gt;8. sar -n DEV 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#9-sar--n-tcpetcp-1&quot;&gt;9. sar -n TCP,ETCP 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#10-top&quot;&gt;10. top&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;🌩 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[K6를 활용한 성능테스트 경험기 2 - 홈피드 조회 기능 향상]]></title><description><![CDATA[💡 Intro 이전 포스트에서 진행한 프로젝트에서 홈피드 게시물 조회 성능 테스트에 대한 결과를 보고 개선대상을 파악하고 개선한다. 개선 후 테스트를 재진행하여 결과를 비교한다. 🌩 쿼리 진단 이전 포스트에서 진행한 성능 테스트를 통해 DB…]]></description><link>https://yjksw.github.io/project-pickgit-homefeed-performance-test-2/</link><guid isPermaLink="false">https://yjksw.github.io/project-pickgit-homefeed-performance-test-2/</guid><pubDate>Fri, 15 Oct 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이전 포스트에서 진행한 &lt;a href=&quot;https://github.com/woowacourse-teams/2021-pick-git&quot;&gt;프로젝트&lt;/a&gt;에서 홈피드 게시물 조회 성능 테스트에 대한 결과를 보고 개선대상을 파악하고 개선한다.&lt;/li&gt;
&lt;li&gt;개선 후 테스트를 재진행하여 결과를 비교한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-쿼리-진단&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BF%BC%EB%A6%AC-%EC%A7%84%EB%8B%A8&quot; aria-label=&quot; 쿼리 진단 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 쿼리 진단&lt;/h2&gt;
&lt;p&gt;이전 포스트에서 진행한 성능 테스트를 통해 DB 쿼리 쪽 병목이 있다는 것을 알아냈다. 구체적으로 쿼리를 자세히 살펴보면서 어떤 문제가 있는지 확인해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;홈피드 게시물을 반환할 때 발생하는 slow query&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재는 포스트 조회하는 쿼리가 최대값으로는 3.62 초가 소요된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137448824-409b2475-61a2-48f1-8390-7f6364a5f4db.png&quot;&gt;&lt;/p&gt; 
&lt;ul&gt;
&lt;li&gt;쿼리의 실행계획을 확인해서 문제점을 파악해보니 100만건의 데이터를 거의 다 훑으면서 filesort를 하고 있었다. 게시물을 최신순으로 정렬하여 상위 10개를 가지고 오는 Pagination을 적용하고 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137449059-6b18bcad-3794-41b9-b7e2-6bc42ee7a971.png&quot;&gt;&lt;/p&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-개선하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0&quot; aria-label=&quot; 개선하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 개선하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;createt_At 칼럼에 인덱스를 추가하여 데이터가 정렬되도록 한다. 인덱스를 건 후 실행계획을 확인해보니 filesort가 제거되었고 훑는 row 수가 대폭 줄어들었다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137449278-a84af99e-42d5-4ada-86aa-cc3c9c05a2fb.png&quot;&gt;&lt;/p&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-개선-후-성능-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot; 개선 후 성능 테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 개선 후 성능 테스트&lt;/h2&gt;
&lt;h3 id=&quot;인덱스-추가-후-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%B6%94%EA%B0%80-%ED%9B%84-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;인덱스 추가 후 테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스 추가 후 테스트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트 중 서버 모니터링&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137449561-613620d9-d87a-4433-a626-aca8ea74ebcf.png&quot;&gt;&lt;/p&gt; 
&lt;ul&gt;
&lt;li&gt;본래 DB에 실행 대기 중인 프로세스(맨 왼쪽 r 칼럼)가 많았다. 약 20 이라는 수치를 보였으며 DB 서버의 CPU의 idle 상태도 항상 0%였다.&lt;/li&gt;
&lt;li&gt;인덱스를 걸어서 쿼리 수행이 훨씬 빨라지면서 &lt;strong&gt;DB 인스턴스에 CPU 부하가 훨씬 줄었다&lt;/strong&gt;. 또한 여전히 Disk I/O는 발생하지 않는다.&lt;/li&gt;
&lt;li&gt;대신 WAS 쪽 CPU에 부하가 발생했다. r 수치가 11-15 사이를 왔다갔다 했으며 CPU idle 비율이 2% ~ 15%를 왔다갔다 했다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;왜 갑자기 이런 수치가 보여졌을까?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;성능 테스트를 할 때 실운영 환경과의 차이가 있기 때문이다.&lt;/li&gt;
&lt;li&gt;성능 테스트를 할 때는 한 vuser의 요청에 대한 응답이 오기 전까지 다음 요청을 보내지 않는다. 따라서 요청에 대한 응답이 느리면 그 다음 요청을 못보내기 때문에 이전 테스트 결과와 다르게 더 많은 요청을 보냈고, WAS의 CPU 부하가 발생했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인덱스 추가 후 성능 테스트 결과&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;진행된 테스트 개수: 6694 → 944360&lt;/li&gt;
&lt;li&gt;요청 응답 시간: 13.41s → 83.57ms&lt;/li&gt;
&lt;li&gt;TPS: 10.94/s → 1573.72/s&lt;/li&gt;
&lt;li&gt;성능이 대폭 향상된 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137450075-acdc9624-f2c0-4b3d-852c-367fc4a441bd.png&quot;&gt;&lt;/p&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-요약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%9A%94%EC%95%BD&quot; aria-label=&quot; 요약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 요약&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;기존 홈피드를 조회할 때 13초 가량의 시간이 소요 되었다.&lt;/li&gt;
&lt;li&gt;분석해보니 디스크 I/O 부하는 없고 DB쪽 CPU 부하가 있으므로 쿼리 효율성의 문제라고 판단하였다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;order by createdAt&lt;/code&gt; 쿼리의 부분이 풀스캔 + filesort를 하고 있음을 발견했다. (쿼리 실행 시간 3초 이상)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;createdAt&lt;/code&gt; 칼럼에 인덱스를 걸어서 풀스캔 → limit 개수 만큼만 스캔하도록 설정했다..&lt;/li&gt;
&lt;li&gt;결과적으로 응답 시간이 약 &lt;strong&gt;13초에서 85ms&lt;/strong&gt; 정도로 단축되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-느낀점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80%EC%A0%90&quot; aria-label=&quot; 느낀점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 느낀점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;테스트 코드를 통해서는 확인할 수 없는 허점을 발견할 수 있었던 것이 새로웠다.&lt;/li&gt;
&lt;li&gt;성능 테스트를 하면서 가장 크게 느낀 것은 돌아가는 어플리케이션을 구현하는 것이 아니라 사용자에게 서비스될 수 있는 어플리케이션을 만들어야 한다는 것이다. 그렇게 하기 위해서는 경험하지 않으면 알 수 없는 많은 부분들을 고려해야한다.&lt;/li&gt;
&lt;li&gt;기존에는 코드 퀄리티 자체와 원하는 결과를 내는 것에 집중했다면, 이제는 제한된 리소스 내에게 원하는 목표치까지 서비스할 수 있는 어플리케이션을 구현하는것이 중요하다는 시각이 트인 좋은 기회였다.&lt;/li&gt;
&lt;li&gt;성능 테스트를 하면서 막힌 부분은 서버를 모니터링, 커넥션 개수 파악, 데이터베이스 쿼리 최적화, 네트워크 통신 부분이다. 많이 배웠던 CS 기초가 웹 어플리케이션을 구현하면서 많이 등장하지 않아서 왜 중요한지 체감하지 못하고 있있는데 이런 대용량 (대용량이라고 하기엔 훨씬 부족하지만..) 서비스를 만들면서 다시 마주하게 될 줄 몰랐다. 역시 기초가 튼튼한 것이 가장 중요한 것 같다.&lt;/li&gt;
&lt;li&gt;성능 테스트를 하면서 부족한 CS 기초 (운영체제, 네트워크, 데이터베이스)를 병행해서 공부했다. 띄엄띄엄 알던 지식들이 하나로 연결되는 경험이었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%BF%BC%EB%A6%AC-%EC%A7%84%EB%8B%A8&quot;&gt;🌩 쿼리 진단&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0&quot;&gt;🌩 개선하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;🌩 개선 후 성능 테스트&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%B6%94%EA%B0%80-%ED%9B%84-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;인덱스 추가 후 테스트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%9A%94%EC%95%BD&quot;&gt;🌩 요약&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%8A%90%EB%82%80%EC%A0%90&quot;&gt;🌩 느낀점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[K6를 활용한 성능테스트 경험기 1 - 홈피드 조회 기능 향상]]></title><description><![CDATA[💡 Intro…]]></description><link>https://yjksw.github.io/project-pickgit-homefeed-performance-test-1/</link><guid isPermaLink="false">https://yjksw.github.io/project-pickgit-homefeed-performance-test-1/</guid><pubDate>Fri, 15 Oct 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-intro&quot; aria-label=&quot; intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;진행 중인 &lt;a href=&quot;https://github.com/woowacourse-teams/2021-pick-git&quot;&gt;프로젝트&lt;/a&gt;에서 구현한 웹 어플리케이션이 어느 정도의 부하를 견딜 수 있는지에 대한 성능테스트를 진행했다.&lt;/li&gt;
&lt;li&gt;프로젝트는 개발자를 타켓으로 한 깃헙 레포지토리를 연동한 게시물을 업로드하여 개발자들이 자신의 작업을 공유하고 다른 이들의 프로젝트를 캐줄얼하게 엿볼 수 있는 SNS형 웹 어플리케이션이다.&lt;/li&gt;
&lt;li&gt;웹 어플리케이션에 들어가자마자 최신순으로 정렬된 게시물 피드를 볼 수 있다. (비로그인/로그인 모두 가능)&lt;/li&gt;
&lt;li&gt;홈피드 게시물 조회 성능테스트를 진행, 병목 지점을 분석하고 개선하는 과정을 따라가보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-사전-작업&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85&quot; aria-label=&quot; 사전 작업 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 사전 작업&lt;/h2&gt;
&lt;h3 id=&quot;테스트-더미-데이터-입력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%AF%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EB%A0%A5&quot; aria-label=&quot;테스트 더미 데이터 입력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 더미 데이터 입력&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;테스트를 진행하기 위해서는 실제 운영환경과 최대한 유사한 환경에서 테스트하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;운영환경과 유사한 환경이라고 하면 크게 1) 인프라 구조 2) 데이터 두 가지가 있다.&lt;/li&gt;
&lt;li&gt;먼저 대량의 더미 데이터를 입력하도록 한다. (팀원 케빈이 수고해주었다 !! 👍)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; * 테스트 데이터 : 게시물 100만 / 유저 20만
 *                 태그 10만 (1개당 게시물 10개)
 *                 댓글 100만 (게시물당 1개)
 *
 * 테스트 용이성을 위해 유저 1명 이름은 tester로 명명해 저장
 * 테스트 용이성을 위해 태그 3개 이름은 java, javascript, spring로 명명해 저장&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mariadb-쿼리-캐시-끄기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mariadb-%EC%BF%BC%EB%A6%AC-%EC%BA%90%EC%8B%9C-%EB%81%84%EA%B8%B0&quot; aria-label=&quot;mariadb 쿼리 캐시 끄기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MariaDB 쿼리 캐시 끄기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;왜 쿼리 캐시를 껐을까?
&lt;ul&gt;
&lt;li&gt;실제 어플리케이션에서는 query cache 설정이 켜져있음에도 불구하고 cache 설정을 끈 이유는 실제 환경에서는 많은 유저들이 여러 태그를 검색하여 매번 다양한 쿼리가 실행되지만 테스트 환경에서는 3개의 태그를 랜덤으로 실행하기 때문에 캐시 적중률이 실제 환경보다 높다. 따라서 db 쿼리캐시를 꺼서 최대한 실제 환경과 맞춰주도록 한다.&lt;/li&gt;
&lt;li&gt;참고로 MySQL 8.0 부터는 쿼리 캐시 기능이 꺼져있다고 한다.&lt;/li&gt;
&lt;li&gt;또한 여전히 os 측에서 하는 memory 캐시 영향이 있지만 제어하기 어려운 부분이므로 우선 넘어가도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;쿼리 캐시 확인&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137438052-8604eb7d-a892-4a2b-9ca2-064ef832743b.png&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137438572-2c20b02c-9cfb-4556-a9b8-ae362209423b.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MariaDB config 파일에서 cache size를 0으로 설정한다.&lt;/li&gt;
&lt;li&gt;이후 &lt;code class=&quot;language-text&quot;&gt;sudo service mysqld restart&lt;/code&gt; 로 DB를 재구동시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;변경 후 적용 확인&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137438718-ba0973ee-3037-4729-b1cb-ef2d2fe43354.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;mariadb-slow-query-로그-설정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mariadb-slow-query-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;mariadb slow query 로그 설정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MariaDB slow query 로그 설정하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;오래 걸리는 쿼리에 대한 로그를 남겨 특정 쿼리로 인한 병목이 있는지 확인할 수 있도록 설정한다.&lt;/li&gt;
&lt;li&gt;단위는 1초 이상 걸리는 쿼리에 대한 로그를 남기는 것으로 했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Slow query 적용 중인지 확인&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137438832-c3b085d0-8143-4974-8045-829455f6fbe7.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slow 쿼리 설정 적용 하기
&lt;ul&gt;
&lt;li&gt;slow_query_log = 1 부터 long_query_time 까지 적용&lt;/li&gt;
&lt;li&gt;적용 후 &lt;code class=&quot;language-text&quot;&gt;sudo service mysqld restart&lt;/code&gt; 로 재시작&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137438852-19161fd9-ac7b-4948-bdb3-0df7991bbf6f.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Slow query 설정 후 확인&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137439074-ff7ed9e9-0ff8-454b-b471-1634454ca3bf.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;제대로 적용되었는지 확인하기 위해서 5초 이상 걸리는 쿼리를 실행하고 로그파일 경로의 &lt;code class=&quot;language-text&quot;&gt;mariadb-slow.log&lt;/code&gt;에 대항 쿼리에 대한 로그가 남았는지 확인해보자.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137439218-aa74256f-24e3-40c8-9351-03f83fda8a6b.png&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137439229-266c8c68-1626-43b6-a481-c99b245c6b20.png&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137439238-f496e3bf-41fc-4c2a-afdc-5008d843c634.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-테스트-진행하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0&quot; aria-label=&quot; 테스트 진행하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 테스트 진행하기&lt;/h2&gt;
&lt;h3 id=&quot;테스트-환경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;테스트 환경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 환경&lt;/h3&gt;
&lt;p&gt;테스트를 위해 구축한 테스트 환경은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WAS 2대가 각각 AWS EC2 Medium 사양으로 실행중이다.&lt;/li&gt;
&lt;li&gt;AWS EC2 Medium 사양으로 Reverse Proxy가 있으며 Load balancer 역할을 하면 ssl 적용이 되어 있다.&lt;/li&gt;
&lt;li&gt;데이터 베이스는 AWS EC2 Medium에 MariaDB로 3대가 연결되어 있다.
&lt;ul&gt;
&lt;li&gt;Master DB 1개, Slave DB 2대로 replication이 적용되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;테스트 툴은 K6로 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS EC2 Medium 에 K6 테스트 서버를 구축했다.&lt;/li&gt;
&lt;li&gt;왜 K6일까?
&lt;ul&gt;
&lt;li&gt;사실 팀 차원에서 하는 테스트 툴은 &lt;a href=&quot;https://naver.github.io/ngrinder/#:~:text=nGrinder%20is%20a%20platform%20for,inconveniences%20and%20providing%20integrated%20environments&quot;&gt;Ngrinder&lt;/a&gt; 이다.&lt;/li&gt;
&lt;li&gt;하지만 AWS 권한 제한으로 인해 controller와 agent를 별도의 EC2로 분리하지 못했다. (그것 때문인지는 모르겠지만 간혹 랜덤하게 K6와 동일한 테스트를 돌렸을 때 결과가 매우 다르게 나올때도 있었다…) ngrinder는 반드시 분리하도록 권장하기 때문에 혹시 모를 영향을 최소화 하기 위해서 나는 K6에서 진행하였다.&lt;/li&gt;
&lt;li&gt;또한 K6는 문서가 굉장히 깔끔하게 잘 되어 있어 스크립트를 짜거나 테스트 설정을 하는 것이 입문자에게 편하다는 장점이 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;테스트-스크립트-및-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;테스트 스크립트 및 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 스크립트 및 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;K6는 자바스크립트로 테스트 스크립트를 짠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;부하 테스트는 약 10분간 148 명의 vuser로 진행했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;본래 30분 이상을 하기를 권장하지만 시간 관계상 10분만 진행하고 빠르게 결과를 분석하기로 했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스크립트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;비회원으로 홈 피드 조회 API 요청을 보낸다. 우선 pagination은 0 - 20 고정이다. (추후 랜덤 페이지 테스트를 진행해야한다.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;응답코드가 200 인지 확인한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; http &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;k6/http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://jslib.k6.io/url/1.0.0/index.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; check &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;k6&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; randomIntBetween &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://jslib.k6.io/k6-utils/1.1.0/index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
vus&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;600s&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://test-pick-git.o-r.kr/api/posts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;page&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;limit&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;is status 200&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;성능 테스트를 진행하면서 서버의 상태를 관리하기 위해 각각 WAS 2대, DB 2대에 대한 상태를 출력하고 모니터링 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vmstat 1 -Sm&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;top&lt;/code&gt; 명령어를 통해 프로세스의 상태, CPU 상태, 스왑 발생 여부, load average 등을 확인했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-테스트-진행하기-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0-1&quot; aria-label=&quot; 테스트 진행하기 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 테스트 진행하기&lt;/h2&gt;
&lt;h3 id=&quot;첫번째-테스트---was-오류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B2%AB%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8---was-%EC%98%A4%EB%A5%98&quot; aria-label=&quot;첫번째 테스트   was 오류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫번째 테스트 - WAS 오류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WAS 및 DB 모니터링: 왼쪽 위 부터 시계 방향으로 &lt;code class=&quot;language-text&quot;&gt;was1&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;was2&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;slaveDB2&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;slaveDB1&lt;/code&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137442374-21e53603-b1d6-4505-9290-9bc65dfc1d38.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WAS2에 대한 CPU idle 비율이 100% 이므로 해당 WAS가 동작하지 않은 것을 알아내었다. 확인해보니 어플리케이션이 종료되어 있었다. 테스트 진행시간이 5분정도 경과되었을 때 was2에 어플리케이션을 띄웠고 테스트는 그대로 계속 진행했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137442922-2b3148e4-d243-480e-b442-3ea3a5168eb4.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DB의 경우 OS메모리 캐싱이 되므로 DISK I/O는 발생하지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다만 비효율적인 쿼리에 의해 CPU 과부하가 걸리는 것을 확인할 수 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;맨 왼쪽 칼럼 &lt;strong&gt;r&lt;/strong&gt;(실행 대기 프로세스 수) 수치가 10 정도로 매우 높다.&lt;/li&gt;
&lt;li&gt;본래 r은 CPU 코어 갯수여야 서버가 잘 돌아가고 있다고 판단한다. (현재 ec2 CPU 코어 개수 2개)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;요청 당 실행 시간(http_req_duration) &lt;strong&gt;13.33 초&lt;/strong&gt;로 매우 긴 시간이 소요되기에 개선해야 할 점이 명확히 보였다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;두번째-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;두번째 테스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;두번째 테스트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WAS 및 DB 모니터링: 왼쪽 위 부터 시계 방향으로 &lt;code class=&quot;language-text&quot;&gt;was1&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;was2&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;slaveDB2&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;slaveDB1&lt;/code&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137443197-e4a921d2-f0b5-45b8-a8f1-84ce23bf5c94.png&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137443204-86fd6f1b-1f46-4613-bb31-00dc4091bb68.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;앞 테스트와 동일하게 WAS의 CPU나 I/O 상황은 대체적으로 양호하고 DB 서버에 CPU 과부하가 걸리는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137443363-66ab8e2e-33a6-4cd5-9e59-72354e93c3fc.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WAS가 2대였음에도 불구하고 error rate이 줄어든 것 밖에 나아진 부분은 없었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요청 실행 시간이나 테스트 갯수 tps 등의 수치가 위와 동일했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이것을 통해 알 수 있는 것은 WAS의 성능이 아니라 DB에 의한 성능저하라는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;더 명확하게 알아보기 위해 slow query 로그를 확인해 보았다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;로그를 확인해보니 태그를 검색하고 검색 결과인 게시물을 조회하는 쿼리가 1.5 초 정도 소요되는 것을 확인할 수 있었다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/137443674-1307b8ca-3cfa-41c8-ba80-c0e1adf39e12.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;다음 포스트에서 병목이 생기는 DB 쿼리를 진단하고 개선한 후 결과에 대해서 다룬다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-intro&quot;&gt;💡 Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85&quot;&gt;🌩 사전 작업&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%AF%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EB%A0%A5&quot;&gt;테스트 더미 데이터 입력&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mariadb-%EC%BF%BC%EB%A6%AC-%EC%BA%90%EC%8B%9C-%EB%81%84%EA%B8%B0&quot;&gt;MariaDB 쿼리 캐시 끄기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mariadb-slow-query-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot;&gt;MariaDB slow query 로그 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0&quot;&gt;🌩 테스트 진행하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD&quot;&gt;테스트 환경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%EC%84%A4%EC%A0%95&quot;&gt;테스트 스크립트 및 설정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0-1&quot;&gt;🌩 테스트 진행하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B2%AB%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8---was-%EC%98%A4%EB%A5%98&quot;&gt;첫번째 테스트 - WAS 오류&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;두번째 테스트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH5. 프로세스 관리]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH5. 프로세스 관리를 읽고 정리한 내용입니다 🙌 🌩 1. 프로세스의 개념 프로세스란 실행 중인 프로그램이다. 프로세스는 CPU를 획득해서 코드를 수행하고 CPU…]]></description><link>https://yjksw.github.io/operating-system-4/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-4/</guid><pubDate>Wed, 13 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH5. 프로세스 관리&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-프로세스의-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90&quot; aria-label=&quot; 1 프로세스의 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 프로세스의 개념&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로세스란 실행 중인 프로그램&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;프로세스는 CPU를 획득해서 코드를 수행하고 CPU를 반환하고 입출력 작업을 수행하기도 한다.&lt;/li&gt;
&lt;li&gt;프로세스 문맥 (context) - 프로세스가 현재 어떤 상태에서 수행되고 있는 규명하기 위해 필요한 정보
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 CPU를 사용하면서 중간에 CPU를 다른 프로세스에게 넘겨야 한다.&lt;/li&gt;
&lt;li&gt;이때 다시 이어서하기 위한 필요 정보가 있는데 그것을 &lt;strong&gt;프로세스 문맥&lt;/strong&gt;이라고 한다.&lt;/li&gt;
&lt;li&gt;프로세스의 주소 공간, 레지스터의 값, 시스템 콜을 통해 커널에서 수행한 일의 상태, 프로세스에 대해 커널이 관리하고 있는 여러 정보들을 포함한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스 문맥은 3가지로 나뉜다.
&lt;ol&gt;
&lt;li&gt;하드웨어 문맥
&lt;ol&gt;
&lt;li&gt;CPU의 수행 상태를 나타낸다.&lt;/li&gt;
&lt;li&gt;프로그램 카운터 값, 각종 레지스터에 저장하고 있는 값들이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 주소 공간
&lt;ol&gt;
&lt;li&gt;코드, 데이터, 스택으로 이루어진 프로세스의 독자적인 주소 공간이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;커널상의 문맥
&lt;ol&gt;
&lt;li&gt;PCB 와 커널스택이 프로세스에 대한 커널에 위치하는 자료구조이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-프로세스의-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C&quot; aria-label=&quot; 2 프로세스의 상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. 프로세스의 상태&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;실행(running), 준비(ready), 봉쇄(blocked, wait, sleep)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;실행 - 프로세스가 CPU를 봉하고 기계어 명령을 실행하고 있는 상태
&lt;ul&gt;
&lt;li&gt;실제로 실행 상태에 있는 프로세스는 매 시점 하나이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;준비 - 프로세스가 CPU만 보유하면 명령을 실행할 수 있지만 CPU를 획득하지 못한 상태&lt;/li&gt;
&lt;li&gt;봉쇄 - CPU를 할당 받더라도 명령을 실행할 수 없는 프로세스의 상태
&lt;ul&gt;
&lt;li&gt;입출력 작업이 진행 중인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 상태를 나누는 이유는 컴퓨터의 자원을 효율적으로 관리하기 위해서다.&lt;/li&gt;
&lt;li&gt;이외에도 &lt;strong&gt;시작과 종료&lt;/strong&gt; 상태가 있다.
&lt;ul&gt;
&lt;li&gt;시작 - 프로세스에 대한 자료구조는 생성 되었지만 메모리 획득을 승인받지 못한 상태&lt;/li&gt;
&lt;li&gt;종료 - 프로세스가 종료되었으나 운영체제가 관련된 자료구조를 완전히 정리하지 못한 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스는 앞의 상태 중 하나에 머물러 있으며, 시간의 흐름에 따라서 변한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로세스의-상태-흐름&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C-%ED%9D%90%EB%A6%84&quot; aria-label=&quot;프로세스의 상태 흐름 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스의 상태 흐름&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 문맥이 교환되는 것을 Context switching이라고 한다.
&lt;ul&gt;
&lt;li&gt;한 프로세스가 진행 중일 때 타이머 인터럽트가 발생한다.&lt;/li&gt;
&lt;li&gt;타이머 인터럽트 처리루틴에 따라서 현재 진행중이던 프로세스의 문맥을 저장하고 준비 상태의 프로세스 중 하나를 선택한다.&lt;/li&gt;
&lt;li&gt;본래 수행 중이던 프로세스를 준비 상태로 내리고 새로운 프로세스가 실행 상태가 된다.&lt;/li&gt;
&lt;li&gt;실행할 프로세스에 대한 문맥을 세팅한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU 디스패치(dispatch)&lt;/strong&gt; - 준비 상태에 있는 프로세스 중 CPU를 할당받을 프로세스를 선택하고 제어권을 넘겨받는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;입출력을-요청한-프로세스의-상태변화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5%EC%9D%84-%EC%9A%94%EC%B2%AD%ED%95%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94&quot; aria-label=&quot;입출력을 요청한 프로세스의 상태변화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력을 요청한 프로세스의 상태변화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;디스크 입출력은 오랜 시간이 걸리기 때문에 이 시간동안 해당 프로세스는 봉쇄 상태가 된다.&lt;/li&gt;
&lt;li&gt;그 동안 준비 상태의 프로세스 들을 CPU 스캐줄러가 선정해 CPU를 할당하고 해당 프로세스는 실행 상태로 변경이 된다.&lt;/li&gt;
&lt;li&gt;입출력 요청 프로세스는 디스크 입출력 큐에 대기하다가 디스크 컨트롤러부터 서비스를 받는다.&lt;/li&gt;
&lt;li&gt;완료 후 디스크 컨트롤러가 CPU에게 인터럽트로 입출력 완료를 알린다.&lt;/li&gt;
&lt;li&gt;CPU는 인터럽에 대한 루틴을 수행한다.
&lt;ul&gt;
&lt;li&gt;이때 당시에 CPU에서 진행중이던 프로세스가 사용자모드에서 커널 모드로 바뀐다.&lt;/li&gt;
&lt;li&gt;관련이 없는 프로세스지만 해당 프로세스 중 인터럽트가 발생했기 때문에 해당 프로세스가 커널 모드로 진입했다고 판단하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;봉쇄 상태의 프로세스는 준비 상태로 바뀌고, 로컬버퍼에 있는 내용을 메모리로 이동시키는 업무를 수행한다.&lt;/li&gt;
&lt;li&gt;인터럽트 처리 루틴이 완료되면 직전 프로세스가 다시 수행되거나 입출력 완료 프로세스의 우선순위가 높다면 해당 프로세스가 수행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-프로세스-제어블록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4%EB%B8%94%EB%A1%9D&quot; aria-label=&quot; 3 프로세스 제어블록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 프로세스 제어블록&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Process Control Block - 운영체제가 시스템 내의 프로세스들을 관리하기 위해 프로세스마다 유지하는 정보들을 담는 &lt;strong&gt;커널 내 자료구조&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;커널 메모리의 데이터 영역에 위치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다음 요소들로 구성되어 있다.
&lt;ul&gt;
&lt;li&gt;프로세스의 상태
&lt;ul&gt;
&lt;li&gt;CPU를 할당해도 되는지 여부를 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스 카운터 값
&lt;ul&gt;
&lt;li&gt;다음 수행할 명령어 위치 가리킴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 레지스터 값
&lt;ul&gt;
&lt;li&gt;CPU 연산을 위해서 현 시점에서 레지스터에 특정 값을 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 스캐줄링 정보
&lt;ul&gt;
&lt;li&gt;스캐줄링에 필요한 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리 관리 정보
&lt;ul&gt;
&lt;li&gt;메모리 할당에 필요한 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자원 사용 정보
&lt;ul&gt;
&lt;li&gt;사용자에게 자원 사용 요금을 계산하여 청구&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;입출력 상태 정보
&lt;ul&gt;
&lt;li&gt;프로세스가 오픈한 파일 정보 등 프로세스의 입출력 관련 상태 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-문맥교환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EB%AC%B8%EB%A7%A5%EA%B5%90%ED%99%98&quot; aria-label=&quot; 4 문맥교환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 문맥교환&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Context Switch - 하나의 사용자 프로세스로부터 다른 사용자 프로세스로 CPU의 제어권이 이양되는 과정
&lt;ul&gt;
&lt;li&gt;타이머 인터럽트가 발생하면 직전 수행 프로세스의 문맥을 저장하고 새로운 프로세스에게 CPU를 이양한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기존에 보유하고 있던 프로세스의 문맥 저장
&lt;ul&gt;
&lt;li&gt;PC 값 등을 자신의 PCB에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;새로 할당받은 프로세스
&lt;ul&gt;
&lt;li&gt;저장했던 문맥을 PCB에서 하드웨어로 복원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;타이머 인터럽트 외에도 실행 중이던 프로세스가 입출력 요청이나 다른 조건을 충족하지 못해서 CPU를 뺏기고 봉쇄상태가 될 때도 문맥교환이 발생한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로세스 실행 상태 중 인터럽트나 시스템 콜로 인해 CPU의 제어권이 운영체제로 넘어가면 실행 중이던 프로세스의 문맥을 일부 PCB에 저장하지만 이 과정은 문맥교환이라고 하지 않는다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;단순히 해당 프로세스의 모드가 사용자모드에서 커널모드로 바뀌는 것 뿐이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;모드변경보다 문맥교환이 훨씬 많은 오버헤드가 발생한다. 따라서 타이머의 단위가 작아 문맥교환이 지나치게 자주 일어나면 오버헤드가 커진다.
&lt;ul&gt;
&lt;li&gt;하지만 단위가 너무 크면 시분할 시스템의 의미가 퇴색되므로 적절한 시간 할당이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-프로세스를-스케줄링하기-위한-큐&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%ED%81%90&quot; aria-label=&quot; 5 프로세스를 스케줄링하기 위한 큐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 프로세스를 스케줄링하기 위한 큐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제는 준비상태에 있는 프로세스들을 ready queue에 두고 줄 앞에 프로세스에게 CPU를 할당한다.
&lt;ul&gt;
&lt;li&gt;줄을 세우는 방식은 CPU 스캐줄링 방식에 따라서 달라진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운영체제 하드웨어 자원을 기다리는 프로세스를 위한 자원별 장치 큐 device queue가 있다.
&lt;ul&gt;
&lt;li&gt;ex. 디스크 입출력 큐 disk I/O queue, 키보드 입출력 큐 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소프트웨어 자원을 기다리기 위한 자원 큐도 있다.
&lt;ul&gt;
&lt;li&gt;어떤 공유 데이터에 대한 접근 권한 등등&lt;/li&gt;
&lt;li&gt;일관성을 위해 해당 공유 데이터에 접근 중인 프로세스가 다 사용하고 반납할 때까지 접근 권한을 주면 안된다.&lt;/li&gt;
&lt;li&gt;이 관리를 자원 큐를 통해서 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 모든 큐들은 커널의 데이터 영역에 둔다.
&lt;ul&gt;
&lt;li&gt;프로세스의 CPU 대기, 입출력 대기 등의 정보를 커널이 총체적으로 관리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;작업 큐 (job queue) - 시스템 내의 모든 프로세스를 관리하기 위한 큐로 프로세스의 상태와 무관하게 현재 시스템 내에 있는 모든 프로세스가 작업 큐에 속한다.
&lt;ul&gt;
&lt;li&gt;작업 큐에 있다고 반드시 메모리가 있는 것은 아니다.&lt;/li&gt;
&lt;li&gt;작업 큐가 가장 넓은 개념이고 준비 큐와 장치큐이 있는 프로세스는 모두 작업 큐에 속해있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;큐는 각 프로세스의 PCB를 연결 리스크 형태로 관리하고 포인터로 순서를 정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-6-스케줄러&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-6-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC&quot; aria-label=&quot; 6 스케줄러 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 6. 스케줄러&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스캐줄러 - 어떤 프로세스에게 자원을 할당할지 결정하는 운영체제 커널의 코드
&lt;ul&gt;
&lt;li&gt;장기 스캐줄러와 단기 스케줄러&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;장기 스캐줄러 (long term scheduler) - 작업 스캐줄러 (job scheduler) 이며 어떤 프로세스를 준비 큐에 진입시킬지 결정
&lt;ul&gt;
&lt;li&gt;CPU에 실행되기 위해서는 프로세스가 메모리를 보유해야하므로 장기 스캐줄러는 프로세스에 메모리 보유 문제에 관여한다.&lt;/li&gt;
&lt;li&gt;수십 초 내지 수 분 단위로 가끔 호출되므로 상대적으로 느린 것이 허용된다.&lt;/li&gt;
&lt;li&gt;메모리에 동시에 올라가 있는 프로세스의 수 (degree of multiprogramming)을 조절한다.&lt;/li&gt;
&lt;li&gt;하지만 현대의 시분할 시스템은 메모리가 훨씬 커서 장기 스케줄러 없어 바로 프로세스에 메모리를 할당해 준비큐에 넣어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단기 스캐줄러 (short term scheduler) - 준비 프로세스 중 어떤 프로세스를 다음에 실행상태로 만들지 결정
&lt;ul&gt;
&lt;li&gt;준비 큐에 있는 것들 중 어떤 프로세스에게 CPU를 할당할지 결정하는 것&lt;/li&gt;
&lt;li&gt;타이머 인터럽트 발생시 단기 스캐줄러가 호출된다.&lt;/li&gt;
&lt;li&gt;밀리초 단위로 빈번하게 호출이 되므로 수행 속도가 빨라야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;중기 스캐줄러 (medium term scheduling) - 메모리에 적재된 프로세스의 수를 동적으로 조절
&lt;ul&gt;
&lt;li&gt;너무 많은 프로세스가 메모리에 적재되어 시스템 효율이 떨어지는 것을 관리한다.&lt;/li&gt;
&lt;li&gt;메모리에 당장 필요한 프로세스의 주소 공간도 모자라면 디스크 입출력이 수시로 발생하여 시스템의 성능이 저하된다.&lt;/li&gt;
&lt;li&gt;중기 스캐줄러는 이 경우 메모리의 프로세스 중 일부를 선정 해 메모리를 뺏고 해당 내용을 스왑 영역에 저장한다 ⇒ swap out&lt;/li&gt;
&lt;li&gt;프로세스당 보유 메모리가 지나치게 적다면 일부 프로세스를 메모리에게 디스크로 스왑 아웃시키는 역할을 수행한다.&lt;/li&gt;
&lt;li&gt;봉쇄 상태에 있는 프로세스들이 가장 먼저 스왑 아웃된다. 그럼에도 부족하다면 타이머 인터럽트 발생 후 준비 큐로 이동하는 프로세스들을 추가적으로 스왑 아웃한다.
&lt;ul&gt;
&lt;li&gt;다시 CPU를 할당 받을 때까지 시간이 걸리기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 중지(suspended, stopped) 상태
&lt;ul&gt;
&lt;li&gt;외부적인 이유로 프로세스의 수행이 정지된 상태&lt;/li&gt;
&lt;li&gt;디스크로 스왑 아웃된 프로세스의 상태이다.&lt;/li&gt;
&lt;li&gt;중지준비 상태 - 준비 상태의 프로세스가 디스크로 스왑 아웃된 것&lt;/li&gt;
&lt;li&gt;중지봉쇄 상태 - 봉쇄 상태의 프로세스가 디스크로 스왑 아웃된 것
&lt;ul&gt;
&lt;li&gt;중지봉쇄 상태에서 해당 작업이 끝나면 중지준비 상태로 변경된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 경우들은 프로세스가 메모리를 보유하지 않고 통째로 디스크로 스왑 아웃 된 상태이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-7-프로세스의-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-7-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1&quot; aria-label=&quot; 7 프로세스의 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 7. 프로세스의 생성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;시스템 부팅된 후 최초 프로세스는 운영체제가 직접 생성한다.&lt;/li&gt;
&lt;li&gt;이후부터는 이미 존재하는 프로세스가 다른 프로세스를 복제 생성한다.
&lt;ul&gt;
&lt;li&gt;생성하는 프로세스를 부모 프로세스, 생성되는 프로세스를 자식 프로세스라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자식 프로세스가 먼저 죽고 부모 프로세스가 이에 대한 처리를 한다.
&lt;ul&gt;
&lt;li&gt;부모 프로세스가 종료되기 위해서는 생성된 자식 프로세스가 모두 종료된 후에야 종료될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스의 자원
&lt;ul&gt;
&lt;li&gt;운영체제와 자원의 종료에 따라 획득하는 방식이 다르다.
&lt;ul&gt;
&lt;li&gt;운영체제로 직접 자원 할당&lt;/li&gt;
&lt;li&gt;부모 프로세스와 자원을 공유하여 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스 수행 모델
&lt;ul&gt;
&lt;li&gt;부모와 자식이 공존하며 수행
&lt;ul&gt;
&lt;li&gt;부모와 자식이 CPU를 획득하기 위해 경쟁함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자식이 종료(terminated) 될 때까지 부모가 기다리는(wait) 모델
&lt;ul&gt;
&lt;li&gt;자식이 종료될 때까지 부모 프로세스는 봉쇄 상태에 머물다가 자식 종료 후 부모 프로세스가 준비 상태가 되어 CPU를 획득할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스가 생성될 때 독자적인 주소 공간을 갖는다.
&lt;ul&gt;
&lt;li&gt;자식 프로세스가 생성될 때 부모 프로세스의 주소 공간을 복사하여 별도의 주소 공간을 생성하고 새로운 프로그램 내용을 덮어씌워 실행한다.
&lt;ul&gt;
&lt;li&gt;유닉스에서 &lt;code class=&quot;language-text&quot;&gt;fork()&lt;/code&gt; 시 자식 프로세스가 생성되고 부모와 똑같은 커널 내 정보와 주소 공간 정보를 가진 상태로 복사된다. (프로세스 id는 다르다)&lt;/li&gt;
&lt;li&gt;이후 &lt;code class=&quot;language-text&quot;&gt;exec()&lt;/code&gt; 시 새로운 주소 공간을 덮어씌운다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로세스의-종료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%A2%85%EB%A3%8C&quot; aria-label=&quot;프로세스의 종료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스의 종료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;자발적 종료
&lt;ul&gt;
&lt;li&gt;코드의 마지막에 &lt;code class=&quot;language-text&quot;&gt;exit()&lt;/code&gt;라는 시스템 콜을 통해 (없다면 컴파일러가 자동으로 삽입) 종료하고 운영체제는 해당 프로세스로부터 자원을 회수한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비자발적 종료
&lt;ul&gt;
&lt;li&gt;부모 프로세스가 자식 프로세스의 수행을 강제로 종료하며 &lt;code class=&quot;language-text&quot;&gt;abort()&lt;/code&gt;로 이루어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;자식 프로세스가 할당 자원의 한계 이상의 자원을 요구할 때&lt;/li&gt;
&lt;li&gt;자식 프로세스에게 할당된 작업이 필요하지 않을 때&lt;/li&gt;
&lt;li&gt;부모 프로세스가 종료(exit) 되는 경우에 발생한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;종료되는 프로세스는 자식 프로세스를 계속 실행하기 위해서 종료되지 않을 다른 프로세스의 양자로 보내어 계속 수행할 수 있도록 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;자식-프로세스-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;자식 프로세스 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자식 프로세스 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fork()&lt;/code&gt; 시스템 콜로 CPU제어권을 커널로 넘겨 fork() 호출 프로세스를 복제해 자식 프로세스를 생성
&lt;ul&gt;
&lt;li&gt;부모와 모든 문맥(주소 공간, PC, 레지스터 상태, PCB, 커널스택 등)을 동일하게 가진 자식 프로세스 생성한다.
&lt;ul&gt;
&lt;li&gt;따라서 자식 프로세스는 부모 프로세스의 현재 수행 시점부터 수행하게 된다. (PC 등의 값을 그대로 복제하므로)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;식별자는 부모 프로세스와 다르다.&lt;/li&gt;
&lt;li&gt;함수의 결과값은 자식은 0, 부모는 양수이다. 이 값으로 자식과 부모 프로세스를 분기할 수 있다. 하지만 여전히 분기문을 가진 코드 또한 동일한 것을 지닌 상태이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자식에게 독자적인 프로그램 수행이 가능하도록 유닉스에서 새로운 주소 공간에 새로운 프로그램을 &lt;code class=&quot;language-text&quot;&gt;exec()&lt;/code&gt; 를 통해 덮어씌울 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fork()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;exec()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;exit()&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;wait()&lt;/code&gt;는 모두 특권명령이다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wait()&lt;/code&gt;은 자식 프로세스가 종료될 때까지 부모 프로세스를 봉쇄 상태에 머무르게 하는 것이다.&lt;/li&gt;
&lt;li&gt;이것으로 자식과 부모의 동기화 (synchronization)이 가능하다.&lt;/li&gt;
&lt;li&gt;자식 프로세스가 종료되면 다시 준비 큐에 삽입되어 CPU 할당 받을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-8-프로세스-간의-협력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84%EC%9D%98-%ED%98%91%EB%A0%A5&quot; aria-label=&quot; 8 프로세스 간의 협력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 8. 프로세스 간의 협력&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;부모 프로세스와 자식 프로세스는 독자적인 메모리 구조를 가지므로 독립적인 관계가 된다.&lt;/li&gt;
&lt;li&gt;프로세스간 협력할 때 서로 주소 공간을 참조하지 않으면서 정보를 주고받을 수 있는 매커니즘이 필요하다.&lt;/li&gt;
&lt;li&gt;IPC(Inter-Process Communication) - 운영체제가 제공하는 하나의 컴퓨터 안에서 실행 중인 프로세스 간 협력 매커니즘
&lt;ul&gt;
&lt;li&gt;프로세스간의 통신(communication)과 함께 공유 데이터의 일관성을 위한 동기화를 보장해주어야 한다.&lt;/li&gt;
&lt;li&gt;메세지 전달(message passing)과 공유메모리(shared memory) 방식이 있다.
&lt;ul&gt;
&lt;li&gt;차이는 shared data가 있는 것과 없는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;메세지-전달&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC&quot; aria-label=&quot;메세지 전달 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메세지 전달&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스간 공유 데이터가 없이 메세지를 주고받으며 통신한다. 메세지 전달은 직접하지 못하고 커널이 전달한다.&lt;/li&gt;
&lt;li&gt;커널이 제공하는 send(), receive() 연산으로 시스템 콜 방식으로 요청해 메세지를 전달한다.&lt;/li&gt;
&lt;li&gt;메세지를 전달하는 연산은 특권명령이다.&lt;/li&gt;
&lt;li&gt;통신하기 원하는 두 프로세스는 communication link를 생성하고 send(), receive()를 통해 메세지를 주고 받는다.
&lt;ul&gt;
&lt;li&gt;communication link는 물리적인 방법, 논리적인 방법 두 가지로 구현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;직접 프로세스에게 전달하는 방식과 메일 박스를 통해 간접적으로 전달하는 방식으로 나뉜다.
&lt;ol&gt;
&lt;li&gt;직접 통신 (direct communication)
&lt;ol&gt;
&lt;li&gt;통신하려는 프로세스를 직접 명시하고 받는 프로세스도 직접 명시한다.&lt;/li&gt;
&lt;li&gt;커뮤니케이션 링크는 자동으로 생성되고 하나의 링크는 한 쌍의 프로세스에게 할당된다.&lt;/li&gt;
&lt;li&gt;대부분의 링크는 양방향이며 단 하나의 링크만 서로 존재한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;간접 통신 (indirect communication)
&lt;ol&gt;
&lt;li&gt;메일박스 또는 포트로 메시지를 전달받는다. 메일박스는 고유의 id가 있어서 해당 메일박스를 공유하는 프로세스들끼리만 통신을 할 수 있다.&lt;/li&gt;
&lt;li&gt;커뮤니케이션 링크는 메일박스를 공유하는 경우에만 생성된다.&lt;/li&gt;
&lt;li&gt;하나의 링크가 여러 프로세스에게 할당될 수 있고, 각 프로세스 쌍은 여러 링크를 공유할 수 있다.&lt;/li&gt;
&lt;li&gt;링크는 단방향, 양방향일 수 있다.&lt;/li&gt;
&lt;li&gt;새로운 메일박스를 생성하는 연산, 메세지 send(), receive() 연산, 메일박스 삭제 연산을 할 수 있다.&lt;/li&gt;
&lt;li&gt;간접통신에서 메세지 대상 및 수신자는 A라는 메일박스로 통일된다.&lt;/li&gt;
&lt;li&gt;메일박스 공유로 수신 대상의 혼란을 제어하기 위해 2개의 프로세스에게만 링크를 할당할 수 있다.
&lt;ul&gt;
&lt;li&gt;또는 링크의 receive() 연산을 매 시점 하나의 프로세스만 수행할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;시스템이 메세지 수신자를 임의로 결정해 누가 받았는지 송신자에게 통신해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;공유메모리-shared-memory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%EC%9C%A0%EB%A9%94%EB%AA%A8%EB%A6%AC-shared-memory&quot; aria-label=&quot;공유메모리 shared memory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공유메모리 shared memory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스들의 메모리 주소 공간 일부를 공유한다.&lt;/li&gt;
&lt;li&gt;각 프로세스는 독립된 주소 공간을 가지고 있다. 이 주소 공간(가상 메모리)가 물리 메모리로 매핑될 때 공유메모리 주소 영역은 동일한 물리 메모리 영역으로 매핑된다.&lt;/li&gt;
&lt;li&gt;통신이 쉬운 인터페이스이지만 데이터 일관성 문제가 발생할 수 있다. 이 문제는 커널이 책임지지 않으며 프로세스들끼리 직접 동기화 문제를 해결해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90&quot;&gt;🌩 1. 프로세스의 개념&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-2-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C&quot;&gt;🌩 2. 프로세스의 상태&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C-%ED%9D%90%EB%A6%84&quot;&gt;프로세스의 상태 흐름&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5%EC%9D%84-%EC%9A%94%EC%B2%AD%ED%95%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94&quot;&gt;입출력을 요청한 프로세스의 상태변화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-3-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4%EB%B8%94%EB%A1%9D&quot;&gt;🌩 3. 프로세스 제어블록&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%EB%AC%B8%EB%A7%A5%EA%B5%90%ED%99%98&quot;&gt;🌩 4. 문맥교환&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-5-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%ED%81%90&quot;&gt;🌩 5. 프로세스를 스케줄링하기 위한 큐&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-6-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC&quot;&gt;🌩 6. 스케줄러&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-7-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1&quot;&gt;🌩 7. 프로세스의 생성&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%A2%85%EB%A3%8C&quot;&gt;프로세스의 종료&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1&quot;&gt;자식 프로세스 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84%EC%9D%98-%ED%98%91%EB%A0%A5&quot;&gt;🌩 8. 프로세스 간의 협력&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC&quot;&gt;메세지 전달&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%B5%EC%9C%A0%EB%A9%94%EB%AA%A8%EB%A6%AC-shared-memory&quot;&gt;공유메모리 shared memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH4. 프로그램의 구조와 실행]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH4. 프로그램의 구조와 실행를 읽고 정리한 내용입니다 🙌 🌩 1. 프로그램의 구조와 인터럽트 CPU…]]></description><link>https://yjksw.github.io/operating-system-3/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-3/</guid><pubDate>Tue, 12 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH4. 프로그램의 구조와 실행&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-프로그램의-구조와-인터럽트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot; aria-label=&quot; 1 프로그램의 구조와 인터럽트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 프로그램의 구조와 인터럽트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU에서 프로그램 명령을 실행하기 위해서는 프로그램 명령을 담은 주소 영역이 메모리에 올라가야한다.
&lt;ul&gt;
&lt;li&gt;주소 영역은 code(프로그램 함수들이 기계어로 변환되어 저장), data(전역 변수 등 프로그램이 사용하는 데이터 저장), stack(함수 복귀 주소 및 데이터 임시 저장)으로 구분된다.&lt;/li&gt;
&lt;li&gt;함수를 호출하여 새로운 함수 위치로 점프할 때 다시 돌아올 주소를 스택 영역에 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트 동작 원리도 함수의 호출과 비슷하다.
&lt;ul&gt;
&lt;li&gt;인터럽트 발생시 실행중이던 명령어의 위치를 저장한다. 처리루틴 후 해당 주소로 돌아와서 수행을 이어간다.&lt;/li&gt;
&lt;li&gt;이 주소는 운영체제가 관리하는 PCB에 저장된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-컴퓨터-시스템의-작동-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EC%9E%91%EB%8F%99-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot; 2 컴퓨터 시스템의 작동 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. 컴퓨터 시스템의 작동 개요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU는 매 시점 특정 주소에 존재하는 명령을 읽어서 그대로 실행한다.&lt;/li&gt;
&lt;li&gt;CPU가 실행해야할 명령의 메모리 위치는 Program Counter라는 레지스터에 저장된다. 주로 PC는 바로 다음 주소를 가리켜 코드가 순차적으로 실행되도록 한다.
&lt;ul&gt;
&lt;li&gt;반복문이나 함수호출 등의 주소이동이 있는 경우는 해당 주소를 가리키게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램 실행 중 입출력 등의 다른 연산이 이루어지면 각 장치의 컨트롤러와 로컬버퍼가 함게 동작하여 연산을 처리한다.&lt;/li&gt;
&lt;li&gt;만일 PC가 메모리의 운영체제 부분을 가리키고 있다면 CPU는 커널 모드에서 수행중이라고 한다.&lt;/li&gt;
&lt;li&gt;CPU가 실행하는 명령은 일반명령과 특권명령을 나뉜다.
&lt;ul&gt;
&lt;li&gt;일반명령은 모든 프로그램에서 수행하는 명령이다. 메모리 자료를 읽어서 CPU 연산 후 결과를 메모리에 쓴다.&lt;/li&gt;
&lt;li&gt;특권명령은 보안이 필요한 명령으로 각종 장치에 접근한다. 운영체제만 수행하며 모드비트로 구분된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특권명령은 디스크파일접근, 화면출력 등을 수행할 수 있다. 사용자는 운영체제에 이 명령을 요청하여 대행하도록 system call을 한다.
&lt;ul&gt;
&lt;li&gt;system call이 호출되면 CPU는 해당 장치의 컨트롤러에 요청을 하고 데이터가 해당 장치의 로컬 버퍼에 담기면 컨트롤러가 CPU에 인터럽트를 발생시켜 작업 완료를 알린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU는 매 명령 수행 후 인터럽트 라인을 체크해 인터럽트가 일어났는지 확인한다.
&lt;ul&gt;
&lt;li&gt;인터럽트 라인은 종류마다 다르다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-프로그램의-실행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%8B%A4%ED%96%89&quot; aria-label=&quot; 3 프로그램의 실행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 프로그램의 실행&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로그램이 실행된다는 것은&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실행파일이 메모리에 적재된다.&lt;/li&gt;
&lt;li&gt;프로그램이 CPU를 할당받고 명령을 수행하고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;라는 두가지 의미를 가진다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1번째 의미로 여러가지 프로그램이 메모리에 올라가 있을 수 있으니 &lt;strong&gt;여러 프로그램이 동시에 실행된다&lt;/strong&gt;라고 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램이 메모리에 적재될 때 일부분만 메모리에 나머지는 디스크에 내려가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;프로그램마다 독자적&lt;/strong&gt;으로 주소공간을 가져 코드, 데이터, 스택 영역등으로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 공간을 가상메모리 virtual memory, 논리적 메모리 logical memory 라고 부른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제의 경우도 하나의 프로그램이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각각의 코드, 데이터 스택주소 공간을 가지고 있다.&lt;/li&gt;
&lt;li&gt;하드웨어와 사용자의 중간이기 때문에 1) CPU, 메모리 자원을 관리하는 부분과 2) 사용자에게 편리한 인터페이스 제공하기위한 부분이 나뉜다.&lt;/li&gt;
&lt;li&gt;시스템 콜, 인터럽트 처리 부분도 포함된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;커널의 데이터 영역 - 각종 자원을 관리하는 자료구조가 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU, 메모리 하드웨어 자원 관리&lt;/li&gt;
&lt;li&gt;수행 중인 프로그램(소프트웨어) 관리 ⇒ 수행중인 프로그램을 프로세스라고 부른다.
&lt;ul&gt;
&lt;li&gt;각 프로세스의 상태, CPU 사용 정보, 메모리 사용 정보 등을 담은 PCB를 둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;커널의 스택 영역 - 함수호출 시 복귀 주소를 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 수행 중인 프로세스마다 별도의 스택을 두어 관리
&lt;ul&gt;
&lt;li&gt;프로세스마다 특권명령을 수행하려고 system call을 하고 system call 안에서 다른 함수를 호출할 경우 복귀 주소가 커널 내 주소가 되기 때문&lt;/li&gt;
&lt;li&gt;커널은 공유 코드이므로 각 사용자 프로그램이 커널 함수에 접근할 수 있으므로 일관성 유지를 위해 각 프로세스마다 스택을 따로 둠.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;요약
&lt;ul&gt;
&lt;li&gt;사용자 프로그램 내에서 함수호출 시 해당 프로그램의 스택에 복귀 주소를 저장&lt;/li&gt;
&lt;li&gt;시스템 콜이나 인터럽트 발생으로 운영체제가 제어하면 프로그램 복귀 정보를 PCB에 저장&lt;/li&gt;
&lt;li&gt;커널 내에서 이루어지는 함수호출은 각 프로세스의 커널스택에 복귀 정보를 저장
&lt;ul&gt;
&lt;li&gt;직전에 수행중이던 프로세스의 커널스택에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-사용자-프로그램이-사용하는-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EC%82%AC%EC%9A%A9%EC%9E%90-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98&quot; aria-label=&quot; 4 사용자 프로그램이 사용하는 함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 사용자 프로그램이 사용하는 함수&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;사용자정의 함수 - 프로그래머 본인이 작성
&lt;ol&gt;
&lt;li&gt;코드 영역에 기계어 형태&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;라이브러리 함수 - 다른 누군가 미리 작성
&lt;ol&gt;
&lt;li&gt;코드 영역에 기계어 형태&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;커널 함수 - 운영체제 커널의 코드에 정의된 함수
&lt;ul&gt;
&lt;li&gt;system call 함수, 인터럽트 처리 함수&lt;/li&gt;
&lt;li&gt;printf()와 같은 함수는 라이브러리 함수고 내부에서 system call을 한다.&lt;/li&gt;
&lt;li&gt;system call은 사용자가 운영체제 CPU를 넘겨서 실행하는 것이다.&lt;/li&gt;
&lt;li&gt;system call 또한 인터럽트 라인을 세팅하는 방법을 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-인터럽트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot; aria-label=&quot; 5 인터럽트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 인터럽트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU는 대부분 명령을 순차적으로 진행한다. 매 명령마다 인터럽트 라인을 체크하고 발생했다면 제어권을 운영체제에게 넘겨 인터럽트 처리루틴에 따라 처리하고 다시 돌아온다.&lt;/li&gt;
&lt;li&gt;인터럽트 처리 중 다른 인터럽트가 발생 한 경우
&lt;ul&gt;
&lt;li&gt;원칙적으로 위 경우는 데이터 일관성을 위해 허용하지 않는다.&lt;/li&gt;
&lt;li&gt;예외적인 경우는 인터럽트 처리루틴 중 더 시급하거나 CPU가 당장 필요한 일이 발생한 경우이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트마다 중요도가 다르므로 중요도가 더 높은 인터럽트는 발생을 허용해 우선순위가 높은 인터럽트부터 처리하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-6-시스템-콜&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-6-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C&quot; aria-label=&quot; 6 시스템 콜 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 6. 시스템 콜&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;시스템 콜은 프로세스가 가지고 있는 자신의 주소 공간 내의 호출이 아닌 커널 (다른 프로그램 주소 공간) 함수를 호출하는 것이다.
&lt;ul&gt;
&lt;li&gt;이 경우 프로그램 자신이 스스로 인터럽트 라인을 세팅한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;입출력 시스템 콜인 경우 CPU 명령 수행보다 많은 시간이 소요되므로 CPU가 그 시간동안 대기하고 있는 것은 자원의 낭비이다.&lt;/li&gt;
&lt;li&gt;또한 입출력을 요청한 프로그램에게 CPU를 다시 넘겨주는 것은 필요한 데이터가 없으므로 옳지 않다.&lt;/li&gt;
&lt;li&gt;따라서 한 프로그램이 입출력을 요청한다면 다른 프로그램에게 제어권을 넘겨주어 실행되도록 한다.&lt;/li&gt;
&lt;li&gt;입출력 작업이 완료되었을 경우 인터럽트 처리루틴
&lt;ul&gt;
&lt;li&gt;해당 인터럽트는 하드웨어 인터럽트이다.&lt;/li&gt;
&lt;li&gt;로컬버퍼의 내용을 메모리로 복사하고 해당 프로세스가 다시 CPU를 획득할 수 있는 권한을 준다.&lt;/li&gt;
&lt;li&gt;해당 프로세스가 작업 큐에 삽입되어 제어권이 돌아오게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;정리 - 프로세스가 CPU를 빼앗기는 경우 2가지
&lt;ol&gt;
&lt;li&gt;타이머에 의한 인터럽트 발생 → 한 프로세스의 독점을 방지&lt;/li&gt;
&lt;li&gt;시스템 콜에 의한 인터럽트 발생 → 운영체제 함수 호출이 필요한 경우 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-7-프로세스의-두-가지-실행-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-7-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%91%90-%EA%B0%80%EC%A7%80-%EC%8B%A4%ED%96%89-%EC%83%81%ED%83%9C&quot; aria-label=&quot; 7 프로세스의 두 가지 실행 상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 7. 프로세스의 두 가지 실행 상태&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;사용자 모드에서 실행상태 (user mode running) - 자신의 주소 공간의 코드 실행&lt;/li&gt;
&lt;li&gt;커널 모드에서 실행상태 (kernel mode running) - 커널의 시스템 콜 함수 실행
&lt;ul&gt;
&lt;li&gt;이 경우에도 커널이 실행 상태에 있다고 하는 것이 아니라 해당 프로세스가 실행상태에 있다고 한다.&lt;/li&gt;
&lt;li&gt;해당 프로세스가 필요한 일을 처리하는 것이기 때문이다.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;프로세스 A가 커널모드에 실행 중&lt;/em&gt; 이라고 표현한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램 실행이 끝날 때는 커널 모드로 프로그램을 종료한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot;&gt;🌩 1. 프로그램의 구조와 인터럽트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-2-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EC%9E%91%EB%8F%99-%EA%B0%9C%EC%9A%94&quot;&gt;🌩 2. 컴퓨터 시스템의 작동 개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-3-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%8B%A4%ED%96%89&quot;&gt;🌩 3. 프로그램의 실행&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-4-%EC%82%AC%EC%9A%A9%EC%9E%90-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98&quot;&gt;🌩 4. 사용자 프로그램이 사용하는 함수&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-5-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot;&gt;🌩 5. 인터럽트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-6-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C&quot;&gt;🌩 6. 시스템 콜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-7-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%91%90-%EA%B0%80%EC%A7%80-%EC%8B%A4%ED%96%89-%EC%83%81%ED%83%9C&quot;&gt;🌩 7. 프로세스의 두 가지 실행 상태&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH3. 컴퓨터 시스템의 동작원리]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH3. 컴퓨터 시스템의 동작원리를 읽고 정리한 내용입니다 🙌 🌩 1. 컴퓨터 시스템의 구조 내부 장치 - CPU…]]></description><link>https://yjksw.github.io/operating-system-2/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-2/</guid><pubDate>Mon, 11 Oct 2021 14:20:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH3. 컴퓨터 시스템의 동작원리&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-컴퓨터-시스템의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot; 1 컴퓨터 시스템의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 컴퓨터 시스템의 구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;내부 장치 - CPU, 메모리&lt;/li&gt;
&lt;li&gt;외부 장치 - 디스크, 키보드, 마우스, 모니터, 네트워크 장치 등등
&lt;ul&gt;
&lt;li&gt;입출력장치라고 한다.&lt;/li&gt;
&lt;li&gt;각 하드웨어 장치를 각각의 컨트롤러가 제어한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컴퓨터는 외부장치에서 내부장치로 데이터를 읽어 연산한 후 결과를 외부장치로 내보내는 방식으로 동작한다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;input - 내부로 들어오는 것&lt;/li&gt;
&lt;li&gt;output - 외부로 내보내는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;여러 프로그램을 동시에 수행할 수 있도록 하는 것이 운영체제이기 때문에 항상 메모리에 상주한다.&lt;/li&gt;
&lt;li&gt;전체가 상주하기엔 너무 낭비이기 때문에 꼭 필요한 부분만 항상 메모리에 상주하고 그 부분을 **커널(kernel)**이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-2-cpu-연산과-io-연산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2-cpu-%EC%97%B0%EC%82%B0%EA%B3%BC-io-%EC%97%B0%EC%82%B0&quot; aria-label=&quot; 2 cpu 연산과 io 연산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 2. CPU 연산과 I/O 연산&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I/O 연산들은 &lt;strong&gt;입출력 컨트롤러&lt;/strong&gt;가 담당하고 컴퓨터 내부의 연산은 &lt;strong&gt;메인 CPU&lt;/strong&gt;가 담당한다.
&lt;ul&gt;
&lt;li&gt;입출력 장치와 메인 CPU는 동시 수행이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각 장치마다 들어오고 나가는 데이터를 로컬버퍼(local buffer)라는 작은 메모리에 저장한다.&lt;/li&gt;
&lt;li&gt;컨트롤러가 로컬버퍼로 읽어오는 일을 담당한다. 버퍼에 데이터가 다 들어왔으면 컨트롤러가 CPU에게 인터럽트로 알린다.&lt;/li&gt;
&lt;li&gt;CPU는 매 시점 메모리에서 명령(instruction)을 하나씩 읽어서 수행하는데, 옆에 인터럽트 라인(interrupt line)이 있어서 인터럽트 신호가 중간에 들어오면 작업을 멈추고 인터럽트 작업을 먼저 처리한다.
&lt;ul&gt;
&lt;li&gt;즉, 매 명령 수행마다 인터럽트 발생 여부를 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-3-인터럽트의-일반적-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-3-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EC%9D%BC%EB%B0%98%EC%A0%81-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot; 3 인터럽트의 일반적 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 3. 인터럽트의 일반적 기능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제에는 인터럽트가 들어왔을때 따라야하는 인터럽트 루틴이 저장되어 있다.
&lt;ul&gt;
&lt;li&gt;각각의 인터럽트에 따라서 다르며 운영체제 개발자가 미리 구현하여 커널에 포함해둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크 컨트롤러의 인터럽트 루틴에서 수행하는 일
&lt;ul&gt;
&lt;li&gt;디스크의 로컬버퍼에 있는 내용을 사용자 프로그램 메모리로 전달하고 프로그램의 다음 명령을 수행할 수 있도록 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하드웨어 인터럽트&lt;/strong&gt; - 컨트롤러 등 하드웨어 장치가 CPU의 인터럽트 라인을 세팅 (통상적인 인터럽트)
&lt;ul&gt;
&lt;li&gt;CPU는 인터럽트가 발생하면 인터럽트 벡터(interrupt vector)에서 인터럽트 처리를 위한 루틴 코드를 커널에서 찾는다.
&lt;ul&gt;
&lt;li&gt;인터럽트 종류 번호에 따른 처리 코드가 위치한 부분을 가리키는 자료구조이다.&lt;/li&gt;
&lt;li&gt;실제 처리 코드는 인터럽트 처리 루틴(interrupt service routine) 또는 인터럽트 핸들러(interrupt handler)라고 불리는 곳에 정의된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU가 인터럽트 처리 후 돌아갈 위치를 알기 위해 수행중이던 작업을 저장하는 장소를 운영체제가 별도로 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;소프트웨어 인터럽트&lt;/strong&gt; - 소프트웨어가 세팅
&lt;ul&gt;
&lt;li&gt;트랩(trap)이라는 용어로 불리며 예외상황(exception)과 시스템 콜(system call)이 있다.
&lt;ul&gt;
&lt;li&gt;예외상황 - 0으로 나누거나, 메모리 영역 바깥에 접근하려는 시도 등&lt;/li&gt;
&lt;li&gt;시스템 콜 - 운영체제에 서비스를 요청하는 경우로 화면출력, 키보드 입력 등의 커널 코드를 호출하여 CPU 제어권을 넘겨야하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램 코드가 인터럽트 라인을 세팅하는 명령을 실행하여 인터럽트를 발생시키고 CPU의 제어권을 운영체제에 넘기는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-4-인터럽트-핸들링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81&quot; aria-label=&quot; 4 인터럽트 핸들링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 인터럽트 핸들링&lt;/h2&gt;
&lt;p&gt;인터럽트 발생한 후 처리해야할 절차를 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 진행중이던 프로그램의 상태를 저장한다.
&lt;ul&gt;
&lt;li&gt;실행 중이던 명령어 메모리 주소 및 부가정보 등등&lt;/li&gt;
&lt;li&gt;CPU에서 명령을 실행할 때 CPU 내부의 임시기억장치 레지스터의 데이터를 사용하는 데 이 값들을 미리 저장함&lt;/li&gt;
&lt;li&gt;프로그램을 관리하는 PCB에 현재 프로그램의 실행 상태를 저장하고 CPU의 제어권이 넘어간다.&lt;/li&gt;
&lt;li&gt;다시 실행될 경우 PCB에서 상태를 복원하고 실행을 이어한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오늘날은 운영체제(커널)이 인터럽트가 발생할 때만 실행된다. 인터럽트가 발생하지 않으면 사용자 프로그램이 CPU를 계속 점유한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-입출력-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot; 5 입출력 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 입출력 구조&lt;/h2&gt;
&lt;p&gt;컴퓨터 시스템이 외부 입출력 장치들과 데이터를 주고받는 것을 말한다.&lt;/p&gt;
&lt;h3 id=&quot;동기식-입출력-vs-비동기식-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0%EC%8B%9D-%EC%9E%85%EC%B6%9C%EB%A0%A5-vs-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;동기식 입출력 vs 비동기식 입출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동기식 입출력 vs. 비동기식 입출력&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;동기식 입출력 (Synchronous I/O) - 어떤 프로그램이 입출력을 요청했을 때 입출력 작업이 완료해야 해당 프로그램의 다음 작업을 할 수 있는 것.
&lt;ul&gt;
&lt;li&gt;입출력이 완료 되어야 인터럽트를 통해 CPU에게 알려 제어권이 다시 프로그램에게 넘어간다. 따라서 CPU는 입출력 연산이 끝날 때까지 인터럽트를 기다리며 자원을 낭비한다.
&lt;ul&gt;
&lt;li&gt;CPU 연산은 빠르지만 입출력 연산은 느리기 때문에 그동안 CPU를 사용하지 못하는 것은 자원의 낭비이다.&lt;/li&gt;
&lt;li&gt;또한 한번에 하나의 입출력만 수행될 수 있어 비효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 주로 그 동안 다른 프로그램에게 CPU를 할당하고 이전에 입출력 연산중인 프로그램에는 CPU를 할당하지 않는다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이것을 관리하기 위해 입출력 중인 프로그램을 blocked state로 전환시켜 CPU를 할당하지 않도록  관리한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동기식으로 입출력이 연산되면 동기화가 자동으로 이루어진다. 하지만 그 사이 다른 프로그램이 CPU에 실행되면 동일한 데이터를 입출력할 때 결과가 틀어진다.
&lt;ul&gt;
&lt;li&gt;해결하기 위해 입출력 요청을 순서대로 실행하기 위한 큐(queue)가 장치별로 있어서 동기화한다.&lt;/li&gt;
&lt;li&gt;입출력 연산이 끝나면 인터럽트로 CPU에 알리면 인터럽트 처리루틴에 따라서 해당 프로그램이 CPU를 할당받을 수 있도록 blocked state에서 해제시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비동기식 입출력 (asynchronous I/O) - CPU 제어권을 입출력 연산을 호출한 프로그램에게 바로 다시 부여하는 것
&lt;ul&gt;
&lt;li&gt;입출력 데이터와 상관없이 다음 명령이 수행될 수 있는 경우는 입출력 연산과 상관없이 바로 수행하고 결과가 필요한 연산일 경우에만 기다렸다가 수행한다.&lt;/li&gt;
&lt;li&gt;쓰기 작업인 경우 다음 명령어 수행이 가능하므로 비동기식 입출력이 사용될 수 있다.&lt;/li&gt;
&lt;li&gt;입출력 연산이 완료되면 인터럽트로 알리고 그때부터 CPU는 읽어온 데이터를 필요로 하는 명령어를 수행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;입출력을 요청할 때, 완료했을 때 두번 인터럽트가 발생한다.
&lt;ul&gt;
&lt;li&gt;요청할 때 인터럽트 처리루틴 - 진행중이던 프로세스의 상태를 저장하고 해당 컨트롤러에 입출력 요청을 한다. 해당 프로세스를 blocked state로 바꾸고 CPU를 다른 프로세스에게 할당한다.&lt;/li&gt;
&lt;li&gt;완료했을 때 인터럽트 처리루틴 - 진행중이던 프로세스의 상태를 저장하고 (디스크 입출력인 경우) 로컬 버퍼의 데이터를 메모리 영역으로 읽어온다. 해당 프로세스의 blocked state를 해제하고 CPU에 할당될 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일반적으로는 동기식 입출력을 사용하며 동기화를 통해 queue를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-6-dma&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-6-dma&quot; aria-label=&quot; 6 dma permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 6. DMA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;메모리는 본래 CPU에서만 접근할 수 있는데 이렇다면 메모리 접근 연산이 모두 CPU의 인터럽트를 통해서 이루어지면서 CPU 작업이 중단되어 효율성이 떨어지는 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;DMA (Direct Memory Access) - 위 문제를 해결하기 위한 컨트롤러로 메모리에 접근할 수 있는 장치
&lt;ul&gt;
&lt;li&gt;로컬버퍼에서 데이터를 읽어오는 작업을 DMA가 CPU 대신 대행하여 CPU가 작업을 멈출 필요가 없다.&lt;/li&gt;
&lt;li&gt;DMA는 바이트 단위가 아니라 블록(block)이라는 큰 단위로 정보를 메모리로 읽어온다.&lt;/li&gt;
&lt;li&gt;작업을 완료하면 CPU에 인터럽트로 알려준다.&lt;/li&gt;
&lt;li&gt;CPU에 발생하는 인터럽트 빈도를 줄여 더 효율적으로 작업을 처리할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-7-저장장치의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-7-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot; 7 저장장치의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 7. 저장장치의 구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;주기억장치
&lt;ul&gt;
&lt;li&gt;메모리라고 부르며 휘발성이다.&lt;/li&gt;
&lt;li&gt;RAM을 매체로 사용하는 경우가 대부분이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;보조기억장치
&lt;ul&gt;
&lt;li&gt;비휘발성이며&lt;/li&gt;
&lt;li&gt;마크네틱 디스크를 주로 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;보조기억장치의 용도
&lt;ol&gt;
&lt;li&gt;전원이 나가도 유지해야할 파일 시스템용 (file system)&lt;/li&gt;
&lt;li&gt;메모리의 연장 공간인 스왑 영역 (swap area)
&lt;ul&gt;
&lt;li&gt;운영체제는 당장 필요한 부분을 메모리에 올려놓고, 그렇지 않은 부분을 디스크의 스왑 영역에 내려놓는다 ⇒ swap out&lt;/li&gt;
&lt;li&gt;스왑 영역에 있는 부분을 필요할 때 다시 메모리 영역으로 가져온다 ⇒ swap in&lt;/li&gt;
&lt;li&gt;스왑 영역은 프로그램이 실행될 때 내용을 저장했다가 프로그램 종료될 때 삭제하는 메모리의 연장 공간이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-8-저장장치의-계층-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-8-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot; 8 저장장치의 계층 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 8. 저장장치의 계층 구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;primary 저장장치는 작고 빠르지만 비싸다.
&lt;ul&gt;
&lt;li&gt;레지스터 → 캐시 메모리 → 메모리&lt;/li&gt;
&lt;li&gt;용량이 적지만 필요한 것만을 올리면서 용량이 큰 저장장치를 가지고 있는 것과 마찬가지로 성능효과를 낼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;secondary 저장장치는 크고 느리지만 싸다.
&lt;ul&gt;
&lt;li&gt;마그네틱 디스크 → 광디스크 → 마그네틱 테이프&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-9-하드웨어의-보안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-9-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EC%9D%98-%EB%B3%B4%EC%95%88&quot; aria-label=&quot; 9 하드웨어의 보안 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 9. 하드웨어의 보안&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제에서는 여러 프로그램이 동시에 실행되는 다중 프로그래밍 환경에서 동작하기 때문에 다른 프로그램을 방해하거나 충돌하지 않도록 하드웨어적인 보안유지가 필요하다.&lt;/li&gt;
&lt;li&gt;이것을 위해 운영체제는 &lt;strong&gt;1) 커널모드&lt;/strong&gt;와 &lt;strong&gt;2) 사용자모드&lt;/strong&gt; 두 가지를 지원한다.
&lt;ul&gt;
&lt;li&gt;커널모드는 운영체제가 CPU의 제어권을 가지고 운영체제 코드를 실행하는 것이다.&lt;/li&gt;
&lt;li&gt;중요정보에 접근해 위험한 상황을 초래할 수 있는 연산은 커널모드에서만 실행되도록 한다.&lt;/li&gt;
&lt;li&gt;일반 사용자 프로그램은 시스템에 위험한 연산을 하지 못하도록 통제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일반 사용자가 운영체제 내부의 코드를 실행하지 못하도록 하드웨어적인 지원을 한다.
&lt;ul&gt;
&lt;li&gt;CPU 내부에 mode bit 를 두어 사용자 프로그램을  통제한다.&lt;/li&gt;
&lt;li&gt;mode bit = 0 ⇒ 커널모드이므로 모든 명령 수행 가능&lt;/li&gt;
&lt;li&gt;mode bit = 1 ⇒ 사용자모드 이므로 제한된 명령 수행 가능&lt;/li&gt;
&lt;li&gt;사용자 프로그램 시 모드 비트를 1로 세팅해 넘겨준다. 만일 사용자 프로그램에서 제한된 명령을 수행하고자 할 때는 시스템 콜을 통해서 운영체제에 위임하여 해당 명령을 하도록 요청한다.&lt;/li&gt;
&lt;li&gt;인터럽트 발생시에는 모드 비트가 자동으로 0으로 세팅되며 요청이 끝나면 다시 1로 세팅된다.&lt;/li&gt;
&lt;li&gt;모드 비트 0일때만 수행가능한 명령을 &lt;strong&gt;특권명령&lt;/strong&gt;이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각종 장치에서 특권 명령
&lt;ul&gt;
&lt;li&gt;디스크에 저장된 파일에 자유롭게 접근하여 문제가 일어나지 않도록 모든 임출력 명령은 특권명령 규정을 사용한다.&lt;/li&gt;
&lt;li&gt;사용자 프로그램이 입출력을 하고 싶으면 system call로 운영체제에 요청을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-10-메모리-보안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-10-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%EC%95%88&quot; aria-label=&quot; 10 메모리 보안 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 10. 메모리 보안&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로그램이 메모리에 한꺼번에 올라가서 실행되기 때문에 메모리도 보안이 필요하다.
&lt;ul&gt;
&lt;li&gt;사용자 프로그램에서 다른 프로그램의 메모리에 잘못 접근해서 변경할 수 있다.&lt;/li&gt;
&lt;li&gt;인터러트 벡터와 인터럽트 처리루틴이 있는 곳을 변경하여 보안성이 침해될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리 보호를 위해 2가지 레지스터를 사용한다.
&lt;ul&gt;
&lt;li&gt;기준 레지스터 (base register)
&lt;ul&gt;
&lt;li&gt;해당 프로그램이 접근할 수 있는 가장 작은 주소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;한계 레지스터 (limit register)
&lt;ul&gt;
&lt;li&gt;기준 레지스터로부터 접근할 수 있는 메모리 범위&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 두 범위를 넘어가면 소프트웨어적인 인터럽트로 예외가 발생한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로그램이 메모리의 한 영역에 연속적으로 위치하는 경우에만 가능한 메모리 관리 기법이다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;메모리를 페이징 할 경우 다른 메모리 보호 기법이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리 접근 연산은 특권명령이 아니지만 두 레지스터 값을 지정하는 것은 특권명령이다.&lt;/li&gt;
&lt;li&gt;입출력 연산은 모두 특권 명령이나 메모리 연산은 가능한 범위안에서는 사용자 모드에서 연산할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-11-cpu-보호&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-11-cpu-%EB%B3%B4%ED%98%B8&quot; aria-label=&quot; 11 cpu 보호 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 11. CPU 보호&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 하나의 프로그램에 독점되는 것을 막기 위해 타이머라는 하드웨어를 사용한다.&lt;/li&gt;
&lt;li&gt;CPU는 일정시간이 지나면 인터럽트를 발생시켜 운영체제가 CPU 제어하도록 하여 CPU를 다른 프로그램에게 이양한다.&lt;/li&gt;
&lt;li&gt;타이머는 일정 시간 단위로 세팅되어 매 클럭마다 1씩 감소하며 0이 되면 인터럽트가 발생한다.&lt;/li&gt;
&lt;li&gt;타이머 값 세팅은 load timer 명령이며 특권 명령이다.&lt;/li&gt;
&lt;li&gt;타이머를 통해서 시분할 시스템에서 현재 시간을 계산하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-12-시스템-콜을-이용한-입출력-실행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-12-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%8B%A4%ED%96%89&quot; aria-label=&quot; 12 시스템 콜을 이용한 입출력 실행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 12. 시스템 콜을 이용한 입출력 실행&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;디스크 파일 입출력, 키보드입출력 등은 모두 특권명령인 입출력 명령이다.&lt;/li&gt;
&lt;li&gt;운영체제의 system call이라는 서비스를 이용하여 입출력 명령을 대신 요쳥해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot;&gt;🌩 1. 컴퓨터 시스템의 구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-2-cpu-%EC%97%B0%EC%82%B0%EA%B3%BC-io-%EC%97%B0%EC%82%B0&quot;&gt;🌩 2. CPU 연산과 I/O 연산&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-3-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EC%9D%BC%EB%B0%98%EC%A0%81-%EA%B8%B0%EB%8A%A5&quot;&gt;🌩 3. 인터럽트의 일반적 기능&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81&quot;&gt;🌩 4. 인터럽트 핸들링&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-5-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B5%AC%EC%A1%B0&quot;&gt;🌩 5. 입출력 구조&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0%EC%8B%9D-%EC%9E%85%EC%B6%9C%EB%A0%A5-vs-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot;&gt;동기식 입출력 vs. 비동기식 입출력&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-6-dma&quot;&gt;🌩 6. DMA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-7-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot;&gt;🌩 7. 저장장치의 구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-8-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0&quot;&gt;🌩 8. 저장장치의 계층 구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-9-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EC%9D%98-%EB%B3%B4%EC%95%88&quot;&gt;🌩 9. 하드웨어의 보안&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-10-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%EC%95%88&quot;&gt;🌩 10. 메모리 보안&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-11-cpu-%EB%B3%B4%ED%98%B8&quot;&gt;🌩 11. CPU 보호&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-12-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%8B%A4%ED%96%89&quot;&gt;🌩 12. 시스템 콜을 이용한 입출력 실행&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[운영체제와 정보기술의 원리 - CH2. 운영체제 개요]]></title><description><![CDATA[다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH2. 운영체제 개요를 읽고 정리한 내용입니다 🙌 🌩…]]></description><link>https://yjksw.github.io/operating-system-1/</link><guid isPermaLink="false">https://yjksw.github.io/operating-system-1/</guid><pubDate>Mon, 11 Oct 2021 14:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ &lt;em&gt;CH2. 운영체제 개요&lt;/em&gt;를 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-1-운영체제의-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-1-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%A0%95%EC%9D%98&quot; aria-label=&quot; 1 운영체제의 정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 1. 운영체제의 정의&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제란 컴퓨터 하드웨어 바로 위에 설치되는 소프트웨어이다.&lt;/li&gt;
&lt;li&gt;사용자가 직접 하드웨어를 다루는 것이 쉽지 않기 때문에 하드웨어를 기본적으로 운용하는 운영체제를 탑재해서 사용하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;좁은-의미-운영체제-vs-넓은-의미-운영체제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A2%81%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-vs-%EB%84%93%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot; aria-label=&quot;좁은 의미 운영체제 vs 넓은 의미 운영체제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;좁은 의미 운영체제 vs. 넓은 의미 운영체제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;운영체제도 소프트웨어이기 때문에 컴퓨터가 켜지면서 메모리에 올라가서 사용이 되어야 한다. 하지만 운영체제 전부를 메모리에 올려서 사용하기에는 리소스 낭비가 심하기 때문에 꼭 필요한 부분만을 전원이 켜짐과 동시에 메모리에 올린다.&lt;/li&gt;
&lt;li&gt;메모리에 전원이 켜짐과 동시에 상주하는 부분을 &lt;strong&gt;커널&lt;/strong&gt;이라고 한다 ⇒ 좁은 의미의 운영체제&lt;/li&gt;
&lt;li&gt;이후 필요한 부분은 그때그때 사용자 유틸리티로 메모리에 올려서 사용한다 ⇒ 넓은 의미의 운영체제
&lt;ul&gt;
&lt;li&gt;파일 복사 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;--2-운영체제의-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#--2-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;  2 운영체제의 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩  2. 운영체제의 기능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1) 하드웨어&lt;/strong&gt;와 &lt;strong&gt;2) 사용자&lt;/strong&gt;를 위한 역할 두가지를 중간에서 담당한다.
&lt;ul&gt;
&lt;li&gt;하드웨어를 관리하고 리소스를 효율적으로 운용한다.
&lt;ul&gt;
&lt;li&gt;자원 관리자 (resource manager)라고도 불린다.&lt;/li&gt;
&lt;li&gt;자원이란 CPU, 메모리, 하드디스크, 소프트웨어 자원들 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자에게 사용하기 편리한 인터페이스를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자원을 관리할 때 최대한의 성능을 내도록 한다. 동시에 모든 사용자 및 프로그램이 형평성있게 자원을 분배받을 수 있도록 관리한다.&lt;/li&gt;
&lt;li&gt;사용자와 운영체제의 보안을 담당한다.
&lt;ul&gt;
&lt;li&gt;다른 프로그램의 메모리 영역 참조를 막고 사적인 정보를 보호한다.&lt;/li&gt;
&lt;li&gt;메모리 영역의 보안을 담당한다.&lt;/li&gt;
&lt;/ul&gt;
  &lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;--3-운영체제의-분류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#--3-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EB%B6%84%EB%A5%98&quot; aria-label=&quot;  3 운영체제의 분류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩  3. 운영체제의 분류&lt;/h2&gt;
&lt;h3 id=&quot;단일-작업용-vs-다중-작업용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9D%BC-%EC%9E%91%EC%97%85%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%9E%91%EC%97%85%EC%9A%A9&quot; aria-label=&quot;단일 작업용 vs 다중 작업용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단일 작업용 vs. 다중 작업용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단일 작업용 single tasking - 한번에 하나의 프로그램만 실행&lt;/li&gt;
&lt;li&gt;다중 작업용 multi tasking - 여러 프로그램을 동시에 실행
&lt;ul&gt;
&lt;li&gt;여러 프로그램이 CPU와 메모리를 공유한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시분할 시스템(time sharing system) -&lt;/strong&gt; CPU의 작업시간을 나누어서 시분할 시스템(time sharing system) 방식으로 하나의 CPU에서 여러 프로그램을 실행시킨다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;다중 프로그래밍 시스템(multi-programming system)&lt;/strong&gt; - 메모리 공간을 분할해 여러 프로그램들을 동시에 메모리에 올려놓고 처리하는 다중 프로그래밍 시스템(multi-programming system)으로 실행한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대화형 시스템(interactive system)&lt;/strong&gt; - 여러 프로그램을 같이 실행시키지만 사용자 개개인의 관점에서 각 프로그램에 대한 키보드 입력 결과를 바로 화면에 보여준다.
&lt;ul&gt;
&lt;li&gt;ex. 여러 사람이 접속해서 사용하는 서버 (ec2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;다중처리기 시스템 (multi-processor system)&lt;/strong&gt; - 하나의 컴퓨터에 여러 CPU가 설치된 경우이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;단일-사용자용-vs-다중-사용자용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9D%BC-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9&quot; aria-label=&quot;단일 사용자용 vs 다중 사용자용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단일 사용자용 vs. 다중 사용자용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단일 사용자용 - 한번에 한명의 사용자만 사용가능한 운영체제이다.
&lt;ul&gt;
&lt;li&gt;단일 사용자용은 단일 작업용, 다중 작업용으로 나뉜다.&lt;/li&gt;
&lt;li&gt;MS 윈도우 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다중 사용자용 - 여러 사용자가 동시에 접속해서 사용할 수 있는 운영체제이다.
&lt;ul&gt;
&lt;li&gt;서버, 웹서버 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;처리방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;처리방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;처리방식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일괄처리 (batch processing) 방식 - 요청된 작업을 모아서 한꺼번에 처리한다.
&lt;ul&gt;
&lt;li&gt;사용자 측면에서 응답시간이 길다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시분할 방식 - 컴퓨터의 처리능력을 일정한 시간 단위로 분할해서 사용한다. (현대에 대부분 사용)
&lt;ul&gt;
&lt;li&gt;여러 사용자의 요청을 짧은 단위의 시간을 번갈아서 처리하여 응답한다.&lt;/li&gt;
&lt;li&gt;따라서 각 사용자가 혼자 사용하는 것처럼 느낀다. (대화형 시스템)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실시간 (real time) 운영체제 - 정해진 시간 안에 어떤 작업이 반드시 처리됨을 보장하는 시스템
&lt;ul&gt;
&lt;li&gt;원자로, 공장 제어 시스템, 미사일 제어 시스템 등등&lt;/li&gt;
&lt;li&gt;경성 실시간 시스템 (hard realtime system)
&lt;ul&gt;
&lt;li&gt;주어진 시간을 지키지 못하면 위험할 결과를 초래할 로켓, 원자로 제어 시스템 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;연성 실시간 시스템 (soft realtime system)
&lt;ul&gt;
&lt;li&gt;멀티 미티어 스트리밍처럼 데이터가 정해진 시간 단위로 전달되어야 올바른 기능을 수행하는 시스템&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-4-운영체제의-예&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-4-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%98%88&quot; aria-label=&quot; 4 운영체제의 예 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 4. 운영체제의 예&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;윈도우는 시스템에 새로운 하드웨어를 장착하면 운영체제가 자동으로 감지하여 설정되는 plug and play 기능이 있다.&lt;/li&gt;
&lt;li&gt;유닉스는 안정성이 높고 깔끔한 모듈 단위로 구현된 운영체제로 확장성을 지원하는 대중적인 os이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-5-운영체제의-자원-관리-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-5-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot; 5 운영체제의 자원 관리 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌩 5. 운영체제의 자원 관리 기능&lt;/h2&gt;
&lt;h3 id=&quot;하드웨어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4&quot; aria-label=&quot;하드웨어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하드웨어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;자원
&lt;ul&gt;
&lt;li&gt;CPU, 메모리, 입출력 장치 등의 주변기기&lt;/li&gt;
&lt;li&gt;여러 프로세스가 CPU와 메모리를 효율적으로 사용하도록 관리&lt;/li&gt;
&lt;li&gt;CPU와 메모리의 데이터가 전원이 꺼지면 없어지기 때문에 해당 데이터를 파일의 형태로 보조기억장치에 저장 (하드디스크)&lt;/li&gt;
&lt;li&gt;키보드, 모니터 등의 입출력 장치로 정보 교환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 관리
&lt;ul&gt;
&lt;li&gt;CPU 스캐줄링 - 하나의 CPU를 어느 시점에 어떤 프로세스가 점유할 것인가&lt;/li&gt;
&lt;li&gt;CPU를 효율적으로 사용하면서 불이익을 받는 프로세스는 없도록 관리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FCFS&lt;/strong&gt; - 먼저온 프로세스를 먼저 처리
&lt;ul&gt;
&lt;li&gt;시스템 전체적인 측면에서 비효율적일 수 있다. CPU를 먼저 점유한 프로세스가 작업을 완료할 때까지 다른 프로세스는 CPU를 사용할 수 없다. 이때 짧은 처리 시간을 가진 프로세스가 뒤늦게 도착했다면 매우 비효율적이다.&lt;/li&gt;
&lt;li&gt;문제 개선을 위해 RR이 등장했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RR&lt;/strong&gt; - CPU를 할당받아 사용할 수 있는 시간을 고정하여 번갈아 사용한다.
&lt;ul&gt;
&lt;li&gt;응답시간은 밀리초 단위로 지정하여 다수의 사용자가 동시접속해도 1초 이하의 응답시간을 보장받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Priority&lt;/strong&gt; - 우선순위를 부여하여 그것에 따라 CPU를 먼저 할당한다.
&lt;ul&gt;
&lt;li&gt;지나치게 오래 기다리지 않도록 기다린 시간이 길면 우선순위를 높여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리 관리
&lt;ul&gt;
&lt;li&gt;CPU가 직접 접근할 수 있는 컴퓨터 내부의 기억장치&lt;/li&gt;
&lt;li&gt;메모리의 어느 부분이 어떤 프로그램에 의해 사용되는지 파악하기 위해 주소(address)로 관리한다.
&lt;ul&gt;
&lt;li&gt;필요할 때 할당하고 끝나면 회수한다.&lt;/li&gt;
&lt;li&gt;불필요한 자원 낭비를 막는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리의 다른 프로세스가 서로 침범하지 않도록 보안을 유지한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;고정분할(fixed partition)&lt;/strong&gt; - 물리적 메모리를 몇개의 분할로 미리 나누어서 관리
&lt;ul&gt;
&lt;li&gt;각각의 분할에는 하나의 프로그램만 적재되므로 융통성이 없다.&lt;/li&gt;
&lt;li&gt;동시 적재 프로그램이 분할 개수로 한정되며, 분할된 크기보다 큰 프로그램은 적재할 수 없다.&lt;/li&gt;
&lt;li&gt;분할 크기보다 작은 프로그램은 남는 영역인 internal fragmentation이 생겨 비효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;가변분할(variable partition)&lt;/strong&gt; - 프로그램 크기에 맞게 메모리를 분할해서 사용한다.
&lt;ul&gt;
&lt;li&gt;프로그램의 크기에 따라서 제한이 되는 고정분할의 문제를 해결하지만 물리 메모리보다 큰 프로그램의 적재는 여전히 어렵다.&lt;/li&gt;
&lt;li&gt;분할 크기와 개수가 동적으로 변하기 때문에 기술적 관리 기법이 필요하다.&lt;/li&gt;
&lt;li&gt;내부조각 (internal fragmentation)은 발생하지 않지만 외부조각 (external fragmentation)은 발생한다.
&lt;ul&gt;
&lt;li&gt;프로그램에 할당되지는 않지만 남은 크기가 작아 할당되지 못하는 메모리 영역&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;가상 메모리 (virtual memory)&lt;/strong&gt; - 가장 많이 이용되며 물리 메모리보다 큰 프로그램 실행이 가능하다.
&lt;ul&gt;
&lt;li&gt;모든 프로그램은 물리 메모리와 상관없이 독립적으로 0번에서 시작하는 가상 메모리 주소를 가진다.&lt;/li&gt;
&lt;li&gt;운영체제가 이 가상 메모리를 물리 메모리로 mapping 하여 변환 후 프로그램을 물리 메모리에 올린다.&lt;/li&gt;
&lt;li&gt;프로그램이 전체가 동시에 사용되는것이 아니기 때문에 물리 메모리보다 큰 프로그램을 사용할 수 있다. 나머지 부분을 하드디스크나 보조기억장치에 저장했다가 적재하는 방식을 택한다.
&lt;ul&gt;
&lt;li&gt;스왑 영역 swap area - 이때 사용되는 보조기억장치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가상 메모리 주소 공간은 페이지(page) 단위로 동일하게 나뉘어 물리적 메모리와 스왑 영역에 일부분씩 저장된다 ⇒ 페이징 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;주변장치 및 입출력 장치
&lt;ul&gt;
&lt;li&gt;인터럽트 (interrupt) 매커니즘으로 관리한다.&lt;/li&gt;
&lt;li&gt;CPU가 필요할 때 신호를 발생시켜 서비스를 요청하는데, CPU는 스캐줄링 맞추어 작업을 처리하다가 인터럽트에 의한 요청 서비스를 수행한다.
&lt;ul&gt;
&lt;li&gt;ex. 키보드 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU는 인터럽트의 작업을 중간에 수행하기 위해서 이전에 처리중이던 작업의 상태를 저장해둔다.&lt;/li&gt;
&lt;li&gt;각 상황과 운영체제마다 인터럽트가 발생할때마다 따르는 인터럽트 루틴에 따라서 수행한다.
&lt;ul&gt;
&lt;li&gt;운영체제 커널의 일부분이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각 주변장치는 업무를 관리하기 위한 컨트롤러(CPU와 같은 것)가 있어 업무를 처리하고 CPU에 인터럽트를 발생시켜 보고하는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-1-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%A0%95%EC%9D%98&quot;&gt;🌩 1. 운영체제의 정의&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A2%81%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-vs-%EB%84%93%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot;&gt;좁은 의미 운영체제 vs. 넓은 의미 운영체제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#--2-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EA%B8%B0%EB%8A%A5&quot;&gt;🌩  2. 운영체제의 기능&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#--3-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EB%B6%84%EB%A5%98&quot;&gt;🌩  3. 운영체제의 분류&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9D%BC-%EC%9E%91%EC%97%85%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%9E%91%EC%97%85%EC%9A%A9&quot;&gt;단일 작업용 vs. 다중 작업용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9D%BC-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9&quot;&gt;단일 사용자용 vs. 다중 사용자용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%8B%9D&quot;&gt;처리방식&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-4-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%98%88&quot;&gt;🌩 4. 운영체제의 예&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-5-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-%EA%B8%B0%EB%8A%A5&quot;&gt;🌩 5. 운영체제의 자원 관리 기능&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4&quot;&gt;하드웨어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_10]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌 🛺 [Story…]]></description><link>https://yjksw.github.io/one-percent-network-10/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-10/</guid><pubDate>Thu, 07 Oct 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story3-웹-서버-소프트웨어가-리퀘스트-메시지의-의미를-해석하여-요구에-응한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story3-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%EC%9D%98%EB%AF%B8%EB%A5%BC-%ED%95%B4%EC%84%9D%ED%95%98%EC%97%AC-%EC%9A%94%EA%B5%AC%EC%97%90-%EC%9D%91%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story3] 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다.&lt;/h2&gt;
&lt;h3 id=&quot;1-조회의-uri를-실제-파일명으로-변환한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%A1%B0%ED%9A%8C%EC%9D%98-uri%EB%A5%BC-%EC%8B%A4%EC%A0%9C-%ED%8C%8C%EC%9D%BC%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 조회의 uri를 실제 파일명으로 변환한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 조회의 URI를 실제 파일명으로 변환한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http 요청 메세지의 메소드와 URI에 따라서 웹 서버 내부의 동작이 달라진다.&lt;/li&gt;
&lt;li&gt;URI에 적힌 경로에 따라서 데이터를 얻어 응답하는 것이다.
&lt;ul&gt;
&lt;li&gt;하지만 이 데이터를 반드시 디스크에서 읽는 것은 아니다.&lt;/li&gt;
&lt;li&gt;URI에 기록된 경로명의 파일을 읽어오면 디스크의 파일이 전부 노출되기 때문에 무방비해진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해결 방법으로 웹 서버에 공개하는 디렉토리를 디스크의 실제 디렉토리가 아니라 가상으로 만든 디렉토리 구조를 사용하도록 한다.
&lt;ul&gt;
&lt;li&gt;웹 어플리케이션 내부에서 가상으로 설정한 디렉토리와 실제 데이터를 대응하여 해당 데이터를 반송하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만일 브라우저에서 보낸 URI에 마지막 파일명이 생략되면 default로 설정된 파일명이 추가되어서 화명에 표시된다.
&lt;ul&gt;
&lt;li&gt;ex. index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-cgi-common-gateway-interface-프로그램을-작동하는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-cgi-common-gateway-interface-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;2 cgi common gateway interface 프로그램을 작동하는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. CGI (Common Gateway Interface) 프로그램을 작동하는 경우&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;만일 파일 내용에 HTML 문서나 화상데이터면 해당 데이터를 그대로 응답하면 된다.&lt;/li&gt;
&lt;li&gt;하지만 만일 문서 등이 아니라 프로그램 파일의 이름을 쓸 수도 있다.
&lt;ul&gt;
&lt;li&gt;파일의 내용을 그대로 반송하는 것이 아니라 해당 프로램을 작동시켜 출력하는 데이터를 반송해야 한다.&lt;/li&gt;
&lt;li&gt;여러 프로그램 유형이 있고 각 유형에 따라서 동작 방식은 상이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단순 문서를 요청하는 경우와 위에서 말한 프로그램을 동작시켜서 데이터를 얻는 요청 메세지의 형태가 다르다.
&lt;ul&gt;
&lt;li&gt;요청 메세지 안에 처리하고자 하는 데이터를 넣어서 보낸다.&lt;/li&gt;
&lt;li&gt;예를 들어서 GET 요청일 경우 query params를 POST 요청일 경우 request body에 데이터가 추가되서 요청 메세지가 온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해당 요청 메세지가 온다면 웹 서버는 다음과 같이 동작한다.
&lt;ul&gt;
&lt;li&gt;먼저 URI에 적힌 파일명을 보고 프로그램인지 확인한다.
&lt;ul&gt;
&lt;li&gt;ex. .cgi, php 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램이라면 해당 프로그램을 작동시키도록 OS에 의뢰한다.&lt;/li&gt;
&lt;li&gt;데이터를 처리한 후 출력 데이터를 웹 서버에 돌려준다. 해당 데이터는 Html 태그를 내장한 문서이므로 이것을 응답 메세지로 클라이언트에 반송한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-웹-서버로-수행하는-액세스-제어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%88%98%ED%96%89%ED%95%98%EB%8A%94-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4&quot; aria-label=&quot;3 웹 서버로 수행하는 액세스 제어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 웹 서버로 수행하는 액세스 제어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;웹 서버에서는 데이터를 특정 조건에 따라서 액세스를 제어할 수 있다.
&lt;ul&gt;
&lt;li&gt;예를 들어 회원 정보에서 특정 조건으로 동작을 금지시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때 사용되는 정보는 다음 3가지 이다.
&lt;ol&gt;
&lt;li&gt;클라이언트 주소&lt;/li&gt;
&lt;li&gt;클라이언트 도메인명&lt;/li&gt;
&lt;li&gt;사용자명과 패쓰워드&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;이 조건을 판단하여 액세스가 허가된 경우에만 파일을 읽거나 프로그램을 실행하도록 할 수 있다.&lt;/li&gt;
&lt;li&gt;예시
&lt;ul&gt;
&lt;li&gt;클라이언트 IP 주소가 조건이라면 accept로 접속했을 때 점검한다.&lt;/li&gt;
&lt;li&gt;클라이언트 도메인명이면 클라이언트 IP주소로 DNS 서버를 이용해 조사한다.
&lt;ul&gt;
&lt;li&gt;요청을 받은 웹 서버는 DNS 서버로 요청을 보내 도메인명을 조사한다.&lt;/li&gt;
&lt;li&gt;도메인명을 응답 받으면 해당 도메인 명의 IP가 클라이언트의 송신처 IP와 동일한지 이중으로 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자명과 패쓰워드를 입력하여 액세스를 제어하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-응답-메세지를-되돌려-보낸다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%90%98%EB%8F%8C%EB%A0%A4-%EB%B3%B4%EB%82%B8%EB%8B%A4&quot; aria-label=&quot;4 응답 메세지를 되돌려 보낸다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 응답 메세지를 되돌려 보낸다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;최초 클라이언트가 요청 메세지를 웹 서버에 응답하는 동작과 동일하다.&lt;/li&gt;
&lt;li&gt;웹 서버가 소켓 라이브러리의 &lt;code class=&quot;language-text&quot;&gt;write&lt;/code&gt; 함수를 호출하여 응답 메세지를 프로토콜 스택에 건내준다.&lt;/li&gt;
&lt;li&gt;어느 소켓을 사용하여 통지할 지 디스크립터를 통지하여 상대를 지정한다.&lt;/li&gt;
&lt;li&gt;해당 패킷이 프로토콜 스택에 의뢰되어 응답된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story4-웹-브라우저가-응답-메시지를-받아-화면에-표시한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story4-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%95%84-%ED%99%94%EB%A9%B4%EC%97%90-%ED%91%9C%EC%8B%9C%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story4 웹 브라우저가 응답 메시지를 받아 화면에 표시한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story4] 웹 브라우저가 응답 메시지를 받아 화면에 표시한다&lt;/h2&gt;
&lt;h3 id=&quot;1-응답-데이터의-형식을-보고-타입을-판단한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%91%EB%8B%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 응답 데이터의 형식을 보고 타입을 판단한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 응답 데이터의 형식을 보고 타입을 판단한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;응답 메시지에 저장된 데이터가 어떤 종류인지 조사한다.
&lt;ul&gt;
&lt;li&gt;문장, 화상, 음성, 영상 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;응답 메시지의 헤더에 &lt;code class=&quot;language-text&quot;&gt;Content-Type&lt;/code&gt;을 통해 데이터의 종류를 쓰도록 한다.
&lt;ul&gt;
&lt;li&gt;MIME 사양으로 그 종류가 규정되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터의 종류가 text라면 어떤 문자 코드를 사용해야하는지 &lt;code class=&quot;language-text&quot;&gt;charset&lt;/code&gt;을 통해서 판단한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Content-Encoding&lt;/code&gt; 을 통해 헤더의 필드 값을 조사한다.
&lt;ul&gt;
&lt;li&gt;압축 기술이나 부호화 기술에 따라서 변환 여부를 알아야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;요청 파일의 확장자를 통해서 데이터를 판단하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-브라우저-화면에-웹-페이지를-표시하여-액세스를-완료한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%ED%99%94%EB%A9%B4%EC%97%90-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%ED%91%9C%EC%8B%9C%ED%95%98%EC%97%AC-%EC%95%A1%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTML의 경우 그 태그의 의미를 해석하여 OS가 어느 위치에 어떻게 표시할지 지시한다.&lt;/li&gt;
&lt;li&gt;JPEG나 GIF 형식은 압축을 풀고 건네준다.&lt;/li&gt;
&lt;li&gt;관련된 응답 데이터 중 소프트웨어 어플리케이션 데이터는 해당 데이터를 호출하여 화면에 표시될 수도 있다.
&lt;ul&gt;
&lt;li&gt;워드프로세서나 프레젠테이션 등등.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story3-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%EC%9D%98%EB%AF%B8%EB%A5%BC-%ED%95%B4%EC%84%9D%ED%95%98%EC%97%AC-%EC%9A%94%EA%B5%AC%EC%97%90-%EC%9D%91%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story3] 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%A1%B0%ED%9A%8C%EC%9D%98-uri%EB%A5%BC-%EC%8B%A4%EC%A0%9C-%ED%8C%8C%EC%9D%BC%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4&quot;&gt;1. 조회의 URI를 실제 파일명으로 변환한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-cgi-common-gateway-interface-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot;&gt;2. CGI (Common Gateway Interface) 프로그램을 작동하는 경우&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%88%98%ED%96%89%ED%95%98%EB%8A%94-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4&quot;&gt;3. 웹 서버로 수행하는 액세스 제어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%90%98%EB%8F%8C%EB%A0%A4-%EB%B3%B4%EB%82%B8%EB%8B%A4&quot;&gt;4. 응답 메세지를 되돌려 보낸다.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story4-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%95%84-%ED%99%94%EB%A9%B4%EC%97%90-%ED%91%9C%EC%8B%9C%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story4] 웹 브라우저가 응답 메시지를 받아 화면에 표시한다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%9D%91%EB%8B%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4&quot;&gt;1. 응답 데이터의 형식을 보고 타입을 판단한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%ED%99%94%EB%A9%B4%EC%97%90-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%ED%91%9C%EC%8B%9C%ED%95%98%EC%97%AC-%EC%95%A1%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%9C%EB%8B%A4&quot;&gt;2. 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_9]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌 🛺 [Story1] 서버의 개요…]]></description><link>https://yjksw.github.io/one-percent-network-9/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-9/</guid><pubDate>Thu, 07 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story1-서버의-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story1-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot; story1 서버의 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story1] 서버의 개요&lt;/h2&gt;
&lt;h3 id=&quot;1-클라이언트와-서버의-차이점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot; aria-label=&quot;1 클라이언트와 서버의 차이점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 클라이언트와 서버의 차이점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버도 클라이언트로부터 전송된 패킷을 받기 위해서 준비 단계를 거쳐야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;서버와-클라이언트의-차이점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B2%84%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot; aria-label=&quot;서버와 클라이언트의 차이점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서버와 클라이언트의 차이점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네트워크와 관련된 전체적인 구조는 비슷한 형태를 지니고 있다.&lt;/li&gt;
&lt;li&gt;하지만 서버는 소켓을 미리 열고 클라이언트의 연결을 기다린다는 점, 여러 클라이언트와 소통해야 한다는 점에서 클라이언트와 차이점을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-서버-어플리케이션의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%84%9C%EB%B2%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;2 서버 어플리케이션의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 서버 어플리케이션의 구조&lt;/h3&gt;
&lt;p&gt;서버 프로그램에서 다수의 클라이언트와 소켓 통신을 하기 위해서 다음과 같은 구조로 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버 프로그램에서 클라이언트의 접속을 기다리는 부분과&lt;/li&gt;
&lt;li&gt;클라이언트와 대화를 하는 부분을 나눈다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;클라이언트와 대화를 하는 부분은 각 클라이언트와 1대1로 대화를 한다. 따라서 대화가 섞이지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버 OS의 멀티태스크, 멀티스레드 기능을 사용한 기법이다.&lt;/li&gt;
&lt;li&gt;이때 접속할 때마다 새로운 연결을 맺는것이 부담이 되면 클라이언트와의 연결 동작을 미리 해놓고 비어있는 소켓에 연결하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-서버측의-소켓과-포트-번호&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%9D%98-%EC%86%8C%EC%BC%93%EA%B3%BC-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8&quot; aria-label=&quot;3 서버측의 소켓과 포트 번호 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 서버측의 소켓과 포트 번호&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버와 클라이언트의 역할이 고정되어 있는 것이 아니라 여러 형태로 변경되면서 데이터를 송수신 할 수 있기 때문에 좌우대칭으로 실행될 수 있도록 하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;하지만 TCP 접속 동작은 좌우 대칭으로 만들기 어렵다. 한쪽이 소켓을 열고 기다리며 다른 한쪽이 연결을 해야하기 때문이다.
&lt;ul&gt;
&lt;li&gt;여기서 접속하는 측이 클라이언트, 접속을 기다리는 측이 서버라고 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클라이언트의 데이터 송수신 동작
&lt;ol&gt;
&lt;li&gt;소켓 작성 - 소켓 생성&lt;/li&gt;
&lt;li&gt;서버측의 소켓과 파이프로 연결 - 소켓 접속&lt;/li&gt;
&lt;li&gt;데이터 송수신&lt;/li&gt;
&lt;li&gt;파이프 분리 후 소켓 말소&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;서버의 데이터 송수신 동작
&lt;ol&gt;
&lt;li&gt;소켓 작성 - 소켓 생성&lt;/li&gt;
&lt;li&gt;소켓을 접속 대기 생태로 만듬&lt;/li&gt;
&lt;li&gt;접속을 접수&lt;/li&gt;
&lt;li&gt;데이터 송수신&lt;/li&gt;
&lt;li&gt;파이프 분리 후 소켓 말소&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;서버의 접속 준비 단계에서는 서버 어플리케이션의 포트 번호를 소켓에 기록한다. (웹 서버의 경우에는 80)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서버에서 &lt;code class=&quot;language-text&quot;&gt;accept&lt;/code&gt; 를 통해서 클라이언트로부터 소켓을 접수한다.&lt;/li&gt;
&lt;li&gt;클라이언트와의 접속이 되면 접속 대기 소켓을 복사하여 새로운 소켓을 생성한다.
&lt;ul&gt;
&lt;li&gt;접속 상대에 대한 제어 정보를 새로운 소켓에 기록한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기존의 접속 대기 소켓은 계속 접속 대기인 상태로 존재하여 다른 클라이언트와의 접속을 기다린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;웹-소켓의-포트번호&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%86%8C%EC%BC%93%EC%9D%98-%ED%8F%AC%ED%8A%B8%EB%B2%88%ED%98%B8&quot; aria-label=&quot;웹 소켓의 포트번호 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 소켓의 포트번호&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;본래 클라이언트는 80이라는 포트의 소켓과 통신을 시작한다. 하지만 접속 한 후 응답에 다른 포트 번호가 들어올 수 없으므로 그대로 80 포트를 사용해야 한다.
&lt;ul&gt;
&lt;li&gt;이때 같은 포트 번호를 지닌 여러 소켓이 있게되는 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;다음 패킷이 왔을 때 헤더의 포트번호로 통신 중인 소켓을 식별할 수 없기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해결방법
&lt;ul&gt;
&lt;li&gt;소켓을 지정할 때 다음 4가지 정보를 모두 조합하여 소켓을 식별한다.
&lt;ol&gt;
&lt;li&gt;클라이언트 IP주소&lt;/li&gt;
&lt;li&gt;클라이언트 포트 번호&lt;/li&gt;
&lt;li&gt;서버 IP주소&lt;/li&gt;
&lt;li&gt;서버 포트 번호&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그렇다면 왜 디스크립터가 필요할까 ? (위 4가지 정보로 소켓을 식별할 수 있는데)
&lt;ul&gt;
&lt;li&gt;접속을 대기할 때는 아직 클라이언트 소켓이 지정되지 않았으므로 정보가 없다.&lt;/li&gt;
&lt;li&gt;또한 디스크립터 하나로 소켓을 식별하는 것이 더 간단하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story2-서버의-수신동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story2-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91&quot; aria-label=&quot; story2 서버의 수신동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story2] 서버의 수신동작&lt;/h2&gt;
&lt;h3 id=&quot;1-lan-어댑터에서-수신-신호를-디지털-데이터로-변환한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-lan-%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%8B%A0-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%94%94%EC%A7%80%ED%84%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 lan 어댑터에서 수신 신호를 디지털 데이터로 변환한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. LAN 어댑터에서 수신 신호를 디지털 데이터로 변환한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LAN 어댑터에서 수신하여 디지털 데이터로 바꾼다. (클록 신호를 추출하여 데이터를 0101의 형태로 바꾼다)&lt;/li&gt;
&lt;li&gt;FCS를 통해 패킷의 오류 유무를 검사한다. 오류가 있다면 패킷을 폐기한다.&lt;/li&gt;
&lt;li&gt;MAC헤더의 수신처가 본인인지 확인한다.
&lt;ul&gt;
&lt;li&gt;이더넷은 LAN 전체에 신호를 흘리고 상대를 찾는 형태이기 때문에 올바른 패킷이 아니더라도 도착할 수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;변환된 디지털 데이터를 LAN 어댑터 내부의 버퍼 메모리에 저장한다. (여기까지 LAN의 MAC 부분이 담당한다)&lt;/li&gt;
&lt;li&gt;LAN 어댑터에서 CPU에게 인터럽트로 패킷이 도착했다는 사실을 알린다.&lt;/li&gt;
&lt;li&gt;LAN 드라이버는 LAN 어댑터의 버퍼 메모리에서 수신한 패킷을 추출하여 프로토콜을 판별하고 적합한 프로토콜 처리 소프트웨어를 호출한다. (TCP/IP 면 해당 프로토콜을 호출하여 패킷을 건낸다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-ip-담당-부분의-수신-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-ip-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;2 ip 담당 부분의 수신 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. IP 담당 부분의 수신 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IP 담당은 IP 헤더를 점검하고 수신처가 본인 IP인지 확인한다.
&lt;ul&gt;
&lt;li&gt;서버가 라우터와 같이 패킷을 중개하는 역할일 수 있으므로 본인에게 온 패킷이 아닐수도 있다. 이 경우에는 패킷에 쓰인 수신처 IP 주소로 패킷을 중개해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 담당에서는 fragmentation을 통해서 패킷이 분할되었는지 조사하고 그렇다면 패킷을 일시적으로 메모리에 저장하고 패킷이 모두 모이면 복원한다.&lt;/li&gt;
&lt;li&gt;IP 헤더의 프로토콜 번호를 조사하여 해당 부분에 패킷을 건내준다.
&lt;ul&gt;
&lt;li&gt;06이면 TCP 담당, 11이면 UDP 담당 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-tcp-담당-부분이-접속-패킷을-수신했을-때의-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%A0%91%EC%86%8D-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;3 tcp 담당 부분이 접속 패킷을 수신했을 때의 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. TCP 담당 부분이 접속 패킷을 수신했을 때의 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;만일 도착한 패킷의 SYN 컨트롤비트가 1이라면 접속 동작의 패킷이다.
&lt;ul&gt;
&lt;li&gt;접속을 접수하는 동작을 실행한다.&lt;/li&gt;
&lt;li&gt;포트 번호를 조사하여 해당 포트 번호와 일치하는 접속 대기 소켓이 있는지 확인한다.
&lt;ul&gt;
&lt;li&gt;만일 없다면 오류이므로 오류 패킷을 클라이언트에게 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;접속 대기 소켓을 찾으면 소켓을 복사하여 새로운 소켓을 만들고 송신처IP주소, 포트번호, 시퀀스 초기값, 윈도우 값등 필수 정보를 기록한다.&lt;/li&gt;
&lt;li&gt;패킷을 받았다는 ACK 번호, 서버의 시퀀스 초기값, 수신 버퍼 빈 용량인 윈도우 값 등을 기록한 TCP 헤더를 만들고 IP 담당에 의뢰하여 반송한다.&lt;/li&gt;
&lt;li&gt;패킷이 잘 도착하면 ACK 번호가 돌아와 접속이 완료된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-tcp-담당-부분이-데이터-패킷을-수신했을-때의-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;4 tcp 담당 부분이 데이터 패킷을 수신했을 때의 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. TCP 담당 부분이 데이터 패킷을 수신했을 때의 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버측에 같은 포트 번호를 가진 소켓이 많으므로 앞에서 말한 4가지 정보로 적절한 소켓을 찾는다.&lt;/li&gt;
&lt;li&gt;해당 소켓에 기록된 정보들을 통해 올바르게 데이터 송수신이 이루어지고 있는지 확인한다.
&lt;ul&gt;
&lt;li&gt;시퀀스 번호, 데이터 조각의 길이 등등을 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패킷에서 추출된 데이터를 수신 버퍼에 저장한다.&lt;/li&gt;
&lt;li&gt;데이터를 수신하면 수신 응답용 TCP 헤더를 만들고 수신 패킷에 시퀀스 번호와 데이터 길이로 얻은 ACK 번호를 기록하고 IP 담당에 넘겨 클라이언트에게 반송한다.&lt;/li&gt;
&lt;li&gt;수신 버퍼에 기록된 데이터들은 소켓 라이브러리의 &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt; 함수 호출을 통해 어플리케이션에 넘겨진다.&lt;/li&gt;
&lt;li&gt;어플리케이션에서 http 리퀘스트 메시지 내용을 조사하고 브라우저에서 데이터를 반송한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-tcp-담당-부분의-연결-끊기-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;5 tcp 담당 부분의 연결 끊기 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. TCP 담당 부분의 연결 끊기 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어느 쪽(클라이언트 or 서버) 에서든 연결 끊기 동작에 들어가도 상관없다.
&lt;ul&gt;
&lt;li&gt;HTTP 1.0 이라면 서버에서 연결 끊기 동작을 시작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서버에서 &lt;code class=&quot;language-text&quot;&gt;close&lt;/code&gt; 함수를 호출하고 FIN 1로 설정한 TCP 헤더를 클라이언트에게 보낸다.&lt;/li&gt;
&lt;li&gt;클라이언트도  &lt;code class=&quot;language-text&quot;&gt;close&lt;/code&gt; 를 호출하고 FIN 1로 설정하여 반송하고 ACK도 보낸다.&lt;/li&gt;
&lt;li&gt;잠시 기다렸다가 소켓을 말소한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story1-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EC%9A%94&quot;&gt;🛺 [Story1] 서버의 개요&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;1. 클라이언트와 서버의 차이점&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%9C%EB%B2%84%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;서버와 클라이언트의 차이점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%EC%84%9C%EB%B2%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot;&gt;2. 서버 어플리케이션의 구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%9D%98-%EC%86%8C%EC%BC%93%EA%B3%BC-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8&quot;&gt;3. 서버측의 소켓과 포트 번호&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%86%8C%EC%BC%93%EC%9D%98-%ED%8F%AC%ED%8A%B8%EB%B2%88%ED%98%B8&quot;&gt;웹 소켓의 포트번호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story2-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91&quot;&gt;🛺 [Story2] 서버의 수신동작&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-lan-%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%8B%A0-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%94%94%EC%A7%80%ED%84%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4&quot;&gt;1. LAN 어댑터에서 수신 신호를 디지털 데이터로 변환한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-ip-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91&quot;&gt;2. IP 담당 부분의 수신 동작&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%A0%91%EC%86%8D-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91&quot;&gt;3. TCP 담당 부분이 접속 패킷을 수신했을 때의 동작&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91&quot;&gt;4. TCP 담당 부분이 데이터 패킷을 수신했을 때의 동작&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8F%99%EC%9E%91&quot;&gt;5. TCP 담당 부분의 연결 끊기 동작&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JPA 에서 별칭을 쓰지 않는 이유 (하지만 쓴 이유)]]></title><description><![CDATA[Intro JPA의  사용시 별칭을 쓰면 안되는 이유가 무엇인지 알아본다. 프로젝트애서 fetch join 시 별칭 사용에 대해서 고민해본다. fetch join 별칭은 왜 안될까 ? fetch join…]]></description><link>https://yjksw.github.io/jpa-fetch-join-nickname/</link><guid isPermaLink="false">https://yjksw.github.io/jpa-fetch-join-nickname/</guid><pubDate>Wed, 06 Oct 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JPA의 &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt; 사용시 별칭을 쓰면 안되는 이유가 무엇인지 알아본다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/woowacourse-teams/2021-pick-git&quot;&gt;프로젝트&lt;/a&gt;애서 fetch join 시 별칭 사용에 대해서 고민해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;fetch-join-별칭은-왜-안될까-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fetch-join-%EB%B3%84%EC%B9%AD%EC%9D%80-%EC%99%9C-%EC%95%88%EB%90%A0%EA%B9%8C-&quot; aria-label=&quot;fetch join 별칭은 왜 안될까  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fetch join 별칭은 왜 안될까 ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fetch join에서 별칭이 안되는 이유는 데이터의 일관성이 깨지기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어서 다음과 같은 코드는 fetch join 대상에 조건문이 들어가서 일관성이 깨진 경우이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fetch join 대상에 조건문을 걸었을 때 데이터가 불일치하다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findTeamWithSpecificNameMember&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 데이터 삽입&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;teamA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberA1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberA2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberA3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamAMembers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberA1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memberA2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memberA3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamAMembers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 데이터 조회&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; teamAMemberSize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamAWithMemberName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findTeamWithSomeMemberByName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* 본래 teamA에 3명의 멤버가 들어가있지만 fetch join 대상에 where문이 들어가면서 데이터 불일치가 일어났다.
    * collection 에는 관련 데이터가 모두 들어가있기를 기대하는데 그렇지 않다.
    * 따라서 fetch join 대상에 필터링 조건을 거는 것을 지양한다. 
    */&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamAWithMemberName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamAMemberSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamAWithMemberName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TeamA에 대한 member collection 은 본래 3개이다. 그리고 fetch join을 하면 연관된 데이터가 모두 들어올 것이라고 가정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 위와 같이 fetch join 대상에 별칭을 주어 where 필터링 조건을 사용하면 실제로 TeamA에 연관된 멤버는 3명이지만 &lt;code class=&quot;language-text&quot;&gt;memberA1&lt;/code&gt;만 연관 데이터로 들어온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DB의 상태에 대한 일관성이 깨진다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;하지만-예외는-있다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EC%A7%80%EB%A7%8C-%EC%98%88%EC%99%B8%EB%8A%94-%EC%9E%88%EB%8B%A4&quot; aria-label=&quot;하지만 예외는 있다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하지만 예외는 있다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;일관성을 해치지지 않는 한에서 성능에 도움이 된다면 예외적으로 사용해도 된다. (아마도 하이버네이트가 별칭을 허용하는 이유…)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어 다음과 같은 쿼리는 일관성을 해치지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; m &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; Member m &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fetch&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; :teamName&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 위의 쿼리가 left join fetch로 되면 일관성이 깨진다. (Team이 null이 아닌 Member에 대해서 null 값이 들어가기 때문이다.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;때문에 매우 조심스럽게 사용해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;우리-프로젝트에-있는-별칭은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B0%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD%EC%9D%80&quot; aria-label=&quot;우리 프로젝트에 있는 별칭은 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;우리 프로젝트에 있는 별칭은?!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;깃들다 프로젝트에도 fetch join 대상에 별칭을 사용하는 부분이 있다. 다음 &lt;a href=&quot;http://tech.pick-git.com/jpa-proxy-equals-bug/&quot;&gt;포스트&lt;/a&gt;에 어떤 상황이었는지 배경 설명이 자세하게 되어있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select distinct p from Post p left join fetch p.likes.likes l left join fetch l.user where p.id = :postId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findPostWithLikeUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;postId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; postId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post 안에는 해당 게시물을 좋아요한 유저들 정보를 담은 &lt;code class=&quot;language-text&quot;&gt;Like&lt;/code&gt; 리스트가 담겨있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;//....&lt;/span&gt;

   &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; likes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Like&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 쿼리를 살펴보면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;별칭이 &lt;code class=&quot;language-text&quot;&gt;p.likes.likes l&lt;/code&gt;에 사용된다.&lt;/li&gt;
&lt;li&gt;where 조건문에는 fetch join 대상을 필터링 하지 않는다.&lt;/li&gt;
&lt;li&gt;따라서 데이터 일관성을 헤치지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fetch join을 할 때 주의해야하는 부분은 collection을 여러개 fetch join 할 경우이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 같은 경우는 &lt;code class=&quot;language-text&quot;&gt;post -&gt; like&lt;/code&gt; 관계는 OneToMany라서 한번까지 fetch join 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;like -&gt; user&lt;/code&gt;는 ManyToOne 관계 이므로 추가 fetch join을 할 수 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마무리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;처음에 버그를 마주하고 fetch join 대상에 별칭을 두는 것이 찝찝했지만 왜 안되는지 모르는 상태로 (나만) 넘어갔다.&lt;/li&gt;
&lt;li&gt;검토해보니 fetch join 대상이 아니었으며 여러 collection을 fetch join 하는 상황도 아니었다.&lt;/li&gt;
&lt;li&gt;하지만 이런 예외적인 경우는 자세히 알아보고 주의해서 사용해야 할 것 같다. 또 왜인지 모르고 그냥 안쓰지는 말자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#fetch-join-%EB%B3%84%EC%B9%AD%EC%9D%80-%EC%99%9C-%EC%95%88%EB%90%A0%EA%B9%8C-&quot;&gt;fetch join 별칭은 왜 안될까 ?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%98%EC%A7%80%EB%A7%8C-%EC%98%88%EC%99%B8%EB%8A%94-%EC%9E%88%EB%8B%A4&quot;&gt;하지만 예외는 있다&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9A%B0%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD%EC%9D%80&quot;&gt;우리 프로젝트에 있는 별칭은?!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_8]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌 🛺 [Story4] 캐시 서버를 이용한 서버의 부하 분산…]]></description><link>https://yjksw.github.io/one-percent-network-8/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-8/</guid><pubDate>Tue, 05 Oct 2021 23:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story4-캐시-서버를-이용한-서버의-부하-분산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0&quot; aria-label=&quot; story4 캐시 서버를 이용한 서버의 부하 분산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story4] 캐시 서버를 이용한 서버의 부하 분산&lt;/h2&gt;
&lt;h3 id=&quot;1-캐시-서버의-이용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9D%B4%EC%9A%A9&quot; aria-label=&quot;1 캐시 서버의 이용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 캐시 서버의 이용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프록시 구조를 사용하여 데이터를 캐시에 저장한다.&lt;/li&gt;
&lt;li&gt;프록시는 웹 서버와 클라이언트 사이에 들어가서 웹 서버에 대한 액세스 동작을 중개한다.
&lt;ul&gt;
&lt;li&gt;중개하는 과정에서 웹 서버에서 받은 데이터를 저장해두고 가능하면 해당 데이터를 대신하여 응답한다.&lt;/li&gt;
&lt;li&gt;웹 서버가 처리해야할 일을 실행하기 위해서 오랜 시간이 걸리는 반면 캐시 서버는 받은 데이터를 곧바로 송신만 하면 되기 때문에 매우 빠르다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터가 자주 바뀌는 부분은 캐시 서버를 활용하기 어렵다. 하지만 캐시 서버에서 처리할 수 있는 얼마를 담당하면 웹 서버에 가는 부하도 줄어들어 처리속도도 향상된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-캐시-서버는-갱신일로-콘텐츠를-관리한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%8A%94-%EA%B0%B1%EC%8B%A0%EC%9D%BC%EB%A1%9C-%EC%BD%98%ED%85%90%EC%B8%A0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 캐시 서버는 갱신일로 콘텐츠를 관리한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 캐시 서버는 갱신일로 콘텐츠를 관리한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;캐시 서버가 동작할 때 캐시 서버를 웹 서버 대신 DNS에 등록한다. 따라서 요청이 오면 캐시 서버가 대신해서 데이터를 받는다.
&lt;ul&gt;
&lt;li&gt;메세지를 받을 때 웹 서버의 수신 동작과 동일한 절차를 거쳐서 받는다.&lt;/li&gt;
&lt;li&gt;패킷을 만들고, 접속 동작을 실행하고 요청 메세지를 받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이후 해당 요청에 대한 데이터가 저장되어 있는지 조사한다.&lt;/li&gt;
&lt;li&gt;저장된 데이터가 없는 경우
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Via&lt;/code&gt; 라는 필드 값을 헤더에 추가하여 캐시 서버를 경유했다는 것을 나타낸다.
&lt;ul&gt;
&lt;li&gt;중요한 값은 아니며 캐시 서버의 설정에 따라서 추가되지 않는 경우도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만일 여러대의 서버가 캐시 서버에 연결이 되어 있다면 요청의 URI에 따라서 웹 서버로 요청을 전송한다.
&lt;ul&gt;
&lt;li&gt;이때 클라이언트는 캐시 서버로 변경된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;웹 서버에서 캐시 서버로 응답을 보내고 캐시 서버는 &lt;code class=&quot;language-text&quot;&gt;Via&lt;/code&gt; 헤더를 추가하여 클라이언트에게 응답을 한다.&lt;/li&gt;
&lt;li&gt;그리고 응답에 대한 메시지를 캐시 서버에 저장하고 저장한 일시를 기록한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터가 저장되어 있는 경우
&lt;ul&gt;
&lt;li&gt;만일 캐시 데이터가 저장되어 있다면 해당 데이터가 변경 되지는 않았는지 확인하는 &lt;code class=&quot;language-text&quot;&gt;If-Modified-Since&lt;/code&gt; 헤더를 덧붙여서 웹 서버에 전송한다.
&lt;ul&gt;
&lt;li&gt;만일 데이터가 없었다면 위 헤더는 추가되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때 웹 서버는 변경이 없다면 &lt;code class=&quot;language-text&quot;&gt;304 Not Modified&lt;/code&gt; 상태코드를 응답한다. 변경이 있다면 데이터가 없던 것과 마찬가지로 동작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-프록시의-원점은-포워드-프록시이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%98-%EC%9B%90%EC%A0%90%EC%9D%80-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;3 프록시의 원점은 포워드 프록시이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 프록시의 원점은 포워드 프록시이다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트측에 캐시 서버를 두는 경우이다. → 포워드 프록시&lt;/li&gt;
&lt;li&gt;웹 서버에 대한 캐시 서버와 동일하게 동작하지만 추가로 방화벽을 실현하는 목적이 있었다.&lt;/li&gt;
&lt;li&gt;방화벽은 인터넷에서의 부정침입을 막는 것이기 때문에 프록시에서 요청 메세지를 받아 인터넷으로 필요한 것을 통과시키는 역할을 한다.&lt;/li&gt;
&lt;li&gt;프록시의 캐시를 이용하면 사내 LAN에서 더 빨리 데이터를 얻을 수 있다.&lt;/li&gt;
&lt;li&gt;프록시를 사용하면 요청의 내용을 조사하기 때문에 더 자세한 조건을 설정해서 특정 사이나에 대한 액세스를 금지하는 등의 제한을 걸 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;포워드-프록시-사용시-데이터-송신&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%8B%A0&quot; aria-label=&quot;포워드 프록시 사용시 데이터 송신 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;포워드 프록시 사용시 데이터 송신&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요청 메세지의 URL과 관계없이 모든 요청을 포워드 프록시에 우선 송신한다.&lt;/li&gt;
&lt;li&gt;요청 메세지의 내용도 변경된다.
&lt;ul&gt;
&lt;li&gt;본래 웹 서버의 이름을 제외하고 URI에 데이터 경로를 적었는데, 포워드 프록시를 사용하는 경우 이름까지 그대로 요청 URL에 기록한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL에 적힌 그대로가 전송 대상이므로 서버측 캐시 서버와 같이 정해진 서버로 전송하는 것이 아니라 모든 서버에 전송할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-포워드-프록시를-개량한-리버스-프록시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A5%BC-%EA%B0%9C%EB%9F%89%ED%95%9C-%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C&quot; aria-label=&quot;4 포워드 프록시를 개량한 리버스 프록시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 포워드 프록시를 개량한 리버스 프록시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;포워드 프록시는 브라우저의 설정이 필요해 장애의 원인이 되기도 한다.&lt;/li&gt;
&lt;li&gt;따라서 요청 메세지에 전체 URL이 아닌 URI 에 쓰여있는 디렉토리를 웹 서버에 대응시켜 전송할 수 있도록 했다 → 서버측에 설치하는 캐시 서버에서 채택한 방법으로 &lt;strong&gt;리버스 프록시&lt;/strong&gt;라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-트랜스패어런트-프록시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%A8%EC%96%B4%EB%9F%B0%ED%8A%B8-%ED%94%84%EB%A1%9D%EC%8B%9C&quot; aria-label=&quot;5 트랜스패어런트 프록시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 트랜스패어런트 프록시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;캐시 서버에서 전송 대상을 판단하는 방법이다.
&lt;ul&gt;
&lt;li&gt;IP 헤더의 수신처 IP 주소로 액세스 대상 웹 서버를 찾는 방법을 &lt;strong&gt;트랜스패어런트 프록시&lt;/strong&gt;라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;포워드 프록시에서 처럼 브라우저에 설정할 필요도 없고 리버스 프록시처럼 전송 대상을 리버스 프록시로 설정하고 DNS에 등록할 필요도 없다.
&lt;ul&gt;
&lt;li&gt;만일 트랜스패어런트 프록시에 DNS에 등록된다면 수신처 IP가 해당 프록시가 되므로 수신처 IP를 조사해서 패킷을 중개하는 구조를 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그래서 트랜스 패어런트 프록시를 브라우저에서 웹 서버로 요청 메세지가 흘러가는 길목에 설치하거나 한 길로 수렴하는 네트워크의 길목에 설치하여 사용한다. (길마다 프록시를 설치해야할 수도 있다)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story5-콘텐츠-배포-서비스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story5-%EC%BD%98%ED%85%90%EC%B8%A0-%EB%B0%B0%ED%8F%AC-%EC%84%9C%EB%B9%84%EC%8A%A4&quot; aria-label=&quot; story5 콘텐츠 배포 서비스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story5] 콘텐츠 배포 서비스&lt;/h2&gt;
&lt;h3 id=&quot;1-cdn을-이용한-부하-분산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-cdn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0&quot; aria-label=&quot;1 cdn을 이용한 부하 분산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. CDN을 이용한 부하 분산&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버 측 캐시와 클라이언트 측 캐시의 부하 경감 효과가 각각 다르다.
&lt;ul&gt;
&lt;li&gt;서버 측 캐시는 웹 서버에 들어오는 요청에 대한 부하를 분산시킨다.&lt;/li&gt;
&lt;li&gt;클라이언트 측 캐시는 인터넷에 들어오는 패킷 수를 줄여 인터넷 트래픽을 억제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터넷 트래픽을 억제하기 위해서는 (특히나 대용량 이미지나 영상 데이터에 대해) 클라이언트 측에 캐시 서버를 두는 것이 더 좋다. 하지만 그것은 웹 서버 개발자가 제어할 수 있는 부분이 아니다. (브라우저를 통한 설정이 필요하기 때문이다.)&lt;/li&gt;
&lt;li&gt;따라서 해결책으로 프로바이더와 계약하여 웹 서버 개발자가 제어할 수 있는 클라이언트 가까이 있는 캐시 서버를 이용하는 것이다. → CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139086526-535450f9-f459-4d2d-bc6c-748046ff5174.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 프로바이더에 캐시 서버를 설치하는 것은 어려우니 우선 중요한 프로바이더마다 캐시 서버를 설치한다.&lt;/li&gt;
&lt;li&gt;서버 운영자가 직접 설치하고 프로바이더와 계약하는 것이 어려우므로 그것을 대신 하고 캐시 서버를 대출하는 CDN 서비스가 등장했다.
&lt;ul&gt;
&lt;li&gt;CDN 서버는 여러 웹 서버의 데이터를 캐싱할 수 있으므로 여러 웹 서버 개발자들이 공동으로 이용하여 이용 비용을 절감할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-가장-가까운-캐시-서버의-관점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B0%80%EC%9E%A5-%EA%B0%80%EA%B9%8C%EC%9A%B4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B4%80%EC%A0%90&quot; aria-label=&quot;2 가장 가까운 캐시 서버의 관점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 가장 가까운 캐시 서버의 관점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CDN을 사용하기 위해서는 클라이언트가 가장 가까운 캐시 서버를 찾을 수 있어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;최초-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EC%B4%88-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;최초 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최초 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DNS 서버가 IP주소를 응답할 때 가장 가까운 캐시 서버의 IP 주소를 응답하도록 설정한다.
&lt;ul&gt;
&lt;li&gt;DNS 서버에서 복수의 IP가 등록된 경우 RR로 응답하는 것을 변경한다.&lt;/li&gt;
&lt;li&gt;응답할 때 RR 방식이 아니라 클라이언트와 캐시 서버의 거리를 판단하여 가장 가까운 캐시 서버 IP를 반환하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가장 가까운 거리를 측정하는 방법
&lt;ul&gt;
&lt;li&gt;캐시 서버의 설치 장소에 있는 라우터에서 경로 정보를 모은다. (캐시 서버 갯수만큼의 경로표가 모인다)&lt;/li&gt;
&lt;li&gt;웹 서버 측 DNS 서버에서 해당 경로표를 입수하여 클라이언트의 DNS 요청 패킷의 송신처 IP주소와의 경로 및 거리를 측정한다.
&lt;ul&gt;
&lt;li&gt;이때 클라이언트 측 DNS 서버와의 거리를 측정하기 때문에 대략적인 거리이다.&lt;/li&gt;
&lt;li&gt;인터넷 경로 정보에 지나는 프로바이더와 대략적인 거리 정보가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클라이언트 DNS 서버와 가장 가까운 캐시의 라우터를 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-리피터용-서버로-액세스-대상을-분배한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%A6%AC%ED%94%BC%ED%84%B0%EC%9A%A9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4-%EB%8C%80%EC%83%81%EC%9D%84-%EB%B6%84%EB%B0%B0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;3 리피터용 서버로 액세스 대상을 분배한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 리피터용 서버로 액세스 대상을 분배한다&lt;/h3&gt;
&lt;h4 id=&quot;두번째-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;두번째 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;두번째 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;리다이렉트를 나타내는 &lt;code class=&quot;language-text&quot;&gt;Location&lt;/code&gt; 필드를 사용하여 액세스 대상을 가장 가까운 캐시 서버로 돌리는 방법이다.&lt;/li&gt;
&lt;li&gt;먼저 DNS 서버에서 웹 서버의 IP주소를 회답하고 클라이언트가 해당 IP 주소(리다이렉트용 서버)로 요청을 보낸다. 리다이렉트용 서버는 경로표를 가지고 있어 가장 가까운 캐시 서버로 리다이렉트 하도록 &lt;code class=&quot;language-text&quot;&gt;Location&lt;/code&gt; 필드를 설정하여 응답한다.&lt;/li&gt;
&lt;li&gt;HTTP 요청이 많아지므로 어느정도 오버헤드가 있다. 하지만 클라이언트 DNS 서버와의 거리가 아닌 클라이언트 간의 거리를 조사하므로 더 정확하다.&lt;/li&gt;
&lt;li&gt;더 정확하게 하기 위해 최적의 캐시 서버에 액세스하는 스크립트 프로그램을 내장한 페이지를 반송할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-캐시-내용의-갱신-방법에서-성능의-차이가-난다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%BA%90%EC%8B%9C-%EB%82%B4%EC%9A%A9%EC%9D%98-%EA%B0%B1%EC%8B%A0-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%84%B1%EB%8A%A5%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%82%9C%EB%8B%A4&quot; aria-label=&quot;4 캐시 내용의 갱신 방법에서 성능의 차이가 난다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 캐시 내용의 갱신 방법에서 성능의 차이가 난다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;캐시서버를 이용할 때 갱신 내용 유무를 확인하느라 네트워크가 혼잡해질 수도 있다.&lt;/li&gt;
&lt;li&gt;이 점을 개선하기 위해 확인을 하지 않고 데이터가 업데이트 된다면 즉시 갱신할 수 있다.
&lt;ul&gt;
&lt;li&gt;CDN 캐시 서버에는 이러한 기능이 내장되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;캐시에는 변하지 않는 부분만 캐싱하는 것이 효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0&quot;&gt;🛺 [Story4] 캐시 서버를 이용한 서버의 부하 분산&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9D%B4%EC%9A%A9&quot;&gt;1. 캐시 서버의 이용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%8A%94-%EA%B0%B1%EC%8B%A0%EC%9D%BC%EB%A1%9C-%EC%BD%98%ED%85%90%EC%B8%A0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4&quot;&gt;2. 캐시 서버는 갱신일로 콘텐츠를 관리한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%98-%EC%9B%90%EC%A0%90%EC%9D%80-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%B4%EB%8B%A4&quot;&gt;3. 프록시의 원점은 포워드 프록시이다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%8B%A0&quot;&gt;포워드 프록시 사용시 데이터 송신&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A5%BC-%EA%B0%9C%EB%9F%89%ED%95%9C-%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C&quot;&gt;4. 포워드 프록시를 개량한 리버스 프록시&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#5-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%A8%EC%96%B4%EB%9F%B0%ED%8A%B8-%ED%94%84%EB%A1%9D%EC%8B%9C&quot;&gt;5. 트랜스패어런트 프록시&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story5-%EC%BD%98%ED%85%90%EC%B8%A0-%EB%B0%B0%ED%8F%AC-%EC%84%9C%EB%B9%84%EC%8A%A4&quot;&gt;🛺 [Story5] 콘텐츠 배포 서비스&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-cdn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0&quot;&gt;1. CDN을 이용한 부하 분산&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%EA%B0%80%EC%9E%A5-%EA%B0%80%EA%B9%8C%EC%9A%B4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B4%80%EC%A0%90&quot;&gt;2. 가장 가까운 캐시 서버의 관점&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B5%9C%EC%B4%88-%EB%B0%A9%EB%B2%95&quot;&gt;최초 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%EB%A6%AC%ED%94%BC%ED%84%B0%EC%9A%A9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4-%EB%8C%80%EC%83%81%EC%9D%84-%EB%B6%84%EB%B0%B0%ED%95%9C%EB%8B%A4&quot;&gt;3. 리피터용 서버로 액세스 대상을 분배한다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95&quot;&gt;두번째 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-%EC%BA%90%EC%8B%9C-%EB%82%B4%EC%9A%A9%EC%9D%98-%EA%B0%B1%EC%8B%A0-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%84%B1%EB%8A%A5%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%82%9C%EB%8B%A4&quot;&gt;4. 캐시 내용의 갱신 방법에서 성능의 차이가 난다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_7]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌 🛺 [Story1] 웹 서버의 설치 장소…]]></description><link>https://yjksw.github.io/one-percent-network-7/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-7/</guid><pubDate>Mon, 04 Oct 2021 22:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story1-웹-서버의-설치-장소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story1-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%84%A4%EC%B9%98-%EC%9E%A5%EC%86%8C&quot; aria-label=&quot; story1 웹 서버의 설치 장소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story1] 웹 서버의 설치 장소&lt;/h2&gt;
&lt;h3 id=&quot;1-사내에-웹-서버를-설치하는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%82%AC%EB%82%B4%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;1 사내에 웹 서버를 설치하는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 사내에 웹 서버를 설치하는 경우&lt;/h3&gt;
&lt;p&gt;사내 LAN에 서버를 설치하고 인터넷에서 직접 액세스 하는 경우 (a)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 경우는 현재 주류가 아님
&lt;ul&gt;
&lt;li&gt;IP 부족 - 이 경우 서버와 클라이언트에도 글로벌 주소를 할당해야하는데 IP 주소가 매우 부족하다.&lt;/li&gt;
&lt;li&gt;보안상의 이유 - 인터넷에서 들어오는 패킷이 그대로 중계되는데 어플리케이션에 보안 구멍이 있다면 어플리케이션은 무방비 상태가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;방화벽&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%ED%99%94%EB%B2%BD&quot; aria-label=&quot;방화벽 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방화벽&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보안 문제를 해결하기 위해서 방화벽을 두어 관문의 역할을 하도록 한다. (b)
&lt;ul&gt;
&lt;li&gt;특정 서버에서 동작하는 특정 어플리케이션에 액세스 하는 패킷만 통과시키고 나머지는 차단하도록 한다.&lt;/li&gt;
&lt;li&gt;외부 액세스가 허가되지 않은 어플리케이션에 대한 패킷은 차단이 되므로 도착하지 않는다.&lt;/li&gt;
&lt;li&gt;액세스가 허가된 어플리케이션에 보안구멍이 있을 수 있기 때문에 완전히 위험이 없어지지 않지만 공격받을 위험성이 훨씬 적다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139085989-322d8e49-e1e2-4b2d-a405-6b9f0b002f8c.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;h3 id=&quot;2-데이터센터에-웹-서버를-설치하는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%84%BC%ED%84%B0%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;2 데이터센터에 웹 서버를 설치하는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 데이터센터에 웹 서버를 설치하는 경우&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로바이더가 운영하는 서버를 빌려쓰는 형태로 운영하는 경우 (c)&lt;/li&gt;
&lt;li&gt;프로바이더 중심 부분 NOC나 상호 접속 부분 IX에 고속 회선으로 접속되어 있으므로 고속 액세스가 가능하다.&lt;/li&gt;
&lt;li&gt;데이터센터는 물리적으로 안전한 건물, 방화벽 설치 운영, 기기 가동 상태 감시, 부정 침입 감시 등등의 부가 서비스를 제공하며 안정성이 높다.&lt;/li&gt;
&lt;li&gt;이 경우 패킷은 인터넷 중심 부분에서 데이터센터로 흘러가 서버에 도착한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story2-방화벽의-원리와-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story2-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%98-%EC%9B%90%EB%A6%AC%EC%99%80-%EB%8F%99%EC%9E%91&quot; aria-label=&quot; story2 방화벽의 원리와 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story2] 방화벽의 원리와 동작&lt;/h2&gt;
&lt;h3 id=&quot;1-패킷-필터링형이-주류이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%ED%98%95%EC%9D%B4-%EC%A3%BC%EB%A5%98%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;1 패킷 필터링형이 주류이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 패킷 필터링형이 주류이다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;방화벽의 기본: 특정 서버와 해당 서버 안의 특정 어플리케이션에 액세스 하는 패킷만 통과하고 나머지는 차단
&lt;ul&gt;
&lt;li&gt;성능, 가격, 사용 편의성 등에 의해 패킷 필터링형 방화벽이 가장 많이 보급되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-패킷-필터링의-조건-설정-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%EC%9D%98-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;2 패킷 필터링의 조건 설정 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 패킷 필터링의 조건 설정 개념&lt;/h3&gt;
&lt;p&gt;패킷의 헤더에 들어있는 제어 정보를 통해 패킷 필터링 조건을 설정한다. 이 조건에 따라서 액세스가 허가되지 않으면 해당 패킷을 차단한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저 패킷의 흐름을 판단한다.
&lt;ul&gt;
&lt;li&gt;패킷 헤더의 수신처 IP와 송신처 IP 로 종점과 시작점을 판단할 수 있다. &lt;strong&gt;수신처가 해당 웹 서버의 IP 주소와 일치하는 경우에만 패킷을 통과&lt;/strong&gt;시킨다.&lt;/li&gt;
&lt;li&gt;패킷이 들어온 후 응답 패킷(ACK 등)을 다시 클라이언트에게 보내야 하기 때문에 웹 서버에서 인터넷으로 나가는 패킷 중 &lt;strong&gt;송신처 IP가 본 서버 IP인 경우 통과&lt;/strong&gt;시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-어플리케이션을-한정할-때-포트-번호를-사용한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%ED%95%9C%EC%A0%95%ED%95%A0-%EB%95%8C-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;3 어플리케이션을 한정할 때 포트 번호를 사용한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 어플리케이션을 한정할 때 포트 번호를 사용한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버에 보안에 취약한 다양한 어플리케이션이 있을 수 있다. 웹 어플리케이션에 대한 패킷만을 허용하고 나머지를 차단하는 방식으로 보안을 향상시킬 수 있다.&lt;/li&gt;
&lt;li&gt;TCP 헤더나 UDP 헤더의 포트 번호를 조건으로 추가하여 웹 서버를 지칭하는 80 포트만 통과되도록 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-컨트롤-비트로-접속-방향을-판단한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%BB%A8%ED%8A%B8%EB%A1%A4-%EB%B9%84%ED%8A%B8%EB%A1%9C-%EC%A0%91%EC%86%8D-%EB%B0%A9%ED%96%A5%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 컨트롤 비트로 접속 방향을 판단한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 컨트롤 비트로 접속 방향을 판단한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;문제 상황 - 웹 서버에 기생하며 다른 서버에 바이러스를 감염시키는 경우가 많기 때문에 웹 서버 → 인터넷으로 가는 패킷을 차단한다. 그렇지만 패킷은 양방향 프로토콜로 소통하기 때문에 한쪽이 차단되면 소통할 수 없어진다.
&lt;ul&gt;
&lt;li&gt;웹 서버에서 시작되는 통신을 금지해야하는데, 그렇다고 웹 서버에서 나가는 모든 패킷을 차단할 수 없다. 프로토콜 소통이 전혀 되지 않기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해결 방안 - 액세스 방향을 판단하여 패킷을 필터링 해야한다 → TCP 헤더의 컨트롤 비트로 판단할 수 있다.
&lt;ul&gt;
&lt;li&gt;TCP 접속 시 최초 패킷만 컨트롤 비트의 SYN → 1, ACK → 0 이다.&lt;/li&gt;
&lt;li&gt;웹 서버에서 인터넷으로 나가는 패킷 중 위와 같이 컨트롤 비트가 설정된 패킷을 차단하면 &lt;strong&gt;웹 서버에서 TCP 접속을 시작하여 인터넷으로 액세스하는 동작&lt;/strong&gt;을 차단할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이외에도 헤더의 여러 제어 정보들을 활용해서 패킷을 차단시키고 통과시킬 수 있다.&lt;/li&gt;
&lt;li&gt;통과시키는 것과 차단하는 것을 선별할 수 없는 경우도 있다.
&lt;ul&gt;
&lt;li&gt;DNS 서버에 대한 액세스와 같이 UDP를 사용하는 경우 접속 단계 동작이 없으므로 필터링 할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-사내-lan에서-공개-서버용-lan으로-조건을-설정한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%82%AC%EB%82%B4-lan%EC%97%90%EC%84%9C-%EA%B3%B5%EA%B0%9C-%EC%84%9C%EB%B2%84%EC%9A%A9-lan%EC%9C%BC%EB%A1%9C-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;5 사내 lan에서 공개 서버용 lan으로 조건을 설정한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 사내 LAN에서 공개 서버용 LAN으로 조건을 설정한다&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139086154-9532eae2-1f30-4e77-b831-b92408e59230.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위와 같은 구조에서는 &lt;strong&gt;공개 서버용 LAN과 사내 LAN 패킷 조건&lt;/strong&gt;, &lt;strong&gt;인터넷과 사내 LAN 패킷 조건&lt;/strong&gt;도 잘 설정해야한다.
&lt;ul&gt;
&lt;li&gt;잘못 설정하는 경우
&lt;ul&gt;
&lt;li&gt;사내 LAN과 공개 서버용 LAN의 패킷을 허용하기 위해 수신처 IP가 공개 서버용 LAN과 일치하면 모두 통과하고 송신처 IP 조건을 설정하지 않음&lt;/li&gt;
&lt;li&gt;인터넷에서 흘러온 패킷이 무조건 공개 서버용 LAN에 유입되어 서버가 위험해짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-밖에서-사내-lan으로-액세스할-수-없다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EB%B0%96%EC%97%90%EC%84%9C-%EC%82%AC%EB%82%B4-lan%EC%9C%BC%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;6 밖에서 사내 lan으로 액세스할 수 없다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 밖에서 사내 LAN으로 액세스할 수 없다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;패킷 필터링형 방화벽은 주소 변환 기능도 가지고 있다. 패킷 필터링과 마찬가지로 패킷의 시작점과 종착점을 판단하여 주소변환이 필요한 경우 주소 변환을 하고 아니면 하지 않는다.
&lt;ul&gt;
&lt;li&gt;주소 변환을 하지 않으면 액세스할 수 없다. 적절한 주소와 포트를 찾지 못하기 때문이다. 따라서 자연스럽게 인터넷에서 사내 LAN에 접근할 수 없는 구조가 된다. (따로 패킷 조건을 설정하지 않아도 된다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-방화벽을-통과한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%84-%ED%86%B5%EA%B3%BC%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;7 방화벽을 통과한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 방화벽을 통과한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;방화벽은 차단하는 패킷에 대한 기록을 남긴다.
&lt;ul&gt;
&lt;li&gt;부정 침입의 흔적이 남아 분석하여 정보로 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;통과 시킨 후에는 패킷을 라우터와 비슷하게 중계한다.&lt;/li&gt;
&lt;li&gt;패킷 필터링은 라우터의 패킷 중계 기능 중 부가기능으로 볼 수 있는데 그 조건 설정이 복잡해지면서 전용 하드웨어나 소프트웨어가 등장한 것이다. 간단한 패킷 필터링을 사용하면 라우터를 방화벽으로 사용할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8-방화벽으로-막을-수-없는-공격&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9C%BC%EB%A1%9C-%EB%A7%89%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B3%B5%EA%B2%A9&quot; aria-label=&quot;8 방화벽으로 막을 수 없는 공격 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 방화벽으로 막을 수 없는 공격&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특수한 데이터에 의해 서버를 공격하는 경우, 방화벽은 헤더의 정보만으로 필터링하기 때문에 차단할 수 없다.
&lt;ul&gt;
&lt;li&gt;이 경우 어플리케이션의 버그를 수정하거나 패킷의 내용을 조사하여 위험한 데이터를 차단하는 별도의 소프트웨어를 준비하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story3-복수-서버에-리퀘스트를-분배한-서버의-부하-분산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story3-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EC%97%90-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%B6%84%EB%B0%B0%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0&quot; aria-label=&quot; story3 복수 서버에 리퀘스트를 분배한 서버의 부하 분산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story3] 복수 서버에 리퀘스트를 분배한 서버의 부하 분산&lt;/h2&gt;
&lt;h3 id=&quot;1-처리-능력이-부족하면-복수-서버로-부하-분산된다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%B2%98%EB%A6%AC-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%EB%B6%80%EC%A1%B1%ED%95%98%EB%A9%B4-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;1 처리 능력이 부족하면 복수 서버로 부하 분산된다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 처리 능력이 부족하면 복수 서버로 부하 분산된다&lt;/h3&gt;
&lt;p&gt;회선이 아무리 빨라도 대량의 패킷이 들어오면 처리능력이 부족하다. 이때 복수의 서버를 이용하여 한대의 서버에 몰리는 처리량을 출이는 &lt;strong&gt;분산 처리&lt;/strong&gt;를 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 서버에 IP 주소를 같은 이름으로 여러개 등록하면 &lt;strong&gt;DNS 서버&lt;/strong&gt;는 조회 때마다 &lt;strong&gt;라운드 로빈&lt;/strong&gt;으로 IP를 응답하여 액세스를 균등하게 분산시킨다.
&lt;ul&gt;
&lt;li&gt;하지만 특정 IP 주소를 가진 서버가 고장나도 DNS 서버는 그대로 응답한다.&lt;/li&gt;
&lt;li&gt;또한 복수의 페이지가 하나의 로직을 수행할 수 있는데 매 요청마다 다른 서버가 응답하면 로직이 이어지지 않을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-부하-분산-장치를-이용해-복수의-웹-서버로-분할된다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0-%EC%9E%A5%EC%B9%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%B3%B5%EC%88%98%EC%9D%98-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%84%ED%95%A0%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;2 부하 분산 장치를 이용해 복수의 웹 서버로 분할된다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 부하 분산 장치를 이용해 복수의 웹 서버로 분할된다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;부하 분산 장치나 로드 밸런서를 활용한다.
&lt;ul&gt;
&lt;li&gt;DNS 서버에 로드 밸런서의 IP가 등록된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로드 밸런서에서 연결된 서버의 부하 상태를 확인(너무 많이 하면 부하 상태 확인이 부하가 될 수 있다) 하고 요청을 분배한다.&lt;/li&gt;
&lt;li&gt;대화가 복수의 페이지에 걸쳐있는 경우 이전 요청과 같은 서버로 요청을 보내도록한다.
&lt;ul&gt;
&lt;li&gt;HTTP는 stateless 하므로 전후 관계를 판단하기 어렵다.&lt;/li&gt;
&lt;li&gt;판단하기 위해서 웹 서버에서 정보를 유지해야하지만 그럼 웹 서버에 부담이 간다.&lt;/li&gt;
&lt;li&gt;현재는 HTTP 헤더 필드에 정보를 추가할 수 있도록 하거나 데이터가 전후 관계를 확인할 수 있는 정보를 부가하는 방법을 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[용어]

POP - Point of Presence 인터넷 사용자가 ISP를 만나는 지점

ISP - Internet Service Provider

방화벽 - 네트워크를 외부의 공격으로부터 지키기 위한 고안된 구조&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story1-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%84%A4%EC%B9%98-%EC%9E%A5%EC%86%8C&quot;&gt;🛺 [Story1] 웹 서버의 설치 장소&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%EC%82%AC%EB%82%B4%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot;&gt;1. 사내에 웹 서버를 설치하는 경우&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%A9%ED%99%94%EB%B2%BD&quot;&gt;방화벽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%84%BC%ED%84%B0%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot;&gt;2. 데이터센터에 웹 서버를 설치하는 경우&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story2-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%98-%EC%9B%90%EB%A6%AC%EC%99%80-%EB%8F%99%EC%9E%91&quot;&gt;🛺 [Story2] 방화벽의 원리와 동작&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%ED%98%95%EC%9D%B4-%EC%A3%BC%EB%A5%98%EC%9D%B4%EB%8B%A4&quot;&gt;1. 패킷 필터링형이 주류이다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%EC%9D%98-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EA%B0%9C%EB%85%90&quot;&gt;2. 패킷 필터링의 조건 설정 개념&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%ED%95%9C%EC%A0%95%ED%95%A0-%EB%95%8C-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4&quot;&gt;3. 어플리케이션을 한정할 때 포트 번호를 사용한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%BB%A8%ED%8A%B8%EB%A1%A4-%EB%B9%84%ED%8A%B8%EB%A1%9C-%EC%A0%91%EC%86%8D-%EB%B0%A9%ED%96%A5%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4&quot;&gt;4. 컨트롤 비트로 접속 방향을 판단한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%EC%82%AC%EB%82%B4-lan%EC%97%90%EC%84%9C-%EA%B3%B5%EA%B0%9C-%EC%84%9C%EB%B2%84%EC%9A%A9-lan%EC%9C%BC%EB%A1%9C-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4&quot;&gt;5. 사내 LAN에서 공개 서버용 LAN으로 조건을 설정한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%EB%B0%96%EC%97%90%EC%84%9C-%EC%82%AC%EB%82%B4-lan%EC%9C%BC%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot;&gt;6. 밖에서 사내 LAN으로 액세스할 수 없다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%84-%ED%86%B5%EA%B3%BC%ED%95%9C%EB%8B%A4&quot;&gt;7. 방화벽을 통과한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9C%BC%EB%A1%9C-%EB%A7%89%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B3%B5%EA%B2%A9&quot;&gt;8. 방화벽으로 막을 수 없는 공격&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story3-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EC%97%90-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%B6%84%EB%B0%B0%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0&quot;&gt;🛺 [Story3] 복수 서버에 리퀘스트를 분배한 서버의 부하 분산&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%B2%98%EB%A6%AC-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%EB%B6%80%EC%A1%B1%ED%95%98%EB%A9%B4-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0%EB%90%9C%EB%8B%A4&quot;&gt;1. 처리 능력이 부족하면 복수 서버로 부하 분산된다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0-%EC%9E%A5%EC%B9%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%B3%B5%EC%88%98%EC%9D%98-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%84%ED%95%A0%EB%90%9C%EB%8B%A4&quot;&gt;2. 부하 분산 장치를 이용해 복수의 웹 서버로 분할된다&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_6]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH3. 케이블의 앞은 LAN 기기였다_허브와 스위치, 라우터의 탐험입니다 🙌 🛺 [Story3] 라우터의 패킷 중계 동작…]]></description><link>https://yjksw.github.io/one-percent-network-6/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-6/</guid><pubDate>Sat, 02 Oct 2021 21:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH3. 케이블의 앞은 LAN 기기였다_허브와 스위치, 라우터의 탐험입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story3-라우터의-패킷-중계-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story3-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%A4%91%EA%B3%84-%EB%8F%99%EC%9E%91&quot; aria-label=&quot; story3 라우터의 패킷 중계 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story3] 라우터의 패킷 중계 동작&lt;/h2&gt;
&lt;h3 id=&quot;1-라우터의-기본&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot; aria-label=&quot;1 라우터의 기본 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 라우터의 기본&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;라우터의 동작은 스위치 허브와 비슷하지만 IP와 이더넷의 차이로 인한 세부 동작의 차이점이 있다.&lt;/li&gt;
&lt;li&gt;라우터는 크게 1) 중계 부분과 2) 포트 부분으로 나뉘어져 있다.
&lt;ul&gt;
&lt;li&gt;중계 부분은 다음 중계 대상을 판단하고&lt;/li&gt;
&lt;li&gt;포트 부분은 송수신 동작을 담당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;라우터의 포트 부분은 이더넷이나 무선 LAN 외에도 ADSL, FTTH 등의 통신 기술을 지원한다.&lt;/li&gt;
&lt;li&gt;라우터의 내부 구조
&lt;ul&gt;
&lt;li&gt;포트 부분에서 패킷을 수신하며 포트 부분의 통신 기술 규칙에 따라서 수신한다. (포트 부분의 하드웨어 부분이 패킷을 수신하는 것)&lt;/li&gt;
&lt;li&gt;중계 부분에서 받은 패킷의 수신처 IP주소와 중계 대상을 동록한 표를 대조하여 중계 대상을 판단한다.&lt;/li&gt;
&lt;li&gt;해당 포트로 옮기고 포트의 하드웨어에 따라서 패킷 송신 동작을 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;라우터의 포트는 IP 주소가 할당되어 있으며 자신이 송신처나 수신처가 된다 (스위칭 허브와의 차이점)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;또한 통신기술이 이더넷인 경우 라우터의 포트에는 MAC 주소가 할당되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-경로표에-등록된-정보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B2%BD%EB%A1%9C%ED%91%9C%EC%97%90-%EB%93%B1%EB%A1%9D%EB%90%9C-%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;2 경로표에 등록된 정보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 경로표에 등록된 정보&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스위칭 허브는 MAC 주소로 중계 대상을 판단하지만 라우터는 IP 주소로 중계 대상을 판단한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중계 대상을 판단하는 표를 라우팅 테이블 혹은 경로표라고 부른다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139085117-fe1d81dc-292d-486e-88d4-4129ddc9702d.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수신처의 정보에는 서브넷의 주소인 네트워크 번호만 있고 호스트는 모두 0이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;따라서 들어온 패킷의 수신처 IP 주소에서 네트워크 번호 부분(호스트 번호 제외)이 같은지 조사하고 중계한다.&lt;/li&gt;
&lt;li&gt;네트워크 번호를 판단하기 위해 넷마스크 정보도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;심화 내용: 수신처에 서브넷에 할당되 넷마스크 값과 경로표에 등록된 넷마스크의 값이 다를수도 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;주소 집약&lt;/strong&gt;: 몇 개의 서브넷을 모아서 한개의 서브넷으로 간주하여 묶은 서브넷을 경로표에 등록할 수 있다.
&lt;ul&gt;
&lt;li&gt;예를 들어서 다음 3개의 서브넷이 라우터 B에서 패킷을 보낼 때 무조건 라우터 A에서 패킷을 중계하게 된다면 3개의 서브넷을 통합한 서브넷이 있다고 간주하고 경로표에 등록한다.&lt;/li&gt;
&lt;li&gt;10.10.1.0/24, 10.10.2.0/24, 10.10.3.0/24 3개를 모두 라우터 A에서 중계할 때 &lt;code class=&quot;language-text&quot;&gt;10.10.0.0/16&lt;/code&gt; 으로 넷 마스크를 변경하여 경로표에 하나로 등록할 수 있다. (위 넷마스크로 변경하며 앞 16비트를 네트워크 번호로 보게 되기 때문)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;한 개의 서브넷을 세분화 할 수도 있다. 또는 수신처 네트워크 번호가 실제 네트워크 번호와 다를수도 있다.&lt;/li&gt;
&lt;li&gt;넷마스크 값을 모두 1로 만들어서 호스트 번호인 개별 컴퓨터를 라우팅 테이블에 등록할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수신처와 넷마스크로 경로표에서 적절한 행을 찾으면 &lt;code class=&quot;language-text&quot;&gt;인터페이스 항목&lt;/code&gt;에 들어있는 포트에서 &lt;code class=&quot;language-text&quot;&gt;게이트웨이 IP 주소&lt;/code&gt;로 패킷을 중계한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;메트릭&lt;/code&gt;은 수신처 IP 주소의 목적지가 가까운지 먼지 나타낸다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;숫자가 작으면 목적지가 가까운 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라우터는 스위치 허브와 달리 중계하는 동작과 경로표에 정보를 등록하는 동작이 분리되어 있어 중계할 때 경로표를 수정 갱신하지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경로표 등록 방법&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사람이 수동으로 등록/갱신&lt;/li&gt;
&lt;li&gt;라우팅 프로토콜 구조를 사용하여 라우터들기리 경로 정보를 교환하고 라우터가 스스로 경로표에 등록
&lt;ul&gt;
&lt;li&gt;RIP, OSPF, BGP 등등의 라우팅 프로토콜 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-라우터의-패킷-수신-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;3 라우터의 패킷 수신 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 라우터의 패킷 수신 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PHY(MAU)와 MAC 회로에서 신호 → 디지털로 변환&lt;/li&gt;
&lt;li&gt;FCS로 오류 유무 점검 후 정상이면 MAC 헤더의 수신처 MAC주소로 자신에게 해당하는지 확인 (아닐경우 폐기)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-경로표를-검색하여-출력-포트를-발견한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EA%B2%BD%EB%A1%9C%ED%91%9C%EB%A5%BC-%EA%B2%80%EC%83%89%ED%95%98%EC%97%AC-%EC%B6%9C%EB%A0%A5-%ED%8F%AC%ED%8A%B8%EB%A5%BC-%EB%B0%9C%EA%B2%AC%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 경로표를 검색하여 출력 포트를 발견한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 경로표를 검색하여 출력 포트를 발견한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MAC 주소 확인후 MAC 헤더 폐기&lt;/li&gt;
&lt;li&gt;IP 헤더를 통해서 중계 동작을 실행
&lt;ul&gt;
&lt;li&gt;경로표에서 중계 대상을 조사 → 수신처 네트워크 번호와 넷마스크를 활용하여 조사한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;경로표에서 복수의 행이 할당될 경우
&lt;ul&gt;
&lt;li&gt;네트워크 번호의 비트수가 가장 긴 것을 찾는다.
&lt;ul&gt;
&lt;li&gt;네트워크 번호 비트수가 길면 호스트 번호가 짧으므로 호스트 번호로 할당될 번호가 작아 서브넷이 작다는 뜻이기 때문이다. (더 축소된 범위를 항상 찾는다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네트워크 번호의 길이가 같다면
&lt;ul&gt;
&lt;li&gt;메트릭 값이 작아 가까운 곳을 중계 대상으로 선택한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하나의 행도 해당되지 않는 경우
&lt;ul&gt;
&lt;li&gt;패킷을 폐기하고 ICMP 메세지로 송신처에 오류를 통지한다.&lt;/li&gt;
&lt;li&gt;스위칭 허브의 경우 해당되지 않으면 모든 포트에 패킷을 뿌린다. (크지 않은 네트워크를 가정하여 만든 것이기 때문이다.) 하지만 라우터의 네트워크 규모(인터넷)는 매우 크기 때문에 모든 포트에 뿌리는 것은 큰 규모로 네트워크가 혼잡해지기 때문에 패킷을 폐기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-해당하는-경로가-없는-경우에-선택하는-기본-경로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%95%B4%EB%8B%B9%ED%95%98%EB%8A%94-%EA%B2%BD%EB%A1%9C%EA%B0%80-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%97%90-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EA%B8%B0%EB%B3%B8-%EA%B2%BD%EB%A1%9C&quot; aria-label=&quot;5 해당하는 경로가 없는 경우에 선택하는 기본 경로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 해당하는 경로가 없는 경우에 선택하는 기본 경로&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;그렇다고 중계 대상을 모두 등록하는 것은 어려운 일이다. 따라서 기본 경로를 말하는 넷마스크가 &lt;code class=&quot;language-text&quot;&gt;0.0.0.0&lt;/code&gt;인 경로를 등록한다. (네트워크 번호가 0이므로 비교하지 않아도 되는 경우이다)&lt;/li&gt;
&lt;li&gt;해당 경로의 게이트웨이 항목에 인터넷으로 나가는 라우터를 등록한다 → &lt;strong&gt;기본 경로&lt;/strong&gt;, &lt;strong&gt;기본 게이트웨이&lt;/strong&gt;라고 말한다.&lt;/li&gt;
&lt;li&gt;이렇게 넷마스크를 여러 방면으로 활용하여 서브넷의 네트워크 주소와 서버의 IP 주소를 모두 경로표에 섞어서 등록할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-패킷은-유효-기한이-있다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%ED%8C%A8%ED%82%B7%EC%9D%80-%EC%9C%A0%ED%9A%A8-%EA%B8%B0%ED%95%9C%EC%9D%B4-%EC%9E%88%EB%8B%A4&quot; aria-label=&quot;6 패킷은 유효 기한이 있다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 패킷은 유효 기한이 있다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;라우터는 중계 대상을 찾아내고 포트에서 송신하기 전에 IP헤더 필드의 TTL(Time To Live) 필드를 갱신해야한다.&lt;/li&gt;
&lt;li&gt;라우터를 경유할 때마다 위 필드 값을 1씩 감소시키고 0이 되면 유효 기한이 만료된 것으로 패킷을 폐기한다.&lt;/li&gt;
&lt;li&gt;패킷이 무한루프 도는 것을 방지하기 위함이다.&lt;/li&gt;
&lt;li&gt;위 값은 64 혹은 128로 설정하고 0이 되면 폐기한다 → 지구 전체를 경유해도 라우터의 갯수는 많아야 수십개이기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-큰-패킷은-조각-나누기-기능으로-분할한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%ED%81%B0-%ED%8C%A8%ED%82%B7%EC%9D%80-%EC%A1%B0%EA%B0%81-%EB%82%98%EB%88%84%EA%B8%B0-%EA%B8%B0%EB%8A%A5%EC%9C%BC%EB%A1%9C-%EB%B6%84%ED%95%A0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;7 큰 패킷은 조각 나누기 기능으로 분할한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 큰 패킷은 조각 나누기 기능으로 분할한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;라우터의 포트 부분은 이더넷 뿐 아니라 다른 LAN이나 통신 회선일 수 있는데 그러면 패킷의 최대 길이가 작거나 여분의 헤더를 추가하면서 가능한 패킷의 길이가 짧아질 수 있다.
&lt;ul&gt;
&lt;li&gt;즉, 입력 패킷의 최대길이와 출력 포트의 최대 길이가 다른 경우가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 경우 IP 프로토콜에서 fragmentation으로 패킷을 분할해 짧은 길이로 만들어서 중계한다. (패킷이 모두 만들어진 이후에 분할을 하는 것이다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;라우터의-fragmentation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-fragmentation&quot; aria-label=&quot;라우터의 fragmentation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라우터의 Fragmentation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;출력측 MTU를 조사해서 그대로 중계할 수 있다면 바로 송신한다.&lt;/li&gt;
&lt;li&gt;아닌 경우 IP 헤더의 필드를 조사해서 분할해도 되는지 확인한다.
&lt;ul&gt;
&lt;li&gt;만일 분할 불가라면 패킷을 폐기하고 ICMP를 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;분할 한다면 TCP헤더부터 분할을 한다 (출력 MTU에 맞춘다) → IP 입장에서는 TCP 헤더도 데이터의 일부이다.&lt;/li&gt;
&lt;li&gt;분할한 패킷에 IP 헤더를 추가하고 분할 핵심 정보를 IP 헤더에 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8-라우터의-송신-동작은-컴퓨터와-같다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EC%86%A1%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%80-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%99%80-%EA%B0%99%EB%8B%A4&quot; aria-label=&quot;8 라우터의 송신 동작은 컴퓨터와 같다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 라우터의 송신 동작은 컴퓨터와 같다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;출력 포트에 따라서 송신 동작을 수행한다.&lt;/li&gt;
&lt;li&gt;이더넷인 경우 패킷 앞에 MAC 헤더를 추가하고, 값을 설정하여 패킷을 완성시켜 전기 신호로 변환한다.
&lt;ul&gt;
&lt;li&gt;수신처 MAC 주소 입력
&lt;ul&gt;
&lt;li&gt;게이트웨이 항목이 있다면 해당 IP 주소가 다음 목적 주소이다. 없다면 최종 수신처인 IP 헤더의 IP 주소가 다음 목적 주소이다.&lt;/li&gt;
&lt;li&gt;IP 주소가 정해지면 ARP로 MAC주소를 조사하고 결과를 수신처 MAC주소로 설정한다.&lt;/li&gt;
&lt;li&gt;라우터도 ARP 캐시가 있으므로 캐시를 먼저 확인하고 없다면 ARP로 조회한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;송신처 MAC 주소 입력
&lt;ul&gt;
&lt;li&gt;출력 포트의 MAC 주소를 입력하고 타입 필드에 0800을 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전기 신호로 변환할 때 전이중 반이중 모드에 따라서 신호를 송신한다.&lt;/li&gt;
&lt;li&gt;출력 포트가 이더넷이라면 송신 패킷은 스위칭 허브를 경유하여 다음 라우터에 도착한다. 이렇게 반복하여 최종 목적지에 도착한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9-라우터와-스위칭-허브의-관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%99%80-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EC%9D%98-%EA%B4%80%EA%B3%84&quot; aria-label=&quot;9 라우터와 스위칭 허브의 관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 라우터와 스위칭 허브의 관계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IP 구조는 스스로 패킷은 운반하는 수단이 없으므로 패킷을 이더넷에 의뢰하여 운반한다.&lt;/li&gt;
&lt;li&gt;따라서 라우터는 스위칭 허브에 패킷을 운반하는 일을 의뢰하는 것이다.&lt;/li&gt;
&lt;li&gt;패킷은 바로 다음 라우터 목적지까지만 스위칭 허브에 의뢰하여 운반되고 이것이 반복되어 최종 수신처에 전달되는 것이다.&lt;/li&gt;
&lt;li&gt;이더넷 외의 무선 LAN, 통신 회선도 같은 역할이다.&lt;/li&gt;
&lt;li&gt;IP 는 이렇게 다양한 통신 기술에 의뢰하여 패킷 운반을 의뢰할 수 있고 따라서 인터넷이라는 거대한 네트워크 구성이 가능한 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story4-라우터의-부가-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story4-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EB%B6%80%EA%B0%80-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot; story4 라우터의 부가 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story4] 라우터의 부가 기능&lt;/h2&gt;
&lt;h3 id=&quot;1-주소-변환으로-ip-주소를-효율적으로-이용한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98%EC%9C%BC%EB%A1%9C-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EC%9A%A9%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 주소 변환으로 ip 주소를 효율적으로 이용한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 주소 변환으로 IP 주소를 효율적으로 이용한다&lt;/h3&gt;
&lt;h4 id=&quot;주소-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98&quot; aria-label=&quot;주소 변환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주소 변환&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;등장 배경
&lt;ul&gt;
&lt;li&gt;주소는 고유해야하는데 각각에 고유한 주소를 부여하면 고갈되게 되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해결 방법
&lt;ul&gt;
&lt;li&gt;독립된 네트워크끼리는 중복된 주소를 사용해도 문제가 안된다는 원리를 이용하여 사내 기기에는 다른 회사와 중복된 주소를 사용할 수 있도록 했다.&lt;/li&gt;
&lt;li&gt;사내용 주소를 private 주소, 외부에서 사용되는 고유한 주소를 global 주소로 부른다.&lt;/li&gt;
&lt;li&gt;private 주소는 아래 범위에 한정된다.
&lt;ul&gt;
&lt;li&gt;10.0.0.0 ~ 10.255.255.255&lt;/li&gt;
&lt;li&gt;172.16.0.0 ~ 172.31.255.255&lt;/li&gt;
&lt;li&gt;192.168.0.0 ~ 192.168.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사내 네트워크가 인터넷과 왕래할 때는 공개용 서버에 글로벌 주소를 할당하고 인터넷과 통신하도록 한다. 사내 네트워크는 인터넷과 직접 통신하지 않도록 한다 ⇒ &lt;strong&gt;주소 변환&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;주소 변환 기본 동작
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;패킷을 중계할 때 IP 헤더에 기재된 IP 주소와 포트 번호를 바꿔쓴다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 접속 동작에서 최초로 흐르는 패킷을 인터넷에 중계할 때 송신처 IP주소를 private 주소에서 global 주소로 변환 + 포트 번호 바꾸고 해당 private 주소, 포트와 global 주소 및 포트를 주소 변환 장치의 대응표에 기록한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 global 주소는 주소 변환 장치(라우터나 방화벽)의 인터넷 측에 있는 포트에 할당된 주소이다.&lt;/li&gt;
&lt;li&gt;포트번호는 미사용 번호를 적절하게 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;회신 패킷이 돌아올 때 기재되어 있는 global 주소와 포트 번호를 주소 변환 장치에서 private 주소와 기존 포트로 바꾸어 사내 네트워크에 패킷을 보낸다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global 주소는 주소 변환 장치에 할당된 주소이므로 해당 장치에 패킷이 도착하게 되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이후 패킷도 대응표에 적힌대로 변환하여 중게된다. 접속 동작이 끝나면 대응표에 정보는 삭제된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터넷에서 보면 주소변환장치가 통신 상대로 되어 있는 것이다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139085223-8af51747-2b3b-45e2-bf75-54dece4f43af.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-포트-번호를-바꿔쓰는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8%EB%A5%BC-%EB%B0%94%EA%BF%94%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;3 포트 번호를 바꿔쓰는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 포트 번호를 바꿔쓰는 이유&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;포트 번호를 바꿔쓰지 않으면 Private 주소와 global 주소가 1 대 1로 대응해서 필요하다.
&lt;ul&gt;
&lt;li&gt;접속 후 삭제하므로 동시접속 대수만큼 필요하지만 여전히 효율적이지 못하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-인터넷에서-회사로-액세스한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%97%90%EC%84%9C-%ED%9A%8C%EC%82%AC%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 인터넷에서 회사로 액세스한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 인터넷에서 회사로 액세스한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인터넷에서 사내로 액세스 할 때는 대응표가 없다면 해당 global 주소에 대응되는 private 주소를 알 수 없다.
&lt;ul&gt;
&lt;li&gt;사내에서 먼저 인터넷으로 액세스 하지 않으면 연결할 수 없기 때문에 부정친입을 방지하는 효과가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터넷에서 회사로 액세스 하고 싶다면 사전에 대응표에 수동으로 기록해두면 된다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 경우 사내의 private 주소를 할당한 서버를 공개할 수도 있다. → 이 때는 이 global 주소를 dns 서버에 등록한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/139085346-e9aad2d9-9b01-4db1-8104-fe27e4f3198f.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-라우터의-패킷-필터링-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;5 라우터의 패킷 필터링 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 라우터의 패킷 필터링 기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;패킷을 중계할 때 MAC 헤더, IP 헤더, TCP 헤더에 기록된 내용을 조사해서 사전에 설정한 조건에 합하면 중계하거나 폐기한다.
&lt;ul&gt;
&lt;li&gt;방화벽이나 소프트웨어는 이 원리로 부정친입을 방지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;원리는 간단하나 조건 설정은 어렵다.
&lt;ul&gt;
&lt;li&gt;만일 인터넷으로 들어오는 패킷을 모두 차단하면 양방향으로 주고받아야 TCP 접속 동작 등이 가능하기 때문에 사내에서 인터넷으로 흐르는 동작도 할 수 없게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[용어]

ICMP -  ****Internet Control Message Protocol 패킷을 운반할 때 발생하는 오류를 통지하거나 제어용 메세지를 보내는 프로토콜

PPPoE - PPP over Ethernet, ADSL, FTTH 광대역 회선을 제어하는 방식 중 하나&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story3-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%A4%91%EA%B3%84-%EB%8F%99%EC%9E%91&quot;&gt;🛺 [Story3] 라우터의 패킷 중계 동작&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot;&gt;1. 라우터의 기본&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%EA%B2%BD%EB%A1%9C%ED%91%9C%EC%97%90-%EB%93%B1%EB%A1%9D%EB%90%9C-%EC%A0%95%EB%B3%B4&quot;&gt;2. 경로표에 등록된 정보&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91&quot;&gt;3. 라우터의 패킷 수신 동작&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-%EA%B2%BD%EB%A1%9C%ED%91%9C%EB%A5%BC-%EA%B2%80%EC%83%89%ED%95%98%EC%97%AC-%EC%B6%9C%EB%A0%A5-%ED%8F%AC%ED%8A%B8%EB%A5%BC-%EB%B0%9C%EA%B2%AC%ED%95%9C%EB%8B%A4&quot;&gt;4. 경로표를 검색하여 출력 포트를 발견한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#5-%ED%95%B4%EB%8B%B9%ED%95%98%EB%8A%94-%EA%B2%BD%EB%A1%9C%EA%B0%80-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%97%90-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EA%B8%B0%EB%B3%B8-%EA%B2%BD%EB%A1%9C&quot;&gt;5. 해당하는 경로가 없는 경우에 선택하는 기본 경로&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#6-%ED%8C%A8%ED%82%B7%EC%9D%80-%EC%9C%A0%ED%9A%A8-%EA%B8%B0%ED%95%9C%EC%9D%B4-%EC%9E%88%EB%8B%A4&quot;&gt;6. 패킷은 유효 기한이 있다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#7-%ED%81%B0-%ED%8C%A8%ED%82%B7%EC%9D%80-%EC%A1%B0%EA%B0%81-%EB%82%98%EB%88%84%EA%B8%B0-%EA%B8%B0%EB%8A%A5%EC%9C%BC%EB%A1%9C-%EB%B6%84%ED%95%A0%ED%95%9C%EB%8B%A4&quot;&gt;7. 큰 패킷은 조각 나누기 기능으로 분할한다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-fragmentation&quot;&gt;라우터의 Fragmentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#8-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EC%86%A1%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%80-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%99%80-%EA%B0%99%EB%8B%A4&quot;&gt;8. 라우터의 송신 동작은 컴퓨터와 같다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#9-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%99%80-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EC%9D%98-%EA%B4%80%EA%B3%84&quot;&gt;9. 라우터와 스위칭 허브의 관계&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story4-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EB%B6%80%EA%B0%80-%EA%B8%B0%EB%8A%A5&quot;&gt;🛺 [Story4] 라우터의 부가 기능&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98%EC%9C%BC%EB%A1%9C-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EC%9A%A9%ED%95%9C%EB%8B%A4&quot;&gt;1. 주소 변환으로 IP 주소를 효율적으로 이용한다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98&quot;&gt;주소 변환&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8%EB%A5%BC-%EB%B0%94%EA%BF%94%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;3. 포트 번호를 바꿔쓰는 이유&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%97%90%EC%84%9C-%ED%9A%8C%EC%82%AC%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4%ED%95%9C%EB%8B%A4&quot;&gt;4. 인터넷에서 회사로 액세스한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#5-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81-%EA%B8%B0%EB%8A%A5&quot;&gt;5. 라우터의 패킷 필터링 기능&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_5]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH3. 케이블의 앞은 LAN 기기였다_허브와 스위치, 라우터의 탐험입니다 🙌 🛺 [Story1] 케이블과 리피터, 허브 속을 신호가 흘러간다…]]></description><link>https://yjksw.github.io/one-percent-network-5/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-5/</guid><pubDate>Fri, 01 Oct 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH3. 케이블의 앞은 LAN 기기였다_허브와 스위치, 라우터의 탐험입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story1-케이블과-리피터-허브-속을-신호가-흘러간다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story1-%EC%BC%80%EC%9D%B4%EB%B8%94%EA%B3%BC-%EB%A6%AC%ED%94%BC%ED%84%B0-%ED%97%88%EB%B8%8C-%EC%86%8D%EC%9D%84-%EC%8B%A0%ED%98%B8%EA%B0%80-%ED%9D%98%EB%9F%AC%EA%B0%84%EB%8B%A4&quot; aria-label=&quot; story1 케이블과 리피터 허브 속을 신호가 흘러간다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story1] 케이블과 리피터, 허브 속을 신호가 흘러간다&lt;/h2&gt;
&lt;h3 id=&quot;1-패킷-하나하나가-독립적으로-동작한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%8C%A8%ED%82%B7-%ED%95%98%EB%82%98%ED%95%98%EB%82%98%EA%B0%80-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 패킷 하나하나가 독립적으로 동작한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 패킷 하나하나가 독립적으로 동작한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;케이블로 흘러간 패킷은 중계 장치를 경유해서 목적지에 도착한다.&lt;/li&gt;
&lt;li&gt;중계 장치는 데이터의 내용을 보지 않고 헤더에 적힌 정보만 보고 중계한다.&lt;/li&gt;
&lt;li&gt;기본적인 흐름은 LAN 어댑터 → 리피터 허브 → 스위칭 허브 → 라우터를 경유해서 인터넷으로 나가는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-lan-케이블은-신호를-약화시키지-않는-것이-핵심이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-lan-%EC%BC%80%EC%9D%B4%EB%B8%94%EC%9D%80-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EC%95%BD%ED%99%94%EC%8B%9C%ED%82%A4%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EC%9D%B4-%ED%95%B5%EC%8B%AC%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;2 lan 케이블은 신호를 약화시키지 않는 것이 핵심이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. LAN 케이블은 신호를 약화시키지 않는 것이 핵심이다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LAN 어댑터의 PHY(MAU)회로에서 신호가 나가 케이블에 흘러 리피터 허브의 커넥터 부분에 도착한다.&lt;/li&gt;
&lt;li&gt;이때 케이블을 이동하고 그 길이가 길어지면서 신호가 약해져서 변형된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-꼼은-잡음을-방지하기-위한-방법이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EA%BC%BC%EC%9D%80-%EC%9E%A1%EC%9D%8C%EC%9D%84-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;3 꼼은 잡음을 방지하기 위한 방법이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 꼼은 잡음을 방지하기 위한 방법이다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;선을 꼬게 되면서 전자파에 의한 잡음을 상쇄한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-리피터-허브는-연결되어-있는-전체-케이블에-신호를-송신한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%A6%AC%ED%94%BC%ED%84%B0-%ED%97%88%EB%B8%8C%EB%8A%94-%EC%97%B0%EA%B2%B0%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%EC%A0%84%EC%B2%B4-%EC%BC%80%EC%9D%B4%EB%B8%94%EC%97%90-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EC%86%A1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 리피터 허브는 연결되어 있는 전체 케이블에 신호를 송신한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 리피터 허브는 연결되어 있는 전체 케이블에 신호를 송신한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;신호가 리피터 허브에 도착하면 LAN 전체에 신호가 흩어진다.&lt;/li&gt;
&lt;li&gt;신호를 수신한 기기는 맨 앞의 MAC 헤더에 쓰인 수신처 MAC 주소를 확인하고 자신이 아니면 무시한다.&lt;/li&gt;
&lt;li&gt;이 다음 스위칭 허브, 라우터, 서버 등에 도착해서 디지털 데이터로 변환되고, FCS를 검사하는 곳에서 오류가 나면 패킷을 폐기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story2-스위칭-허브의-패킷-중계-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story2-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%A4%91%EA%B3%84-%EB%8F%99%EC%9E%91&quot; aria-label=&quot; story2 스위칭 허브의 패킷 중계 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story2] 스위칭 허브의 패킷 중계 동작&lt;/h2&gt;
&lt;h3 id=&quot;1-스위칭-허브는-주소-테이블로-중계한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EB%8A%94-%EC%A3%BC%EC%86%8C-%ED%85%8C%EC%9D%B4%EB%B8%94%EB%A1%9C-%EC%A4%91%EA%B3%84%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;1 스위칭 허브는 주소 테이블로 중계한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 스위칭 허브는 주소 테이블로 중계한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;트위스트 페어 케이블에서 흘러온 전기 신호가 PHY(MAU)회로를 거쳐 MAC 회로로 들어온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MAC 회로에서 디지털 데이터(0101로 이루어진 데이터)로 변환되고 FCS를 대조하여 오류 유무를 검사하여 문제가 없다면 메모리 버퍼에 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스위치 허브의 안쪽에는 &lt;strong&gt;포트&lt;/strong&gt;가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 호스트에 각각의 LAN 어댑터가 있는 것과 같이 여러개의 포트가 존재한다.&lt;/li&gt;
&lt;li&gt;하지만 LAN 어댑터와는 달리 여기에는 각각 부여된 MAC 주소는 없다. 자기에게 할당된 패킷을 걸러서 받는 것이 아니라 모든 패킷을 수신하기 때문에 자신에게 부여된 MAC 주소가 필요 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 버퍼에 저장한 후 &lt;strong&gt;MAC 주소표&lt;/strong&gt;에 수신한 패킷의 &lt;strong&gt;수신처 MAC 주소&lt;/strong&gt;와 일치하는 정보가 있는지 확인한다. 이 표에는 MAC주소와 포트가 짝지어져 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;존재한다면 해당 포트 번호로 패킷을 보낸다. 해당 포트가 송신처 포트 번호가 된다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543967-e04b241e-dca0-4e5f-ac00-1bce0e4448b4.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스위치 회로는 격자 모양의 배치로 교점에 스위치가 있어 개폐를 제어할 수 있기 때문에 복수의 신호를 동시에 흘릴 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제로 패킷을 송신하는 PHY(MAU) 회로에서 케이블로 신호가 흘러가는데 이때는 이더넷의 규칙에 따라 아무도 송신하고 있지 않는 것을 확인하고 디지털 데이터를 신호로 변환하여 송신한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LAN 어댑터와 마찬가지로 동시에 수신을 하게 되면 재밍 신호를 보낸 후 기다렸다가 재송신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-mac-주소-테이블을-등록-및-갱신한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-mac-%EC%A3%BC%EC%86%8C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EA%B0%B1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 mac 주소 테이블을 등록 및 갱신한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. MAC 주소 테이블을 등록 및 갱신한다&lt;/h3&gt;
&lt;p&gt;이 때 스위칭 허브는 MAC 주소표의 내용을 갱신해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패킷을 수신했을 때 송신처 MAC 주소를 조사하여 수신한 입력 포트와 함께 주소표에 등록한다.
&lt;ul&gt;
&lt;li&gt;따라서 한번이라도 패킷을 송신하면 MAC 주소가 주소표에 등록된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;일정 시간이 지나면 오래된 MAC 주소 정보는 삭제한다. (더이상 유효하지 않을 수 있기 때문이다)&lt;/li&gt;
&lt;li&gt;잘못된 주소로 인해 패킷 통신 동작에 오류가 생기면 스위칭 허브를 리셋하여 MAC 주소를 초기화시키고 다시 주소가 등록되도록 하면 된다.&lt;/li&gt;
&lt;li&gt;스위칭 허브 자체가 알아서 MAC 주소를 등록하므로 수동으로 갱신 및 등록 할 필요가 없다.
&lt;ul&gt;
&lt;li&gt;스스로 등록, 삭제, 리셋을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-예외적인-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%98%88%EC%99%B8%EC%A0%81%EC%9D%B8-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;3 예외적인 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 예외적인 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;스위칭 허브에 리피터 허브가 접속되어 있는 경우 패킷이 수신된 포트와 송신할 포트가 같을 수 있다.
&lt;ul&gt;
&lt;li&gt;상황1 - A 에서 B로 패킷을 보낸다.&lt;/li&gt;
&lt;li&gt;상황2 - 리피터 허브에 A, B, 스위치 허브가 연결되어 있다.&lt;/li&gt;
&lt;li&gt;문제 - 리피터 허브에서 전체 중계할 때 B, 스위치 허브에 모두 패킷이 간다. 이때 B 에게 패킷이 도착한다. 하지만 스위치 허브에서도 패킷을 받아서 중계하기 때문에 중복된 패킷이 B에게 도착한다.&lt;/li&gt;
&lt;li&gt;위 문제를 방지하기 위해 스위칭 허브는 수신한 포트와 송신하는 포트가 같을 경우 패킷을 중계하지 않고 폐기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;최초이거나 삭제된 이후라서 MAC 주소표에 MAC 주소가 등록되어 있지 않은 경우가 있다.
&lt;ul&gt;
&lt;li&gt;패킷을 수신한 포트를 제외한 모든 포트에서 패킷을 송신한다. (이 중 하나는 올바른 포트 이므로 패킷이 잘 송신된다)&lt;/li&gt;
&lt;li&gt;잘 송신한 이후 응답이 오면 해당 MAC 주소가 주소표에 등록이 되므로 그 다음 부터는 전체에게 보내지 않아도 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수신처 MAC 주소가 브로드캐스트 주소인 경우 수신 포트를 제외하고 모든 포트에서 패킷을 송신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-전이중-모드에서-송신과-수신을-동시에-실행한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%A0%84%EC%9D%B4%EC%A4%91-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%EC%86%A1%EC%8B%A0%EA%B3%BC-%EC%88%98%EC%8B%A0%EC%9D%84-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%8B%A4%ED%96%89%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 전이중 모드에서 송신과 수신을 동시에 실행한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 전이중 모드에서 송신과 수신을 동시에 실행한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;스위칭 허브는 송신과 수신을 동시에 실행할 수 있는 &lt;strong&gt;전이중 모드&lt;/strong&gt;다.&lt;/li&gt;
&lt;li&gt;스위칭 허브의 포트, PHY(MAU), MAC 회로 내부가 모두 송신과 수신이 나뉘어져 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-최적의-전송-속도로-보내는-자동-조정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%B5%9C%EC%A0%81%EC%9D%98-%EC%A0%84%EC%86%A1-%EC%86%8D%EB%8F%84%EB%A1%9C-%EB%B3%B4%EB%82%B4%EB%8A%94-%EC%9E%90%EB%8F%99-%EC%A1%B0%EC%A0%95&quot; aria-label=&quot;5 최적의 전송 속도로 보내는 자동 조정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 최적의 전송 속도로 보내는 자동 조정&lt;/h3&gt;
&lt;p&gt;접속 상대가 전이중 모드를 지원하는지 검출하여 동작 모드를 자동으로 전환하고 상대의 속도도 검출한다.&lt;/p&gt;
&lt;h3 id=&quot;6-스위칭-허브는-복수의-중계-동작을-동시에-실행한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EB%8A%94-%EB%B3%B5%EC%88%98%EC%9D%98-%EC%A4%91%EA%B3%84-%EB%8F%99%EC%9E%91%EC%9D%84-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%8B%A4%ED%96%89%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;6 스위칭 허브는 복수의 중계 동작을 동시에 실행한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 스위칭 허브는 복수의 중계 동작을 동시에 실행한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MAC 주소가 존재하는 포트 이외의 포트는 빈 포트가 되어 송신 동작을 하지 않는다.&lt;/li&gt;
&lt;li&gt;이 비어있는 포트에 별도의 패킷을 흘려 동시에 여러개의 패킷을 중계할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story1-%EC%BC%80%EC%9D%B4%EB%B8%94%EA%B3%BC-%EB%A6%AC%ED%94%BC%ED%84%B0-%ED%97%88%EB%B8%8C-%EC%86%8D%EC%9D%84-%EC%8B%A0%ED%98%B8%EA%B0%80-%ED%9D%98%EB%9F%AC%EA%B0%84%EB%8B%A4&quot;&gt;🛺 [Story1] 케이블과 리피터, 허브 속을 신호가 흘러간다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%ED%8C%A8%ED%82%B7-%ED%95%98%EB%82%98%ED%95%98%EB%82%98%EA%B0%80-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%9C%EB%8B%A4&quot;&gt;1. 패킷 하나하나가 독립적으로 동작한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-lan-%EC%BC%80%EC%9D%B4%EB%B8%94%EC%9D%80-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EC%95%BD%ED%99%94%EC%8B%9C%ED%82%A4%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83%EC%9D%B4-%ED%95%B5%EC%8B%AC%EC%9D%B4%EB%8B%A4&quot;&gt;2. LAN 케이블은 신호를 약화시키지 않는 것이 핵심이다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EA%BC%BC%EC%9D%80-%EC%9E%A1%EC%9D%8C%EC%9D%84-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%B4%EB%8B%A4&quot;&gt;3. 꼼은 잡음을 방지하기 위한 방법이다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EB%A6%AC%ED%94%BC%ED%84%B0-%ED%97%88%EB%B8%8C%EB%8A%94-%EC%97%B0%EA%B2%B0%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%EC%A0%84%EC%B2%B4-%EC%BC%80%EC%9D%B4%EB%B8%94%EC%97%90-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EC%86%A1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot;&gt;4. 리피터 허브는 연결되어 있는 전체 케이블에 신호를 송신한다&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story2-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%A4%91%EA%B3%84-%EB%8F%99%EC%9E%91&quot;&gt;🛺 [Story2] 스위칭 허브의 패킷 중계 동작&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EB%8A%94-%EC%A3%BC%EC%86%8C-%ED%85%8C%EC%9D%B4%EB%B8%94%EB%A1%9C-%EC%A4%91%EA%B3%84%ED%95%9C%EB%8B%A4&quot;&gt;1. 스위칭 허브는 주소 테이블로 중계한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-mac-%EC%A3%BC%EC%86%8C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EA%B0%B1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot;&gt;2. MAC 주소 테이블을 등록 및 갱신한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%98%88%EC%99%B8%EC%A0%81%EC%9D%B8-%EB%8F%99%EC%9E%91&quot;&gt;3. 예외적인 동작&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%A0%84%EC%9D%B4%EC%A4%91-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%EC%86%A1%EC%8B%A0%EA%B3%BC-%EC%88%98%EC%8B%A0%EC%9D%84-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%8B%A4%ED%96%89%ED%95%9C%EB%8B%A4&quot;&gt;4. 전이중 모드에서 송신과 수신을 동시에 실행한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%EC%B5%9C%EC%A0%81%EC%9D%98-%EC%A0%84%EC%86%A1-%EC%86%8D%EB%8F%84%EB%A1%9C-%EB%B3%B4%EB%82%B4%EB%8A%94-%EC%9E%90%EB%8F%99-%EC%A1%B0%EC%A0%95&quot;&gt;5. 최적의 전송 속도로 보내는 자동 조정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%EC%8A%A4%EC%9C%84%EC%B9%AD-%ED%97%88%EB%B8%8C%EB%8A%94-%EB%B3%B5%EC%88%98%EC%9D%98-%EC%A4%91%EA%B3%84-%EB%8F%99%EC%9E%91%EC%9D%84-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%8B%A4%ED%96%89%ED%95%9C%EB%8B%A4&quot;&gt;6. 스위칭 허브는 복수의 중계 동작을 동시에 실행한다&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_4]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH2. TCP/IP의 데이터를 전기 신호로 만들어 보낸다_프로토콜 스택과 LAN 어댑터의 탐험입니다 🙌 🛺 [Story…]]></description><link>https://yjksw.github.io/one-percent-network-4/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-4/</guid><pubDate>Thu, 30 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH2. TCP/IP의 데이터를 전기 신호로 만들어 보낸다_프로토콜 스택과 LAN 어댑터의 탐험입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story4-서버에서-연결을-끊어-소켓을-말소한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story4-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%EC%97%B0%EA%B2%B0%EC%9D%84-%EB%81%8A%EC%96%B4-%EC%86%8C%EC%BC%93%EC%9D%84-%EB%A7%90%EC%86%8C%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story4 서버에서 연결을 끊어 소켓을 말소한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story4] 서버에서 연결을 끊어 소켓을 말소한다&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터-보내기를-완료하고-연결을-끊는다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EB%82%B4%EA%B8%B0%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%98%EA%B3%A0-%EC%97%B0%EA%B2%B0%EC%9D%84-%EB%81%8A%EB%8A%94%EB%8B%A4&quot; aria-label=&quot;1 데이터 보내기를 완료하고 연결을 끊는다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 데이터 보내기를 완료하고 연결을 끊는다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;소켓 연결 말소 시점은 한쪽이 데이터 보내기를 완료했을때다.&lt;/li&gt;
&lt;li&gt;어느 측에서든 먼저 연결을 끊을 수 있도록 프로토콜이 설계 되어 있다.
&lt;ul&gt;
&lt;li&gt;주로 브라우저에서 요청을 보내고 서버에서 응답을 하면 서버 측에서 먼저 연결 끊기 동작을 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;close&lt;/code&gt; 메소드를 호출해서 연결끊기 동작에 들어간다.&lt;/li&gt;
&lt;li&gt;연결끊기 동작 세부 로직 - 끊는 쪽 (예. 서버)
&lt;ul&gt;
&lt;li&gt;연결을 끊고자 하는 측이 TCP 헤더를 만들어서 FIN 컨트롤 비트를 1로 설정한다.&lt;/li&gt;
&lt;li&gt;이 패킷을 IP 담당에게 요청하여 상대에게 송신한다.&lt;/li&gt;
&lt;li&gt;자신의 소켓에 연결 끊기 동작에 들어갔다는 사실을 통지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;연결끊기 동작 세부 로직 - 상대 쪽 (예. 브라우저)
&lt;ul&gt;
&lt;li&gt;프로토콜 스택이 소켓에 연결 끊기 동작이 들어갔다는 것을 기록하고 패킷을 잘 받았다는 뜻으로 ACK를 보낸다.&lt;/li&gt;
&lt;li&gt;어플리케이션이 &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt;를 할 때 데이터를 건내는 대신 데이터 수신을 완료했음을 알리고 FIN을 1로 한 헤더를 IP 담당에게 넘겨 반송한다.&lt;/li&gt;
&lt;li&gt;서버에서 ACK를 보내면 연결이 끊기가 완료된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-소켓을-말소한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%BC%93%EC%9D%84-%EB%A7%90%EC%86%8C%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 소켓을 말소한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소켓을 말소한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;연결 끊기 동식이 실행되었을 때 소켓을 곧바로 말소하지 않고 기다린 후에 소켓을 말소한다.
&lt;ul&gt;
&lt;li&gt;이유는 ACK가 서버에 도착하지 않아서 서버가 다시 FIN을 전송하게 되는 경우 담당 소켓이 말소되었으므로 동일한 포트번호의 새로운 소켓을 생성하게 되고 해당 소켓에 FIN이 도착하여 오동작하게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-데이터-송수신-동작-요약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91-%EC%9A%94%EC%95%BD&quot; aria-label=&quot;3 데이터 송수신 동작 요약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 데이터 송수신 동작 요약&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;처음 소켓을 작성한다. (보통 서버측에서 먼저 소켓을 만들고 접속 대기 상태로 기다린다)&lt;/li&gt;
&lt;li&gt;클라이언트에서도 소켓을 만들고 서버로 접속 동작을 실행한다.
&lt;ul&gt;
&lt;li&gt;SYN을 1로 만들고 TCP 헤더를 만들어서 서버에 보낸다. (시퀀스 초기값, 윈도우 값도 포함)&lt;/li&gt;
&lt;li&gt;서버에서 ACK 번호, 윈도우값, SYN 1, 시퀀스 초기값을 전송한다.&lt;/li&gt;
&lt;li&gt;클라이언트에서 ACK 번호를 보낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터를 송수신 한다.
&lt;ul&gt;
&lt;li&gt;웹의 경우 클라이언트가 요청 메세지를 보내는 것을 시작한다.&lt;/li&gt;
&lt;li&gt;TCP는 최대 MSS 만큼 패킷을 분할 + 헤더 추가하여 보낸다.&lt;/li&gt;
&lt;li&gt;시퀀스 번호와 데이터를 보내면 상대는 ACK 번호와 윈도우 값을 보낸다.&lt;/li&gt;
&lt;li&gt;슬라이등 윈도우 기법으로 흐름제어를 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;연결을 끊는다.
&lt;ul&gt;
&lt;li&gt;웹의 경우 서버가 먼저 연결 끊기 동작을 실행한다.&lt;/li&gt;
&lt;li&gt;FIN 1로 만든 헤더를 보내고 ACK 번호를 응답으로 받는다.&lt;/li&gt;
&lt;li&gt;이후 상대도 FIN 1로 만든 헤더를 보내고 ACK를 응답으로 받는다.&lt;/li&gt;
&lt;li&gt;잠시 기다린 후 소켓을 말소한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543869-4a228252-e6e4-413b-bedb-096c07364266.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story5-ip와-이더넷의-패킷-송수신-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story5-ip%EC%99%80-%EC%9D%B4%EB%8D%94%EB%84%B7%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91&quot; aria-label=&quot; story5 ip와 이더넷의 패킷 송수신 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story5] IP와 이더넷의 패킷 송수신 동작&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 담당 부분에서 필요한 헤더 및 데이터를 추가한 이후에 IP 담당 부분에게 의뢰한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-패킷의-기본&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%8C%A8%ED%82%B7%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot; aria-label=&quot;1 패킷의 기본 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 패킷의 기본&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;패킷은 헤더 + 데이터로 나뉜다. (주소 등의 제어 정보 + 안의 내용물)&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543891-a6fa10df-b371-4f35-97a5-7c2001b22910.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패킷의 흐름은 패킷의 헤더에 적힌 제어정보와 중계 장치에 있는 표의 정보를 결합하여 다음 패킷 목적지로 이동하며 최종 목적지에 도착한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송신처와 최송 수신처를 ‘엔드 노드’라고 부른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;tcpip-에서-패킷-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tcpip-%EC%97%90%EC%84%9C-%ED%8C%A8%ED%82%B7-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;tcpip 에서 패킷 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TCP/IP 에서 패킷 구조&lt;/h4&gt;
&lt;p&gt;두 가지 중계 장치가 있다. 서브넷을 관리하는 ‘허브’와 IP를 담당하는 ‘라우터’이다.&lt;/p&gt;
&lt;p&gt;각각 다음 역할을 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;라우터가 목적지를 확인하여 다음 라우터를 찾는다.
&lt;ul&gt;
&lt;li&gt;IP가 다음 목적지를 확인하여 다음 IP 중계 장치를 찾는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;허브가 서브넷 안에서 패킷을 운반해 다음 라우터에 도착하도록 한다.
&lt;ul&gt;
&lt;li&gt;서브넷 안의 이더넷이 라우터까지 패킷을 운반한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 역할을 수행하기 위해서 패킷에 다음 두 헤더가 붙어 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MAC 헤더 (이더넷용 헤더)&lt;/li&gt;
&lt;li&gt;IP 헤더 (IP용 헤더)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;패킷 운반 흐름은 다음과 같다.
&lt;ul&gt;
&lt;li&gt;먼저 클라이언트가 TCP 헤더 + 데이터를 이어붙이고 목적 IP 주소에 맞는 다음 라우터를 조사한다.&lt;/li&gt;
&lt;li&gt;다음 라우터가 정해지면 해당 라우터에 대한 MAC 주소를 조사하고 패킷의 MAC 헤더에 추가한다.&lt;/li&gt;
&lt;li&gt;이더넷에게 해당 라우터로 패킷을 전송하도록 의뢰하여 패킷을 송신한다.&lt;/li&gt;
&lt;li&gt;이더넷에 의해 허브에 도착한다. 허브에서 이더넷 표와 헤더 정보를 결합해서 다음 라우터로 중계한다.
&lt;ul&gt;
&lt;li&gt;만일 허브가 여러개라면 여러 허브를 순차적으로 경우한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다음 라우터에 도착해서 IP용 표를 통해 다음 라우터를 조사하여 MAC 주소를 헤더가 기록한다.
&lt;ul&gt;
&lt;li&gt;동일하게 허브를 경유하여 다음 라우터에 도착한다. 수신처에 도착할 때까지 반복한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543896-57e300fe-ae57-4d72-9638-387b2acdd4cd.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이더넷 대신 무선 LAN, ADSL 등으로 대체될 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP의 의뢰를 받아서 패킷을 운반할 수 있는 것이면 된다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;여기까지가 전체적인 흐름!!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-패킷-송수신-동작의-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%8C%A8%ED%82%B7-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%98-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;2 패킷 송수신 동작의 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 패킷 송수신 동작의 개요&lt;/h3&gt;
&lt;p&gt;IP 담당이 진행하는 패킷 송신 동작을 자세하게 알아보기! IP 담당은 패킷을 송출하고 실제 패킷의 운반은 네트워크 기기인 허브 및 라우터가 수행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 담당에서 TCP 헤더와 데이터가 붙은 채로 IP 담당에게 넘어온다.&lt;/li&gt;
&lt;li&gt;IP 담당은 넘어온 패킷을 들여다보지 않고 단지 헤더를 추가한다.
&lt;ul&gt;
&lt;li&gt;IP 헤더와 MAC 헤더를 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 헤더: 목적지를 나타내는 제어정보&lt;/li&gt;
&lt;li&gt;MAC 헤더: LAN을 사용해서 가까운 라우터까지 패킷을 운반할 때 사용할 제어정보&lt;/li&gt;
&lt;li&gt;완성된 패킷을 네트워크 &lt;strong&gt;하드웨어&lt;/strong&gt; LAN 어댑터에 보낸다.
&lt;ul&gt;
&lt;li&gt;0과 1로 이루어진 디지털 데이터의 모습이다.&lt;/li&gt;
&lt;li&gt;LAN 어댑터는 전기나 빛의 신호로 바꾸어 케이블로 송출한다.&lt;/li&gt;
&lt;li&gt;이후 허브나 라우터 등의 중계 장치에 도착한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 담당에서 바라보는 패킷은 그 역할이 구분되어 있지 않고 단순히 ‘패킷’이라는 덩어리일 뿐이다. 패킷의 내용, 순서, 유무도 상관하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-수신처-ip주소를-기록한-ip-헤더를-만든다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%88%98%EC%8B%A0%EC%B2%98-ip%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B8%B0%EB%A1%9D%ED%95%9C-ip-%ED%97%A4%EB%8D%94%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot; aria-label=&quot;3 수신처 ip주소를 기록한 ip 헤더를 만든다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 수신처 IP주소를 기록한 IP 헤더를 만든다&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543901-4a6f5980-cbc5-48d2-bc86-ac8518ba3457.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수신처 IP주소 → 어플리케이션에서 통지한 그대로를 사용&lt;/li&gt;
&lt;li&gt;송신처 IP주소 → 여러 LAN 어댑터 중 송신을 책임지는 어댑터(대상 라우터가 정해지면 정해짐)의 IP 주소 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ip-경로표&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ip-%EA%B2%BD%EB%A1%9C%ED%91%9C&quot; aria-label=&quot;ip 경로표 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IP 경로표&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;route print&lt;/code&gt; 로 경로표를 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수신처 IP 주소의 왼쪽 부분이 일치하면 해당하는 행의 정보가 알맞은 것이다.
&lt;ul&gt;
&lt;li&gt;예를 들어 수신처 IP가 10.10.1.166 이면 왼쪽이 일치하는 10.10.1이 알맞은 행이다.&lt;/li&gt;
&lt;li&gt;Interface로 네트워크용(LAN 어댑터) 인터페이스를 알 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gateway로 다음 라우터 IP 주소를 알 수 있다!!!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;가장 위 행은 기본 게이트웨이를 나타낸다 (추후 설명)&lt;/li&gt;
&lt;li&gt;어느 LAN 어댑터에서 보내는지 정하고 해당 IP 주소를 &lt;strong&gt;송신처 IP 주소&lt;/strong&gt;로 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IP 헤더에 어느 프로토콜 (TCP, UDP 등등)을 사용하는지 번호를 작성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-이더넷용-mac-헤더를-만든다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%9D%B4%EB%8D%94%EB%84%B7%EC%9A%A9-mac-%ED%97%A4%EB%8D%94%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot; aria-label=&quot;4 이더넷용 mac 헤더를 만든다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 이더넷용 MAC 헤더를 만든다&lt;/h3&gt;
&lt;p&gt;MAC 헤더는 이더넷이 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수신처 MAC 주소, 송신처 MAC주소, 이더 타입(사용하는 프로토콜 종류 ARP, IP, IPv6 등등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;mac-주소-알아보기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mac-%EC%A3%BC%EC%86%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;mac 주소 알아보기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MAC 주소 알아보기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MAC 주소는 48비트이다.&lt;/li&gt;
&lt;li&gt;이더타입에 프로토콜 번호를 기입한다.
&lt;ul&gt;
&lt;li&gt;이더넷의 경우 IP혹은 ARP이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;송신처 MAC주소에 LAN 어댑터의 MAC 주소를 설정한다.&lt;/li&gt;
&lt;li&gt;수신처의 MAC 주소를 조사해서 설정한다.
&lt;ul&gt;
&lt;li&gt;경로표의 Gateway가 패킷을 건내줄 대상이다.&lt;/li&gt;
&lt;li&gt;이 IP 주소로 MAC 주소를 조사한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-arp로-수신처-라우터의-mac-주소를-조사한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-arp%EB%A1%9C-%EC%88%98%EC%8B%A0%EC%B2%98-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-mac-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EC%A1%B0%EC%82%AC%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;5 arp로 수신처 라우터의 mac 주소를 조사한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. ARP로 수신처 라우터의 MAC 주소를 조사한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이더넷에 브로드캐스를 통해 연결된 전원에게 xx IP 주소(게이트웨이의 IP 주소)를 물어봐서 MAC주소를 획득한다.
&lt;ul&gt;
&lt;li&gt;상대가 자신과 같은 네트워크라면 이렇게 MAC주소를 알 수 있다. (Gateway가 라우터 IP 주소인 경우 라우터가 응답한다)&lt;/li&gt;
&lt;li&gt;해당하지 않는 기기는 브로드캐스트 메세지를 무시한다.&lt;/li&gt;
&lt;li&gt;ARP 응답이 없다면 패킷 송신 동작이 실패한다.&lt;/li&gt;
&lt;li&gt;매번 ARP 패킷을 보내는 것은 어렵기 때문에 메모리에 ARP 캐시 데이터를 저장한다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;arp -a&lt;/code&gt; 를 통해 ARP 캐시데이터를 확인&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;arp -d&lt;/code&gt; 를 통해 캐시 데이터 삭제&lt;/li&gt;
&lt;li&gt;몇 분이 지나면 캐시 데이터를 삭제한다 → IP가 더이상 유효하지 않을수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MAC 헤더를 붙이면 LAN 어댑터가 패킷을 그대로 송수신할 수 있다.&lt;/li&gt;
&lt;li&gt;MAC주소는 &lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;-&lt;/code&gt;로 구분하며 총 48피트이고 8비트씩 16진수로 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-이더넷의-기본&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%9D%B4%EB%8D%94%EB%84%B7%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot; aria-label=&quot;6 이더넷의 기본 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 이더넷의 기본&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이더넷은 컴퓨터가 여러 컴퓨터와 적은 비용으로 자유롭게 통신하기 위한 통신 기술이다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;원형은 하나의 케이블에 여러 컴퓨터가 연결이 되어 있어서 케이블로 전체에게 신호가 가고 MAC헤더를 통해 수신처를 판단하여 다른 대상들을 해당 패킷을 폐기하고 대상 컴퓨터만 패킷을 받게 되는 구조이다.&lt;/li&gt;
&lt;li&gt;케이블 → 리피터 허브 → 스위칭 허브(현재 모습)으로 변화했다.
&lt;ul&gt;
&lt;li&gt;전원에게 신호를 보내는 것이 아니라 MAC 주소로 알아낸 원하는 상대에게만 신호가 흐른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이더넷의 동작도 패킷의 내용과는 아무런 상관이 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-ip-패킷을-전기나-빛의-신호로-변환하여-송신한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-ip-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%A0%84%EA%B8%B0%EB%82%98-%EB%B9%9B%EC%9D%98-%EC%8B%A0%ED%98%B8%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EC%97%AC-%EC%86%A1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;7 ip 패킷을 전기나 빛의 신호로 변환하여 송신한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. IP 패킷을 전기나 빛의 신호로 변환하여 송신한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LAN 어댑터가 디지털 데이터를 전기나 빛의 신호로 변환하여 네트워크 케이블에 송출한다.&lt;/li&gt;
&lt;li&gt;LAN 어댑터를 제어하는 LAN 드라이버라는 소프트웨어가 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8-패킷에-3개-제어용-데이터를-추가한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%ED%8C%A8%ED%82%B7%EC%97%90-3%EA%B0%9C-%EC%A0%9C%EC%96%B4%EC%9A%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;8 패킷에 3개 제어용 데이터를 추가한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 패킷에 3개 제어용 데이터를 추가한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프리앰블, 스타트 프레임 딜리미터, 프레임 체크 시퀀스(오류 검출용 데이터)를 추가한다.&lt;/li&gt;
&lt;li&gt;프리앰플로 클록신호의 타이밍을 잡는다.&lt;/li&gt;
&lt;li&gt;스타트 프레임 딜리미터로 패킷 신호 시작을 나타낸다.&lt;/li&gt;
&lt;li&gt;FCS로 오류를 검출한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543918-2a540179-7fd3-4416-8734-608fd29b9a72.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543919-a2e6971b-983a-478d-9e55-a78d6aba5b40.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;h3 id=&quot;9-허브를-향해-패킷을-송신한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%ED%97%88%EB%B8%8C%EB%A5%BC-%ED%96%A5%ED%95%B4-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%86%A1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;9 허브를 향해 패킷을 송신한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 허브를 향해 패킷을 송신한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리피터 허브의 반이중 모드 &amp;#x26; 스위치 허브의 전이중 모드가 있다.&lt;/li&gt;
&lt;li&gt;반이중 모드
&lt;ul&gt;
&lt;li&gt;케이블에 다른 송신 동작이 흐르고 있으면 대기했다가 송신 동작을 시작한다.&lt;/li&gt;
&lt;li&gt;동시에 신호가 흐르면 충돌이 나며 재밍 신호를 보내고 송신 동작을 멈추고 잠시 후 다시 시작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전이중 모드는 충돌이 일어나지 않는다. (추후 설명)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;10-돌아온-패킷을-받는다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%EB%8F%8C%EC%95%84%EC%98%A8-%ED%8C%A8%ED%82%B7%EC%9D%84-%EB%B0%9B%EB%8A%94%EB%8B%A4&quot; aria-label=&quot;10 돌아온 패킷을 받는다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 돌아온 패킷을 받는다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리피터 허브에서는 한대에서 송신해도 전체에 신호가 간다. 이것을 모두 수신 신호로 받는다.&lt;/li&gt;
&lt;li&gt;프리앰블로 타이밍일 계산하고 스타트 프레임 딜리미터가 나오면 그 다음 비트부터 패킷으로 판단해 디지털 데이터로 변환한다. 최후에 FCS를 검사하여 오류가 있다면 폐기한다.&lt;/li&gt;
&lt;li&gt;오류가 없다면 MAC헤더 수신처와 MAC 주소를 조사하여 자신의 것이면 수신하여 버퍼 메모리에 저장하고 아니라면 패킷을 폐기한다.&lt;/li&gt;
&lt;li&gt;자신의 것이라서 패킷을 수신하면 &lt;strong&gt;interrupt 인터럽트&lt;/strong&gt;로 컴퓨터에 통지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11-서버의-응답-패킷을-ip에서-tcp로-넘긴다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9D%91%EB%8B%B5-%ED%8C%A8%ED%82%B7%EC%9D%84-ip%EC%97%90%EC%84%9C-tcp%EB%A1%9C-%EB%84%98%EA%B8%B4%EB%8B%A4&quot; aria-label=&quot;11 서버의 응답 패킷을 ip에서 tcp로 넘긴다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 서버의 응답 패킷을 IP에서 TCP로 넘긴다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;웹서버에서 패킷이 돌아오면 (LAN 어댑터가 프로토콜 번호를 확인해 TCP/IP 프로토콜 스택으로 전송함) 프로토콜 스택의 IP 담당 부분에 넘겨진다.
&lt;ul&gt;
&lt;li&gt;IP 헤더를 조사해 수신처 IP주소를 조사하여 LAN 어댑터와 일치하는지 확인하고 패킷을 수신한다.&lt;/li&gt;
&lt;li&gt;만일 자신에게 온 패킷이 아니라면 IP 담당 부분이 &lt;strong&gt;ICMP 메세지로 통신 상대에게 오류를 통지&lt;/strong&gt;한다.
&lt;ul&gt;
&lt;li&gt;여러 메세지 종류가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;만일 패킷이 fragment로 분할된 것이면 IP 담당은 패킷을 복원한다. (이후에 패킷 분할에 대해서 다룬다)
&lt;ul&gt;
&lt;li&gt;IP 헤더의 flag로 분할여부를 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;ID 정보로 같은 패킷임을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;fragment offset으로 패킷 위치를 알 수 있다.&lt;/li&gt;
&lt;li&gt;패킷을 복원하는 동작 = reassembling 리어셈블링이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;리어셈블링이 끝나면 패킷을 TCP 담당 부분에 넘긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story6-udp-프로토콜을-이용한-송수신동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story6-udp-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%86%A1%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91&quot; aria-label=&quot; story6 udp 프로토콜을 이용한 송수신동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story6] UDP 프로토콜을 이용한 송수신동작&lt;/h2&gt;
&lt;h3 id=&quot;1-수정송신이-필요없는-데이터-송신은-udp가-효율적이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%88%98%EC%A0%95%EC%86%A1%EC%8B%A0%EC%9D%B4-%ED%95%84%EC%9A%94%EC%97%86%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%8B%A0%EC%9D%80-udp%EA%B0%80-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;1 수정송신이 필요없는 데이터 송신은 udp가 효율적이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 수정송신이 필요없는 데이터 송신은 UDP가 효율적이다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ex. DNS 서버에서 IP 주소를 조회할 때&lt;/li&gt;
&lt;li&gt;만일 데이터를 보내서 수신응답이 오지 않으면 패킷을 전부 다 보내는 간단한 방법이 있다.
&lt;ul&gt;
&lt;li&gt;하지만 그것을 비효율적이니 TCP가 누락된 부분만 보내기 위해서 복잡한 구조인 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패킷이 하나라면 복잡하게 생각하지 않고 회신이 오지 않으면 다시 보내면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-제어용-짧은-데이터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%A0%9C%EC%96%B4%EC%9A%A9-%EC%A7%A7%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;2 제어용 짧은 데이터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 제어용 짧은 데이터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS 조회 같은 경우 패킷 1개로 가능한 짧은 요청이기 때문에 UDP를 사용한다.&lt;/li&gt;
&lt;li&gt;접속이나 연결 끊기 단계가 없이 송신 데이터에 UDP 헤더만 추가하여 바로 IP 담당에 의뢰하여 송신한다.&lt;/li&gt;
&lt;li&gt;만일 오류가 생기면 송신측에서 회답이 오지 않으므로 데이터를 한번 더 보낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-음성-및-동영상-데이터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9D%8C%EC%84%B1-%EB%B0%8F-%EB%8F%99%EC%98%81%EC%83%81-%EB%8D%B0%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;3 음성 및 동영상 데이터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 음성 및 동영상 데이터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UDP를 많이 사용한다. 타이밍이 맞지 않으면 데이터가 다시 와도 쓸모가 없으므로 잠시 누락되어도 괜찮다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;⇒ 이 다음은 케이블로 나간 전기 및 빛 신호가 리피터 허브, 스위칭 허브, 라우터 기기를 통해 인터넷으로 나가는 과정이다.&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[용어]

ARP - Address Resolution Protocol

FCS - Frame Check Sequence&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story4-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%EC%97%B0%EA%B2%B0%EC%9D%84-%EB%81%8A%EC%96%B4-%EC%86%8C%EC%BC%93%EC%9D%84-%EB%A7%90%EC%86%8C%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story4] 서버에서 연결을 끊어 소켓을 말소한다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%B4%EB%82%B4%EA%B8%B0%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%98%EA%B3%A0-%EC%97%B0%EA%B2%B0%EC%9D%84-%EB%81%8A%EB%8A%94%EB%8B%A4&quot;&gt;1. 데이터 보내기를 완료하고 연결을 끊는다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%BC%93%EC%9D%84-%EB%A7%90%EC%86%8C%ED%95%9C%EB%8B%A4&quot;&gt;2. 소켓을 말소한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91-%EC%9A%94%EC%95%BD&quot;&gt;3. 데이터 송수신 동작 요약&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story5-ip%EC%99%80-%EC%9D%B4%EB%8D%94%EB%84%B7%EC%9D%98-%ED%8C%A8%ED%82%B7-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91&quot;&gt;🛺 [Story5] IP와 이더넷의 패킷 송수신 동작&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%ED%8C%A8%ED%82%B7%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot;&gt;1. 패킷의 기본&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#tcpip-%EC%97%90%EC%84%9C-%ED%8C%A8%ED%82%B7-%EA%B5%AC%EC%A1%B0&quot;&gt;TCP/IP 에서 패킷 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%ED%8C%A8%ED%82%B7-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%98-%EA%B0%9C%EC%9A%94&quot;&gt;2. 패킷 송수신 동작의 개요&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%EC%88%98%EC%8B%A0%EC%B2%98-ip%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B8%B0%EB%A1%9D%ED%95%9C-ip-%ED%97%A4%EB%8D%94%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot;&gt;3. 수신처 IP주소를 기록한 IP 헤더를 만든다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ip-%EA%B2%BD%EB%A1%9C%ED%91%9C&quot;&gt;IP 경로표&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-%EC%9D%B4%EB%8D%94%EB%84%B7%EC%9A%A9-mac-%ED%97%A4%EB%8D%94%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot;&gt;4. 이더넷용 MAC 헤더를 만든다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mac-%EC%A3%BC%EC%86%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0&quot;&gt;MAC 주소 알아보기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#5-arp%EB%A1%9C-%EC%88%98%EC%8B%A0%EC%B2%98-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-mac-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EC%A1%B0%EC%82%AC%ED%95%9C%EB%8B%A4&quot;&gt;5. ARP로 수신처 라우터의 MAC 주소를 조사한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#6-%EC%9D%B4%EB%8D%94%EB%84%B7%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot;&gt;6. 이더넷의 기본&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#7-ip-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%A0%84%EA%B8%B0%EB%82%98-%EB%B9%9B%EC%9D%98-%EC%8B%A0%ED%98%B8%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EC%97%AC-%EC%86%A1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot;&gt;7. IP 패킷을 전기나 빛의 신호로 변환하여 송신한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#8-%ED%8C%A8%ED%82%B7%EC%97%90-3%EA%B0%9C-%EC%A0%9C%EC%96%B4%EC%9A%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%9C%EB%8B%A4&quot;&gt;8. 패킷에 3개 제어용 데이터를 추가한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#9-%ED%97%88%EB%B8%8C%EB%A5%BC-%ED%96%A5%ED%95%B4-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%86%A1%EC%8B%A0%ED%95%9C%EB%8B%A4&quot;&gt;9. 허브를 향해 패킷을 송신한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#10-%EB%8F%8C%EC%95%84%EC%98%A8-%ED%8C%A8%ED%82%B7%EC%9D%84-%EB%B0%9B%EB%8A%94%EB%8B%A4&quot;&gt;10. 돌아온 패킷을 받는다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#11-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9D%91%EB%8B%B5-%ED%8C%A8%ED%82%B7%EC%9D%84-ip%EC%97%90%EC%84%9C-tcp%EB%A1%9C-%EB%84%98%EA%B8%B4%EB%8B%A4&quot;&gt;11. 서버의 응답 패킷을 IP에서 TCP로 넘긴다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story6-udp-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%86%A1%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91&quot;&gt;🛺 [Story6] UDP 프로토콜을 이용한 송수신동작&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%88%98%EC%A0%95%EC%86%A1%EC%8B%A0%EC%9D%B4-%ED%95%84%EC%9A%94%EC%97%86%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%8B%A0%EC%9D%80-udp%EA%B0%80-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B4%EB%8B%A4&quot;&gt;1. 수정송신이 필요없는 데이터 송신은 UDP가 효율적이다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%A0%9C%EC%96%B4%EC%9A%A9-%EC%A7%A7%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0&quot;&gt;2. 제어용 짧은 데이터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%9D%8C%EC%84%B1-%EB%B0%8F-%EB%8F%99%EC%98%81%EC%83%81-%EB%8D%B0%EC%9D%B4%ED%84%B0&quot;&gt;3. 음성 및 동영상 데이터&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_3]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH2. TCP/IP의 데이터를 전기 신호로 만들어 보낸다_프로토콜 스택과 LAN 어댑터의 탐험입니다 🙌 🛺 [Story1] 소켓을 작성한다.…]]></description><link>https://yjksw.github.io/one-percent-network-3/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-3/</guid><pubDate>Wed, 29 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH2. TCP/IP의 데이터를 전기 신호로 만들어 보낸다_프로토콜 스택과 LAN 어댑터의 탐험입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story1-소켓을-작성한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story1-%EC%86%8C%EC%BC%93%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story1 소켓을 작성한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story1] 소켓을 작성한다.&lt;/h2&gt;
&lt;h3 id=&quot;1-프로토콜-스택의-내부-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;1 프로토콜 스택의 내부 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 프로토콜 스택의 내부 구성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;네트워크를 제어하는 다음 두 가지가 필요하다.
&lt;ol&gt;
&lt;li&gt;소프트웨어 - (OS 내장) 프로토콜 스택&lt;/li&gt;
&lt;li&gt;하드웨어 - LAN 어댑터&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;아래가 네트워크 계층 구조이다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어플리케이션에서 데이터 송신을 시작한다. 이때 소켓 라이브러리를 사용하여 리졸버로 DNS 서버를 조회하는 등의 동작을 실행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS 내부에 있는 프로토콜 스택이 그 다음 작업을 의뢰받는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 혹은 UDP로 데이터를 송수신한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 프로토콜로 패킷 송수신 동작을 제어한다. ICMP(패킷운반시 오류 통지, 제어용 메세지) 혹은 ARP(IP에 대응하는 MAC주소 조사)로 동작한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LAN 드라이버는 LAN 어댑터라는 하드웨어를 제어한다. LAN 어댑터라는 &lt;strong&gt;하드웨어가&lt;/strong&gt; 실제 송수신 동작, 케이블 신호 송수신 동작을 제어한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543586-0252b0b7-f015-466a-b5b5-1cc404b75d0b.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-소켓은-통신-제어용-제어-정보이다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%BC%93%EC%9D%80-%ED%86%B5%EC%8B%A0-%EC%A0%9C%EC%96%B4%EC%9A%A9-%EC%A0%9C%EC%96%B4-%EC%A0%95%EB%B3%B4%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;2 소켓은 통신 제어용 제어 정보이다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소켓은 통신 제어용 제어 정보이다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;소켓 내부에 제어 정보를 기록하는 메모리 영역이 존재 → 통신 동작 제어용 정보를 기록한다.
&lt;ul&gt;
&lt;li&gt;ex. 통신 상대의 IP 주소, 포트 번호, 통신 동작 진행 상태 등등&lt;/li&gt;
&lt;li&gt;이것에 소켓의 실체이다 → 제어 정보의 집합&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로토콜 스택은 위 제어정보를 참조하여 동작한다.
&lt;ul&gt;
&lt;li&gt;제어 정보를 참조하여 송신 대상으로 데이터를 송신하고 응답을 기다린다.&lt;/li&gt;
&lt;li&gt;일정 시간 경과 후 응답이 오지 않으면 데이터를 재송신 한다. (즉, 경과 시간등을 기록한다)&lt;/li&gt;
&lt;li&gt;이외의 많은 역할들을 한다. (이후에 추가적으로 다룸)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소켓을 만든다는 것
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;netstat&lt;/code&gt;(윈도우 경우) 명령어에 의해서 나오는 소켓 통신 정보에 해당 소켓에 대한 제어정보를 추가하는 것
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;netstat&lt;/code&gt; 명령어 입력시 Local Address에 여러 IP 주소가 나온다면 여러 LAN 어댑터를 보유하고 있다는 뜻이다.&lt;/li&gt;
&lt;li&gt;IP가 &lt;code class=&quot;language-text&quot;&gt;0.0.0.0&lt;/code&gt; 으로 기재되는 것은 양측이 모두 통신을 시작하지 않아서 IP가 정해지지 않았기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;통신을 시작하는 부분의 상태를 기록하고 송수신 데이터를 일시적으로 저장하는 버퍼 메모리를 준비하는 것 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-소켓을-호출했을-때-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%86%8C%EC%BC%93%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%96%88%EC%9D%84-%EB%95%8C-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;3 소켓을 호출했을 때 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 소켓을 호출했을 때 동작&lt;/h3&gt;
&lt;p&gt;먼저 Socket 라이브러리의 &lt;code class=&quot;language-text&quot;&gt;socket&lt;/code&gt; 메서드를 호출하여 프로토콜 스택에 의뢰해 소켓을 하나 생성한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로토콜 스택은 소켓 한 개가 사용하는 메모리 영역을 확보한다.&lt;/li&gt;
&lt;li&gt;아직 통신 이전이면 초기 상태의 정보를 메모리에 기록한다.&lt;/li&gt;
&lt;li&gt;포로토콜 스택은 소켓에 대한 디스크립터를 어플리케이션에 알려준다.&lt;/li&gt;
&lt;li&gt;이 디스크립터를 통해 어플리케이션은 이후 데이터 송수신을 프로토콜 스택에 의뢰한다.&lt;/li&gt;
&lt;li&gt;디스크립터만 있으면 프로토콜 스택이 소켓의 통신 상태, 상대 소켓 등등의 기타 정보를 모두 알 수 있다. (어플리케이션은 해당 정보에 대해서 알 필요가 없다)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story2-서버에-접속한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story2-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A0%91%EC%86%8D%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story2 서버에 접속한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story2] 서버에 접속한다.&lt;/h2&gt;
&lt;h3 id=&quot;1-접속의-의미&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%A0%91%EC%86%8D%EC%9D%98-%EC%9D%98%EB%AF%B8&quot; aria-label=&quot;1 접속의 의미 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 접속의 의미&lt;/h3&gt;
&lt;p&gt;어플리케이션은 소켓 생성 후 &lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt; 메서드를 호출하여 접속 동작을 시작한다. 여기서 말하는 접속 동작은 케이블 등을 연결하는 접속 동작이 아니다. 주로 필요한 회선 및 케이블은 이미 연결이 되어 있다.&lt;/p&gt;
&lt;p&gt;접속동작이라고 하는 것은 &lt;strong&gt;데이터를 주고받고자 하는 대상과 필요한 정보를 주고받아서 기록하고 데이터 송수신이 가능한 상태로 만드는 것&lt;/strong&gt;이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;초기상태
&lt;ul&gt;
&lt;li&gt;아무것도 기록되어 있지 않으므로 상대 소켓에 대한 IP 주소와 포트번호에 대한 정보가 필요하다.&lt;/li&gt;
&lt;li&gt;connect 메소드는 어플리케이션이 알고 있는 상대 소켓의 IP 주소(DNS 리졸버를 통해서 획득한 정보) 및 포트 번호(사용자가 이미 알고 있는 정보)를 프로토콜 스택에 알려 소켓에 기록하는 로직을 수행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대상 소켓B도 소켓을 생성한 후에 자신과 접속하고자 하는 소켓A를 알지 못하므로 소켓을 생성하고 소켓A가 접속을 원한다는 요청을 받기 이전까지 대기한다. 요청을 받으면 소켓B도 소켓A의 정보를 기록하여 통신할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;소켓에 접속하는 &lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt; 수행 시 데이터 송수신 메모리 버퍼도 확보한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-소켓-앞에-제어-정보를-기록한-헤더-배치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%BC%93-%EC%95%9E%EC%97%90-%EC%A0%9C%EC%96%B4-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B8%B0%EB%A1%9D%ED%95%9C-%ED%97%A4%EB%8D%94-%EB%B0%B0%EC%B9%98&quot; aria-label=&quot;2 소켓 앞에 제어 정보를 기록한 헤더 배치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소켓 앞에 제어 정보를 기록한 헤더 배치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;소켓에 기록되는 제어정보는 무엇이 있을까 - 이 정보는 소켓의 헤더에 포함되서 보내진다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이더넷 혹은 IP 헤더&lt;/strong&gt; + &lt;strong&gt;TCP 헤더&lt;/strong&gt; - 클라이언트와 서버가 통신하기 위해서 필요한 정보이다. 이 정보는 소켓의 헤더에 포함되서 보내진다.
&lt;ul&gt;
&lt;li&gt;헤더 사양이 정해져있다. 점점 통신을 하면서 덧붙여간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소켓(프로토콜 스택 메모리 영역)에 기록되는 정보
&lt;ul&gt;
&lt;li&gt;송수신 동작은 진행상황&lt;/li&gt;
&lt;li&gt;어플리케이션에서 받은 정보, 통신 상대로부터 받은 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소켓의 제어 정보에 따라서 프로토콜 스택의 동작 대부분이 결정지어 지기 때문에 결합도가 매우 높다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-접속-동작의-실체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A0%91%EC%86%8D-%EB%8F%99%EC%9E%91%EC%9D%98-%EC%8B%A4%EC%B2%B4&quot; aria-label=&quot;3 접속 동작의 실체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 접속 동작의 실체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt;를 호출하며 상대 IP와 포트 번호를 함께 쓴다.&lt;/li&gt;
&lt;li&gt;프로토콜 스택의 &lt;strong&gt;TCP 담당&lt;/strong&gt;이 상대와 정보를 주고받아 헤더에 주고받은 정보를 기록하는 다음 과정을 거친다(송신처와 수신처 포트 번호 등등의 중요한 정보)
&lt;ul&gt;
&lt;li&gt;상대소켓 지정(IP주소와 포트번호)과 헤더설정 끝나면 SYN 비트(컨트롤비트)를 1로 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP 헤더 생성 이후 프로토콜 스택 내부의 &lt;strong&gt;IP 담당&lt;/strong&gt;에게 넘겨주어 패킷 송신 동작을 실행하도록 한다. (여기서 송신한 패킷은 상대서버의 IP 담당이 받아 TCP 담당에게 넘겨준다)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상대 소켓의 TCP 담당은 받은 패킷의 수신처 포트번호에 적힌 소켓을 찾는다.&lt;/strong&gt; 소켓을 지정하여 필요한 정보를 기록하고 응답을 보낸다.&lt;/li&gt;
&lt;li&gt;응답을 보낼때, 마찬가지로 SYN을 1(시퀀스 초기번호)로 설정하고 TCP 헤더에 필요 정보를 설정한다. 추가로 패킷을 성공적으로 받았다고 알리는 ACK 비트를 1로 설정한다.&lt;/li&gt;
&lt;li&gt;생성된 헤더 정보를 IP 담당에게 넘겨 다시 응답한다.&lt;/li&gt;
&lt;li&gt;응답을 받은 소켓은 SYN 비트를 확인하여 접속이 성공했는지 보고 성공이라면 접속 완료를 기록한다. 그리고 상대 소켓에 패킷을 잘 받았다는 ACK 비트를 1로 만든 패킷으로 응답한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543684-50c4a737-99d8-48cc-9c11-c47cb793dfb9.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story3-데이터를-송수신-한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story3-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%86%A1%EC%88%98%EC%8B%A0-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story3 데이터를 송수신 한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story3] 데이터를 송수신 한다.&lt;/h2&gt;
&lt;h3 id=&quot;1-프로토콜-스택에-http-리퀘스트-메세지를-넘긴다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%97%90-http-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%84%98%EA%B8%B4%EB%8B%A4&quot; aria-label=&quot;1 프로토콜 스택에 http 리퀘스트 메세지를 넘긴다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 프로토콜 스택에 HTTP 리퀘스트 메세지를 넘긴다&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;write&lt;/code&gt; 메서드를 호출하여 송신하고자 하는 데이터를 프로토콜 스택에 넘긴다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션에서 받은 데이터를 프로토콜 스택 내부의 버퍼 메모리 영역에 우선 저장한다.
&lt;ul&gt;
&lt;li&gt;이유는, 어플리케이션에 건네주는 데이터의 크기는 프로토콜 스택이 제어할 수 없기 때문에 받은 데이터를 곧바로 보내면 데이터 송수신 동작이 지나치게 많이 일어나서 네트워크 효율이 떨어진다.&lt;/li&gt;
&lt;li&gt;패킷의 최대크기인 MTU에서 헤더를 제외한 MSS 만큼의 최대 데이터를 보낼 수 있다. (이것보다 작은 데이터를 보내는 경우 패킷이 예상치 못하게 나누어지지 않는다)&lt;/li&gt;
&lt;li&gt;하지만 항상 버퍼를 꽉 채워서 데이터를 보내는 경우 대기 시간이 길어지므로 송신 동작이 지연된다.&lt;/li&gt;
&lt;li&gt;네트워크 이용 효율을 중시하는지, 송신 동작 시간을 중시하는지 잘 절충해야한다. (프로토콜 스택을 구현한 OS에서 담당하며 어플리케이션 레벨에서 어느 정도 설정을 할 수도 있다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-데이터가-클-때는-분할하여-보낸다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%ED%81%B4-%EB%95%8C%EB%8A%94-%EB%B6%84%ED%95%A0%ED%95%98%EC%97%AC-%EB%B3%B4%EB%82%B8%EB%8B%A4&quot; aria-label=&quot;2 데이터가 클 때는 분할하여 보낸다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 데이터가 클 때는 분할하여 보낸다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 지나치게 크면 MSS 크기만큼 분할하여 패킷(헤더 + 데이터)을 만들어 보낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-ack-번호를-사용하여-패킷이-도착했는지-확인한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-ack-%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8C%A8%ED%82%B7%EC%9D%B4-%EB%8F%84%EC%B0%A9%ED%96%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;3 ack 번호를 사용하여 패킷이 도착했는지 확인한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. ACK 번호를 사용하여 패킷이 도착했는지 확인한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ACK 번호 = 수신을 완료한 바이트 + 1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최초 3way handshake를 할 때 초기 시퀀스 번호를 함께 주고받는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;초기 시퀀스 번호를 악용할 수 있기 때문에 난수로 설정하여 미리 주고받는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이후 &lt;code class=&quot;language-text&quot;&gt;최초 시퀀스 번호 + 데이터의 크기&lt;/code&gt; 만큼의 데이터를 수신했다면 그것에 대한 확인으로 &lt;code class=&quot;language-text&quot;&gt;지금까지 수신한 바이트 + 1&lt;/code&gt; 숫자를 ACK로 지정하여 응답한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터의 크기는 어떻게 알 수 있을까? 보낸 패킷에 헤더길이를 빼면 수신한 데이터의 크기를 유추할 수 있기 때문에 따로 기재하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이후 송신할 데이터를 시퀀스 번호로 지정하고 송신하고, 동일하게 수신한 마지막 바이트 + 1을 ACK로 응답한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543698-a54e59f0-b7a5-48c8-896d-419eccce982f.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시퀀스번호와 ACK 번호로 누락된 패킷 여부를 알 수 있다. 만일 누락되었으면 송신 버퍼 메모리에 저장되어 있는 데이터를 재송신한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이렇게 TCP는 누락을 검출하고 회복 처리를 한다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;LAN 어댑터, 버퍼, 라우터는 회복조치를 취하지 않는다. 오류가 검출되면 패킷을 버린다.&lt;/li&gt;
&lt;li&gt;TCP 여러번 패킷을 재송신해도 오류가 난다면 동작을 중지하고 어플리케이션에 오류를 통지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;양방향 통신이 이루어지는 경우 역으로 동일하게 수행하면 된다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543707-85dcb8c9-5725-4039-828f-f588255ec919.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-패킷-평균-왕복-시간으로-ack-번호의-대기-시간을-조정한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%8C%A8%ED%82%B7-%ED%8F%89%EA%B7%A0-%EC%99%95%EB%B3%B5-%EC%8B%9C%EA%B0%84%EC%9C%BC%EB%A1%9C-ack-%EB%B2%88%ED%98%B8%EC%9D%98-%EB%8C%80%EA%B8%B0-%EC%8B%9C%EA%B0%84%EC%9D%84-%EC%A1%B0%EC%A0%95%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 패킷 평균 왕복 시간으로 ack 번호의 대기 시간을 조정한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 패킷 평균 왕복 시간으로 ACK 번호의 대기 시간을 조정한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ACK가 오지 않는 것으로 패킷 유실을 판단하는데 ACK를 평생 기다릴 수 없으니 타임아웃 값 만큼 기다린다.
&lt;ul&gt;
&lt;li&gt;제대로 수신하였는데 네트워크가 혼잡하여 ACK가 오지 못하는 상황일수도 있으니 타임아웃 값을 적절하게 잘 설정해야한다.&lt;/li&gt;
&lt;li&gt;네트워크 혼잡으로 ACK를 받지 못했을때 패킷을 재송신 하면 네트워크에 부하를 얹는 것이다. 하지만 너무 오래 기다리면 속도가 지연의 원인이 된다.&lt;/li&gt;
&lt;li&gt;상황에 따라서 항상 다르기 때문에 대기 시간을 동적으로 변경한다.
&lt;ul&gt;
&lt;li&gt;항상 ACK가 돌아오는 시간을 기록하고 그 시간이 길어지면 대기 시간도 늘리며 짧으면 대기 시간도 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-윈도우sliding-window-제어-방식으로-ack-번호를-관리한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%9C%88%EB%8F%84%EC%9A%B0sliding-window-%EC%A0%9C%EC%96%B4-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-ack-%EB%B2%88%ED%98%B8%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;5 윈도우sliding window 제어 방식으로 ack 번호를 관리한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 윈도우(Sliding Window) 제어 방식으로 ACK 번호를 관리한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.skby.net/%EC%8A%AC%EB%9D%BC%EC%9D%B4%EB%94%A9-%EC%9C%88%EB%8F%84%EC%9A%B0sliding-window/&quot;&gt;http://blog.skby.net/슬라이딩-윈도우sliding-window/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;패킷을 하나 보내고 ACK를 기다리고 또 패킷을 보내고 ACK를 기다리는 핑퐁 방식은 시간을 소요한다. 복수개의 패킷을 보내는 슬라이딩 윈도우 기법으로 효율적으로 관리하도록 한다.
&lt;ul&gt;
&lt;li&gt;핑퐁의 경우 ack가 와야만 다음 패킷을 보내기 때문에 수신하는 측의 능력만큼 패킷을 보낸다.&lt;/li&gt;
&lt;li&gt;슬라이딩 윈도우는 여러개의 패킷을 우선 보내기 때문에 수신측의 능력을 초과하여 패킷을 보낼수도 있다. 이것을 방지하기 위해서 &lt;strong&gt;수신측의 수신버퍼만큼만 패킷을 보내도록 슬라이딩 윈도우 기법으로 송신&lt;/strong&gt;하는 패킷 사이즈를 조절한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수신측이 ACK 값 산출 등의 후처리를 하는 동안 수신한 데이터를 일시적으로 수신 버퍼 메모리에 저장한다. 이때 송신측에서 수신 버퍼 메모리가 넘치도록 패킷을 보내면 수신측의 능력을 초과한 것이다.&lt;/li&gt;
&lt;li&gt;이것을 해결하기 위해 슬라이딩 윈도우 방식에서 &lt;strong&gt;수신 측에 빈 버퍼  최대 사이즈(윈도우 사이즈)를 TCP 헤더의 윈도우 필드에 기록&lt;/strong&gt;하여 송신측에 알려준다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;송신측에 알려주는 타이밍은 수신 버퍼에서 메모리를 추출하여 빈 공간이 추가로 생긴 타이밍이다. 점점 줄어드는 사이즈는 패킷의 데이터 사이즈를 통해서 유추할 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138543713-a05c8851-30df-4e28-bd9e-9a1fc91b166d.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-윈도우-사이즈--ack-합승&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%9C%88%EB%8F%84%EC%9A%B0-%EC%82%AC%EC%9D%B4%EC%A6%88--ack-%ED%95%A9%EC%8A%B9&quot; aria-label=&quot;6 윈도우 사이즈  ack 합승 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 윈도우 사이즈 + ACK 합승&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ACK번호와 윈도우 사이즈를 각각 다른 패킷에 송신하면 주고받는 패킷이 너무 많기 때문에 효율적이지 않다.&lt;/li&gt;
&lt;li&gt;둘 중 하나만 생성되었을 때 기다리다가 두 개가 모두 일어나면 함께 하나의 패킷으로 송신한다.&lt;/li&gt;
&lt;li&gt;복수개의 ACK가 생겼을 때도 최후의 것만 송신한다.&lt;/li&gt;
&lt;li&gt;복수 윈도우 통지가 발생해도 최후 윈도우 사이즈만 보낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-http-응답-메세지를-수신한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-http-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%88%98%EC%8B%A0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;7 http 응답 메세지를 수신한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. HTTP 응답 메세지를 수신한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로토콜 스택이 HTTP 요청 메세지를 모두 보면 응답 메세지를 수신해야한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt; 메서드를 호출해 프로토콜 수택이 수신 버퍼에 응답 메세지를 수신한다.&lt;/li&gt;
&lt;li&gt;응답 메세지가 일정 시간 후 도착해 수신 버퍼에 담기면 프로토콜 스택은 그것을 추출해 어플리케이션에 넘겨준다.&lt;/li&gt;
&lt;li&gt;수신 데이터에 TCP 헤더 정보를 통해 누락된 데이터가 없는지 확인하고 ACK를 응답한다. 데이터 조각을 버퍼에 보관하고 원래 데이터로 복원하여 어플리케이션에 보낸다.&lt;/li&gt;
&lt;li&gt;어플리케이션에 데이터를 추출한 타이밍에 윈도우 사이즈를 상대에 통지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[용어]

패킷 - 네트워크에 운반되는 분할된 데이터의 덩어리 단위 

MAC 주소 - LAN 방식의 기기가 가지고 있는 형식의 주소 

PID - Process ID의 약자. OS가 각 프로세스에 할당하는 번호 

소켓 - 통신 파이프 양 끝에 있는 출입구와 같은 것 

MTU - Maximum Transmission Unit 패킷 하나에 운받하는 디지털 데이터의 최대길이 (이더넷 1500바이트)

MSS - Maximum Segment Size 헤더를 제외한 TCP 데이터의 최대길이&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story1-%EC%86%8C%EC%BC%93%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story1] 소켓을 작성한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1&quot;&gt;1. 프로토콜 스택의 내부 구성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%BC%93%EC%9D%80-%ED%86%B5%EC%8B%A0-%EC%A0%9C%EC%96%B4%EC%9A%A9-%EC%A0%9C%EC%96%B4-%EC%A0%95%EB%B3%B4%EC%9D%B4%EB%8B%A4&quot;&gt;2. 소켓은 통신 제어용 제어 정보이다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%86%8C%EC%BC%93%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%96%88%EC%9D%84-%EB%95%8C-%EB%8F%99%EC%9E%91&quot;&gt;3. 소켓을 호출했을 때 동작&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story2-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A0%91%EC%86%8D%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story2] 서버에 접속한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%A0%91%EC%86%8D%EC%9D%98-%EC%9D%98%EB%AF%B8&quot;&gt;1. 접속의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%BC%93-%EC%95%9E%EC%97%90-%EC%A0%9C%EC%96%B4-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B8%B0%EB%A1%9D%ED%95%9C-%ED%97%A4%EB%8D%94-%EB%B0%B0%EC%B9%98&quot;&gt;2. 소켓 앞에 제어 정보를 기록한 헤더 배치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%A0%91%EC%86%8D-%EB%8F%99%EC%9E%91%EC%9D%98-%EC%8B%A4%EC%B2%B4&quot;&gt;3. 접속 동작의 실체&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story3-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%86%A1%EC%88%98%EC%8B%A0-%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story3] 데이터를 송수신 한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%97%90-http-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%84%98%EA%B8%B4%EB%8B%A4&quot;&gt;1. 프로토콜 스택에 HTTP 리퀘스트 메세지를 넘긴다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%ED%81%B4-%EB%95%8C%EB%8A%94-%EB%B6%84%ED%95%A0%ED%95%98%EC%97%AC-%EB%B3%B4%EB%82%B8%EB%8B%A4&quot;&gt;2. 데이터가 클 때는 분할하여 보낸다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-ack-%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8C%A8%ED%82%B7%EC%9D%B4-%EB%8F%84%EC%B0%A9%ED%96%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%9C%EB%8B%A4&quot;&gt;3. ACK 번호를 사용하여 패킷이 도착했는지 확인한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%ED%8C%A8%ED%82%B7-%ED%8F%89%EA%B7%A0-%EC%99%95%EB%B3%B5-%EC%8B%9C%EA%B0%84%EC%9C%BC%EB%A1%9C-ack-%EB%B2%88%ED%98%B8%EC%9D%98-%EB%8C%80%EA%B8%B0-%EC%8B%9C%EA%B0%84%EC%9D%84-%EC%A1%B0%EC%A0%95%ED%95%9C%EB%8B%A4&quot;&gt;4. 패킷 평균 왕복 시간으로 ACK 번호의 대기 시간을 조정한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%EC%9C%88%EB%8F%84%EC%9A%B0sliding-window-%EC%A0%9C%EC%96%B4-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-ack-%EB%B2%88%ED%98%B8%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4&quot;&gt;5. 윈도우(Sliding Window) 제어 방식으로 ACK 번호를 관리한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%EC%9C%88%EB%8F%84%EC%9A%B0-%EC%82%AC%EC%9D%B4%EC%A6%88--ack-%ED%95%A9%EC%8A%B9&quot;&gt;6. 윈도우 사이즈 + ACK 합승&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-http-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%88%98%EC%8B%A0%ED%95%9C%EB%8B%A4&quot;&gt;7. HTTP 응답 메세지를 수신한다&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 실전 기술]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 1. 작업큐(Job-Queue…]]></description><link>https://yjksw.github.io/high-traffic-service_13/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_13/</guid><pubDate>Wed, 29 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-작업큐job-queue-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9E%91%EC%97%85%ED%81%90job-queue-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;1 작업큐job queue 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 작업큐(Job-Queue) 시스템&lt;/h2&gt;
&lt;h2 id=&quot;웹-서비스와-요청&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EC%9A%94%EC%B2%AD&quot; aria-label=&quot;웹 서비스와 요청 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 서비스와 요청&lt;/h2&gt;
&lt;p&gt;본래 웹 서비스의 요청은 동기적으로 실행이 되었는데, 데이터가 축적되어 처리가 무거워지면서 작업큐 시스템을 통해서 나중으로 미뤄도 되는 처리를 비동기로 실행하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;예)&lt;/strong&gt; 특정 url을 북마크 할 때 해당 url의 개요를 얻고 키워드를 추출하고, 카테고리를 판정하는 작업들을 비동기로 처리한다. 그렇지 않으면 북마크를 추가할 때마다 긴 시간이 소요된다.&lt;/p&gt;
&lt;h2 id=&quot;작업큐-시스템-입문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%91%EC%97%85%ED%81%90-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%85%EB%AC%B8&quot; aria-label=&quot;작업큐 시스템 입문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;작업큐 시스템 입문&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;비동화 하는 방법 → 해당 처리를 독립된 스크립트로 어플리케이션 내부에서 호출한다.
&lt;ul&gt;
&lt;li&gt;이 방법은 대량의 비동기 처리시 그 수만큼의 프로세스를 실행시키므로 성능상 단점이 될 수 있다.&lt;/li&gt;
&lt;li&gt;스크립트 시작과 초기화의 오버헤드가 커서 성능이 좋지 않다.&lt;/li&gt;
&lt;li&gt;소규모 어플리케이션에서만 진행하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;작업큐와 워커를 세트로 작업큐 시스템을 사용하는 것이 일반적이다.
&lt;ul&gt;
&lt;li&gt;작업큐에 실행하고자 하는 처리를 등록하고, 워커가 큐에서 작업을 추출해서 처리한다.&lt;/li&gt;
&lt;li&gt;작업큐를 통해 일시작인 대량의 처리 등록시 부하의 변동을 흡수한다.&lt;/li&gt;
&lt;li&gt;워커가 항상 실행하고 있으므로 처리시 초기화 오버헤드가 거의 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/136998712-f7065322-bc05-4c98-a135-c8e360e0f89e.png&quot;&gt;&lt;br&gt;이미지 출처: 대용량 서비스를 지탱하는 기술&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-스토리지-선택---rdbms-와-key-value-스토어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D---rdbms-%EC%99%80-key-value-%EC%8A%A4%ED%86%A0%EC%96%B4&quot; aria-label=&quot;2 스토리지 선택   rdbms 와 key value 스토어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 스토리지 선택 - RDBMS 와 key-value 스토어&lt;/h2&gt;
&lt;h2 id=&quot;증가하는-데이터를-어떻게-저장할까-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%80%EC%9E%A5%ED%95%A0%EA%B9%8C-&quot; aria-label=&quot;증가하는 데이터를 어떻게 저장할까  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;증가하는 데이터를 어떻게 저장할까 ?&lt;/h2&gt;
&lt;h3 id=&quot;웹-어플리케이션과-스토리지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80&quot; aria-label=&quot;웹 어플리케이션과 스토리지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 어플리케이션과 스토리지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;스토리지란?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 영속적 혹은 일시적으로 저장하기 위한 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;원본 데이터는 서비스의 근본적인 신뢰성과 관계되어서 매우 중요하다.&lt;/li&gt;
&lt;li&gt;캐시 데이터는 신뢰성보다는 성능을 높이고 비용을 줄일 때 사용된다.&lt;/li&gt;
&lt;li&gt;스토리지를 처음부터 잘 선택하는 것이 중요하다. 중간에 변경을 하려는 것은 굉장히 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스토리지-선택의-전제조건&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D%EC%9D%98-%EC%A0%84%EC%A0%9C%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;스토리지 선택의 전제조건 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스토리지 선택의 전제조건&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;평균크기&lt;/li&gt;
&lt;li&gt;최대크기&lt;/li&gt;
&lt;li&gt;신규추가빈도&lt;/li&gt;
&lt;li&gt;갱신빈도&lt;/li&gt;
&lt;li&gt;삭제빈도&lt;/li&gt;
&lt;li&gt;참조빈도&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스토리지의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;스토리지의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스토리지의 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재는 크기 4가지 이다.
&lt;ul&gt;
&lt;li&gt;RDBMS
&lt;ul&gt;
&lt;li&gt;SQL 언어로 데이터 조작을 수행하는 시스템&lt;/li&gt;
&lt;li&gt;대표적으로 MySQL이 있다.&lt;/li&gt;
&lt;li&gt;MySQL에서는 SQL을 해석하여 실행하는 블록(서버, 옵티마이저, 캐시버퍼)과 실제 데이터를 보관하는 기능블록(InnoDB와 같은 스토리지 엔진)이 분리되어 있다.&lt;/li&gt;
&lt;li&gt;트랜잭션이 필요하고 갱신빈도가 높다면 InnoDB 엔진을 선택하고 추가작업이나 count 등만을 사용하면 MyISAM을 사용하는 등 특징에 맞게 선택해서 사용한다.
&lt;ul&gt;
&lt;li&gt;그렇지만 하나의 서버에서 두가지 엔진을 사용하는 것은 효율적인 CPU, 메모리 사용이 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;분산 key-value 스토어 (ex. memcached 등등)
&lt;ul&gt;
&lt;li&gt;정말 심플한 스토리지 이다.&lt;/li&gt;
&lt;li&gt;RDBMS에 비해 기능을 부족하지만 성능이 10~100배이다.&lt;/li&gt;
&lt;li&gt;분산알고리즘을 사용하기도 하는데 key의 해시값을 서버대수로 나누어서 분산저장하는 방법이나 더 복잡한 방법으로 분산한다.&lt;/li&gt;
&lt;li&gt;캐시데이터를 분산 key-value 스토리지에 저장할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;분산 파일 시스템
&lt;ul&gt;
&lt;li&gt;보통 어느 크기 상의 데이터를 저장하는데 적합하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그 밖의 스토리지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-캐시-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;3 캐시 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 캐시 시스템&lt;/h2&gt;
&lt;h2 id=&quot;웹-어플리케이션의-부하와-프록시캐시-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;웹 어플리케이션의 부하와 프록시캐시 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 어플리케이션의 부하와 프록시/캐시 시스템&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;용량이 부족할 때 HTTP 레벨의 캐싱을 포워드 프록시와 리버스 프록시로 진행할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프록시에서 요청에 대한 응답을 캐싱하여 같은 요청이 전달됐을 때 캐싱해둔 응답을 반환할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-%EC%9E%91%EC%97%85%ED%81%90job-queue-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot;&gt;1. 작업큐(Job-Queue) 시스템&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EC%9A%94%EC%B2%AD&quot;&gt;웹 서비스와 요청&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9E%91%EC%97%85%ED%81%90-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%85%EB%AC%B8&quot;&gt;작업큐 시스템 입문&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D---rdbms-%EC%99%80-key-value-%EC%8A%A4%ED%86%A0%EC%96%B4&quot;&gt;2. 스토리지 선택 - RDBMS 와 key-value 스토어&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%80%EC%9E%A5%ED%95%A0%EA%B9%8C-&quot;&gt;증가하는 데이터를 어떻게 저장할까 ?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80&quot;&gt;웹 어플리케이션과 스토리지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D%EC%9D%98-%EC%A0%84%EC%A0%9C%EC%A1%B0%EA%B1%B4&quot;&gt;스토리지 선택의 전제조건&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80%EC%9D%98-%EC%A2%85%EB%A5%98&quot;&gt;스토리지의 종류&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot;&gt;3. 캐시 시스템&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot;&gt;웹 어플리케이션의 부하와 프록시/캐시 시스템&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 웹 서비스와 네트워크]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 규모가 커지면서 트래픽이 커지면 문제가 발생한다. → 라우터의 성능 관점에서는 bps보다 패킷 단위인 pps…]]></description><link>https://yjksw.github.io/high-traffic-service_12/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_12/</guid><pubDate>Wed, 29 Sep 2021 11:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;규모가 커지면서 트래픽이 커지면 문제가 발생한다. → 라우터의 성능 관점에서는 bps보다 패킷 단위인 pps가 더 중요하다. 사용하고 있는 라우터에서 감당하는 이상의 패킷이 송수신되면 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;또한 호스트 수가 500을 넘어가면서 하나의 서브넷을 구성하면 여러 패킷 손실등이 발생하기도 한다.&lt;/li&gt;
&lt;li&gt;글로벌 서비스로 확장하면 데이터 센트럴 한군데 두었을 때 latency도 한계에 다다를 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;강의38-네트워크-분기점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9838-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B6%84%EA%B8%B0%EC%A0%90&quot; aria-label=&quot;강의38 네트워크 분기점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의38] 네트워크 분기점&lt;/h2&gt;
&lt;h2 id=&quot;1gbps의-한계---pc-라우터의-한계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1gbps%EC%9D%98-%ED%95%9C%EA%B3%84---pc-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%95%9C%EA%B3%84&quot; aria-label=&quot;1gbps의 한계   pc 라우터의 한계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1Gbps의 한계 - PC 라우터의 한계&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1Gbps 는 30만pps → 한계치이다.&lt;/li&gt;
&lt;li&gt;이것을 해결하기 위해서는 PC 라우터를 여러 대 병렬화 하던지, 고가의 라우터를 사용해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;500호스트의-한계---1서브넷-arp-테이블에서의-한계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#500%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%95%9C%EA%B3%84---1%EC%84%9C%EB%B8%8C%EB%84%B7-arp-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C%EC%9D%98-%ED%95%9C%EA%B3%84&quot; aria-label=&quot;500호스트의 한계   1서브넷 arp 테이블에서의 한계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;500호스트의 한계 - 1서브넷 ARP 테이블에서의 한계&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스위치의 ARP(Address Resolution Protocol table)에서 한계가 있다.
&lt;ul&gt;
&lt;li&gt;ARP는 IP주소와 MAC 주소간의 관계를 나타내는 테이블이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 테이블의 크기에 제한이 있다. 그것을 넘어가게 되면 특정 호스트로 ping이 가지 않게 된다.&lt;/li&gt;
&lt;li&gt;서브넷 내에 호스트가 많으면 브로드캐스팅 패킷이 증가하여 트래픽이 부하를 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;네트워크-구조-계층화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B5%AC%EC%A1%B0-%EA%B3%84%EC%B8%B5%ED%99%94&quot; aria-label=&quot;네트워크 구조 계층화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;네트워크 구조 계층화&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;지금까지 언급한 문제에 대한 대책
&lt;ul&gt;
&lt;li&gt;3단 구조로 네트워크를 계층화 하자는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3단 구조&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;가장 작은 것은 Access 계층&lt;/li&gt;
&lt;li&gt;그 다음이 Distribution 계층&lt;/li&gt;
&lt;li&gt;가장 위가 Core 계층 또는 OSPF 영역&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;이렇게 가장 작은 서브넷에서 100대, 200대를 억제, 디스트리뷰션에서 1000대, 코어 전체에서 100000 단위로 다룬다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distribution 영역간 트래픽을 제어해서 너무 증가하지 않도록 하고 서브넷 내에서의 통신량을 제어한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;글로벌화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%80%EB%A1%9C%EB%B2%8C%ED%99%94&quot; aria-label=&quot;글로벌화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;글로벌화&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CDN을 사용해서 여러 곳에 배치된 데이터센터를 활용해 latency를 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의39-한층-높은-단계로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9839-%ED%95%9C%EC%B8%B5-%EB%86%92%EC%9D%80-%EB%8B%A8%EA%B3%84%EB%A1%9C&quot; aria-label=&quot;강의39 한층 높은 단계로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의39] 한층 높은 단계로&lt;/h2&gt;
&lt;h2 id=&quot;웹-서비스-인프라의-핵심&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%9D%98-%ED%95%B5%EC%8B%AC&quot; aria-label=&quot;웹 서비스 인프라의 핵심 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 서비스 인프라의 핵심&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;저비용, 높은 확장성&lt;/li&gt;
&lt;li&gt;적당하면서 충분히 높은 신뢰성&lt;/li&gt;
&lt;li&gt;기술 4가지
&lt;ul&gt;
&lt;li&gt;확장성&lt;/li&gt;
&lt;li&gt;다중화&lt;/li&gt;
&lt;li&gt;효율향상&lt;/li&gt;
&lt;li&gt;네트워크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9838-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B6%84%EA%B8%B0%EC%A0%90&quot;&gt;[강의38] 네트워크 분기점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1gbps%EC%9D%98-%ED%95%9C%EA%B3%84---pc-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%95%9C%EA%B3%84&quot;&gt;1Gbps의 한계 - PC 라우터의 한계&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#500%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%95%9C%EA%B3%84---1%EC%84%9C%EB%B8%8C%EB%84%B7-arp-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C%EC%9D%98-%ED%95%9C%EA%B3%84&quot;&gt;500호스트의 한계 - 1서브넷 ARP 테이블에서의 한계&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B5%AC%EC%A1%B0-%EA%B3%84%EC%B8%B5%ED%99%94&quot;&gt;네트워크 구조 계층화&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%80%EB%A1%9C%EB%B2%8C%ED%99%94&quot;&gt;글로벌화&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9839-%ED%95%9C%EC%B8%B5-%EB%86%92%EC%9D%80-%EB%8B%A8%EA%B3%84%EB%A1%9C&quot;&gt;[강의39] 한층 높은 단계로&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%9D%98-%ED%95%B5%EC%8B%AC&quot;&gt;웹 서비스 인프라의 핵심&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 효율 향상 전략]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/high-traffic-service_11/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_11/</guid><pubDate>Tue, 28 Sep 2021 12:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;다중화로 어느정도 문제를 해결할 수 있지만 규모가 작으면 다중화를 했을 경우 전체적인 리소스 사용률이 떨어지면서 효율이 떨어진다.&lt;/li&gt;
&lt;li&gt;가상화로 전체적인 리소스 사용률을 높일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의36-가상화-기술&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9836-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0&quot; aria-label=&quot;강의36 가상화 기술 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의36] 가상화 기술&lt;/h2&gt;
&lt;h2 id=&quot;가상화-기술의-도입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%EB%8F%84%EC%9E%85&quot; aria-label=&quot;가상화 기술의 도입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화 기술의 도입&lt;/h2&gt;
&lt;h3 id=&quot;왜-가상화-기술을-사용하나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98&quot; aria-label=&quot;왜 가상화 기술을 사용하나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 가상화 기술을 사용하나&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;확장성 → 오버헤드 최소화&lt;/li&gt;
&lt;li&gt;비용대비 성능 → 리소스 사용률 향상, 운용의 유연함&lt;/li&gt;
&lt;li&gt;고가용성 → 환경 격리&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;가상화-기술의-효용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%ED%9A%A8%EC%9A%A9&quot; aria-label=&quot;가상화 기술의 효용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화 기술의 효용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IPMI를 대체하는 하이퍼바이저
&lt;ul&gt;
&lt;li&gt;호스트 OS : 서버에서 최초에 기동하는 OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하드웨어 간 차이 흡수 → 환경 추상화&lt;/li&gt;
&lt;li&gt;준 가상화 사용&lt;/li&gt;
&lt;li&gt;리소스 소비 제어
&lt;ul&gt;
&lt;li&gt;과부하 경고&lt;/li&gt;
&lt;li&gt;부하 조정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;가상화-서버-구축정책&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EC%A0%95%EC%B1%85&quot; aria-label=&quot;가상화 서버 구축정책 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화 서버 구축정책&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;하드웨어의 이용효율을 높이기 위해 남아있는 리소스를 사용하는 게스트 OS를 투입하는 것이다.
&lt;ul&gt;
&lt;li&gt;예를 들어 CPU 리소스가 남이있으면 웹 서버, I/O 리소스가 남아있으면 DB 서버, 메모리 용량이 남아있으면 캐시 서버를 투입한다.&lt;/li&gt;
&lt;li&gt;리소스 소비경향이 비슷한 게스트 OS는 서로 점유하려고 하므로 같이 두지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;가상화로-얻은-장점-정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94%EB%A1%9C-%EC%96%BB%EC%9D%80-%EC%9E%A5%EC%A0%90-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;가상화로 얻은 장점 정리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화로 얻은 장점 정리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;물리적인 리소스 제약에서 해방 → 동적으로 변경 가능&lt;/li&gt;
&lt;li&gt;게스트 OS의 마이그레이션 및 복제가 용이 → 서버 증설이 용이 + 확장성 확보&lt;/li&gt;
&lt;li&gt;소프트웨어 레벨에서 호스트 리소스 제어가능&lt;/li&gt;
&lt;li&gt;비정상 동작 시 문제를 국소화, 호스트를 쉽게 제어&lt;/li&gt;
&lt;li&gt;효율이 향상, 시스템 안정화 가능&lt;/li&gt;
&lt;li&gt;비용대비 성능 향상, 고가용성으로 발전&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;가상화-도입-시-주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EB%8F%84%EC%9E%85-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;가상화 도입 시 주의할 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화 도입 시 주의할 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;성능상 오버헤드가 있다.
&lt;ul&gt;
&lt;li&gt;CPU에서 2% - 3%&lt;/li&gt;
&lt;li&gt;메모리 성능에서 1할정도&lt;/li&gt;
&lt;li&gt;네트워크 성능 절반&lt;/li&gt;
&lt;li&gt;I/O 성능 5% 정도&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상황에 따라서 가상화를 하는 것이 좋을수도 있고, 아닐수도 있다.&lt;/li&gt;
&lt;li&gt;지금은 가상화 기술이 더 안정되었을 것이다 → docker&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9836-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0&quot;&gt;[강의36] 가상화 기술&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%EB%8F%84%EC%9E%85&quot;&gt;가상화 기술의 도입&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98&quot;&gt;왜 가상화 기술을 사용하나&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%ED%9A%A8%EC%9A%A9&quot;&gt;가상화 기술의 효용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EC%A0%95%EC%B1%85&quot;&gt;가상화 서버 구축정책&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94%EB%A1%9C-%EC%96%BB%EC%9D%80-%EC%9E%A5%EC%A0%90-%EC%A0%95%EB%A6%AC&quot;&gt;가상화로 얻은 장점 정리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%EB%8F%84%EC%9E%85-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot;&gt;가상화 도입 시 주의할 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 다중성 확보, 시스템 안정화]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 가동률을 100%로 끌어올려 시스템이 멈추지 않도록 하는 것 여기서 중요한 것은 SPOF (Single Point of Failure…]]></description><link>https://yjksw.github.io/high-traffic-service_10/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_10/</guid><pubDate>Tue, 28 Sep 2021 11:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;가동률을 100%로 끌어올려 시스템이 멈추지 않도록 하는 것&lt;/li&gt;
&lt;li&gt;여기서 중요한 것은 SPOF (Single Point of Failure) 단일장애점을 제거하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;강의33-다중성-확보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9833-%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4&quot; aria-label=&quot;강의33 다중성 확보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의33] 다중성 확보&lt;/h2&gt;
&lt;h2 id=&quot;다중성-확보---was-서버&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4---was-%EC%84%9C%EB%B2%84&quot; aria-label=&quot;다중성 확보   was 서버 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중성 확보 - WAS 서버&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;중요한 것은 여러대의 서버가 있을 때 몇대의 서버가 정지하더라도 서비스가 정상적으로 처리될 수 있는 상태를 만드는 것이다.&lt;/li&gt;
&lt;li&gt;로드밸런서에서 failover를 처리할 수 있다.
&lt;ul&gt;
&lt;li&gt;고장난 서버를 분리시키고 정상적인 서버로 요청을 보내는 것&lt;/li&gt;
&lt;li&gt;연결된 서버들에 대한 주기적인 헬스체크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;failback
&lt;ul&gt;
&lt;li&gt;고장난 서버를 복구하고 다시 복귀시키는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;다중성-확보---db-서버&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4---db-%EC%84%9C%EB%B2%84&quot; aria-label=&quot;다중성 확보   db 서버 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중성 확보 - DB 서버&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;마찬가지로 여러대의 DB 서버가 있을 때 몇대가 고장나더라도 요청을 정상적으로 처리할 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;Master도 다중화 하면 좋다 → 하지만 어렵다.
&lt;ul&gt;
&lt;li&gt;책의 예시에서는 멀티 마스터를 사용하고 있다.
&lt;ul&gt;
&lt;li&gt;양쪽이 서로 slave 관계이기 때문에 한쪽이 쓰기작업을 하면 다른 한쪽으로 전달 (양쪽이 서로 그렇게 작용)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MySQL에서는 데이터가 전달되기 까지 몇 밀리초만큼의 딜레이가 있을 수 있다.
&lt;ul&gt;
&lt;li&gt;엔터프라이즈에서는 이 부분이 굉장히 중요하게 작용하기 때문에 동기적으로 replication을 수행하여 슬레이브까지 쓰여진 이후에 클라이언트에게 결과를 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;동기가 맞지 않은 리스크에 대해서는 어느정도 받아드리고 더 중요시하고 싶은 성능을 향상시키는 태도가 중요하다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;멀티-마스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0-%EB%A7%88%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;멀티 마스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;멀티 마스터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;상호 간에 VRRP (Virtual Redundancy protocol) 로 감시하고 있으며 한쪽이 분리하면 본인을 Active 마스터로 승격시킨다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/136986115-6e607a5b-eafb-4ab3-997b-cf2010535ace.png&quot;&gt;&lt;br&gt;이미지 출처: 대용량 서비스를 지탱하는 기술&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2대의 Master서버가 하나는 Active 하나는 Standby로 구성되어 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;한쪽 서버가 다운되면 다른 쪽이 Master로 승격된다. 다운된 서버가 복구되면 다시 원래 역할로 돌아온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부에서 Active 마스터 서버를 알고 있기 위해서 가장 IP를 부여한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;즉 2대의 서버에 부여된 IP 이외에 Active 한 서버에 부여되는 추가 가상 IP가 있는 것이다.&lt;/li&gt;
&lt;li&gt;따라서 동일한 IP 주소로 계속 요청을 보내기 때문에 마스터 서버간의 전환이 외부에서는 보이지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;다중성-확보---스토리지-서버&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4---%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%9C%EB%B2%84&quot; aria-label=&quot;다중성 확보   스토리지 서버 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중성 확보 - 스토리지 서버&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;분산 파일 시스템을 활용할 수 있다.&lt;/li&gt;
&lt;li&gt;큰 파일을 분할하여 저장하기도 하고, 하나의 파일을 하나로 취급하여 여러 곳에 분산하여 저장한 메타 데이터를 관리하는 형태로 분산하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의34-시스템-안정화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9834-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%88%EC%A0%95%ED%99%94&quot; aria-label=&quot;강의34 시스템 안정화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의34] 시스템 안정화&lt;/h2&gt;
&lt;h2 id=&quot;시스템-안정화를-위한-상반관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%88%EC%A0%95%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%83%81%EB%B0%98%EA%B4%80%EA%B3%84&quot; aria-label=&quot;시스템 안정화를 위한 상반관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 안정화를 위한 상반관계&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;시스템 안정화는 자원효율과 상반관계이다.
&lt;ul&gt;
&lt;li&gt;메모리를 빠듯하게 튜닝했을 때 장애가 일어날 수 있다.&lt;/li&gt;
&lt;li&gt;CPU를 한계에 다다를 정도로 사용하면 장애가 발생할 수 있다.
&lt;ul&gt;
&lt;li&gt;서버의 대수를 줄일 수 있지만, 서버 중 1대가 장애가 나면 나머지 CPU에 여유공간이 없어서 처리능력이 부족해져서 요청을 처리하지 못하게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시스템 안정화는 속도와 상반관계이다.&lt;/li&gt;
&lt;li&gt;안정성을 확보하기 위해 CPU와 메모리에 여유공간을 주고 사용해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;시스템-불안정-요인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B6%88%EC%95%88%EC%A0%95-%EC%9A%94%EC%9D%B8&quot; aria-label=&quot;시스템 불안정 요인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 불안정 요인&lt;/h2&gt;
&lt;h3 id=&quot;기능추가-메모리-누수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5%EC%B6%94%EA%B0%80-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98&quot; aria-label=&quot;기능추가 메모리 누수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기능추가, 메모리 누수&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;새로운 기능이 무거워서 부하가 일어나 서버 다운&lt;/li&gt;
&lt;li&gt;메모리 누수가 시간이 지날수록 쌓여서 스왑을 사용하며 부하가 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;지뢰&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EB%A2%B0&quot; aria-label=&quot;지뢰 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지뢰&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 url을 읽으면 응답이 오지 않아서 장애의 요인이 되는 것&lt;/li&gt;
&lt;li&gt;무한루프나 메모리 누수인 경우가 많다 → 비정상적으로 메모리를 소비하는 것&lt;/li&gt;
&lt;li&gt;애초에 지뢰를 없애는 것도 중요하지만 그것을 어렵기 때문에 밟더라도 치명적인 문제가 되지 않도록 설계하는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;사용자-액세스-패턴&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%95%A1%EC%84%B8%EC%8A%A4-%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;사용자 액세스 패턴 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 액세스 패턴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어떤 특정 사이트에 집중적으로 사용자 접속이 일어나서 다운되는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터량-증가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9F%89-%EC%A6%9D%EA%B0%80&quot; aria-label=&quot;데이터량 증가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터량 증가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 증가로 부하가 일어나는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;외부연계-추가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%B8%EB%B6%80%EC%97%B0%EA%B3%84-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;외부연계 추가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;외부연계 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;외부 모듈이 다운되는 경우&lt;/li&gt;
&lt;li&gt;그렇더라도 서비스가 영향을 받지않고 충분히 동작하도록 설계하는 것이 중요&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;메모리-hdd-장애-nic-장애&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-hdd-%EC%9E%A5%EC%95%A0-nic-%EC%9E%A5%EC%95%A0&quot; aria-label=&quot;메모리 hdd 장애 nic 장애 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리, HDD 장애, NIC 장애&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하드웨어가 능력의 저하의 원인이 될 수 있지만 치명적인 문제가 되지 않도록 하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;헬스체크로 미리 체크하여 문제가 생긴 경우 요청을 우회하는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의35-시스템-안정화-대책&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9835-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%88%EC%A0%95%ED%99%94-%EB%8C%80%EC%B1%85&quot; aria-label=&quot;강의35 시스템 안정화 대책 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의35] 시스템 안정화 대책&lt;/h2&gt;
&lt;h2 id=&quot;실제-안정화-대책---적절한-버퍼-유지와-불안정-요인-제거&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-%EC%95%88%EC%A0%95%ED%99%94-%EB%8C%80%EC%B1%85---%EC%A0%81%EC%A0%88%ED%95%9C-%EB%B2%84%ED%8D%BC-%EC%9C%A0%EC%A7%80%EC%99%80-%EB%B6%88%EC%95%88%EC%A0%95-%EC%9A%94%EC%9D%B8-%EC%A0%9C%EA%B1%B0&quot; aria-label=&quot;실제 안정화 대책   적절한 버퍼 유지와 불안정 요인 제거 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 안정화 대책 - 적절한 버퍼 유지와 불안정 요인 제거&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;적잘한 버퍼 유지를 위해 7할 정도로 운용을 한다. 즉 70%를 상한선으로 정하여 넘어가는 경우 서버를 추가하거나 메모리를 추가하는 것&lt;/li&gt;
&lt;li&gt;불안정 요인을 제거하기 위해 SQL 부하대책, 메모리 누수 줄이기, 비정작 동식 자율제어 등을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sql-부하-대책&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sql-%EB%B6%80%ED%95%98-%EB%8C%80%EC%B1%85&quot; aria-label=&quot;sql 부하 대책 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL 부하 대책&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;부하나 높아지는 쿼리를 날리지 않도록 하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;개발자는 본인이 보내는 쿼리를 파악하여 부하가 높은 쿼리를 발행할 경우 그 용도의 DB를 따로 준비하여 그곳으로 SQL를 날리도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;이상-동작-시-자율제어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%83%81-%EB%8F%99%EC%9E%91-%EC%8B%9C-%EC%9E%90%EC%9C%A8%EC%A0%9C%EC%96%B4&quot; aria-label=&quot;이상 동작 시 자율제어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이상 동작 시 자율제어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자동 DoS 판정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다수의 요청이 오는 경우 에러 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자동 재시작&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리소시를 지나치게 사용했다면 서버를 재시작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자동 쿼리제거&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소요시간이 긴 SQL을 Kill 하도록 함&lt;/li&gt;
&lt;li&gt;특정 시간마다 체크하여 소요시간이 긴 쿼리를 kill 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자율제어를 지나치게 잘 해놓으면 문제가 있어도 어플리케이션이 어느정도 잘 동작하게 된다. 이러면 문제를 알아채지 못해서 본질적인 문제가 해결되지 않을수도 있다는 것을 기억해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자율제어는 잠정적인 해법이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9833-%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4&quot;&gt;[강의33] 다중성 확보&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4---was-%EC%84%9C%EB%B2%84&quot;&gt;다중성 확보 - WAS 서버&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4---db-%EC%84%9C%EB%B2%84&quot;&gt;다중성 확보 - DB 서버&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0-%EB%A7%88%EC%8A%A4%ED%84%B0&quot;&gt;멀티 마스터&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4---%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%9C%EB%B2%84&quot;&gt;다중성 확보 - 스토리지 서버&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9834-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%88%EC%A0%95%ED%99%94&quot;&gt;[강의34] 시스템 안정화&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%88%EC%A0%95%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%83%81%EB%B0%98%EA%B4%80%EA%B3%84&quot;&gt;시스템 안정화를 위한 상반관계&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B6%88%EC%95%88%EC%A0%95-%EC%9A%94%EC%9D%B8&quot;&gt;시스템 불안정 요인&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5%EC%B6%94%EA%B0%80-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98&quot;&gt;기능추가, 메모리 누수&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A7%80%EB%A2%B0&quot;&gt;지뢰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%95%A1%EC%84%B8%EC%8A%A4-%ED%8C%A8%ED%84%B4&quot;&gt;사용자 액세스 패턴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9F%89-%EC%A6%9D%EA%B0%80&quot;&gt;데이터량 증가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%B8%EB%B6%80%EC%97%B0%EA%B3%84-%EC%B6%94%EA%B0%80&quot;&gt;외부연계 추가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-hdd-%EC%9E%A5%EC%95%A0-nic-%EC%9E%A5%EC%95%A0&quot;&gt;메모리, HDD 장애, NIC 장애&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9835-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%88%EC%A0%95%ED%99%94-%EB%8C%80%EC%B1%85&quot;&gt;[강의35] 시스템 안정화 대책&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-%EC%95%88%EC%A0%95%ED%99%94-%EB%8C%80%EC%B1%85---%EC%A0%81%EC%A0%88%ED%95%9C-%EB%B2%84%ED%8D%BC-%EC%9C%A0%EC%A7%80%EC%99%80-%EB%B6%88%EC%95%88%EC%A0%95-%EC%9A%94%EC%9D%B8-%EC%A0%9C%EA%B1%B0&quot;&gt;실제 안정화 대책 - 적절한 버퍼 유지와 불안정 요인 제거&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sql-%EB%B6%80%ED%95%98-%EB%8C%80%EC%B1%85&quot;&gt;SQL 부하 대책&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B4%EC%83%81-%EB%8F%99%EC%9E%91-%EC%8B%9C-%EC%9E%90%EC%9C%A8%EC%A0%9C%EC%96%B4&quot;&gt;이상 동작 시 자율제어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 확장성 확보에 필요한 사고방식]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 [강의31] 계층과 확장성 확장성에 대한 요구 - 서버…]]></description><link>https://yjksw.github.io/high-traffic-service_9/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_9/</guid><pubDate>Tue, 28 Sep 2021 10:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의31-계층과-확장성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9831-%EA%B3%84%EC%B8%B5%EA%B3%BC-%ED%99%95%EC%9E%A5%EC%84%B1&quot; aria-label=&quot;강의31 계층과 확장성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의31] 계층과 확장성&lt;/h2&gt;
&lt;h2 id=&quot;확장성에-대한-요구---서버-1대에서-처리할-수-있는-트래픽-한계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9A%94%EA%B5%AC---%EC%84%9C%EB%B2%84-1%EB%8C%80%EC%97%90%EC%84%9C-%EC%B2%98%EB%A6%AC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%8A%B8%EB%9E%98%ED%94%BD-%ED%95%9C%EA%B3%84&quot; aria-label=&quot;확장성에 대한 요구   서버 1대에서 처리할 수 있는 트래픽 한계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;확장성에 대한 요구 - 서버 1대에서 처리할 수 있는 트래픽 한계&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;(업데이트가 필요한 정보이다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;이 때 당시에 서버 한대로 처리할 수 있는 트래픽은 월 100만 PV 정도, 최고사양으로 100만 ~200만 까지도 감당할 수 있었다.&lt;/li&gt;
&lt;li&gt;수천 ~1만 건/분 정도의 요청을 처리할 수 있는 정도이다.&lt;/li&gt;
&lt;li&gt;더 대규모는 서버1대로 동작할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;계층별-확장성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%84%EC%B8%B5%EB%B3%84-%ED%99%95%EC%9E%A5%EC%84%B1&quot; aria-label=&quot;계층별 확장성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;계층별 확장성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WAS는 상태를 가지고 있지 않으므로 단순히 대수를 늘리는 것으로 요청을 확장할 수 있다.&lt;/li&gt;
&lt;li&gt;로드밸런서에 새로운 서버를 추가하면 된다.&lt;/li&gt;
&lt;li&gt;DB는 다른 방법으로 (쓰기, 읽기가 나뉘어져 있으므로) 더 많은 요소들을 고려하면서 확장해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의32부하-파악-튜닝&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9832%EB%B6%80%ED%95%98-%ED%8C%8C%EC%95%85-%ED%8A%9C%EB%8B%9D&quot; aria-label=&quot;강의32부하 파악 튜닝 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의32]부하 파악, 튜닝&lt;/h2&gt;
&lt;h2 id=&quot;부하-파악---관리화면-시각화의-중요성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%80%ED%95%98-%ED%8C%8C%EC%95%85---%EA%B4%80%EB%A6%AC%ED%99%94%EB%A9%B4-%EC%8B%9C%EA%B0%81%ED%99%94%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1&quot; aria-label=&quot;부하 파악   관리화면 시각화의 중요성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부하 파악 - 관리화면 시각화의 중요성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;각각의 서버에 관해서 그래프화 하는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;부하-측정을-위한-항목&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%80%ED%95%98-%EC%B8%A1%EC%A0%95%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%AD%EB%AA%A9&quot; aria-label=&quot;부하 측정을 위한 항목 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부하 측정을 위한 항목&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Load Average, 메모리, CPU&lt;/li&gt;
&lt;li&gt;Load Average
&lt;ul&gt;
&lt;li&gt;대기중인 프로세스의 평균수치&lt;/li&gt;
&lt;li&gt;수치가 0에 가까울 수록 좋은 것이며, CPU 코어 수보다 작으면 양호한 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;용도에-맞는-튜닝&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%A9%EB%8F%84%EC%97%90-%EB%A7%9E%EB%8A%94-%ED%8A%9C%EB%8B%9D&quot; aria-label=&quot;용도에 맞는 튜닝 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;용도에 맞는 튜닝&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;책에서 나온 예시의 경우
&lt;ul&gt;
&lt;li&gt;봇에게 응답하는 것은 응답시간보다 처리량이 중요하므로 처리량에 서버 리소스를 대부분을 쏟고 load average가 평균적으로 높다.&lt;/li&gt;
&lt;li&gt;사용자 응답은 응답 시간이 중요하므로 load average를 낮게 유지하고 프로세스를 쌓아두지 않고 잘 응답하는 것을 중요하게 여긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;어떤 상황에 어떤 튜닝을 하는지가 운영을 할 때 굉장히 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ap-서버db-서버의-튜닝-정책과-서버-대수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ap-%EC%84%9C%EB%B2%84db-%EC%84%9C%EB%B2%84%EC%9D%98-%ED%8A%9C%EB%8B%9D-%EC%A0%95%EC%B1%85%EA%B3%BC-%EC%84%9C%EB%B2%84-%EB%8C%80%EC%88%98&quot; aria-label=&quot;ap 서버db 서버의 튜닝 정책과 서버 대수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AP 서버/DB 서버의 튜닝 정책과 서버 대수&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;사용자용 DB 또한 전체적으로 부하를 낮게 유지함으로 응답을 빠르게 하는 것을 중요하게 생각한다.&lt;/li&gt;
&lt;li&gt;상황마다 응답을 중요시할 지, 리소스를 소진하는 것을 중요하시 할지 결정하는 것이 중요하다.
&lt;ul&gt;
&lt;li&gt;리소스 소진이 정확히 뭘까?
&lt;ul&gt;
&lt;li&gt;CPU utilization을 높게 유지 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;서비스-규모와-튜닝&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B7%9C%EB%AA%A8%EC%99%80-%ED%8A%9C%EB%8B%9D&quot; aria-label=&quot;서비스 규모와 튜닝 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서비스 규모와 튜닝&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;부하를 가시화하고 그래프를 겹쳐서 병목이나 이상현상을 파악할 수 있도록 하는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;확장성-확보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4&quot; aria-label=&quot;확장성 확보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;확장성 확보&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;로드밸러선나 파티셔닝(DB 분할)을 이용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9831-%EA%B3%84%EC%B8%B5%EA%B3%BC-%ED%99%95%EC%9E%A5%EC%84%B1&quot;&gt;[강의31] 계층과 확장성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9A%94%EA%B5%AC---%EC%84%9C%EB%B2%84-1%EB%8C%80%EC%97%90%EC%84%9C-%EC%B2%98%EB%A6%AC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%8A%B8%EB%9E%98%ED%94%BD-%ED%95%9C%EA%B3%84&quot;&gt;확장성에 대한 요구 - 서버 1대에서 처리할 수 있는 트래픽 한계&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%84%EC%B8%B5%EB%B3%84-%ED%99%95%EC%9E%A5%EC%84%B1&quot;&gt;계층별 확장성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9832%EB%B6%80%ED%95%98-%ED%8C%8C%EC%95%85-%ED%8A%9C%EB%8B%9D&quot;&gt;[강의32]부하 파악, 튜닝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B6%80%ED%95%98-%ED%8C%8C%EC%95%85---%EA%B4%80%EB%A6%AC%ED%99%94%EB%A9%B4-%EC%8B%9C%EA%B0%81%ED%99%94%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1&quot;&gt;부하 파악 - 관리화면 시각화의 중요성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B6%80%ED%95%98-%EC%B8%A1%EC%A0%95%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%AD%EB%AA%A9&quot;&gt;부하 측정을 위한 항목&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%A9%EB%8F%84%EC%97%90-%EB%A7%9E%EB%8A%94-%ED%8A%9C%EB%8B%9D&quot;&gt;용도에 맞는 튜닝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ap-%EC%84%9C%EB%B2%84db-%EC%84%9C%EB%B2%84%EC%9D%98-%ED%8A%9C%EB%8B%9D-%EC%A0%95%EC%B1%85%EA%B3%BC-%EC%84%9C%EB%B2%84-%EB%8C%80%EC%88%98&quot;&gt;AP 서버/DB 서버의 튜닝 정책과 서버 대수&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B7%9C%EB%AA%A8%EC%99%80-%ED%8A%9C%EB%8B%9D&quot;&gt;서비스 규모와 튜닝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4&quot;&gt;확장성 확보&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 대규모 데이터 처리를 지탱하는 서버/인프라 입문]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 [강의29] 엔터프라이즈 vs. 웹 서비스 엔터프라이즈 vs…]]></description><link>https://yjksw.github.io/high-traffic-service_8/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_8/</guid><pubDate>Tue, 28 Sep 2021 09:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의29-엔터프라이즈-vs-웹-서비스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9829-%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-vs-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4&quot; aria-label=&quot;강의29 엔터프라이즈 vs 웹 서비스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의29] 엔터프라이즈 vs. 웹 서비스&lt;/h2&gt;
&lt;h2 id=&quot;엔터프라이즈-vs-웹-서비스---응용범위로-보는-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-vs-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---%EC%9D%91%EC%9A%A9%EB%B2%94%EC%9C%84%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;엔터프라이즈 vs 웹 서비스   응용범위로 보는 차이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;엔터프라이즈 vs. 웹 서비스 - 응용범위로 보는 차이&lt;/h2&gt;
&lt;h3 id=&quot;웹-서비스의-특징---엔터프라이즈와-비교&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%ED%8A%B9%EC%A7%95---%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88%EC%99%80-%EB%B9%84%EA%B5%90&quot; aria-label=&quot;웹 서비스의 특징   엔터프라이즈와 비교 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 서비스의 특징 - 엔터프라이즈와 비교&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;트래픽 - 엔터프라이즈에 대규모 트래픽이 일어날 일은 많이 없지만 웹 서비스에서는 대규모 트래픽이 일어나고는 한다.&lt;/li&gt;
&lt;li&gt;성장성 - 비즈니스와 연관된 엔터프라이즈는 급격히 성장하지는 않는다. 웹 서비스와 같은 경우는 폭팔적 성장이 가능하다.&lt;/li&gt;
&lt;li&gt;신뢰성 - 사람의 목숨이나 돈에 관련된 일이 많기 때문에 높은 신뢰성이 요구된다. 웹 서비스는 인명이나 돈과 깊게 관련 없는 경우가 더 많기 때문에 그정도의 신뢰성이 중요하지는 않다.&lt;/li&gt;
&lt;li&gt;트랜잭션 - 신뢰성과 비슷한 맥락의 이야기지만 더 DB에 한정되서 이야기 한다.
&lt;ul&gt;
&lt;li&gt;엔터프라이즈는 데이터의 정합성이 매우 중요하다. (은행에서 돈 예시)&lt;/li&gt;
&lt;li&gt;웹 서비스는 (블로그와 같이) 정합성이 일치하지 않아도 큰 문제가 생기지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;웹-서비스의-인프라---중요-3-포인트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B8%ED%94%84%EB%9D%BC---%EC%A4%91%EC%9A%94-3-%ED%8F%AC%EC%9D%B8%ED%8A%B8&quot; aria-label=&quot;웹 서비스의 인프라   중요 3 포인트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 서비스의 인프라 - 중요 3 포인트&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;저비용 고효율
&lt;ul&gt;
&lt;li&gt;항상 trade-off가 있기 때문에 저비용을 고수하기 위해서는 희생되는 무언가가 있다.&lt;/li&gt;
&lt;li&gt;이때 100% 신뢰성을 위해 많은 비용을 치루기보다 비용을 낮춰서 효율을 추구하는 방향을 택한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;확장성이나 응답성 등의 설계를 중요시
&lt;ul&gt;
&lt;li&gt;성장속도를 모르거나 서비스의 응답성이 중요한 경우가 많다.&lt;/li&gt;
&lt;li&gt;이때 신뢰성보다 장래를 위한 확장을 고려한 설계를 한다.&lt;/li&gt;
&lt;li&gt;즉, 대부분의 시간에 양호한 상태의 응답이 이루어질 수 있도록 하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;바뀌는 서비스 사양에 유연하게 대응할 수 있어야한다.
&lt;ul&gt;
&lt;li&gt;빠르게 바뀐 사양에 대해서 적용하고 배포할 수 있어야한다. 빠르게 변하는 시장이기 때문에 타이밍이 중요하다.&lt;/li&gt;
&lt;li&gt;또한 배포를 간편하고 빠르게, 처리중인 요청에 영향이 안가도록 하는 것도 중요하다. 문제가 생기면 바로 이전코드로 돌아갈 수 있어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의30-클라우드-vs-자체구축-인프라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9830-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-vs-%EC%9E%90%EC%B2%B4%EA%B5%AC%EC%B6%95-%EC%9D%B8%ED%94%84%EB%9D%BC&quot; aria-label=&quot;강의30 클라우드 vs 자체구축 인프라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의30] 클라우드 vs. 자체구축 인프라&lt;/h2&gt;
&lt;h2 id=&quot;클라우드-컴퓨팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%BB%B4%ED%93%A8%ED%8C%85&quot; aria-label=&quot;클라우드 컴퓨팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클라우드 컴퓨팅&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Amazon EC2 같은 것들을 말한다.&lt;/li&gt;
&lt;li&gt;자체구축 인프라 vs. 클라우드 컴퓨터가 대두이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;클라우드의-장단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;클라우드의 장단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클라우드의 장단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;저가로 사용하면서 확장해갈 수 있다. 즉 확장성이 가장 큰 장점이다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;단점
&lt;ul&gt;
&lt;li&gt;각 클라우드 서비스마다의 독자적인 사양에 대응해야한다.&lt;/li&gt;
&lt;li&gt;각 클라우드 서비스에서 지원하고 있는 알고리즘 사양에 대해서 더 자세히 알아가야하며, 마음대로 커스텀하지 못하는 부분이 있을 수 있다.&lt;/li&gt;
&lt;li&gt;그냥 노드가 죽어버릴 수도 있다 (?옛날 이야기?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소규모 프로젝트나 학생 사용하는 용도는 클라우드 컴퓨팅이 좋은 분야라고 하는데 현재는 거의 대세가 되어 버린 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;자체구축-인프라의-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%B2%B4%EA%B5%AC%EC%B6%95-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%9D%98-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;자체구축 인프라의 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자체구축 인프라의 장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;하드웨어 구성을 유연하게
&lt;ul&gt;
&lt;li&gt;클라우드 컴퓨팅의 경우 사양에 상한선이 있는데 자체 구축인 경우 ssd를 도입하는 등 커스텀할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서비스로부터 요청에 유연하게 대응
&lt;ul&gt;
&lt;li&gt;대수를 늘릴 뿐만 아니라 네트워크적으로 가까운 구성을 갖추는 등등을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;병목현상을 제어할 수 있음
&lt;ul&gt;
&lt;li&gt;병목 현상이 있을때 클라우드 컴퓨팅 회사의 사양이나 알고리즘에 의존적을 수 밖에 없지만 자체구축이면 자체적으로 제어가 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;자체구축-인프라와-수직통합-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%B2%B4%EA%B5%AC%EC%B6%95-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%99%80-%EC%88%98%EC%A7%81%ED%86%B5%ED%95%A9-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;자체구축 인프라와 수직통합 모델 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자체구축 인프라와 수직통합 모델&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;수직통합 모델이란?
&lt;ul&gt;
&lt;li&gt;물리적 계층부터 서비스 설계까지 모든 것을 한 회사에세 구축하는 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수평분산 모델이란?
&lt;ul&gt;
&lt;li&gt;각 계층을 다른 기업이 시스템으로 제공하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9829-%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-vs-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4&quot;&gt;[강의29] 엔터프라이즈 vs. 웹 서비스&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-vs-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---%EC%9D%91%EC%9A%A9%EB%B2%94%EC%9C%84%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%B0%A8%EC%9D%B4&quot;&gt;엔터프라이즈 vs. 웹 서비스 - 응용범위로 보는 차이&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%ED%8A%B9%EC%A7%95---%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88%EC%99%80-%EB%B9%84%EA%B5%90&quot;&gt;웹 서비스의 특징 - 엔터프라이즈와 비교&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B8%ED%94%84%EB%9D%BC---%EC%A4%91%EC%9A%94-3-%ED%8F%AC%EC%9D%B8%ED%8A%B8&quot;&gt;웹 서비스의 인프라 - 중요 3 포인트&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9830-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-vs-%EC%9E%90%EC%B2%B4%EA%B5%AC%EC%B6%95-%EC%9D%B8%ED%94%84%EB%9D%BC&quot;&gt;[강의30] 클라우드 vs. 자체구축 인프라&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%BB%B4%ED%93%A8%ED%8C%85&quot;&gt;클라우드 컴퓨팅&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot;&gt;클라우드의 장단점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9E%90%EC%B2%B4%EA%B5%AC%EC%B6%95-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%9D%98-%EC%9E%A5%EC%A0%90&quot;&gt;자체구축 인프라의 장점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9E%90%EC%B2%B4%EA%B5%AC%EC%B6%95-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%99%80-%EC%88%98%EC%A7%81%ED%86%B5%ED%95%A9-%EB%AA%A8%EB%8D%B8&quot;&gt;자체구축 인프라와 수직통합 모델&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_2]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH1. 웹 브라우저가 메시지를 만든다 입니다 🙌 🛺 [Story3] 전 세계의 DNS 서버가 연대한다. DNS 서버의 기본 동작 DNS…]]></description><link>https://yjksw.github.io/one-percent-network-2/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-2/</guid><pubDate>Mon, 27 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH1. 웹 브라우저가 메시지를 만든다 입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story3-전-세계의-dns-서버가-연대한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story3-%EC%A0%84-%EC%84%B8%EA%B3%84%EC%9D%98-dns-%EC%84%9C%EB%B2%84%EA%B0%80-%EC%97%B0%EB%8C%80%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story3 전 세계의 dns 서버가 연대한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story3] 전 세계의 DNS 서버가 연대한다.&lt;/h2&gt;
&lt;h3 id=&quot;dns-서버의-기본-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dns-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;dns 서버의 기본 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DNS 서버의 기본 동작&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS 서버는 조회 메세지를 받고 그것에 대해 응답을 한다.&lt;/li&gt;
&lt;li&gt;조회 메세지 내용
&lt;ul&gt;
&lt;li&gt;이름: 서버나 메일 배송 목적지 (@뒤 호스트)
&lt;ul&gt;
&lt;li&gt;ex. &lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클래스: 이전에 필요했으나 요즘에는 항상 인터넷을 나타내는 클래스 ‘IN’으로 표기됨&lt;/li&gt;
&lt;li&gt;타입: 다음마다 응답 형태가 바뀐다.
&lt;ul&gt;
&lt;li&gt;A: 이름에 지원되는 IP 주소&lt;/li&gt;
&lt;li&gt;MX: 메일 배송 목적지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS 서버에서 위 3가지가 일치하는 응답 정보를 찾아서 등록된 IP 주소 등을 회신한다.&lt;/li&gt;
&lt;li&gt;MX, 메일 서버에 대한 응답인 경우
&lt;ul&gt;
&lt;li&gt;메일 서버의 우선순위 + 메일 서버의 이름, 해당 메일 서버의 IP 주소를 함께 회신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS 서버에서 취급하는 타입은 여러개가 있다.
&lt;ul&gt;
&lt;li&gt;PTR, NS, SOA, CNAME 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;도메인의-계층&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%98-%EA%B3%84%EC%B8%B5&quot; aria-label=&quot;도메인의 계층 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도메인의 계층&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;정말 많은 서버의 수가 존재하기 때문에 한대의 DNS 서버에 모든 정보를 등록할 수 없다. &lt;strong&gt;정보를 분산시켜 여러대의 DNS 서버에 등록&lt;/strong&gt;해놓고 조회하는 정보를 찾아서 응답하는 구조로 되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;도메인명&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8%EB%AA%85&quot; aria-label=&quot;도메인명 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도메인명&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DNS 서버에 등록되어 있는 도메인명은 계층적 구조를 가지고 있다.&lt;/li&gt;
&lt;li&gt;도메인의 계층은 .점으로 구분되어 있다. (ex. &lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt; 각각의 www, example, com 이 계층을 나타냄)
&lt;ul&gt;
&lt;li&gt;위의 경우 com 도메인 하위에 example 도메인 하위에 www 도메인이 있는 것 (서브 도메인)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하나의 도메인에 대한 정보들은 하나의 DNS 서버에서 모두 관리한다.
&lt;ul&gt;
&lt;li&gt;DNS 서버는 다수의 도메인을 관리할 수 있지만 같은 도메인인 정보들은 모두 한대의 DNS 서버에 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가장 먼저 출연하는 도메인이 서버의 이름, 최하위 서브 도메인이다 (예, www, api, dev 같은 경우)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;담당-dns-서버를-찾아-ip-주소를-가져온다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%B4%EB%8B%B9-dns-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%B0%BE%EC%95%84-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A8%EB%8B%A4&quot; aria-label=&quot;담당 dns 서버를 찾아 ip 주소를 가져온다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;담당 DNS 서버를 찾아 IP 주소를 가져온다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;여러 DNS 서버가 존재하기 때문에 중요한 것은 어느 DNS 서버에 원하는 정보가 있는지 판단하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 방법으로 상위 도메인에 하위 도메인을 등록하여 찾아갈 수 있는 구조로 설계했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com 도메인에 &lt;a href=&quot;http://example.com&quot;&gt;example.com&lt;/a&gt; 도메인이 등록되어 있는 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;com, kr 등등은 최상위 도메인이 아니다 → root 도메인이 존재하여 거기에 com, kr 등등의 도메인이 등록되어 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;70%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/138427408-cd36ffcc-7956-46a4-8a99-d6459cdc3264.png&quot;&gt;&lt;br&gt;출처: 상위 1% 네트워크&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;루트-도메인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A3%A8%ED%8A%B8-%EB%8F%84%EB%A9%94%EC%9D%B8&quot; aria-label=&quot;루트 도메인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;루트 도메인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;최상위 도메인으로 할당된 IP 주소는 13개 뿐이다.&lt;/li&gt;
&lt;li&gt;그렇기 때문에 루트 도메인의 정보를 모든 DNS 서버에 등록할 수 있다 → 기본으로 DNS 서버 설정 파일에 등록되어 있다.&lt;/li&gt;
&lt;li&gt;그 어떤 DNS 서버에서도 루트 도메인 DNS 서버로 이동할 수 있는 주소를 확보한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;클라이언트가-wwwexamplecom의-ip-주소를-구하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-wwwexamplecom%EC%9D%98-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;클라이언트가 wwwexamplecom의 ip 주소를 구하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클라이언트가 &lt;a href=&quot;http://www.example.com%EC%9D%98&quot;&gt;www.example.com의&lt;/a&gt; IP 주소를 구하는 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컴퓨터에 설정되어 있는 가장 가까운 DNS 서버로 조회를 요청 → 없으면 루트 도메인 서버로 메세지 전송&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(존재하지 않는 경우) 루트 도메인으로 이동 → 없으면 com 도메인 주소 반송&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;루트 도메인에 등록된 com 도메인 서버로 이동 → 없으면 &lt;a href=&quot;http://example.com&quot;&gt;example.com&lt;/a&gt; 도메인 주소 반송&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;com 도메인 서버에 등록된 &lt;a href=&quot;http://example.com&quot;&gt;example.com&lt;/a&gt; 도메인 서버로 이동 → 반복&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원하는 도메인 IP 주소를 응답&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그것을 가장 가까운 DNS 서버에서 클라이언트에게 응답&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;도메인이 같은 DNS 서버에 존재할 수 있으므로 도메인 개수만큼 서버를 꼭 이동하는 것은 아니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dns-서버는-캐시-기능으로-빠르게-회답할-수-있다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dns-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%BA%90%EC%8B%9C-%EA%B8%B0%EB%8A%A5%EC%9C%BC%EB%A1%9C-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%9A%8C%EB%8B%B5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4&quot; aria-label=&quot;dns 서버는 캐시 기능으로 빠르게 회답할 수 있다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DNS 서버는 캐시 기능으로 빠르게 회답할 수 있다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS 서버에서 한번 조사한 이름을 캐시에 저장한다.&lt;/li&gt;
&lt;li&gt;이후에 저장할 경우 루트 도메인애서부터 찾는 것이 아니라 캐싱된 도메인의 하위 도메인부터 찾을 수 있다.&lt;/li&gt;
&lt;li&gt;존재하지 않은 도메인인 경우도 캐싱하여 빠르게 응답한다.&lt;/li&gt;
&lt;li&gt;유효기간에 따라서 정보를 삭제하고 캐시 응답인지 서버 응답인지 알려준다. (정보 업데이트 고려)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story4-프로토콜-스택에-메시지-송신을-의뢰한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story4-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%97%90-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%86%A1%EC%8B%A0%EC%9D%84-%EC%9D%98%EB%A2%B0%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story4 프로토콜 스택에 메시지 송신을 의뢰한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [Story4] 프로토콜 스택에 메시지 송신을 의뢰한다.&lt;/h2&gt;
&lt;h3 id=&quot;데이터-송수신-동작의-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%98-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;데이터 송수신 동작의 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 송수신 동작의 개요&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메세지 전송을 OS 내의 &lt;strong&gt;프로토콜 스택&lt;/strong&gt;에 위임한다.&lt;/li&gt;
&lt;li&gt;반드시 웹 요청 메세지 뿐 아니라 컴퓨터의 모든 네트워크 관련 동작에 공통인 부분이다.
&lt;ul&gt;
&lt;li&gt;디지털 데이터 송수신이 필요한 부분은 모두 할당된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로토콜 스택에 의뢰하여 메세지를 전송할 때도 &lt;strong&gt;Socket 라이브러리&lt;/strong&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;소켓을-활용한-데이터-송수신-기본-동작---프로토콜-스택-담당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EC%BC%93%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91---%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D-%EB%8B%B4%EB%8B%B9&quot; aria-label=&quot;소켓을 활용한 데이터 송수신 기본 동작   프로토콜 스택 담당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소켓을 활용한 데이터 송수신 기본 동작 - 프로토콜 스택 담당&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;소켓을 생성 (서버와 클라이언트가 각각 소켓을 생성)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;소켓은 데이터가 흐르는 통로의 입구와 같은 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;서버측의 소켓에 클라이언트 소켓 접속&lt;/li&gt;
&lt;li&gt;데이터 송 수신&lt;/li&gt;
&lt;li&gt;완료 후 파이프 분리 후 소켓 말소 (close는 어느 측에 해도 무방)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;소켓 라이브러리는 어플리케이션으로부터 위 단계를 실행하도록 의뢰받고 그대로 프로토콜 스택에 중계하는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;소켓의-작성-단계---소켓-라이브러리-메서드-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EC%BC%93%EC%9D%98-%EC%9E%91%EC%84%B1-%EB%8B%A8%EA%B3%84---%EC%86%8C%EC%BC%93-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;소켓의 작성 단계   소켓 라이브러리 메서드 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소켓의 작성 단계 - 소켓 라이브러리 메서드 활용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;디스크립터 = socket&lt;/code&gt;을 생성
&lt;ul&gt;
&lt;li&gt;디스크립터로 소켓을 식별&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt; 메서드로 (소켓 디스크립터, 대상 서버 IP 주소 및 포트번호 필요) 로 대상 서버와 접속&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;write&lt;/code&gt; 메서드로 데이터 송신&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt; 메서드로 데이터 수신&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;close&lt;/code&gt; 메서드로 소켓 말소&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파이프-연결하는-접속-단계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%ED%94%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EC%A0%91%EC%86%8D-%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;파이프 연결하는 접속 단계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파이프 연결하는 접속 단계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt;  라는 메서드에 인자로 소켓 디스크립터 + 서버 IP 주소 + 서버 포트 번호 가 필요하다.&lt;/li&gt;
&lt;li&gt;프로토콜 스택은 connect에서 중계한 디스크립터로 데이터 송수신을 담당할 소켓을 판별한다.&lt;/li&gt;
&lt;li&gt;IP 주소는 컴퓨터를 식별할 수 있지만, 컴퓨터에 존재하는 여러 소켓 중 어느 것에 연결할지 알기 위해서는 포트 번호가 필요하다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;포트 번호는 상대 소켓을 식별 !!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;왜 소켓을 식별할 수 있는 디스크립터를 사용하지 않을까 ?
&lt;ul&gt;
&lt;li&gt;디스크립터는 소켓을 생성한 어플리케이션에서 프로토콜 스택에 의뢰하도록 주는 것이다.&lt;/li&gt;
&lt;li&gt;상대에게 소켓 디스크립터를 넘겨주어도 정보가 없으므로 식별할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;포트 번호는 미리 지정한 규칙에 따라서 서로 알고있는 값이다. (웹 서버는 80, 메일은 25 등등)&lt;/li&gt;
&lt;li&gt;포트 번호도 충돌할 수 있기 때문에 중복되지 않도록 IANA에서 일괄 관리한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;클라이언트의 소켓 번호는 알아서 할당 후 접속 동작에서 서버에 통지한다.  (이후 추가 설명)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;메세지를-주고받는-송수신-단계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%A3%BC%EA%B3%A0%EB%B0%9B%EB%8A%94-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;메세지를 주고받는 송수신 단계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메세지를 주고받는 송수신 단계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;송신측에서 메모리에 송신 데이터를 준비한다. (HTTP request 메세지)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;write&lt;/code&gt;를 호출하며 소켓 디스크립터와 송신 데이터를 지정한다.&lt;/li&gt;
&lt;li&gt;디스크립터로 지정된 소켓에 연결대상이 이미 접속 단계에서 지정이 되어있다. 목적지로 데이터를 송신한다.&lt;/li&gt;
&lt;li&gt;이후 응답 메세지를 수신할 때는 &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt;를 통해 수신 버퍼에 응답 메세지를 저장한다.
&lt;ul&gt;
&lt;li&gt;수신 버퍼는 어플리케이션의 메모리 영역&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;연결-끊기-단계에서-송수신이-종료된다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C-%EC%86%A1%EC%88%98%EC%8B%A0%EC%9D%B4-%EC%A2%85%EB%A3%8C%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;연결 끊기 단계에서 송수신이 종료된다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연결 끊기 단계에서 송수신이 종료된다&lt;/h3&gt;
&lt;p&gt;웹 서비스와 같은 경우 웹 서버에서 먼저 close를 호출한다. (어느측에서 먼저해도 상관없다)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 서버에서 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt;를 호출&lt;/li&gt;
&lt;li&gt;클라이언트가 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt; 호출 여부를 응답받으면, 클라이언트도 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt;를 호출하여 연결 끊기를 진행&lt;/li&gt;
&lt;li&gt;HTTP 프로토콜은 하나하나의 데이터를 별도의 것으로 취급하기 때문에 위 단계를 모든 데이터를 송수신 할때마다 반복하는 것이다.
&lt;ul&gt;
&lt;li&gt;이것이 비효율적이라고 생각하여 나온것이 HTTP 1.1의 &lt;code class=&quot;language-text&quot;&gt;keep-alive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;더 이상 송수신할 데이터가 없는 경우에만 소켓을 말소하는 단계에 들어간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;이 이후에 데이터에 네트워크가 흘러가기 전까지 프로토콜 스택, LAN 드라이버, LAN 어댑터가 연동하여 실행된다. (다음 챕터)&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[용어]

MX - Mail eXchange

캐시 - 한 번 사용한 데이터를 데이터의 이용 장소와 가까운 곳에 있는 고속의 기억 장치에 저장하여 두 번째 이후 고속화 하는 것&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story3-%EC%A0%84-%EC%84%B8%EA%B3%84%EC%9D%98-dns-%EC%84%9C%EB%B2%84%EA%B0%80-%EC%97%B0%EB%8C%80%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story3] 전 세계의 DNS 서버가 연대한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#dns-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91&quot;&gt;DNS 서버의 기본 동작&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%98-%EA%B3%84%EC%B8%B5&quot;&gt;도메인의 계층&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8%EB%AA%85&quot;&gt;도메인명&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%B4%EB%8B%B9-dns-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%B0%BE%EC%95%84-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A8%EB%8B%A4&quot;&gt;담당 DNS 서버를 찾아 IP 주소를 가져온다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A3%A8%ED%8A%B8-%EB%8F%84%EB%A9%94%EC%9D%B8&quot;&gt;루트 도메인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-wwwexamplecom%EC%9D%98-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;클라이언트가 www.example.com의 IP 주소를 구하는 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#dns-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%BA%90%EC%8B%9C-%EA%B8%B0%EB%8A%A5%EC%9C%BC%EB%A1%9C-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%9A%8C%EB%8B%B5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4&quot;&gt;DNS 서버는 캐시 기능으로 빠르게 회답할 수 있다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story4-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%97%90-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%86%A1%EC%8B%A0%EC%9D%84-%EC%9D%98%EB%A2%B0%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [Story4] 프로토콜 스택에 메시지 송신을 의뢰한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%98-%EA%B0%9C%EC%9A%94&quot;&gt;데이터 송수신 동작의 개요&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%86%8C%EC%BC%93%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91---%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D-%EB%8B%B4%EB%8B%B9&quot;&gt;소켓을 활용한 데이터 송수신 기본 동작 - 프로토콜 스택 담당&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%86%8C%EC%BC%93%EC%9D%98-%EC%9E%91%EC%84%B1-%EB%8B%A8%EA%B3%84---%EC%86%8C%EC%BC%93-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%9C%EC%9A%A9&quot;&gt;소켓의 작성 단계 - 소켓 라이브러리 메서드 활용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%ED%94%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EC%A0%91%EC%86%8D-%EB%8B%A8%EA%B3%84&quot;&gt;파이프 연결하는 접속 단계&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%A3%BC%EA%B3%A0%EB%B0%9B%EB%8A%94-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8B%A8%EA%B3%84&quot;&gt;메세지를 주고받는 송수신 단계&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C-%EC%86%A1%EC%88%98%EC%8B%A0%EC%9D%B4-%EC%A2%85%EB%A3%8C%EB%90%9C%EB%8B%A4&quot;&gt;연결 끊기 단계에서 송수신이 종료된다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 알고리즘 실용화]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 [강의19] 알고리즘과 평가 데이터 규모와 계산량 차이 데이터가 클 수록 알고리즘이나 데이터 구조 선택이 속도에 영향을 미친다. ex. 선형탐색 vs…]]></description><link>https://yjksw.github.io/high-traffic-service_6/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_6/</guid><pubDate>Mon, 27 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의19-알고리즘과-평가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9819-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC-%ED%8F%89%EA%B0%80&quot; aria-label=&quot;강의19 알고리즘과 평가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의19] 알고리즘과 평가&lt;/h2&gt;
&lt;h2 id=&quot;데이터-규모와-계산량-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B7%9C%EB%AA%A8%EC%99%80-%EA%B3%84%EC%82%B0%EB%9F%89-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;데이터 규모와 계산량 차이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 규모와 계산량 차이&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 클 수록 알고리즘이나 데이터 구조 선택이 속도에 영향을 미친다.
&lt;ul&gt;
&lt;li&gt;ex. 선형탐색 vs. 이분탐색&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;알고리즘이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;알고리즘이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;알고리즘이란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;알고리즘은 값의 집합을 입력, 다른 값의 집합을 출력으로 하고 명확하게 정의된 계산절차이다.&lt;/li&gt;
&lt;li&gt;유한한 자원인 CPU나 메모리를 어떻게 활용하여 문제를 해결해야 할까?&lt;/li&gt;
&lt;li&gt;적절한 데이터구조를 사용하여 알고리즘을 구현해야지 효과가 있다.&lt;/li&gt;
&lt;li&gt;결국 측정이 중요하다 !!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;알고리즘을-활용한-데이터-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;알고리즘을 활용한 데이터 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;알고리즘을 활용한 데이터 처리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;과도한 알고리즘이 항상 더 효율이 좋은 것은 아니다.
&lt;ul&gt;
&lt;li&gt;때로는 간단한 알고리즘이 더 시간을 줄여줄 때가 있다.
&lt;ul&gt;
&lt;li&gt;과도한 알고리즘의 경우 전처리에 많은 시간이 소요되기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;항상 측정이 중요하다. 단순이 데이터가 ‘적다’, ‘많다’ 라는 것으로 판단하는 것은 좋지 않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터-압축과-속도---전체적인-처리량을-높이기-위한-사고방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%95%EC%B6%95%EA%B3%BC-%EC%86%8D%EB%8F%84---%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%B2%98%EB%A6%AC%EB%9F%89%EC%9D%84-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%82%AC%EA%B3%A0%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;데이터 압축과 속도   전체적인 처리량을 높이기 위한 사고방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 압축과 속도 - 전체적인 처리량을 높이기 위한 사고방식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;압축이라는 것이 오히려 압축을 해제하고 처리하는 관점에서 더 무겁다고 생각할 수 있다.&lt;/li&gt;
&lt;li&gt;하지만 처리량 관점에서는 데이터를 압축하는 것이 더 빠르다.
&lt;ul&gt;
&lt;li&gt;컴퓨터에 CPU와 I/O라는 두 종류의 부하가 있는데, 압축을 할 경우 CPU에는 더 무리가 갈 수 있으나, I/O측면에서 보면 대기를 줄일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I/O 처리를 하며 대기하는 동안은 CPU 가 처리할 수 없다.&lt;/li&gt;
&lt;li&gt;CPU가 여유롭고 I/O가 바쁜 경우가 많으므로 I/O 부하를 줄이고 그 정도의 부담을 CPU에 넘기는 것이 전체적인 처리량을 높일수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;실전에서-사용하면서-느낀-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%84%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-%EC%A0%90&quot; aria-label=&quot;실전에서 사용하면서 느낀 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실전에서 사용하면서 느낀 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;처음에 단순한 정규표현식을 사용해서 구현을 했던 것을 적절한 알고리즘과 자료구조를 활용하면서 개선시키면서 느낀것들이 있다.&lt;/li&gt;
&lt;li&gt;처음에 구현한 심플한 방식이 데이터가 적었을 때 더 적합했던 적도 있다.
&lt;ul&gt;
&lt;li&gt;구현에 걸리는 비용이 적고, 유연성이 풍부하다.&lt;/li&gt;
&lt;li&gt;하지만 데이터가 커지면서 문제가 생긴다. 이때는 캐싱 등으로 우선 문제를 잠재우다가 결국에는 본질적인 해결책이 필요하다.&lt;/li&gt;
&lt;li&gt;즉, 현재 사용중인 알고리즘이 가지고 있는 문제점을 개선하여 문제를 개선할 필요가 있는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;처음부터의 최적화가 중요한 것은 아니다. 이후에 데이터의 규모가 커졌을 때 본질적인 문제 해결방법을 미리 고민하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9819-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC-%ED%8F%89%EA%B0%80&quot;&gt;[강의19] 알고리즘과 평가&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B7%9C%EB%AA%A8%EC%99%80-%EA%B3%84%EC%82%B0%EB%9F%89-%EC%B0%A8%EC%9D%B4&quot;&gt;데이터 규모와 계산량 차이&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80&quot;&gt;알고리즘이란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC&quot;&gt;알고리즘을 활용한 데이터 처리&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%95%EC%B6%95%EA%B3%BC-%EC%86%8D%EB%8F%84---%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%B2%98%EB%A6%AC%EB%9F%89%EC%9D%84-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%82%AC%EA%B3%A0%EB%B0%A9%EC%8B%9D&quot;&gt;데이터 압축과 속도 - 전체적인 처리량을 높이기 위한 사고방식&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%84%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-%EC%A0%90&quot;&gt;실전에서 사용하면서 느낀 점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 대규모 데이터 처리 실전 입문]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/high-traffic-service_5/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_5/</guid><pubDate>Mon, 27 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;이전에는 미들웨어를 살펴보면서 운용에 대한 생각을 했다면 이제는 개발에 대한 생각을 하면서 어플리케이션 개발시 고려해야할 급소들에 대해서 살펴보도록 한다.&lt;/li&gt;
&lt;li&gt;대량의 데이터에 액세스 (그리고 이러한 데이터들을 특정 부분을 절단하기 어려운 경우가 대부분이다)를 할 대 RDBMS, MySQL등에서 처리할 수 없는 규모의 데이터를 계산하고자 할 경우를 살펴본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의14-용도특화형-인덱싱&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9814-%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1&quot; aria-label=&quot;강의14 용도특화형 인덱싱 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의14] 용도특화형 인덱싱&lt;/h2&gt;
&lt;h2 id=&quot;인덱스와-시스템-구성---rdbms가-한계를-보일-때&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%84%B1---rdbms%EA%B0%80-%ED%95%9C%EA%B3%84%EB%A5%BC-%EB%B3%B4%EC%9D%BC-%EB%95%8C&quot; aria-label=&quot;인덱스와 시스템 구성   rdbms가 한계를 보일 때 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스와 시스템 구성 - RDBMS가 한계를 보일 때&lt;/h2&gt;
&lt;p&gt;지나치게 많은 데이터를 다루는 경우 (검색 등) RDBMS로는 한계가 있다. 그렇다면 해결 방법은 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배치 처리로 RDBMS에서 대량의 데이터를 추출&lt;/li&gt;
&lt;li&gt;별도의 인덱스 서버와 같은 것에 데이터를 보관&lt;/li&gt;
&lt;li&gt;웹 어플리케이션에서 RPC(Remote Procedure Call)등으로 액세스 하도록 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rpc-웹-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rpc-%EC%9B%B9-api&quot; aria-label=&quot;rpc 웹 api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RPC, 웹 API&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;DB 가 정기적으로 데이터를 추출해서 인덱스 서버로 넘긴다.&lt;/li&gt;
&lt;li&gt;인덱스 서버에서 검색용 인덱스를 만든다.&lt;/li&gt;
&lt;li&gt;WAS 서버에서 인덱스를 가지고 있는 인덱스 서버에 RPC로 액섹스 한다.
&lt;ul&gt;
&lt;li&gt;여기서 말하는 RPC는 웹 API 이다.&lt;/li&gt;
&lt;li&gt;웹 서버에 직접 인덱스를 저장하지 않는 이유는 웹 서버의 용량이 주로 충분하지 않기 때문이다.&lt;/li&gt;
&lt;li&gt;대용량 인덱스 데이터를 여러 프로세스에서 공유하는 것은 적합하지 않다.&lt;/li&gt;
&lt;li&gt;여러 WAS를 두었을 때 각각 그런 대용량 인덱스를 가지고 있는 것은 매우 비효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;용도특화형-인덱싱---튜닝한-데이터-구조-사용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1---%ED%8A%9C%EB%8B%9D%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;용도특화형 인덱싱   튜닝한 데이터 구조 사용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;용도특화형 인덱싱 - 튜닝한 데이터 구조 사용하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RDBMS와 같은 경우는 여러 용도를 가지고 만들어져있다 → 여러 관계형 데이터들을 여러 방식으로 처리할 수 있도록 만들어져 있다.&lt;/li&gt;
&lt;li&gt;만일 특정 목적으로 튜닝한 데이터구조를 사용하면 그 목적에 대해서는 압도적으로 빨라질 수 있다.
&lt;ul&gt;
&lt;li&gt;예) 검색에서의 역 인덱스&lt;/li&gt;
&lt;li&gt;자연어 처리를 모두 해두면 데이터를 전부 순회하지 않아도 검색을 처리할 수 있는 등의 속도 개선을 할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전문 검색 엔진을 사용
&lt;ul&gt;
&lt;li&gt;대량의 데이터를 검색하고자 할 때 용이&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의15-이론과-실전-양쪽과의-싸움&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9815-%EC%9D%B4%EB%A1%A0%EA%B3%BC-%EC%8B%A4%EC%A0%84-%EC%96%91%EC%AA%BD%EA%B3%BC%EC%9D%98-%EC%8B%B8%EC%9B%80&quot; aria-label=&quot;강의15 이론과 실전 양쪽과의 싸움 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의15] 이론과 실전 양쪽과의 싸움&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RDBMS에서 Join을 사용하지 말라는 것은 Bad Knowhow 같은 것이다.
&lt;ul&gt;
&lt;li&gt;이런건 이론에서 추구하기에는 이상한 개념이지만 실전에서 마주한 노하우 같은 것이다.&lt;/li&gt;
&lt;li&gt;대규모 어플리케이션을 하면서 이론과 실전의 적절한 균형이 매우 중요하다.&lt;/li&gt;
&lt;li&gt;너무 이론을 추구하다보면 실전에서 걸림돌이 되는 경우도 많다.&lt;/li&gt;
&lt;li&gt;이론을 모른다면 엄청난 규모의 데이터에서 문제가 생겼을 때 노하우만으로는 해결되지 않는 때가 많아진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9814-%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1&quot;&gt;[강의14] 용도특화형 인덱싱&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%84%B1---rdbms%EA%B0%80-%ED%95%9C%EA%B3%84%EB%A5%BC-%EB%B3%B4%EC%9D%BC-%EB%95%8C&quot;&gt;인덱스와 시스템 구성 - RDBMS가 한계를 보일 때&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rpc-%EC%9B%B9-api&quot;&gt;RPC, 웹 API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1---%ED%8A%9C%EB%8B%9D%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;용도특화형 인덱싱 - 튜닝한 데이터 구조 사용하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9815-%EC%9D%B4%EB%A1%A0%EA%B3%BC-%EC%8B%A4%EC%A0%84-%EC%96%91%EC%AA%BD%EA%B3%BC%EC%9D%98-%EC%8B%B8%EC%9B%80&quot;&gt;[강의15] 이론과 실전 양쪽과의 싸움&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 전문 검색기술]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 검색엔진의 노하우를 알아두면 용도특화형 인덱스를 직접 만들어서 대규모 데이터에 대한 문제를 해결할 수 있다. [강의2…]]></description><link>https://yjksw.github.io/high-traffic-service_7/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_7/</guid><pubDate>Mon, 27 Sep 2021 09:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;검색엔진의 노하우를 알아두면 용도특화형 인덱스를 직접 만들어서 대규모 데이터에 대한 문제를 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의24-전문-검색기술의-응용범위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9824-%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89%EA%B8%B0%EC%88%A0%EC%9D%98-%EC%9D%91%EC%9A%A9%EB%B2%94%EC%9C%84&quot; aria-label=&quot;강의24 전문 검색기술의 응용범위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의24] 전문 검색기술의 응용범위&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;키워드
&lt;ul&gt;
&lt;li&gt;역 인덱스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;전문-검색의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;전문 검색의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전문 검색의 종류&lt;/h2&gt;
&lt;h3 id=&quot;grep-형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#grep-%ED%98%95&quot; aria-label=&quot;grep 형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;grep 형&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;전부 읽어가면서 검색하는 것&lt;/li&gt;
&lt;li&gt;시간이 오래 걸린다.&lt;/li&gt;
&lt;li&gt;즉시성이 좋다 → 문서가 갱신되더라도 바로 검색할 수 있으며 검색누락이 없다.&lt;/li&gt;
&lt;li&gt;병렬화 하기가 간단하다 → 분할해서 검색하기 편리하다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;suffix-형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#suffix-%ED%98%95&quot; aria-label=&quot;suffix 형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;suffix 형&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;검색 가능한 형태로 검색 대상 전문을 보유한다.&lt;/li&gt;
&lt;li&gt;구현이 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;역-인덱스형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AD-%EC%9D%B8%EB%8D%B1%EC%8A%A4%ED%98%95&quot; aria-label=&quot;역 인덱스형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;역 인덱스형&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단어와 문서를 연관짓는 것&lt;/li&gt;
&lt;li&gt;문서와 별도로 역 인덱스를 만들어야 한다. → 즉 전처리가 필요하다. 즉시성이 떨어진다.&lt;/li&gt;
&lt;li&gt;인덱스를 압축함으로 컴팩트하게 가져갈 수 있다. 대규모화 하기 가 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의26검색엔진의-내부구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9826%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%9D%98-%EB%82%B4%EB%B6%80%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;강의26검색엔진의 내부구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의26]검색엔진의 내부구조&lt;/h2&gt;
&lt;h2 id=&quot;역-인덱스의-구조---dictionary--postings&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AD-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EA%B5%AC%EC%A1%B0---dictionary--postings&quot; aria-label=&quot;역 인덱스의 구조   dictionary  postings permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;역 인덱스의 구조 - Dictionary + Postings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;어떠한 단어 (dictionary 형태)에서 연결되어 있는 문서(postings)를 바로 찾을 수 있는 것.&lt;/li&gt;
&lt;li&gt;Postings의 경우 문서 ID만을 공유하고 있기도 한데, 문서의 어느 위치에 출현하는지도 보유하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9824-%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89%EA%B8%B0%EC%88%A0%EC%9D%98-%EC%9D%91%EC%9A%A9%EB%B2%94%EC%9C%84&quot;&gt;[강의24] 전문 검색기술의 응용범위&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89%EC%9D%98-%EC%A2%85%EB%A5%98&quot;&gt;전문 검색의 종류&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#grep-%ED%98%95&quot;&gt;grep 형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#suffix-%ED%98%95&quot;&gt;suffix 형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%AD-%EC%9D%B8%EB%8D%B1%EC%8A%A4%ED%98%95&quot;&gt;역 인덱스형&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9826%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%9D%98-%EB%82%B4%EB%B6%80%EA%B5%AC%EC%A1%B0&quot;&gt;[강의26]검색엔진의 내부구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%97%AD-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EA%B5%AC%EC%A1%B0---dictionary--postings&quot;&gt;역 인덱스의 구조 - Dictionary + Postings&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[DB 리플리케이션 적용시 Binary 로그 에러 해결방법]]></title><description><![CDATA[INTRO 현재 진행중인 프로젝트에서 DB Replication을 적용했었다. Replication 알아보기 DB replication 적용 이후 Master DB를 업그레이드 해야하는 상황에서 replicas…]]></description><link>https://yjksw.github.io/db-replication-binary-log/</link><guid isPermaLink="false">https://yjksw.github.io/db-replication-binary-log/</guid><pubDate>Sun, 26 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;현재 진행중인 &lt;a href=&quot;https://github.com/woowacourse-teams/2021-pick-git&quot;&gt;프로젝트&lt;/a&gt;에서 DB Replication을 적용했었다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yjksw.github.io/db-replication/&quot;&gt;Replication 알아보기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB replication 적용 이후 Master DB를 업그레이드 해야하는 상황에서 replicas와의 연동에 문제가 생긴적이 있었다. 이때 Master와 replicas 간의 데이터 연동 방법을 이해하고 해결한 (매우 간단한) 방법을 기록한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;master-db와-replicas-동기화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#master-db%EC%99%80-replicas-%EB%8F%99%EA%B8%B0%ED%99%94&quot; aria-label=&quot;master db와 replicas 동기화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Master DB와 replicas 동기화&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Master DB에 데이터를 쓰기 위해서는 replicas에서 master db 의 데이터와 연결되어 있어야 한다. 그러기 위해서 replication을 설정할 때 &lt;code class=&quot;language-text&quot;&gt;show master status&lt;/code&gt; 라는 명령어를 통해서 나온 &lt;code class=&quot;language-text&quot;&gt;File&lt;/code&gt;값과 &lt;code class=&quot;language-text&quot;&gt;Position&lt;/code&gt; 값을 replica db 설정시 적용해 주었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;MariaDB [pickgit]&amp;gt; show master status;
+--------------------+----------+--------------+------------------+
| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+--------------------+----------+--------------+------------------+
| mariadb-bin.000008 | 68143505 |              |                  |
+--------------------+----------+--------------+------------------+
1 row in set (0.000 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;여기서 File은 master db의 binary 로그 파일이고 Position 값은 해당 파일의 현재 위치이다.&lt;/li&gt;
&lt;li&gt;위 log 파일에는 어떤 내용이 담겨 있을까?
&lt;blockquote&gt;
&lt;p&gt;The MariaDB binary log is a series of files that contain events. An event is a description of a modification to the contents of our database. &lt;br&gt;출처: Big Data and Business Intelligence&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;로그 파일에는 데이터베이스에서 일어난 &lt;code class=&quot;language-text&quot;&gt;event&lt;/code&gt;에 대해서 적혀 있는데, 여기서 &lt;code class=&quot;language-text&quot;&gt;event&lt;/code&gt;라고 하는 것은 데이터베이스의 컨텐츠에 대해 일어난 변경사항을 말한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;MariaDB [pickgit]&amp;gt; show master status;
+--------------------+----------+--------------+------------------+
| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+--------------------+----------+--------------+------------------+
| mariadb-bin.000008 | 68143656 |              |                  |
+--------------------+----------+--------------+------------------+
1 row in set (0.000 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;실제로 테이블을 추가하는 쿼리를 날린 후 다시 확인해보니 Position값이 증가한 것을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;Replicas 설정시 위 값을 지정한다는 것은 replicas에 데이터를 업데이트하는 file과 해당 file에서의 위치를 지정하는 것이다.&lt;/li&gt;
&lt;li&gt;번외로 만일 binary loggin이 비활성되어 있는 상태에서 master 데이터베이스가 실행중이었다면 &lt;code class=&quot;language-text&quot;&gt;show master status;&lt;/code&gt; 명령어에 나오는 값이 비어있을 것이다. 그 경우 replicas에 master의 로그파일과 position을 지정할 때 빈 스트링 (”)과 4를 지정하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;문제상황-및-해결&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9-%EB%B0%8F-%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;문제상황 및 해결 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제상황 및 해결&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;본래 사용한 MariaDB 버전은 10.1이었다. 하지만 Flyway를 적용한 이후 MariaDB를 10.4로 업그레이드 하지 않으면 적용할 수 없다는 오류가 생겼다. MariaDB 버전을 업그레이드 할 수 있는 방법을 찾아보았지만 현재 사용 중인 DB 데이터를 백업하고 삭제 후 10.4 버전을 새로 설치하여 데이터를 복원하라는 내용밖에 나오지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;현재 Master 1개 slave 2개를 사용중이었기 때문에 DB 3개를 모두 삭제하고 재설치하는 것은 지나치게 많은 작업이라고 생각했다. (replication 설정, 유저 생성 및 권한 부여 등등 자잘한 설정이 많음) 따라서 Flyway가 직접 적용되는 Master DB만 수정하고 Slave DB는 기존의 것을 유지하기로 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master DB를 새로 구성하는 와중에 다음과 같은 문제 상황이 발생했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문제 상황
&lt;ul&gt;
&lt;li&gt;Master DB의 설정을 마치고 Slave에 Master를 지정하여 연결을 완료함&lt;/li&gt;
&lt;li&gt;Master DB의 &lt;code class=&quot;language-text&quot;&gt;replication&lt;/code&gt; 유저에게 외부에서 쓰기 권한을 부여하지 않은 것을 깨달음&lt;/li&gt;
&lt;li&gt;Master DB의 &lt;code class=&quot;language-text&quot;&gt;replication&lt;/code&gt; 유저에게 권한을 부여함&lt;/li&gt;
&lt;li&gt;Slave DB에 Master DB의 데이터가 반영이 되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master에서 연결된 slave hosts를 확인해 보면 잘 연결되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;  MariaDB [pickgit]&amp;gt; show slave hosts;
+-----------+------+------+-----------+
| Server_id | Host | Port | Master_id |
+-----------+------+------+-----------+
|         3 |      | 9000 |         1 |
|         2 |      | 9000 |         1 |
+-----------+------+------+-----------+
2 rows in set (0.000 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slave 의 상태를 확인해보면 &lt;code class=&quot;language-text&quot;&gt;Slave_IO_State: Waiting for master to sent event&lt;/code&gt; 라고 나와있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134805936-9f3469e3-aa3e-496f-91b3-ae5b7f6e881d.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 상태의 더 아래에 &lt;code class=&quot;language-text&quot;&gt;Last_Error&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;Last_SQL_Error&lt;/code&gt;를 확인해보면 특정 쿼리에 에러가 발생했다는 로그가 출력되어 있다. 즉, &lt;code class=&quot;language-text&quot;&gt;replication&lt;/code&gt; 이라는 유저가 Master에서는 잘 적용이 되었지만 Slave DB에는 존재하지 않기 때문에 에러가 발생한 것이다. 해당 로그 이후에 추가 및 변경된 데이터에 대해서는 slave db에 더 이상 반영이 되지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 문제를 해결하기 위해서는 Slave DB가 Master의 로그 파일을 읽는 Position을 위 쿼리가 실행된 이후로 옮겨서 해당 쿼리를 건너뛰어야 한다. 따라서 &lt;code class=&quot;language-text&quot;&gt;show master status&lt;/code&gt;를 다시 실행하여 나온 최신 position을 slave DB 설정에 넣어주어 문제를 해결했다. 여기서 주의할 점은 만일 이전에 변경된 데이터가 있다면 해당 변경 로그도 모두 건너뛰게 되니 다시 적용해주어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/replication-setup-replicas.html#replication-howto-newservers&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/replication-setup-replicas.html#replication-howto-newservers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/replication-howto-masterstatus.html&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/replication-howto-masterstatus.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#master-db%EC%99%80-replicas-%EB%8F%99%EA%B8%B0%ED%99%94&quot;&gt;Master DB와 replicas 동기화&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9-%EB%B0%8F-%ED%95%B4%EA%B2%B0&quot;&gt;문제상황 및 해결&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[성공과 실패를 결정하는 1%의 네트워크 원리_1]]></title><description><![CDATA[다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH1. 웹 브라우저가 메시지를 만든다 입니다 🙌 💡 개요 HTTP 리퀘스트 메세지를 작성한다. URL…]]></description><link>https://yjksw.github.io/one-percent-network-1/</link><guid isPermaLink="false">https://yjksw.github.io/one-percent-network-1/</guid><pubDate>Fri, 24 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 &lt;em&gt;성공과 실패를 결정하는 1%의 네트워크 원리&lt;/em&gt; 를 읽고 정리한 내용입니다. 본 글은 CH1. 웹 브라우저가 메시지를 만든다 입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot; 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💡 개요&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 리퀘스트 메세지를 작성한다.
&lt;ul&gt;
&lt;li&gt;URL을 해독하는 곳에서 브라우저의 동작이 시작된다.&lt;/li&gt;
&lt;li&gt;이 URL의 의미에 따라서 요청 메세지를 작성하고 요청 내용을 만든다.&lt;/li&gt;
&lt;li&gt;이때 HTTP 라는 프로토콜이 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;웹 서버의 IP 주소를 DNS 서버에 조회
&lt;ul&gt;
&lt;li&gt;OS에 의뢰해서 요청 메세지를 송신할 때 송신대상의 IP주소를 알아야한다.&lt;/li&gt;
&lt;li&gt;URL의 웹 도메인명으로 DNS 서버를 조회해서 IP 주소를 조사한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전세계 DNS 서버 연대
&lt;ul&gt;
&lt;li&gt;다수의 DNS 서버가 연대하여 IP 주소를 조사한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로토콜 스택에 메시지 송신을 의뢰
&lt;ul&gt;
&lt;li&gt;OS에 메세지를 송신하는 동작을 의뢰한다.&lt;/li&gt;
&lt;li&gt;OS에서 제공하는 규칙에 따라서 의뢰를 해야한다.&lt;/li&gt;
&lt;li&gt;해당 프로그램을 직접 구현하는 것이 아니더라도 규칙의 큰 흐름을 알는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story1-http-리퀘스트-메세지를-작성한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story1-http-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story1 http 리퀘스트 메세지를 작성한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [STORY1] HTTP 리퀘스트 메세지를 작성한다&lt;/h2&gt;
&lt;h3 id=&quot;url-입력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#url-%EC%9E%85%EB%A0%A5&quot; aria-label=&quot;url 입력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;URL 입력&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;URL은 우리가 알고 있는 http 뿐 아니라 ftp, file, 등등 여러가지가 존재한다.
&lt;ul&gt;
&lt;li&gt;브라우저에 여러 프로토콜 존재한다
&lt;ul&gt;
&lt;li&gt;브라우저는 여러 클라이언트 기능을 가지고 있는 복합적인 소프트웨어이기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;브라우저에서 http 요청 뿐 아니라 파일 다운로드/업로드 등의 기능도 있다.&lt;/li&gt;
&lt;li&gt;어느 기능을 사용하는지 url 에 명시된 프로토콜로 판단할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL에 엑세스 대상에 따라서 여러 정보를 담는다.
&lt;ul&gt;
&lt;li&gt;웹 서버 요청일 경우 파일 경로, 포트 번호 등을 담아서 보낼 수 있다.&lt;/li&gt;
&lt;li&gt;모든 URL에는 앞에 엑세스 대상에 따라서 다른 프로토콜을 명시하고 있다. (http, ftp 등등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;브라우저의-url-해독&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-url-%ED%95%B4%EB%8F%85&quot; aria-label=&quot;브라우저의 url 해독 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;브라우저의 URL 해독&lt;/h3&gt;
&lt;p&gt;우선 웹 서버에 엑세스 하는 경우를 기반으로 설명한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL에 파일 경로가 포함되어 있을 수 있다 → / 를 기준으로 디렉토리 구조와 파일명을 명시하여 url에 포함한다.&lt;/li&gt;
&lt;li&gt;마지막에 파일명을 명시하지 않는 경우
&lt;ul&gt;
&lt;li&gt;기본 파일명을 서버측에 설정하여 생략된 경우 사용한다. (index.html, default.htm 등등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;마지막에 디렉토리를 생략한 경우
&lt;ul&gt;
&lt;li&gt;루트 디렉토리의 기본 파일을 읽는 것으로 간주한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;마지막에 경로에 /가 생략된 경우 (ex. &lt;a href=&quot;http://www.web.com/path&quot;&gt;http://www.web.com/path&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;이 경우 마지막 값이 파일명인지 디렉토리인지 알 수 없다.&lt;/li&gt;
&lt;li&gt;다음과 같은 경우 우선 매칭되는 &lt;strong&gt;파일명&lt;/strong&gt;이 있는지 확인하고, 없다면 매칭되는 &lt;strong&gt;디렉토리명&lt;/strong&gt;이 있는지 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;http기본-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;http기본 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP기본 개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;URL 해독 후 액세스 해야하는 위치가 판단된다. 그때부터 명시된 프로토콜 (이 경우에는 HTTP)에 따라서 액세스를 진행한다.&lt;/li&gt;
&lt;li&gt;HTTP 프로토콜의 요청 메세지가 담고 있는 내용
&lt;ol&gt;
&lt;li&gt;무엇을 - URI 데이터를 저장한 경로만 쓰거나 URL을 그대로 쓸 수도 있다.&lt;/li&gt;
&lt;li&gt;어떻게 - 메소드 (GET, POST, PUT 등등)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;응답 메세지가 담고 있는 내용
&lt;ol&gt;
&lt;li&gt;결과 데이터&lt;/li&gt;
&lt;li&gt;status code - 실행 결과의 상태에 대한 정보&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PUT 이나 DELETE를 사용하면 파일 서버 대신 웹 서버를 사용할 수도 있긴 하다. (???) p. 45&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;http-리쿼스트-메세지를-만든다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-%EB%A6%AC%EC%BF%BC%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot; aria-label=&quot;http 리쿼스트 메세지를 만든다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP 리쿼스트 메세지를 만든다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 URL을 판단하여 웹 서버와 파일 경로 및 파일명을 해석한 후에 HTTP 요청 메세지를 만든다.&lt;/li&gt;
&lt;li&gt;첫번째 행 - Request Line
&lt;ul&gt;
&lt;li&gt;메소드 - 여러 종류의 메소드 중 웹 서버에 어떻게 전달할지 메소드에 담아서 판단한다.&lt;/li&gt;
&lt;li&gt;URI - 파일이나 경로명&lt;/li&gt;
&lt;li&gt;HTTP 버전&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;두번째 부터 - Headers
&lt;ul&gt;
&lt;li&gt;부가적인 자세한 정보를 헤더에 추가한다.&lt;/li&gt;
&lt;li&gt;날짜, 데이터 종류, 언어, 압축 형식 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공백 라인 이후 - Request Body
&lt;ul&gt;
&lt;li&gt;송신할 데이터를 메세지 본문에 기재한다.&lt;/li&gt;
&lt;li&gt;주로 POST 요청인 경우 바디에 데이터를 담아서 요청한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;리퀘스트-메세지를-보낸-이후-응답이-돌아온다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%B3%B4%EB%82%B8-%EC%9D%B4%ED%9B%84-%EC%9D%91%EB%8B%B5%EC%9D%B4-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4&quot; aria-label=&quot;리퀘스트 메세지를 보낸 이후 응답이 돌아온다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리퀘스트 메세지를 보낸 이후 응답이 돌아온다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 첫번째 행을 제외하고 요청 메세지와 비슷한 형태를 지닌다.&lt;/li&gt;
&lt;li&gt;첫번째 행 -
&lt;ul&gt;
&lt;li&gt;요청 실행 결과 status code&lt;/li&gt;
&lt;li&gt;status 코드의 응답 문구 (Not Found)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;응답이 오면 메세지를 추출해서 화면에 표시한다.&lt;/li&gt;
&lt;li&gt;문장만 이루어진 응답 데이터가 아닌 경우
&lt;ul&gt;
&lt;li&gt;추가적으로 이미지나 영상을 담고 있는 경우 응답 문장에 tag를 추가하여 명시한다.
&lt;ul&gt;
&lt;li&gt;ex. &lt;code class=&quot;language-text&quot;&gt;&amp;lt;img src=&quot;{이미지경로}&quot; /&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tag가 존재한다면
&lt;ul&gt;
&lt;li&gt;우선 공백으로 비워둔다.&lt;/li&gt;
&lt;li&gt;이후 추가 웹 서버 액세스하여 태그에 쓰여있는 경로로 URI를 만들어서 요청 메세지를 보낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하나의 요청 메세지에는 하나의 URI 만 쓰기 때문에 여러 파일이 필요하면 매번 요청을 보내야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;-story2-웹-서버의-ip주소를-dns-서버에-조회한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-story2-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-ip%EC%A3%BC%EC%86%8C%EB%A5%BC-dns-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A1%B0%ED%9A%8C%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; story2 웹 서버의 ip주소를 dns 서버에 조회한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛺 [STORY2] 웹 서버의 IP주소를 DNS 서버에 조회한다.&lt;/h2&gt;
&lt;h3 id=&quot;ip-주소의-기본&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ip-%EC%A3%BC%EC%86%8C%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot; aria-label=&quot;ip 주소의 기본 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IP 주소의 기본&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브라우저가 담당하는 일 → URL 해독, HTTP 메세지 만들기&lt;/li&gt;
&lt;li&gt;OS가 담당하는 일 → 메세지를 네트워크로 송출
&lt;ul&gt;
&lt;li&gt;따라서 브라우저가 위 업무는 OS에 위임하여 메세지를 송신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때 URL에서 해석한 도메인명의 IP 주소를 조사해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;tcpip-기본-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tcpip-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;tcpip 기본 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TCP/IP 기본 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서브넷 - 여러 PC가 하나의 허브에 연결되어 있는 단위&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;여러 서브넷을 라우터로 연결하여 네트워크 전체를 구성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/141642594-d563a745-1eb7-4378-8b1e-2d94c45a4545.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네트워크 주소를 00동 00번지의 단위로 표현할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00동 → 서브넷에 할당된 네트워크 번호&lt;/li&gt;
&lt;li&gt;00번지 → 호스트 번호&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;네트워크 번호 + 호스트 번호&lt;/strong&gt;가 IP 주소를 구성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라우터와 허브를 통해서 &lt;strong&gt;네트워크 주소를 계속 중계&lt;/strong&gt;하면서 액세스 대상을 찾아간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;기본적인 흐름&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송신측이 메세지를 보냄 → 가까운 허브가 운반하여 가까운 라우터에 송신 → 라우터에서 다음 라우터를 판단 → 서브넷의 허브가 해당 라우터까지 메세지를 송신함 → 반복하여 최종 도착지에 데이터가 도착&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ip의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ip%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;ip의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IP의 구조&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;32비트 디지털 데이터&lt;/li&gt;
&lt;li&gt;8비트씩 . 으로 구분하여 10진수로 표기 - 255.255.255.255&lt;/li&gt;
&lt;li&gt;네트워크 번호(서브넷 번호)와 호스트 번호를 판단하기 위해 넷마스크 정보를 IP에 더한다.&lt;/li&gt;
&lt;li&gt;넷마스크 번호도 동일하게 32비트 디지털 데이터이다.
&lt;ul&gt;
&lt;li&gt;1로 표기된 비트까지가 네트워크 번호&lt;/li&gt;
&lt;li&gt;0으로 표기된 비트를 호스트 번호로 판단한다.&lt;/li&gt;
&lt;li&gt;바이트 단위로 반드시 맞아 떨어지지는 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;호스트 번호가 모두 0인 경우 - 서브넷 자체를 나타냄&lt;/li&gt;
&lt;li&gt;호스트 번호가 모두 1인 경우 - 서브넷 기기 전체에 대한 브로드캐스트를 나타냄&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;도메인명과-ip-주소를-구분하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8%EB%AA%85%EA%B3%BC-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;도메인명과 ip 주소를 구분하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도메인명과 IP 주소를 구분하는 이유&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;반드시 IP 주소가 있어야지 수신 상대와 연결될 수 있는데 번호로 구성된 IP를 기억하기는 어렵기 때문에 도메인명을 쓰도록 한다.&lt;/li&gt;
&lt;li&gt;도메인명 만으로 네트워크 통신을 하게 된다면 주소에 대한 바이트가 균일하지 않고 지나치게 클 수 있다.
&lt;ul&gt;
&lt;li&gt;데이터 운반 동작에 더 많은 시간이 걸려 속도가 느려진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 사용자는 도메인명만 기억하면 해당 IP 주소를 알아서 찾아주는 &lt;strong&gt;DNS&lt;/strong&gt;를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;socket-라이브러리가-ip-주소-찾는-기능을-제공&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#socket-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EA%B0%80-ip-%EC%A3%BC%EC%86%8C-%EC%B0%BE%EB%8A%94-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%A0%9C%EA%B3%B5&quot; aria-label=&quot;socket 라이브러리가 ip 주소 찾는 기능을 제공 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Socket 라이브러리가 IP 주소 찾는 기능을 제공&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS 동일하게 요청 메세지 + 응답 메세지의 구조로 데이터를 찾아내는 것이다.&lt;/li&gt;
&lt;li&gt;DNS 서버에 요청 메세지를 보내어 도메인명을 의뢰하는 DNS 클라이언트는 &lt;strong&gt;DNS 리졸버&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;DNS resolution → DNS 원리로 IP 주소를 조사하는 것 (DNS 리졸버가 수행함)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DBS 리졸버는 Socket 라이브러리에 내장된 프로그램이다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Socket 라이브러리에는 네트워크 기능과 관련된 프로그램이 집합해 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;리졸버를-이용하여-dns-서버를-조회한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%A1%B8%EB%B2%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-dns-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%A1%B0%ED%9A%8C%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;리졸버를 이용하여 dns 서버를 조회한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리졸버를 이용하여 DNS 서버를 조회한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Socket 라이브러리에 리졸버 메소드에 의뢰하고자 하는 도메인 명을 명시하면 IP 주소를 조회할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;리졸버-내부의-작동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%A1%B8%EB%B2%84-%EB%82%B4%EB%B6%80%EC%9D%98-%EC%9E%91%EB%8F%99&quot; aria-label=&quot;리졸버 내부의 작동 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리졸버 내부의 작동&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션(브라우저)에서 리졸버를 호출하면서 어플리케이션은 잠시 대기한다. (리졸버로 제어가 넘어가 실행된다. 이때부터 실행주체는 Socket 라이브러리의 리졸버이다)&lt;/li&gt;
&lt;li&gt;DNS 서버에 응답 메세지를 만들어 보낸다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메세지 송신 동작은 OS의 프로토콜 스택이 수행한다. LAN 어댑터를 경유하여 목표서버에 메세지가 전달된다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;DNS 서버가 해당 메세지를 해석하여 결과를 찾는다.&lt;/li&gt;
&lt;li&gt;응답이 오면 &lt;code class=&quot;language-text&quot;&gt;프로토콜 스택 → 리졸버가 내용을 해독하여 IP 주소 추출 → 어플리케이션에 주소전달&lt;/code&gt; 하는 단계를 밟는다.&lt;/li&gt;
&lt;li&gt;DNS 서버 주소 정보는 ?
&lt;ul&gt;
&lt;li&gt;TCP/IP 설정 항목으로 컴퓨터에 미리 설정되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[용어]

URL - Uniform Resource Locater

FTP - File Transfer Protocol

URI - Unifor Resource Identifier

CGI 프로그램 - 웹 서버 소프트웨어에서 프로그램을 호출할 때 정한 규칙(CGI)에 따라 움직이는 프로그램  

라우터 - 패킷을 중계하는 장치 

허브 - 패킷을 중계하는 장치 (리피터 허브 &amp;amp; 스위칭 허브) 

DNS - Domain Name System 서버명과 IP주소를 대응, 메일 주소와 메일 서버를 대응 등등 

프로토콜 스택 - OS 에 내장되어 있는 네트워크 제어 소프트웨어&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B0%9C%EC%9A%94&quot;&gt;💡 개요&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story1-http-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [STORY1] HTTP 리퀘스트 메세지를 작성한다&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#url-%EC%9E%85%EB%A0%A5&quot;&gt;URL 입력&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-url-%ED%95%B4%EB%8F%85&quot;&gt;브라우저의 URL 해독&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#http%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot;&gt;HTTP기본 개념&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#http-%EB%A6%AC%EC%BF%BC%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot;&gt;HTTP 리쿼스트 메세지를 만든다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%B3%B4%EB%82%B8-%EC%9D%B4%ED%9B%84-%EC%9D%91%EB%8B%B5%EC%9D%B4-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4&quot;&gt;리퀘스트 메세지를 보낸 이후 응답이 돌아온다.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-story2-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-ip%EC%A3%BC%EC%86%8C%EB%A5%BC-dns-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A1%B0%ED%9A%8C%ED%95%9C%EB%8B%A4&quot;&gt;🛺 [STORY2] 웹 서버의 IP주소를 DNS 서버에 조회한다.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#ip-%EC%A3%BC%EC%86%8C%EC%9D%98-%EA%B8%B0%EB%B3%B8&quot;&gt;IP 주소의 기본&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#tcpip-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot;&gt;TCP/IP 기본 개념&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ip%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot;&gt;IP의 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8%EB%AA%85%EA%B3%BC-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;도메인명과 IP 주소를 구분하는 이유&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#socket-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EA%B0%80-ip-%EC%A3%BC%EC%86%8C-%EC%B0%BE%EB%8A%94-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%A0%9C%EA%B3%B5&quot;&gt;Socket 라이브러리가 IP 주소 찾는 기능을 제공&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A6%AC%EC%A1%B8%EB%B2%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-dns-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%A1%B0%ED%9A%8C%ED%95%9C%EB%8B%A4&quot;&gt;리졸버를 이용하여 DNS 서버를 조회한다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A6%AC%EC%A1%B8%EB%B2%84-%EB%82%B4%EB%B6%80%EC%9D%98-%EC%9E%91%EB%8F%99&quot;&gt;리졸버 내부의 작동&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 분산을 고려한 MySQL 운용]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 이번장은 레이어를 DB로 옮겨서 DB의 스케일아웃 전략에 대해서 살펴본다. [강의11] 인덱스 올바르게 운용하기 분산을 고려한 MySQL 운용, 세 가지 포인트 OS…]]></description><link>https://yjksw.github.io/high-traffic-service_4/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_4/</guid><pubDate>Fri, 24 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;이번장은 레이어를 DB로 옮겨서 DB의 스케일아웃 전략에 대해서 살펴본다.&lt;/p&gt;
&lt;h2 id=&quot;강의11-인덱스-올바르게-운용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9811-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%9A%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;강의11 인덱스 올바르게 운용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의11] 인덱스 올바르게 운용하기&lt;/h2&gt;
&lt;h2 id=&quot;분산을-고려한-mysql-운용-세-가지-포인트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%84%EC%82%B0%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-mysql-%EC%9A%B4%EC%9A%A9-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8F%AC%EC%9D%B8%ED%8A%B8&quot; aria-label=&quot;분산을 고려한 mysql 운용 세 가지 포인트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;분산을 고려한 MySQL 운용, 세 가지 포인트&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;OS 캐시 활용&lt;/li&gt;
&lt;li&gt;인덱스를 적절하게 설정&lt;/li&gt;
&lt;li&gt;확장을 전제로 한 설계&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;os-캐시-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#os-%EC%BA%90%EC%8B%9C-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;os 캐시 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OS 캐시 활용&lt;/h2&gt;
&lt;p&gt;전체 데이터 크기가 물리 메모리보다 가능한 적도록 유지한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상황: 대규모 서비스일 경우 (3억건의 데이터), 테이블에 칼럼을 한 개 (약 8바이트)를 추가하더라도 3GB 가 추가된다. → 스키마도 신경써서 설계해야한다.&lt;/li&gt;
&lt;li&gt;따라서 테이블의 레코드를 컴팩트하게 설계해야한다. (int형 32비트, 문자열 8비트 같은 수치에 대한 감각 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;db-테이블의-데이터를-정규화하는-것은-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#db-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%95%EA%B7%9C%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-&quot; aria-label=&quot;db 테이블의 데이터를 정규화하는 것은  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB 테이블의 데이터를 정규화하는 것은 ?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;예를 들어서 필수적으로 필요한 데이터만 테이블에 남기고, flag로 사용되는 데이터들을 테이블 분리하여 필요할 때만 사용할 수도 있다. 대규모 데이터인 경우 이것만 분리를 하더라도 엄청난 용량이 줄어든다.&lt;/li&gt;
&lt;li&gt;하지만 쿼리가 복잡해져서 속도가 떨어질 수 있으므로 &lt;strong&gt;속도와 데이터 크기 간 트레이드 오프&lt;/strong&gt;가 있다는 것도 생각해야한다. !!!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;인덱스의-중요성---b트리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1---b%ED%8A%B8%EB%A6%AC&quot; aria-label=&quot;인덱스의 중요성   b트리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스의 중요성 - B+트리&lt;/h2&gt;
&lt;p&gt;DB의 인덱스는 탐색이 매우 빠른 B+트리 구조를 사용한다.&lt;/p&gt;
&lt;p&gt;이분탐색과 비교해서 더 디스크에 최적화 되어 있다 → 더 알아보아야겠지만 하나의 노드에 있는 내용들은 디스크 액세스를 하지 않아도 된다.&lt;/p&gt;
&lt;h2 id=&quot;인덱스의-효과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%ED%9A%A8%EA%B3%BC&quot; aria-label=&quot;인덱스의 효과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스의 효과&lt;/h2&gt;
&lt;p&gt;4000만건의 테이블이 있을때를 고려해보면,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;만일 인덱스가 없다면 선형탐색을 함 → O(n) 최대 4000만번 탐색&lt;/li&gt;
&lt;li&gt;인덱스 있다면 → O(logn) 최대 25.5번&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 데이터가 작은 경우 트리를 순회하는 오버헤트가 더 클수도 있으므로 잘 판단하여 인덱스를 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;-mysql-특성에-따른-인덱스의-작용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-mysql-%ED%8A%B9%EC%84%B1%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%9E%91%EC%9A%A9&quot; aria-label=&quot; mysql 특성에 따른 인덱스의 작용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;+ MySQL 특성에 따른 인덱스의 작용&lt;/h2&gt;
&lt;p&gt;특정 칼럼에 인덱스를 걸어놓더라도 사용하는 쿼리에 따라서 사용하지 않을수도 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 where, order by, group by 조건문이 지정되는 칼럼에 인덱스를 사용한다.&lt;/li&gt;
&lt;li&gt;인덱스를 명시적으로 추가한 것 이외에 pk, unique 제약조건에 인덱스를 가지고 있다. (show index로 인덱스 내용 확인 가능)&lt;/li&gt;
&lt;li&gt;조건문에 여러 인덱스 칼럼이 사용되도, 하나의 인덱스만 사용된다. (따라서 여러 칼럼이 한꺼번에 조건으로 될 경우 복합 인덱스를 설정해야한다)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인덱스 설정에 대해서는 더 알아보자 !!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;explain&lt;/code&gt; 명령어로 인덱스 작용을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;인덱스의-간과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EA%B0%84%EA%B3%BC&quot; aria-label=&quot;인덱스의 간과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스의 간과&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;나도 모르게 인덱스가 작용하지 않은 쿼리를 사용하고 있을수도 있다.
&lt;ul&gt;
&lt;li&gt;자동으로 쿼리를 생성해주는 툴을 사용하면서 이것을 간과하게 된다.&lt;/li&gt;
&lt;li&gt;감시방안을 늘려서 대응해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의12-mysql의-분산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9812-mysql%EC%9D%98-%EB%B6%84%EC%82%B0&quot; aria-label=&quot;강의12 mysql의 분산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의12] MySQL의 분산&lt;/h2&gt;
&lt;h2 id=&quot;mysql-replication-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mysql-replication-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;mysql replication 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MySQL replication 기능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Master, slave 구조이며 slave가 master의 replica가 되는 것이다.&lt;/li&gt;
&lt;li&gt;갱신은 마스터에서만 이루어지며 slave는 조회 쿼리만 담당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;masterslave의-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#masterslave%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;masterslave의 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Master/Slave의 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;select는 분산할 수 있지만 갱신은 분산할 수 없으므로 마스터의 다중화의 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;하지만 대부분 쓰기보다 읽기가 훨씬 많으므로 읽기용 slave가 많은 것이 분산에 큰 효과를 낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;갱신-및-쓰기-확장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%B1%EC%8B%A0-%EB%B0%8F-%EC%93%B0%EA%B8%B0-%ED%99%95%EC%9E%A5&quot; aria-label=&quot;갱신 및 쓰기 확장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;갱신 및 쓰기 확장&lt;/h3&gt;
&lt;p&gt;이런 경우에는 테이블을 분할해서 그 크기를 매우 작게 한다. 이것으로 쓰기 작업이 분산된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블 파일이 분산 될 경우 동일 호스트 내에서 여러 디스크를 가지고 분산할 수 있고, 다른 서버로 분산할 수도 있다.&lt;/li&gt;
&lt;li&gt;쓰기 작업이 너무 많다면 RDBMS를 사용하지 않고 KVS 방식을 사용하는 것도 고려할 수 있다. (오버헤드가 적고 빠르며 확장이 쉽다)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의13-mysql의-스케일아웃과-파티셔닝&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9813-mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83%EA%B3%BC-%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D&quot; aria-label=&quot;강의13 mysql의 스케일아웃과 파티셔닝 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의13] MySQL의 스케일아웃과 파티셔닝&lt;/h2&gt;
&lt;h2 id=&quot;mysql의-스케일아웃-전략&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83-%EC%A0%84%EB%9E%B5&quot; aria-label=&quot;mysql의 스케일아웃 전략 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MySQL의 스케일아웃 전략&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;일단 데이터가 메모리에 올라가는 크기면 메모리에 올리고, 올라가지 않으면 메모리를 증설한다.&lt;/li&gt;
&lt;li&gt;그리고 인덱스를 걸자 !!&lt;/li&gt;
&lt;li&gt;하지만 만일 메모리 증설이 어렵다면 파티셔닝을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파티셔닝에-관한-보충-테이블-분할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%97%90-%EA%B4%80%ED%95%9C-%EB%B3%B4%EC%B6%A9-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%B6%84%ED%95%A0&quot; aria-label=&quot;파티셔닝에 관한 보충 테이블 분할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파티셔닝에 관한 보충 (테이블 분할)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;테이블A와 테이블B를 다른 서버에 놓아서 분산하는 것.&lt;/li&gt;
&lt;li&gt;국소성을 활용해서 분산할 수 있고 캐싱이 유효하기 때문에 효과적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파티셔닝을-전제로-한-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%84-%EC%A0%84%EC%A0%9C%EB%A1%9C-%ED%95%9C-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;파티셔닝을 전제로 한 설계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파티셔닝을 전제로 한 설계&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;상황: 두 테이블 사이에 연관관계가 존재하여 join 쿼리를 던져야하는 경우 두 테이블을 분할 수는 없다.&lt;/li&gt;
&lt;li&gt;두 개의 테이블이 다른 서버로 분할되면 JOIN을 할 수 없지만 이것을 두 개의 쿼리로 나눠서 질의하면 가능하게 만들 수 있다. → 그러면 파티셔닝이 가능하게 된다.
&lt;ul&gt;
&lt;li&gt;하지만 너무 밀접할 경우 같은 서버에 놓고 join을 하는 것이 더 효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;join-배제---where-in-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#join-%EB%B0%B0%EC%A0%9C---where-in-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;join 배제   where in 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JOIN 배제 - where, in 활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위에 말한 경우이다. 먼저 어떤 테이블에 관련 Id를 질의하고 해당 id를 가지고 원하는 데이터를 뽑아내도록 한다. (JPA를 활용할 경우는 어떻게 하는 것이 좋을까)&lt;/li&gt;
&lt;li&gt;다수의 DB를 찔려서 하나의 쿼리에서 다수의 DB 서버 액세스 가능? (키워드 MSA)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파티셔닝의-상반관계---단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%98-%EC%83%81%EB%B0%98%EA%B4%80%EA%B3%84---%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;파티셔닝의 상반관계   단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파티셔닝의 상반관계 - 단점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;운용이 복잡해진다. → 다른 용도의 서버가 생긴다.&lt;/li&gt;
&lt;li&gt;고장률이 높아진다 → 대수가 늘어나므로 고장률 또한 증가한다.&lt;/li&gt;
&lt;li&gt;어플리케이션 용도와 서버 대수
&lt;ol&gt;
&lt;li&gt;무정지가 되려면 여러개의 서버대수가 필요하고 해당 서버를 분할하면 기하급수적으로 많아진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;파티셔닝은 언제나 마지막 카드이다 !!!&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9811-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%9A%B4%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;[강의11] 인덱스 올바르게 운용하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B6%84%EC%82%B0%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-mysql-%EC%9A%B4%EC%9A%A9-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8F%AC%EC%9D%B8%ED%8A%B8&quot;&gt;분산을 고려한 MySQL 운용, 세 가지 포인트&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#os-%EC%BA%90%EC%8B%9C-%ED%99%9C%EC%9A%A9&quot;&gt;OS 캐시 활용&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#db-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%95%EA%B7%9C%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-&quot;&gt;DB 테이블의 데이터를 정규화하는 것은 ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1---b%ED%8A%B8%EB%A6%AC&quot;&gt;인덱스의 중요성 - B+트리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%ED%9A%A8%EA%B3%BC&quot;&gt;인덱스의 효과&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-mysql-%ED%8A%B9%EC%84%B1%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%9E%91%EC%9A%A9&quot;&gt;+ MySQL 특성에 따른 인덱스의 작용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EA%B0%84%EA%B3%BC&quot;&gt;인덱스의 간과&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9812-mysql%EC%9D%98-%EB%B6%84%EC%82%B0&quot;&gt;[강의12] MySQL의 분산&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mysql-replication-%EA%B8%B0%EB%8A%A5&quot;&gt;MySQL replication 기능&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#masterslave%EC%9D%98-%ED%8A%B9%EC%A7%95&quot;&gt;Master/Slave의 특징&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%B1%EC%8B%A0-%EB%B0%8F-%EC%93%B0%EA%B8%B0-%ED%99%95%EC%9E%A5&quot;&gt;갱신 및 쓰기 확장&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9813-mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83%EA%B3%BC-%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D&quot;&gt;[강의13] MySQL의 스케일아웃과 파티셔닝&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83-%EC%A0%84%EB%9E%B5&quot;&gt;MySQL의 스케일아웃 전략&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%97%90-%EA%B4%80%ED%95%9C-%EB%B3%B4%EC%B6%A9-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%B6%84%ED%95%A0&quot;&gt;파티셔닝에 관한 보충 (테이블 분할)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%84-%EC%A0%84%EC%A0%9C%EB%A1%9C-%ED%95%9C-%EC%84%A4%EA%B3%84&quot;&gt;파티셔닝을 전제로 한 설계&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#join-%EB%B0%B0%EC%A0%9C---where-in-%ED%99%9C%EC%9A%A9&quot;&gt;JOIN 배제 - where, in 활용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%98-%EC%83%81%EB%B0%98%EA%B4%80%EA%B3%84---%EB%8B%A8%EC%A0%90&quot;&gt;파티셔닝의 상반관계 - 단점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - OS 캐시와 분산]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 [강의8] OS 캐시 구조 OS의 캐시 구조를 알고 애플리케이션 작성하기 - 페이지 캐시 OS…]]></description><link>https://yjksw.github.io/high-traffic-service_3/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_3/</guid><pubDate>Fri, 24 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의8-os-캐시-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%988-os-%EC%BA%90%EC%8B%9C-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;강의8 os 캐시 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의8] OS 캐시 구조&lt;/h2&gt;
&lt;h2 id=&quot;os의-캐시-구조를-알고-애플리케이션-작성하기---페이지-캐시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#os%EC%9D%98-%EC%BA%90%EC%8B%9C-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%95%8C%EA%B3%A0-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0---%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C&quot; aria-label=&quot;os의 캐시 구조를 알고 애플리케이션 작성하기   페이지 캐시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OS의 캐시 구조를 알고 애플리케이션 작성하기 - 페이지 캐시&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS는 메모리를 이용해서 캐시 구조를 갖추고 디스크 액세스를 줄인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;linuxx86-페이징-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#linuxx86-%ED%8E%98%EC%9D%B4%EC%A7%95-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;linuxx86 페이징 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux(x86) 페이징 구조&lt;/h3&gt;
&lt;p&gt;OS는 가장 메모리 구조를 가지고 있는데 논리적인 선형 어드레스를 물리적인 어드레스로 변환한다.&lt;/p&gt;
&lt;h2 id=&quot;가상-메모리-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;가상 메모리 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상 메모리 구조&lt;/h2&gt;
&lt;p&gt;기본적인 OS 구조를 보면 OS에서 관리하고 있는 메모리 구조 있고, OS가 있으며 OS에서 돌아가는 프로세스가 존재한다. 프로세스에서 메모리가 필요한 경우 메모리에 직접 접근해서 주소를 가져오는 것이 아니라, OS를 통해서 비어있는 주소와 다른 주소를 반환한다.&lt;/p&gt;
&lt;h3 id=&quot;왜-가상-주소를-반환할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B0%80%EC%83%81-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 가상 주소를 반환할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 가상 주소를 반환할까?&lt;/h3&gt;
&lt;p&gt;개별 프로세스가 실제로 메모리의 어느 부분을 사용하는지 스스로 알고 있을 필요가 없고, 특정 번지에서 통일해서 시작하는 것으로 다루면 더 쉽기 때문이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예) 유닉스에서 공유 라이브러리는 프로세스 내에서 지정된 주소로 할당이 되어 있는데 프로세스 내에서 이 특정 어드레스는 예약에 되어 있음. 따라서 시작주소가 다 다르면 메모리를 확보할 주소위치를 찾기가 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;어쨌든 OS 커널에서 메모리를 추상화해서 넘기고 있다 !!!&lt;/p&gt;
&lt;p&gt;또한 OS에서 메모리를 확보할 때도 단일 바이트 만큼씩 액세스 하는 것이 아니라 4KB 정도의 블록을 확보해서 프로세스에 넘긴다. &lt;strong&gt;블록 = 페이지 (즉, OS가 메모리를 확보하는 단위)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OS는 메모리 요청을 받을 때 필요한 만큼의 페이지를 확보해서 프로세스에 넘긴다.&lt;/p&gt;
&lt;h2 id=&quot;linux-페이지-캐시의-원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#linux-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%9D%98-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;linux 페이지 캐시의 원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux 페이지 캐시의 원리&lt;/h2&gt;
&lt;p&gt;OS는 확보한 페이지를 메모리상에 캐싱해둔다.&lt;/p&gt;
&lt;h3 id=&quot;프로세스가-디스크에서-데이터를-읽어내는-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B0%80-%EB%94%94%EC%8A%A4%ED%81%AC%EC%97%90%EC%84%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9D%BD%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;프로세스가 디스크에서 데이터를 읽어내는 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스가 디스크에서 데이터를 읽어내는 과정&lt;/h3&gt;
&lt;p&gt;첫번째, 우선 디스크로부터 4KB 정도의 블록을 읽어냄&lt;/p&gt;
&lt;p&gt;두번째, 우선 메모리에 해당 읽어낸 데이터를 위치시킴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스는 디스크에서 데이터를 직접 읽을 수는 없다 ! 프로세스가 액세스 할 수 있는 것은 가상 메모리 주소이기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;세번째, OS는 메모리에 쓰인 블록의 해당 주소를 프로세스에 가상 주소로 변환해서 알려준다.&lt;/p&gt;
&lt;p&gt;네번째, 프로세스는 해당 가상 주소로 메모리에 액세스 하게 된다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/136983984-be05b727-15c4-485c-8cf8-9f349a1d3fff.png&quot;&gt;&lt;br&gt;이미지 출처: 대용량 서비스를 지탱하는 기술&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;페이지 캐시 등장 -&lt;/strong&gt; 이후에 더이상 프로세스가 데이터가 필요하지 않더라도 메모리에 쓰인 블럭을 해제하지 않고 남겨둔다. 그럼 다음 프로세스가 같은 디스크에 액세스할 때 해당 페이지를 재사용한다.&lt;/p&gt;
&lt;h3 id=&quot;페이지-캐시의-효과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%9D%98-%ED%9A%A8%EA%B3%BC&quot; aria-label=&quot;페이지 캐시의 효과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 캐시의 효과&lt;/h3&gt;
&lt;p&gt;리눅스의 페이지 캐시는 모든 I/O에 작용(예외를 제외하고)하여 디스크를 최초 읽은 이후 두번째 액세스부터 빨라진다. (OS를 계속 가동시켜두면 빨라진다. 재부팅 시 메모리에 캐시된 데이터는 없어진다.)&lt;/p&gt;
&lt;h2 id=&quot;vfs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vfs&quot; aria-label=&quot;vfs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VFS&lt;/h2&gt;
&lt;p&gt;리눅스의 구조는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최하위에 하드디스크를 조작하는 디바이스 드라이버 → 위에 여러 파일 시스템 (리눅스의 경우 ext3, ext2, ext4, 등등) → vfs (virtual file system)&lt;/li&gt;
&lt;li&gt;파일시스템은 다양한 함수를 갖추고 있는데 인터페이스를 통일하기 위해 있는 것이 vfs 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VFS가 페이지 캐시 구조를 가지고 있다. → 어떤 파일 시스템을 이용하여 어떤 디스크를 읽어도 vfs를 통해서 동일한 구조로 캐싱이 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;한마디로, VFS의 역할은 파일시스템 추상화와 성능에 관여하는 페이지 캐시 부분이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;리눅스는-페이지-단위로-디스크를-캐싱&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A5%BC-%EC%BA%90%EC%8B%B1&quot; aria-label=&quot;리눅스는 페이지 단위로 디스크를 캐싱 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리눅스는 페이지 단위로 디스크를 캐싱&lt;/h2&gt;
&lt;h3 id=&quot;왜-파일-캐시가-아니라-페이지-캐시일까-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%ED%8C%8C%EC%9D%BC-%EC%BA%90%EC%8B%9C%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%9D%BC%EA%B9%8C-&quot; aria-label=&quot;왜 파일 캐시가 아니라 페이지 캐시일까  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 파일 캐시가 아니라 페이지 캐시일까 ?&lt;/h3&gt;
&lt;p&gt;만일 메모리에 남은 여유 메모리 공간이 1.5 GB이고 필요한 파일이 4GB 일 경우 문제가 발생한다.&lt;/p&gt;
&lt;p&gt;OS는 파일(현재 4GB 단위) 기준으로 캐싱하는 것이 아니라 블록 단위(4KB 단위)만으로 캐싱한다. 특정 파일의 읽어낸 일부분만 캐싱한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;페이지 == 가상 메모리의 최소단위&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lru&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lru&quot; aria-label=&quot;lru permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LRU&lt;/h3&gt;
&lt;p&gt;만일 적은 여유분의 메모리에 4GB 파일을 모두 읽게 된다면 LRU(Least Recently Used) 방식으로 캐싱이 최신화 된다. 따라서 DB 서버도 계속 구동시키면 캐시가 최적화되어 I/O 부하가 내려간다.&lt;/p&gt;
&lt;h3 id=&quot;어떻게-캐싱이-될까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%BA%90%EC%8B%B1%EC%9D%B4-%EB%90%A0%EA%B9%8C&quot; aria-label=&quot;어떻게 캐싱이 될까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어떻게 캐싱이 될까&lt;/h3&gt;
&lt;p&gt;리눅스는 파일을 i노드 번호라는 번호로 식별하고 어느 위치에서 시작하는 오프셋을 제공하여 두가지 정보를 함께 캐싱한다. 따라서 파일 전체가 아닌 일부분을 캐싱할 수 있다.&lt;/p&gt;
&lt;p&gt;이 키가 너무 많으면 파일이 클 경우 데이터 찾는 것이 어렵다고 여겨질 수 있는 데이터 구조는 &lt;strong&gt;Radix Tree&lt;/strong&gt;라는 구조로 탐색 속도가 떨어지지 않는다.&lt;/p&gt;
&lt;h2 id=&quot;메모리가-비어있으면-캐싱&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B0%80-%EB%B9%84%EC%96%B4%EC%9E%88%EC%9C%BC%EB%A9%B4-%EC%BA%90%EC%8B%B1&quot; aria-label=&quot;메모리가 비어있으면 캐싱 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리가 비어있으면 캐싱&lt;/h2&gt;
&lt;p&gt;리눅스는 메모리가 비어있으면 모두 캐싱 → 프로세스에 메모리가 필요하면 오래돈 캐시를 버리고 메모리 확보&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메모리 상황 알아보기&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sar -r&lt;/code&gt; 명령어를 통해서 &lt;code class=&quot;language-text&quot;&gt;kbcached&lt;/code&gt;(kilo byte cached) 부분과 &lt;code class=&quot;language-text&quot;&gt;%memused&lt;/code&gt; 부분으로 확인할 수 있다. 주로 꽉찬 메모리를 확인할 수 있는데 이것은 문제가 아니다. 본래 리눅스는 가용 가능한 메모리에 조금씩 디스크를 모두 캐싱하고 추가 메모리가 필요하면 오래된 캐시를 파기한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;메모리-늘려서-io-부하-줄이기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8A%98%EB%A0%A4%EC%84%9C-io-%EB%B6%80%ED%95%98-%EC%A4%84%EC%9D%B4%EA%B8%B0&quot; aria-label=&quot;메모리 늘려서 io 부하 줄이기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 늘려서 I/O 부하 줄이기&lt;/h2&gt;
&lt;p&gt;메모리보다 디스크에 저장된 용량이 적으면 디스크의 모든 파일이 메모리에 캐싱되어 디스크 액세스가 일어나지 않게 된다. 따라서 메모리가 늘어날 수록 I/O 부하가 줄어든다.&lt;/p&gt;
&lt;h2 id=&quot;페이지-캐시는-투과적으로-작용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EB%8A%94-%ED%88%AC%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%9A%A9&quot; aria-label=&quot;페이지 캐시는 투과적으로 작용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 캐시는 투과적으로 작용&lt;/h2&gt;
&lt;p&gt;부팅 직후 파일을 그렇게 많이 읽지 않았을 때 그 이후 갑자기 큰 파일을 읽으면 해당 파일이 캐싱이 되기 때문에 갑자기 메모리 사용 용량이 높아진다.&lt;/p&gt;
&lt;h2 id=&quot;code-classlanguage-textsarcode-명령어로-os-지표-확인하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textsarcode-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C-os-%EC%A7%80%ED%91%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;code classlanguage textsarcode 명령어로 os 지표 확인하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;sar&lt;/code&gt; 명령어로 os 지표 확인하기&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;과거 OS 데이터 확인하기  - &lt;code class=&quot;language-text&quot;&gt;sar -f {/var/log/sa/sa04} | head&lt;/code&gt; 명령어로 과거 데이터의 로그 파일을 확인하여 장애 발생 원인을 확인 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 교체 후 전후 비교를 위해서 위 sar 데이터를 활용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;현재 데이터 확인하기 - &lt;code class=&quot;language-text&quot;&gt;sar 1 3&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1초 간격으로 3회 동안 OS 데이터를 확인&lt;/li&gt;
&lt;li&gt;지금 이 순간 시스템에서 일어나고 있는지 확인할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티 코어일 경우 &lt;code class=&quot;language-text&quot;&gt;sar -p&lt;/code&gt; 옵션으로 CPU 별 데이터 확인 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;디폴트 &lt;code class=&quot;language-text&quot;&gt;sar&lt;/code&gt; (&lt;code class=&quot;language-text&quot;&gt;sar -u&lt;/code&gt;에 해당함) -&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/136984234-20945113-1236-42e4-b23b-3a9289e74d83.png&quot;&gt;&lt;br&gt;이미지 출처: 대용량 서비스를 지탱하는 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user → 사용자 모드에서 CPU가 소비된 시간 비율&lt;/li&gt;
&lt;li&gt;nice → nice로 스캐줄링의 우선도 변경한 프로세스가 사용자모드에서 CPU를 소비한 비율&lt;/li&gt;
&lt;li&gt;system → 시스템 모드에서 CPU가 소비된 시간 비율&lt;/li&gt;
&lt;li&gt;iowait → CPU가 디스크 I/O대기 위해 Idle 상태로 소비한 시간 비율&lt;/li&gt;
&lt;li&gt;steal → OS 가상화 이용시 다른 가상 CPU 계산으로 대기된 시간 비율&lt;/li&gt;
&lt;li&gt;idle → CPU가 디스크 I/O 등으로 대기되지 않고 Idle 상대로 소비한 시간 비율 (프로세스가 실행하고 있지 않은 상태)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sar -q&lt;/code&gt; - Load Average 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행큐에 쌓여있는 프로세스 수, 시스템상의 프로세스 사이즈, load average 참조 가능&lt;/li&gt;
&lt;li&gt;시간 흐름에 따른 값의 추이를 추척 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sar -r&lt;/code&gt; - 메모리 사용 현황 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간 추이에 따른 메모리 정도, 용도 확인 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sar -W&lt;/code&gt;와 조합해 스왑 발생 시간대의 메모리 사용 상황 확인 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sar -W&lt;/code&gt;- 스왑 발생상황 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pswpin/s → 1초 동안 스왑인 되고 있는 페이지 수&lt;/li&gt;
&lt;li&gt;pswpout/s → 1초 동안 스왑아웃 되고 있는 페이지 수&lt;/li&gt;
&lt;li&gt;스왑이 발생하면 서버 전송량이 떨어진다. 만일 메모리 부족으로 잦은 스왑이 발생하고 있는지 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의9-io-부하를-줄이는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%989-io-%EB%B6%80%ED%95%98%EB%A5%BC-%EC%A4%84%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;강의9 io 부하를 줄이는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의9] I/O 부하를 줄이는 방법&lt;/h2&gt;
&lt;h2 id=&quot;캐시를-전제로-한-io-줄이는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C%EB%A5%BC-%EC%A0%84%EC%A0%9C%EB%A1%9C-%ED%95%9C-io-%EC%A4%84%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;캐시를 전제로 한 io 줄이는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;캐시를 전제로 한 I/O 줄이는 방법&lt;/h2&gt;
&lt;p&gt;I/O 대책의 기본은 캐시이다 !!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 접근법 → 데이터 크기보다 물리 메모리 사이즈가 크다면 모두 캐싱할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대규모 데이터에 데이터 압축이 중요하다. 압축해서 저장할 경우 디스크 전부를 메모리에 캐싱해둘 수도 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두번째 접근법 → 경제적 비용과 밸런스 고려&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;점점 서버와 높은 용량의 메모리 가격이 내려가면서 압축 알고리즘에 지나친 에너지를 쏟을 필요가 없는 경우도 많다. 밸런스를 고려하는 것이 중요하다.&lt;/p&gt;
&lt;h2 id=&quot;복수-서버로-확장---캐시로-해결-안되는-규모인-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EB%A1%9C-%ED%99%95%EC%9E%A5---%EC%BA%90%EC%8B%9C%EB%A1%9C-%ED%95%B4%EA%B2%B0-%EC%95%88%EB%90%98%EB%8A%94-%EA%B7%9C%EB%AA%A8%EC%9D%B8-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;복수 서버로 확장   캐시로 해결 안되는 규모인 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;복수 서버로 확장 - 캐시로 해결 안되는 규모인 경우&lt;/h2&gt;
&lt;p&gt;현재 인프라의 구조가 프록시 ↔ WAS ↔ DB 인 경우에 다음과 같이 서버를 확장할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WAS 서버를 늘린다.
&lt;ul&gt;
&lt;li&gt;CPU 부하를 낮추고 분산시키기 위해서이다.&lt;/li&gt;
&lt;li&gt;단순히 늘리면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 서버를 늘린다.
&lt;ul&gt;
&lt;li&gt;캐싱 용량을 늘리거나 효율을 높이고자 할 때 늘린다.&lt;/li&gt;
&lt;li&gt;하지만 I/O 분산에는 국소성을 고려해야하며 마냥 늘려서 좋은 것은 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;대수만-늘려서-확정성-확보할-수-없다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EC%88%98%EB%A7%8C-%EB%8A%98%EB%A0%A4%EC%84%9C-%ED%99%95%EC%A0%95%EC%84%B1-%ED%99%95%EB%B3%B4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;대수만 늘려서 확정성 확보할 수 없다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대수만 늘려서 확정성 확보할 수 없다.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;캐시 용량이 부족해서 DB 서버 대수를 확보했지만 부족한 캐싱 용량의 상황까지 그대로 복제될 수 있다.
&lt;ul&gt;
&lt;li&gt;A 서버에서 조회하며 캐싱했는데 부족한 것이 B 서버에서도 동일하게 일어남&lt;/li&gt;
&lt;li&gt;어느정도 빨라질 수는 있겠지만 증설비용대비 성능향상은 좋지 않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-io-부하-줄이기와-페이지-캐시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-io-%EB%B6%80%ED%95%98-%EC%A4%84%EC%9D%B4%EA%B8%B0%EC%99%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C&quot; aria-label=&quot; io 부하 줄이기와 페이지 캐시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;+ I/O 부하 줄이기와 페이지 캐시&lt;/h2&gt;
&lt;p&gt;리눅스에서 sar 명령어로 메모리 상황을 확인했을 때 항상 메모리가 부족해보일수도 있다. 하지만 리눅스의 페이지 캐시 원리는 &lt;code class=&quot;language-text&quot;&gt;리눅스는 가능한 남아있는 메모리를 페이지 캐시로 활용한다&lt;/code&gt; 라는 것이다. 따라서 부팅 후 시간이 지날수록 sar의 &lt;code class=&quot;language-text&quot;&gt;kbmemfree&lt;/code&gt; 는 줄어들 수밖에 없다.&lt;/p&gt;
&lt;h3 id=&quot;페이지-캐시에-의한-io-부하-경감-효과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%97%90-%EC%9D%98%ED%95%9C-io-%EB%B6%80%ED%95%98-%EA%B2%BD%EA%B0%90-%ED%9A%A8%EA%B3%BC&quot; aria-label=&quot;페이지 캐시에 의한 io 부하 경감 효과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 캐시에 의한 I/O 부하 경감 효과&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;많은 데이터가 있는 상황에서 메모리를 증설하고 &lt;code class=&quot;language-text&quot;&gt;sar -P&lt;/code&gt; 로 확인해보면 &lt;code class=&quot;language-text&quot;&gt;%iowait&lt;/code&gt; 의 확연한 차이를 볼 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sar -r&lt;/code&gt; 를 사용하면 커널이 캐시를 확보하고 있는 정도를 확인할 수 있다. 커널이 확보하고 있는 캐시용량과 어플리케이션에서 다루는 데이터의 용량을 비교하여 데이터량이 더 많을 경우 메모리 증설을 검토하여 디스크 액세스를 줄인다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vmstat&lt;/code&gt;을 사용하면 디스크 액세스 정도를 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 증설이 어려운 경우 데이터 분할하여 각각 서버에 위치한다. → 캐시 올릴 데이터 비율이 올라가고 I/O 횟수가 줄어든다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이지-캐시는-한번의-read에서-시작된다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EB%8A%94-%ED%95%9C%EB%B2%88%EC%9D%98-read%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;페이지 캐시는 한번의 read에서 시작된다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 캐시는 한번의 read에서 시작된다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;캐싱하지 못한 데이터는 직접 디스크에서 읽는다. 서버를 재부팅한 경우 메모리의 캐시는 초기화 되므로 모든 액세스에 I/O를 발생시킨다.&lt;/li&gt;
&lt;li&gt;대규모 DB 서버인 경우 모든 DB 액세스마다 디스크 I/O가 발생해서 DB가 lock에 걸리는 경우도 많다.&lt;/li&gt;
&lt;li&gt;따라서 필요한 경우 필요데이터를 전체 한번 전체적으로 읽어 다시 캐싱하는 방법도 필요하다.&lt;/li&gt;
&lt;li&gt;I/O 바운드가 높은 서버인 경우 페이지 캐시가 최적화 되었는지 확인한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의10-국소성을-살리는-분산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9810-%EA%B5%AD%EC%86%8C%EC%84%B1%EC%9D%84-%EC%82%B4%EB%A6%AC%EB%8A%94-%EB%B6%84%EC%82%B0&quot; aria-label=&quot;강의10 국소성을 살리는 분산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의10] 국소성을 살리는 분산&lt;/h2&gt;
&lt;h2 id=&quot;국소성을-고려한-분산이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AD%EC%86%8C%EC%84%B1%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-%EB%B6%84%EC%82%B0%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;국소성을 고려한 분산이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;국소성을 고려한 분산이란&lt;/h2&gt;
&lt;p&gt;서버를 여러대 확장해서 캐시 용량을 늘리기 위해서는 국소성(locality)을 고려해서 분산시켜야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB의 경우 서비스 패턴과 처리방식에 따라 데이터 액세스 경향이 한쪽으로 치우친다.
&lt;ul&gt;
&lt;li&gt;어떤 서비스 패턴이 엔트리 A에 많이 접근하고 다른 서비스는 테이블B에 많이 접근한다면 1, 2를 분산하여 한쪽에만 액세스 하도록 할 수 있다.&lt;/li&gt;
&lt;li&gt;이것을 고려하지 않으면 여전히 서버 1에서 두 패턴이 모두 일어나게 되므로 캐시를 위한 메모리 용량이 부족하게 된다.&lt;/li&gt;
&lt;li&gt;즉, 액세스 패턴을 고려하여 국소성을 적용한 분산을 하라!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파티셔닝---국소성-분산1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D---%EA%B5%AD%EC%86%8C%EC%84%B1-%EB%B6%84%EC%82%B01&quot; aria-label=&quot;파티셔닝   국소성 분산1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파티셔닝 - 국소성 분산1&lt;/h2&gt;
&lt;p&gt;한 대였던 DB를 여러대의 서버로 분할하는 방법이다. → 제일 간단한 분할 방법은 테이블 단위 분할&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;테이블 단위 분할&lt;/strong&gt; - 같이 액세스 하는 경우가 많은 테이블을 같은 서버에 위치시키고 그 밖의 것들을 다른 서버에 위치&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;테이블 데이터 분할 -&lt;/strong&gt; 하나의 테이블을 여러 테이블로 분할
&lt;ul&gt;
&lt;li&gt;예를 들어 책에 나온 예시로는 하나의 테이블을 앞 알파벳에 따라서 데이터를 분할함&lt;/li&gt;
&lt;li&gt;국소성이 올라가 캐싱이 잘됨&lt;/li&gt;
&lt;li&gt;단점: 분할이 너무 작게 된다면 데이터를 한번 병합해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;요청-패턴을-섬으로-분할---국소성-분산2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EC%B2%AD-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%84%AC%EC%9C%BC%EB%A1%9C-%EB%B6%84%ED%95%A0---%EA%B5%AD%EC%86%8C%EC%84%B1-%EB%B6%84%EC%82%B02&quot; aria-label=&quot;요청 패턴을 섬으로 분할   국소성 분산2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요청 패턴을 ‘섬’으로 분할 - 국소성 분산2&lt;/h2&gt;
&lt;p&gt;요청의 종류에 따라서 요청을 보내는 서버를 나누는 것이다. - 특이한 경우이기는 함&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/136984334-66cc4ba2-bb5a-4b92-aacd-1067c92f5765.png&quot;&gt;&lt;br&gt;이미지 출처: 대용량 서비스를 지탱하는 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;캐싱하기 쉬운 요청, 캐싱하기 어려운 요청을 처리하는 섬을 나눔 → 전자는 국소성으로 높은 캐시 적중률을 냄&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;페이지-캐시를-고려한-운용의-기본-원칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%9C-%EC%9A%B4%EC%9A%A9%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EC%B9%99&quot; aria-label=&quot;페이지 캐시를 고려한 운용의 기본 원칙 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 캐시를 고려한 운용의 기본 원칙&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;OS를 가동한 직후에 서버를 투입하지 않는다 → 캐시가 쌓여있지 않기 때문이다.
&lt;ul&gt;
&lt;li&gt;OS를 기동하고 자주 사용하는 DB의 파일을 한번 cat 하여 메모리에 올린다. 이후 로드밸런서에 편입한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성능 테스트를 할 경우 초기값은 버려야한다. → 최초 캐시가 최적화 되어 있지 않은 단계이므로 속도가 확연히 차이가 나게 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;-부하분산과-os의-동작원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0%EA%B3%BC-os%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot; aria-label=&quot; 부하분산과 os의 동작원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;+ 부하분산과 OS의 동작원리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS 캐시, 멀티스레드나 멀티프로세스, 가상 메모리구조, 파일시스템 등과 같은 OS 지식이 있어야 부하분산을 잘 할 수 있음.&lt;/li&gt;
&lt;li&gt;요청 분배에는 LVS 사용법, MySQL 아파치와 같은 미들웨어 사용법 등이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%988-os-%EC%BA%90%EC%8B%9C-%EA%B5%AC%EC%A1%B0&quot;&gt;[강의8] OS 캐시 구조&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#os%EC%9D%98-%EC%BA%90%EC%8B%9C-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%95%8C%EA%B3%A0-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0---%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C&quot;&gt;OS의 캐시 구조를 알고 애플리케이션 작성하기 - 페이지 캐시&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#linuxx86-%ED%8E%98%EC%9D%B4%EC%A7%95-%EA%B5%AC%EC%A1%B0&quot;&gt;Linux(x86) 페이징 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0&quot;&gt;가상 메모리 구조&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B0%80%EC%83%81-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0%EA%B9%8C&quot;&gt;왜 가상 주소를 반환할까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#linux-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%9D%98-%EC%9B%90%EB%A6%AC&quot;&gt;Linux 페이지 캐시의 원리&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B0%80-%EB%94%94%EC%8A%A4%ED%81%AC%EC%97%90%EC%84%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9D%BD%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B3%BC%EC%A0%95&quot;&gt;프로세스가 디스크에서 데이터를 읽어내는 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%9D%98-%ED%9A%A8%EA%B3%BC&quot;&gt;페이지 캐시의 효과&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#vfs&quot;&gt;VFS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A5%BC-%EC%BA%90%EC%8B%B1&quot;&gt;리눅스는 페이지 단위로 디스크를 캐싱&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%ED%8C%8C%EC%9D%BC-%EC%BA%90%EC%8B%9C%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%9D%BC%EA%B9%8C-&quot;&gt;왜 파일 캐시가 아니라 페이지 캐시일까 ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lru&quot;&gt;LRU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%BA%90%EC%8B%B1%EC%9D%B4-%EB%90%A0%EA%B9%8C&quot;&gt;어떻게 캐싱이 될까&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B0%80-%EB%B9%84%EC%96%B4%EC%9E%88%EC%9C%BC%EB%A9%B4-%EC%BA%90%EC%8B%B1&quot;&gt;메모리가 비어있으면 캐싱&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8A%98%EB%A0%A4%EC%84%9C-io-%EB%B6%80%ED%95%98-%EC%A4%84%EC%9D%B4%EA%B8%B0&quot;&gt;메모리 늘려서 I/O 부하 줄이기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EB%8A%94-%ED%88%AC%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%9A%A9&quot;&gt;페이지 캐시는 투과적으로 작용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#sar-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C-os-%EC%A7%80%ED%91%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sar&lt;/code&gt; 명령어로 os 지표 확인하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%989-io-%EB%B6%80%ED%95%98%EB%A5%BC-%EC%A4%84%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;[강의9] I/O 부하를 줄이는 방법&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C%EB%A5%BC-%EC%A0%84%EC%A0%9C%EB%A1%9C-%ED%95%9C-io-%EC%A4%84%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;캐시를 전제로 한 I/O 줄이는 방법&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EB%A1%9C-%ED%99%95%EC%9E%A5---%EC%BA%90%EC%8B%9C%EB%A1%9C-%ED%95%B4%EA%B2%B0-%EC%95%88%EB%90%98%EB%8A%94-%EA%B7%9C%EB%AA%A8%EC%9D%B8-%EA%B2%BD%EC%9A%B0&quot;&gt;복수 서버로 확장 - 캐시로 해결 안되는 규모인 경우&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8C%80%EC%88%98%EB%A7%8C-%EB%8A%98%EB%A0%A4%EC%84%9C-%ED%99%95%EC%A0%95%EC%84%B1-%ED%99%95%EB%B3%B4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4&quot;&gt;대수만 늘려서 확정성 확보할 수 없다.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-io-%EB%B6%80%ED%95%98-%EC%A4%84%EC%9D%B4%EA%B8%B0%EC%99%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C&quot;&gt;+ I/O 부하 줄이기와 페이지 캐시&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EC%97%90-%EC%9D%98%ED%95%9C-io-%EB%B6%80%ED%95%98-%EA%B2%BD%EA%B0%90-%ED%9A%A8%EA%B3%BC&quot;&gt;페이지 캐시에 의한 I/O 부하 경감 효과&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EB%8A%94-%ED%95%9C%EB%B2%88%EC%9D%98-read%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%EB%90%9C%EB%8B%A4&quot;&gt;페이지 캐시는 한번의 read에서 시작된다.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%9810-%EA%B5%AD%EC%86%8C%EC%84%B1%EC%9D%84-%EC%82%B4%EB%A6%AC%EB%8A%94-%EB%B6%84%EC%82%B0&quot;&gt;[강의10] 국소성을 살리는 분산&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B5%AD%EC%86%8C%EC%84%B1%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-%EB%B6%84%EC%82%B0%EC%9D%B4%EB%9E%80&quot;&gt;국소성을 고려한 분산이란&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D---%EA%B5%AD%EC%86%8C%EC%84%B1-%EB%B6%84%EC%82%B01&quot;&gt;파티셔닝 - 국소성 분산1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9A%94%EC%B2%AD-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%84%AC%EC%9C%BC%EB%A1%9C-%EB%B6%84%ED%95%A0---%EA%B5%AD%EC%86%8C%EC%84%B1-%EB%B6%84%EC%82%B02&quot;&gt;요청 패턴을 ‘섬’으로 분할 - 국소성 분산2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%BA%90%EC%8B%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%9C-%EC%9A%B4%EC%9A%A9%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EC%B9%99&quot;&gt;페이지 캐시를 고려한 운용의 기본 원칙&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0%EA%B3%BC-os%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot;&gt;+ 부하분산과 OS의 동작원리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 대규모 데이터 처리]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 [강의4] 어느정도가 대규모 데이터인가 ? 이때 당시의 수치임을 감안하고 보자 !! 하테나의 경우 레코드 건수 1500만, 5000만 entry 테이블이…]]></description><link>https://yjksw.github.io/high-traffic-service_2/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_2/</guid><pubDate>Thu, 23 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의4&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%984&quot; aria-label=&quot;강의4 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의4]&lt;/h2&gt;
&lt;h2 id=&quot;어느정도가-대규모-데이터인가-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%8A%90%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%B8%EA%B0%80-&quot; aria-label=&quot;어느정도가 대규모 데이터인가  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어느정도가 대규모 데이터인가 ?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;이때 당시의 수치임을 감안하고 보자 !!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;하테나의 경우
&lt;ul&gt;
&lt;li&gt;레코드 건수 1500만, 5000만&lt;/li&gt;
&lt;li&gt;entry 테이블이 3기가, bookmark 데이블이 5.5기가 등등&lt;/li&gt;
&lt;li&gt;html 텍스트 데이터 압축 후 200 기가&lt;/li&gt;
&lt;li&gt;이정도가 중규모 ~ 대규모&lt;/li&gt;
&lt;li&gt;디비 규모가 기가바이트면 굉장히 많은 것이다.&lt;/li&gt;
&lt;li&gt;인덱스 사용 안했을 때 1건 검색시 200초 소요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의5&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%985&quot; aria-label=&quot;강의5 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의5]&lt;/h2&gt;
&lt;h2 id=&quot;대규모-데이터는-어떤-점이-어려운가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EC%96%B4%EB%A0%A4%EC%9A%B4%EA%B0%80&quot; aria-label=&quot;대규모 데이터는 어떤 점이 어려운가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대규모 데이터는 어떤 점이 어려운가&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;한마디로 말하면 &lt;strong&gt;‘메모리 내에서 계산할 수 없다’&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;데이터가 너무 많으면 메모리 내에서 계산할 수 없으므로 디스크를 검색하면 읽어야하는데 디스크를 읽는 것은 계산량도 지나치게 많아지고 시간도 많이 소요된다. (I/O 시간)&lt;/li&gt;
&lt;li&gt;메모리와 디스크 속도 차이는 10만 ~ 100만배 정도&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;디스크는-왜-늦나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%94%EC%8A%A4%ED%81%AC%EB%8A%94-%EC%99%9C-%EB%8A%A6%EB%82%98&quot; aria-label=&quot;디스크는 왜 늦나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디스크는 왜 늦나&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;디스크의 경우 헤드의 이동과 원반의 회전이라는 두 가지 물리적인 이동이 수반되며 속도가 저하된다.&lt;/li&gt;
&lt;li&gt;하지만 OS레벨에서 이것을 어느정도 커버하기 위해서 연속된 데이터를 같은 위치에 쌓고, 데이터를 여러 바이트씩 한꺼번에 읽도록 한다.
&lt;ul&gt;
&lt;li&gt;이렇게 하면 한번의 디스크 회전으로 읽을 수 있는 데이터가 많으며 회전횟수를 최소화 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전송속도, 버스의 속도차도 있다.
&lt;ul&gt;
&lt;li&gt;SSD는 물리적이 회전이 아니므로 탐색이 더 빠르긴 하다. 하지만 여전히 버스 속도로 인해 메모리 만큼 빠르지는 않다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;디스크와 메모리의 속도차를 생각하며 설계하는 것이 중요하다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linux-단일-호스트의-부하&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#linux-%EB%8B%A8%EC%9D%BC-%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B6%80%ED%95%98&quot; aria-label=&quot;linux 단일 호스트의 부하 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux 단일 호스트의 부하&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;단일 서버의 성능을 충분히 끌어내는 것을 시작으로 복수 서버에서 부하분산이 의미를 갖는다&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;추측하지 말고 계측&lt;/strong&gt;!! 서버의 리소스를 정확히 파악하고 부하를 계측하는 것이 필요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;병목 규명작업 기본적인 흐름&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load Average 확인
&lt;ul&gt;
&lt;li&gt;top, uptime 등의 명령어로 확인&lt;/li&gt;
&lt;li&gt;시스템 전체의 부하 상황을 나타내는 지표&lt;/li&gt;
&lt;li&gt;여기를 시초로 병목지점을 찾아나가야한다.&lt;/li&gt;
&lt;li&gt;Load Average가 낮은데 전송량이 오르지 않다면 소프트웨어 설정, 오류, 네트워크, 호스트 문제 쪽일 가능성이 높음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU, I/O 중 병목 원인 조사
&lt;ul&gt;
&lt;li&gt;Load Average가 높다면 둘 중 어디에 원인이 있는지 규명&lt;/li&gt;
&lt;li&gt;sar, vmstat으로 시간 경과에 CPU 사용률, I/O 대기율 추이 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU부하가 높을 경우 핸들링 루틴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션의 처리가 병목인지, 시스템 프로그램이 원인인지 top, sar로 확인&lt;/li&gt;
&lt;li&gt;ps로 프로세스 상태, CPU 사용시간 보며 원인 프로세스 찾기&lt;/li&gt;
&lt;li&gt;프로세스 찾은 후 strace로 해당 프로세스 추척, oprofile로 프로파일링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주로 CPU 부하가 높은 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;디스크나 메모리 용량에서 병목이 되지 않는 이상적인 상태
&lt;ul&gt;
&lt;li&gt;서버 증설, 프로그램 로직, 알고리즘 개선 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램이 폭주해서 CPU에 필요이상의 부하가 걸리는 경우
&lt;ul&gt;
&lt;li&gt;오류를 제거하여 프로그램 폭주를 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 부하가 높은 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 입출력이 많아서 부하가 높거나&lt;/li&gt;
&lt;li&gt;스왑이 발생해서 디스크 액세스가 발생&lt;/li&gt;
&lt;li&gt;sar , vmstat으로 스왑 발생상황 확인&lt;/li&gt;
&lt;li&gt;스왑이 발생하고 있다면 다음과 같이 조사
&lt;ul&gt;
&lt;li&gt;특정 프로세스가 극단적으로 메모리를 소비하고 있는지 ps로 확인&lt;/li&gt;
&lt;li&gt;프로그램의 오류로 메모리 소비시 프로그램 개선&lt;/li&gt;
&lt;li&gt;메모리 부족한 경우 메모리 증설, 또는 분산&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스왑이 아닌데 디스크로 입출력이 빈번하다면 캐시에 필요한 메모리 부족한 경우
&lt;ul&gt;
&lt;li&gt;메모리 증설로 캐시 영역 확대&lt;/li&gt;
&lt;li&gt;또는 데이터 분산이나 캐시서버 도임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS 튜닝이랑 부하의 원인을 알고 제거하는 것이다 !!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;튜닝은 성능을 몇배씩 키워주는 것보다 ‘병목이 생기면 알아내고 제거하는 것’이다.&lt;/li&gt;
&lt;li&gt;본래 하드웨어가 가지고 있는 성능 이상을 내기는 어렵다. (그냥 하드웨어를 더 좋은걸 써야함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 성능 개선을 위해서는 다음을 고려해야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리 증설해서 캐시영역 확보할 수 있는지&lt;/li&gt;
&lt;li&gt;데이터량이 너무 많지 않은지&lt;/li&gt;
&lt;li&gt;어플리케이션의 I/O 알고리즘을 변경해야하는지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의6-규모조정의-요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%986-%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C&quot; aria-label=&quot;강의6 규모조정의 요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의6] 규모조정의 요소&lt;/h2&gt;
&lt;h2 id=&quot;규모조정-확장성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95-%ED%99%95%EC%9E%A5%EC%84%B1&quot; aria-label=&quot;규모조정 확장성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;규모조정, 확장성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;앞에서 이야기한 대규모 데이터가 시스템 전체의 확장성 전략에 어떠한 영향을 주나&lt;/li&gt;
&lt;li&gt;웹 서비스에서는 스케일업 보다 스케일아웃 전략이 주류이다.
&lt;ul&gt;
&lt;li&gt;웹 서비스에 적합하고 비용이 저렴, 시스템 구성에 유연함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;규모조정의-요소---cpu-부하와-io-부하&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C---cpu-%EB%B6%80%ED%95%98%EC%99%80-io-%EB%B6%80%ED%95%98&quot; aria-label=&quot;규모조정의 요소   cpu 부하와 io 부하 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;규모조정의 요소 - CPU 부하와 I/O 부하&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스케일아웃으로 CPU 부하분산의 확장성 확보는 쉬움&lt;/li&gt;
&lt;li&gt;DB 서버에서는 I/O 부하가 걸린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;웹-어플리케이션과-부하의-관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EB%B6%80%ED%95%98%EC%9D%98-%EA%B4%80%EA%B3%84&quot; aria-label=&quot;웹 어플리케이션과 부하의 관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 어플리케이션과 부하의 관계&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WAS는 CPU부하만 걸린다.
&lt;ul&gt;
&lt;li&gt;서버를 늘리면 확장이 가능&lt;/li&gt;
&lt;li&gt;로드밸런서 장치 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB에서 I/O 부하 문제 발생
&lt;ul&gt;
&lt;li&gt;여러 DB 서버를 두었을 때 동기화가 이슈가 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;db-확장성-확보-어려움&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#db-%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EC%96%B4%EB%A0%A4%EC%9B%80&quot; aria-label=&quot;db 확장성 확보 어려움 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB 확장성 확보 어려움&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;디스크 속도 저하의 문제가 여기에 영향을 미침&lt;/li&gt;
&lt;li&gt;DB에서 디스크 많이 사용 → 데이터가 커지면 메모리에서 처리하지 못하고 디스크에서 처리할 수밖에 없음&lt;/li&gt;
&lt;li&gt;서버를 늘려서 해결할 수 없는 문제다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-두-종류의-부하와-웹-어플리케이션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%91%90-%EC%A2%85%EB%A5%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98&quot; aria-label=&quot; 두 종류의 부하와 웹 어플리케이션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;+ 두 종류의 부하와 웹 어플리케이션&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU 부하&lt;/li&gt;
&lt;li&gt;I/O 부하&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WAS는 CPU 바운드한 서버, DB는 I/O 바운드한 서버이다.&lt;/p&gt;
&lt;h3 id=&quot;멀티태스킹-os와-부하&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0%ED%83%9C%EC%8A%A4%ED%82%B9-os%EC%99%80-%EB%B6%80%ED%95%98&quot; aria-label=&quot;멀티태스킹 os와 부하 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;멀티태스킹 OS와 부하&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;멀티태스킹으로 태스크를 처리하면서 태스크가 대기하게 된다.&lt;/li&gt;
&lt;li&gt;top 명령어의 load average에 단위 시간당 대기된 태스크의 수, 즉, 평균 어느정도 태스크가 대기상태로 있었는지 보여준다.
&lt;ul&gt;
&lt;li&gt;높은 숫자는 태스크 실행에 대기가 발생한다는 표시 → 부하가 높은 상황&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;위-부하의-정체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%84-%EB%B6%80%ED%95%98%EC%9D%98-%EC%A0%95%EC%B2%B4&quot; aria-label=&quot;위 부하의 정체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;위 부하의 정체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하드웨어는 CPU 인터럽트로 주기적 신호를 보내서 실행 중인 프로세스가 CPU를 얼마나 사용했는지 계산한다. 이 타이머 인터럽트마다 Load Average 값이 계산된다.&lt;/li&gt;
&lt;li&gt;타이머 인터럽트 때 실행 가능 상태인 태스크(가용 가능한 CPU가 없어서 대기중인 프로세스)와 I/O 대기인 태스크의 개수를 세어서 단위시간으로 나눈 값으로 load avarage를 측정한다.
&lt;ul&gt;
&lt;li&gt;처리를 실행하려고 해도 실행할 수 없어서 대기하는 프로세스의 수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 값으로 부하 정도를 알 수 있고 CPU 부하인지 I/O 부하인지 판단하기는 어려워서 더 자세히 규명해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;강의7&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%987&quot; aria-label=&quot;강의7 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의7]&lt;/h2&gt;
&lt;p&gt;대규모 데이터를 다루는 두가지 관점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로그램을 작성할 때의 요령&lt;/li&gt;
&lt;li&gt;프로그램 개발의 근간이 되는 기초라는 점에서 전제로 알아두면 좋은 것&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;대규모-데이터-3가지-중요점---프로그램-작성시-중요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-3%EA%B0%80%EC%A7%80-%EC%A4%91%EC%9A%94%EC%A0%90---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1%EC%8B%9C-%EC%A4%91%EC%9A%94&quot; aria-label=&quot;대규모 데이터 3가지 중요점   프로그램 작성시 중요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대규모 데이터 3가지 중요점 - 프로그램 작성시 중요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;어떻게 메모리에서 처리를 마칠 수 있을까&lt;/li&gt;
&lt;li&gt;데이터량 증가에 강한 알고리즘 (효율적인 탐색 알고리즘)&lt;/li&gt;
&lt;li&gt;데이터 압축이나 검색기술과 같은 테크닉 활용
&lt;ul&gt;
&lt;li&gt;압축하면 메모리에 캐싱하기 쉬움&lt;/li&gt;
&lt;li&gt;확장성 면에서 DB에 맡겨서 해결될 수 없을 때 검색엔진을 만들어서 속도를 확보할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;대규모-데이터-다루기-3대-전제지식---프로그램-개발-기초&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8B%A4%EB%A3%A8%EA%B8%B0-3%EB%8C%80-%EC%A0%84%EC%A0%9C%EC%A7%80%EC%8B%9D---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88&quot; aria-label=&quot;대규모 데이터 다루기 3대 전제지식   프로그램 개발 기초 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대규모 데이터 다루기 3대 전제지식 - 프로그램 개발 기초&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS 캐시&lt;/li&gt;
&lt;li&gt;분산 고려 RDBMS&lt;/li&gt;
&lt;li&gt;대규모 환경에서 알고리즘과 데이터구조 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-load-average-다음에-cpu-사용률과-io-대기율&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-load-average-%EB%8B%A4%EC%9D%8C%EC%97%90-cpu-%EC%82%AC%EC%9A%A9%EB%A5%A0%EA%B3%BC-io-%EB%8C%80%EA%B8%B0%EC%9C%A8&quot; aria-label=&quot; load average 다음에 cpu 사용률과 io 대기율 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;+ Load Average 다음에 CPU 사용률과 I/O 대기율&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sar(System Activity Reporter) 명령어로 CPU 대기율, I/O 대기율 확인
&lt;ul&gt;
&lt;li&gt;Load average가 높고 &lt;code class=&quot;language-text&quot;&gt;sar&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;%user&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;%system&lt;/code&gt; CPU 사용률 수치가 높으면 부하 원인이 CPU 리소스 부족&lt;/li&gt;
&lt;li&gt;Load average가 높고 &lt;code class=&quot;language-text&quot;&gt;sar&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;%iowait&lt;/code&gt; CPU 사용률 수치가 높으면 부하 원인이 I/O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;여기까지 알았다면 더 자세히 보기 위해 메모리 사용률, 스왑 발생 상황을 들여다본다.&lt;/li&gt;
&lt;li&gt;멀티 CPU 인 경우 더 자세히 볼 필요가 있다.
&lt;ul&gt;
&lt;li&gt;sar -p 옵션으로 여러 CPU 사용시 각 CPU의 지표를 볼 수 있다.&lt;/li&gt;
&lt;li&gt;I/O의 경우 전체 CPU의 &lt;code class=&quot;language-text&quot;&gt;%iowait&lt;/code&gt;의 지표는 높지 않을 수 있으나 각 CPU의 지표를 보았을 때 특정 CPU의 지표가 높을 수 있다.&lt;/li&gt;
&lt;li&gt;이는 멀티 CPU 이더라도 디스크는 하나밖에 없는 경우 I/O 부하가 분산되지 않기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%984&quot;&gt;[강의4]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%96%B4%EB%8A%90%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%B8%EA%B0%80-&quot;&gt;어느정도가 대규모 데이터인가 ?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%985&quot;&gt;[강의5]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EC%96%B4%EB%A0%A4%EC%9A%B4%EA%B0%80&quot;&gt;대규모 데이터는 어떤 점이 어려운가&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%94%94%EC%8A%A4%ED%81%AC%EB%8A%94-%EC%99%9C-%EB%8A%A6%EB%82%98&quot;&gt;디스크는 왜 늦나&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#linux-%EB%8B%A8%EC%9D%BC-%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B6%80%ED%95%98&quot;&gt;Linux 단일 호스트의 부하&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%986-%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C&quot;&gt;[강의6] 규모조정의 요소&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95-%ED%99%95%EC%9E%A5%EC%84%B1&quot;&gt;규모조정, 확장성&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C---cpu-%EB%B6%80%ED%95%98%EC%99%80-io-%EB%B6%80%ED%95%98&quot;&gt;규모조정의 요소 - CPU 부하와 I/O 부하&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EB%B6%80%ED%95%98%EC%9D%98-%EA%B4%80%EA%B3%84&quot;&gt;웹 어플리케이션과 부하의 관계&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#db-%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EC%96%B4%EB%A0%A4%EC%9B%80&quot;&gt;DB 확장성 확보 어려움&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%91%90-%EC%A2%85%EB%A5%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98&quot;&gt;+ 두 종류의 부하와 웹 어플리케이션&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0%ED%83%9C%EC%8A%A4%ED%82%B9-os%EC%99%80-%EB%B6%80%ED%95%98&quot;&gt;멀티태스킹 OS와 부하&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%84-%EB%B6%80%ED%95%98%EC%9D%98-%EC%A0%95%EC%B2%B4&quot;&gt;위 부하의 정체&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%987&quot;&gt;[강의7]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-3%EA%B0%80%EC%A7%80-%EC%A4%91%EC%9A%94%EC%A0%90---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1%EC%8B%9C-%EC%A4%91%EC%9A%94&quot;&gt;대규모 데이터 3가지 중요점 - 프로그램 작성시 중요&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8B%A4%EB%A3%A8%EA%B8%B0-3%EB%8C%80-%EC%A0%84%EC%A0%9C%EC%A7%80%EC%8B%9D---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88&quot;&gt;대규모 데이터 다루기 3대 전제지식 - 프로그램 개발 기초&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-load-average-%EB%8B%A4%EC%9D%8C%EC%97%90-cpu-%EC%82%AC%EC%9A%A9%EB%A5%A0%EA%B3%BC-io-%EB%8C%80%EA%B8%B0%EC%9C%A8&quot;&gt;+ Load Average 다음에 CPU 사용률과 I/O 대기율&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대규모 서비스를 지탱하는 기술 - 오리엔테이션]]></title><description><![CDATA[다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 어느 정도가 대규모 인가 ? 이것은 이 책이 쓰여졌을 당시의 상황이다. 전혀 감이 없으니 이때 당시의 대규모 정도를 숫자로 파악해보자. 등록 사용자 10…]]></description><link>https://yjksw.github.io/high-traffic-service_1/</link><guid isPermaLink="false">https://yjksw.github.io/high-traffic-service_1/</guid><pubDate>Thu, 23 Sep 2021 12:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h3 id=&quot;어느-정도가-대규모-인가-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%8A%90-%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%9D%B8%EA%B0%80-&quot; aria-label=&quot;어느 정도가 대규모 인가  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어느 정도가 대규모 인가 ?&lt;/h3&gt;
&lt;p&gt;이것은 이 책이 쓰여졌을 당시의 상황이다. 전혀 감이 없으니 이때 당시의 대규모 정도를 숫자로 파악해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;등록 사용자 100만 명 이상, 1500만 UU&lt;/li&gt;
&lt;li&gt;서버 500대 이상&lt;/li&gt;
&lt;li&gt;피크시 회선 트래픽 430Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;강의1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%981&quot; aria-label=&quot;강의1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의1]&lt;/h2&gt;
&lt;h2 id=&quot;소규모-서비스와-대규모-서비스의-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;소규모 서비스와 대규모 서비스의 차이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소규모 서비스와 대규모 서비스의 차이&lt;/h2&gt;
&lt;h3 id=&quot;확장성-확보-부하분산-필요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0-%ED%95%84%EC%9A%94&quot; aria-label=&quot;확장성 확보 부하분산 필요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;확장성 확보, 부하분산 필요&lt;/h3&gt;
&lt;p&gt;1대의 서버로 처리 할 수 없는 부하를 어떻게 처리할 것인가 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스케일 아웃 → 서버 대수를 늘림으로 스스템 처리능력을 높임&lt;/li&gt;
&lt;li&gt;스케일 업  → 하드웨어 성능을 높여 처리 능력을 끌어올림&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여러대의 서버를 사용했을 때 파생되는 문제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 동기화, 네트워크 통신 지연시간,&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;다중성-확보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4&quot; aria-label=&quot;다중성 확보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중성 확보&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 서버가 고장이 나도 서비스를 계속 할 수 있어야 함&lt;/li&gt;
&lt;li&gt;스케일아웃은 서버의 고장율이 올라가고 하나가 고장났다고 전체가 정지해버릴 순 없다.&lt;/li&gt;
&lt;li&gt;시스템이 고장나면 다른 시스템이 자동으로 처리를 인계받는 시스템 설계가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;효율적-운용-필요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9A%A8%EC%9C%A8%EC%A0%81-%EC%9A%B4%EC%9A%A9-%ED%95%84%EC%9A%94&quot; aria-label=&quot;효율적 운용 필요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;효율적 운용 필요&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버의 상태를 확인하고, 부하, 헬스, 디스크 용량, 보안 등을 체크할 수 있어야한다.&lt;/li&gt;
&lt;li&gt;여러대의 서버일 경우 효율적으로 운용하기 어려움.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;개발자-수-개발방법의-변화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%88%98-%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EC%9D%98-%EB%B3%80%ED%99%94&quot; aria-label=&quot;개발자 수 개발방법의 변화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발자 수, 개발방법의 변화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;여러 사람이 개발을 하게 되면서 개발 표준화는 어떻게 해야하나, 컨벤션, 언어 통일, 라이브러리, 프레임워크 통일 등등의 표준화가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;대규모-데이터량에-대한-대처&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9F%89%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8C%80%EC%B2%98&quot; aria-label=&quot;대규모 데이터량에 대한 대처 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대규모 데이터량에 대한 대처&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터 처리 과정
&lt;ul&gt;
&lt;li&gt;디스크 → 메모리 → 캐시 메모리 → CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디스크와 CPU에서의 속도차이는 엄청나다&lt;/li&gt;
&lt;li&gt;미들웨어, 케싱등을 사용해서 데이터 처리 속도를 향상시키곤 한다.&lt;/li&gt;
&lt;li&gt;하지만 대규모 서비스에서는 한계가 있다.
&lt;ul&gt;
&lt;li&gt;데이터가 많아지면 캐시 미스가 많이 발생&lt;/li&gt;
&lt;li&gt;그러므로 디스크 I/O 가 많아져서 속도가 저하됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소규모 서비스에서는 큰 문제가 아니지만 데이터량이 기하급수적으로 많으면 문제가 복잡해짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;강의2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%982&quot; aria-label=&quot;강의2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[강의2]&lt;/h2&gt;
&lt;h2 id=&quot;웹-서비스의-어려움&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80&quot; aria-label=&quot;웹 서비스의 어려움 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 서비스의 어려움&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;게속 점진적으로 성장해가기 때문에 운영 환경에 변화를 야기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;하테나의-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%ED%85%8C%EB%82%98%EC%9D%98-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;하테나의 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하테나의 예시&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;트래픽이 많아지고 서버를 데이터 센터로 이전&lt;/li&gt;
&lt;li&gt;이전하며 부하 상황정리
&lt;ul&gt;
&lt;li&gt;병목지점 측정&lt;/li&gt;
&lt;li&gt;I/O 부하가 높은 서버는 메모리 중시&lt;/li&gt;
&lt;li&gt;CPU 부하가 높은 서버는 CPU를 중시 등으로 최적 구성으로 하드웨어 배치&lt;/li&gt;
&lt;li&gt;로드밸런서로 다중화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성급한 최적화가 좋은 건 아니다. 낮은 확률에 지나친 비용을 쏟아야 한다. 하지만 너무 불완전해서는 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B4%EB%8A%90-%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%9D%B8%EA%B0%80-&quot;&gt;어느 정도가 대규모 인가 ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%981&quot;&gt;[강의1]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%86%8C%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4&quot;&gt;소규모 서비스와 대규모 서비스의 차이&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0-%ED%95%84%EC%9A%94&quot;&gt;확장성 확보, 부하분산 필요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4&quot;&gt;다중성 확보&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%9A%A8%EC%9C%A8%EC%A0%81-%EC%9A%B4%EC%9A%A9-%ED%95%84%EC%9A%94&quot;&gt;효율적 운용 필요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%88%98-%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EC%9D%98-%EB%B3%80%ED%99%94&quot;&gt;개발자 수, 개발방법의 변화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9F%89%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8C%80%EC%B2%98&quot;&gt;대규모 데이터량에 대한 대처&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%95%EC%9D%982&quot;&gt;[강의2]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80&quot;&gt;웹 서비스의 어려움&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%95%98%ED%85%8C%EB%82%98%EC%9D%98-%EC%98%88%EC%8B%9C&quot;&gt;하테나의 예시&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[동작 파라미터부터 람다까지: 콜백함수를 곁들인]]></title><description><![CDATA[[INTRO…]]></description><link>https://yjksw.github.io/behavior-parameterization/</link><guid isPermaLink="false">https://yjksw.github.io/behavior-parameterization/</guid><pubDate>Wed, 22 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[INTRO]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바가 업데이트 되면서 메소드를 일급시민으로 취급할 수 있게 되었다.&lt;/li&gt;
&lt;li&gt;이로 인해 동작 파라미터를 통해서 어떠한 동작을 인자로 넘길 수 있다.&lt;/li&gt;
&lt;li&gt;메소드를 일급 시민으로 취급하면서 함수형 인터페이스 등의 개념이 등장한다.&lt;/li&gt;
&lt;li&gt;코드의 명확성을 증진시키기 위해 익명 클래스, 람다 함수, 메서드 참조 등등의 개념이 활용된다.&lt;/li&gt;
&lt;li&gt;동작 파라미터를 활용한 예시로 콜백 함수를 들여다보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;왜-동작-파라미터인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;왜 동작 파라미터인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[왜 동작 파라미터인가?]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코딩을 할 때 가장 중요한 요소 중 하나는 변화하는 요구사항에 대응하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;동작 파라미터화&lt;/strong&gt;는 나중에 실행할 코드 블록을 인수로 넘겨서 행동을 결정하는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나중에 실행되도록 넘기는 콜백 함수와 같은 동일하게 작용한다. (내재된 개념이다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이해를 돕기 위해 &lt;em&gt;모던 자바 인 액션&lt;/em&gt; 에 나온 예제를 살펴보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;상황1: 사과를 색으로 필터링 하는 요구사항을 구현한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterGreenApples&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GREEN&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appleColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상황2: 사과를 무게로 필터링하는 요구사항을 구현한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterByWeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 두 코드가 상당히 유사하다. (실제로 작성할 때도 복붙하고 if문 안의 로직만 바꿨다.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이것은 DRY(Don’t Repeat Yourself)원칙을 반하며 좋지 않은 코드이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 상황에서 중복을 줄이기 위해 자바에서 일급시민으로 승격된 메소드를 동작 파라미터로 넘겨서 개선한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;함수형 인터페이스 선언&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;함수형 인터페이스 구현체 생성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 무거운 사과 필터링 predicate&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppleHeaveyWeightPredicate&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 녹색 사과 필터링 predicate&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppleGreenColorPredicate&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; GREEN&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필터 메소드에 동작 파라미터 활용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//동작 파라미터화!!! 조건문을 캡슐화하여 인자로 전달 &lt;/span&gt;
            result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;          &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전략 패턴이라고도 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;first-class-citizen-일급-시민&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#first-class-citizen-%EC%9D%BC%EA%B8%89-%EC%8B%9C%EB%AF%BC&quot; aria-label=&quot;first class citizen 일급 시민 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[First Class Citizen 일급 시민]&lt;/h2&gt;
&lt;p&gt;위에서 계속 일급 시민이라는 개념이 등장했다. 동적 파라미터와 함수형 인터페이스 등은 일급시민을 기반으로 탄성 배경과 개념을 설명할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다음 조건을 만족하는 것을 일급 시민으로 취급한다.
&lt;ul&gt;
&lt;li&gt;변수에 값을 할당 가능&lt;/li&gt;
&lt;li&gt;함수의 인자로 넘길 수 있음&lt;/li&gt;
&lt;li&gt;함수의 반환값이 될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스칼라나 그루비 등에서는 메소드를 일급값으로 취급하여 사용중에 있지만 자바에서는 메소드가 일급값이 아니었다. 하지만 이번에 자바8을 설계하면서 다른 언어에서 메소드를 일급값으로 취급하는 것의 장점을 살려서 자바에서도 가능하도록 설게를 했다.&lt;/p&gt;
&lt;p&gt;즉, 자바에서도 메소드를 일급값 취급하여 인자로 넘기거나 변수에 할당하고, 반환할 수 있게 되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수형 인터페이스&lt;/li&gt;
&lt;li&gt;메서드 참조&lt;/li&gt;
&lt;li&gt;람다: 익명함수&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;익명-클래스-메소드-참조-람다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B5%EB%AA%85-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%B0%B8%EC%A1%B0-%EB%9E%8C%EB%8B%A4&quot; aria-label=&quot;익명 클래스 메소드 참조 람다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[익명 클래스, 메소드 참조, 람다]&lt;/h2&gt;
&lt;p&gt;동작 파라미터화를 통해서 변화된 요구사항을 하나의 인자로 처리하는 편리함을 경험했다. 하지만 언제나 코드의 명확성이 우선시되어야 한다 라는 조건을 충족시키기 위해서 동작 파라미터를 가독성 있게 작성하는 방법을 알아보자.
&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;함수형 인터페이스 구현체&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위 예시에서 작성한 &lt;code class=&quot;language-text&quot;&gt;ApplePredicate&lt;/code&gt;이라는 인터페이스가 함수형 인터페이스이다.&lt;/li&gt;
&lt;li&gt;함수형 인터페이스는 추상 메소드가 단 하나만 있는 인터페이스이다. (default 메소드는 다수 존재해도 된다.)&lt;/li&gt;
&lt;li&gt;이미 자바 표준으로 정의된 여러 표준 함수형 인터페이스가 있다. &lt;a href=&quot;https://velog.io/@im_joonchul/%ED%91%9C%EC%A4%80-%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;참고링크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;자바 8부터 &lt;code class=&quot;language-text&quot;&gt;@FuntionalInterface&lt;/code&gt;라는 어노테이션을 지원하는데, 해당 어노테이션을 통해 컴파일 시점에 해당 인터페이스가 함수형 인터페이스 조건을 충족하는지 확인 할 수 있다. (해당 어노테이션 없더라도 동작에는 차이가 없다.)&lt;/li&gt;
&lt;li&gt;위 예시처럼 함수형 인터페이스를 &lt;code class=&quot;language-text&quot;&gt;implements&lt;/code&gt; 한 구현체를 동작 파라미터로 넘겨서 활용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;익명 클래스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;매번 함수형 인터페이스를 구현하는 클래스 파일을 생성하여 구현하고 명시적으로 인스턴스화 한 후 사용하는 것이 불편할 수 있다. 실질적인 로직과 관련이 없는 코드 라인이 많아지는 것도 문제다. 특히 한군데서만 쓰이는 구현체일 경우 더더욱 그렇다.&lt;/li&gt;
&lt;li&gt;이때 익명 클래스를 사용하여 클래스 선언과 인스턴스를 동시에 하고, 필요한 즉시 구현하여 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppleFactory&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; statid &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; apples&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 익명 클래스 구현하기 &lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (*)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//(*)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eqauls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apples&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; inventory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메소드 참조&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하지만 여전히 불필요한 코드라인이 완전히 없어지지 않았다. 위 (*) 표시가 매번 익명 클래스를 작성할 때마다 반복되어 코드를 장황하게 만들 수 있다.&lt;/li&gt;
&lt;li&gt;위 문제까지 없앨 수 있도록 메소드를 따로 선언해놓고 메소드 참조를 통해 인자로 넘길 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isGreenApple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; GREEN&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isHeavyApple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//메서드 참조 사용하기 &lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isGreenApple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;filterApples&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isHeavyApple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;람다: 익명함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하지만 단 한번만 쓰이거나 한다면 따로 메소드를 선언하는 것조차 불필요한 작업일 수 있다.&lt;/li&gt;
&lt;li&gt;람다 익명함수를 사용하여 코드를 더 간결하게 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; apples &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token function&quot;&gt;filterApplies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt; apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; RED&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;람다가 항상 좋은 것은 아니다. 람다 블록 안에 많은 코드가 구현되어야한다면 메소드를 따로 분리하고, 메소드 참조를 쓰는 것이 더 명확하게 읽히는 코드가 될 수 있다.&lt;/li&gt;
&lt;li&gt;람다는 여러가지 형태로 더 간결해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ApplePredicate&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; RED&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//매개변수 형 생략 가능 &lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; apples &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterApplies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; apple &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; RED&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//매개변수 소괄호 생략 가능 &lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; apples &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterApplies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;추가로 Generic까지 적용하면 더 추상적이고 범용적으로 활용 가능하게 된다. 개인적으로 이번에 자바의 JDBCTemplate 라이브러리를 직접 구현해 보았을 때 아주 유용하게 사용했다. 라이브러리와 같은 코드들은 인자와 반환값이 매우 유연해야하기 때문에 동작 파라미터화 + Generic을 사용하면 구현하기 용이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;동작-파라미터-활용하기-콜백함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98&quot; aria-label=&quot;동작 파라미터 활용하기 콜백함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[동작 파라미터 활용하기: 콜백함수]&lt;/h2&gt;
&lt;p&gt;콜백함수란 나중에 실행될 코드블록을 의미하며 특정 로직을 수행 후 돌아와서 해당 로직을 수행하도록 하는 함수를 말한다.
&lt;br&gt;
JDBCTemplate을 구현하면서 동작 파라미터를 활용한 콜백함수를 사용했다. 일반적으로 DB와 통신하는 부분은 &lt;code class=&quot;language-text&quot;&gt;Connection 을 생성 -&gt; Statement 생성 -&gt; 쿼리 실행&lt;/code&gt; 이라는 큰 틀 안에서 사소한 동작의 차이가 있다. 그렇기 때문에 각각을 (CUD vs R) 메소드로 분리하면 큰 틀에 해당하는 코드가 중복된다.
&lt;a href=&quot;https://github.com/yjksw/jwp-dashboard-jdbc/tree/yjksw&quot;&gt;코드 전체보기&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CallBack 함수형 인터페이스&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;  &lt;span class=&quot;token annotation punctuation&quot;&gt;@FunctionalInterface&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CallBack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PreparedStatement&lt;/span&gt; pstm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;큰 틀을 관장하는 &lt;code class=&quot;language-text&quot;&gt;execute()&lt;/code&gt; 메소드&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CallBack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; sqlExecution&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 쿼리마다 다른 동작이 CallBack으로 넘겨진다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;Connection&lt;/span&gt; conn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; datasource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;PreparedStatement&lt;/span&gt; pstm &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; conn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;query : {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArgumentsSetter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setArguments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pstm&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sqlExecution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pstm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 각기 다른 동작을 수행하고 반환한다&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SQLException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SQLException thrown: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataAccessException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;콜백 함수 활용 부분&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 매소드 참조 형식 &lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PreparedStatement&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RowMapper&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; rowMapper&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;CallBack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; execution &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pstm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 람다 형식&lt;/span&gt;
          &lt;span class=&quot;token class-name&quot;&gt;ResultSet&lt;/span&gt; rs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pstm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rowMapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; execution&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zzang9ha.tistory.com/303&quot;&gt;https://zzang9ha.tistory.com/303&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@im_joonchul/%ED%91%9C%EC%A4%80-%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;https://velog.io/@im_joonchul/%ED%91%9C%EC%A4%80-%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=200069290&quot;&gt;모던 자바 인 액션&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;[INTRO]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%9D%B8%EA%B0%80&quot;&gt;[왜 동작 파라미터인가?]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#first-class-citizen-%EC%9D%BC%EA%B8%89-%EC%8B%9C%EB%AF%BC&quot;&gt;[First Class Citizen 일급 시민]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B5%EB%AA%85-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%B0%B8%EC%A1%B0-%EB%9E%8C%EB%8B%A4&quot;&gt;[익명 클래스, 메소드 참조, 람다]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98&quot;&gt;[동작 파라미터 활용하기: 콜백함수]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[DB 리플리케이션 적용하기]]></title><description><![CDATA[INTRO DB Replication을 MySQL 공식 홈페이지에서 찾아보면 다음과 같이 말한다. Replication enables data from one MySQL databse server (known as a source) to be…]]></description><link>https://yjksw.github.io/db-replication/</link><guid isPermaLink="false">https://yjksw.github.io/db-replication/</guid><pubDate>Fri, 10 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DB Replication을 MySQL 공식 홈페이지에서 찾아보면 다음과 같이 말한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Replication enables data from one MySQL databse server (known as a source) to be copied to one or more MySQL database servers (know as replicas)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;출처 : &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/replication.html&quot;&gt;링크&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉, 하나의 데이터베이스(master/source)에서 다른 하나 또는 그 이상의 데이터베이스(slaves/replicas)로 데이터를 복제하여 저장하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replication은 비동기로 동작한다. 따라서 replicas가 master에 지속적으로 연결되어는 동기식으로 동작하지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;설정에 따라서 여러 데이터베이스, 선택된 데이터베이스, 선택된 테이블에만 replication을 적용할 수도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;mysql-replication-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mysql-replication-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;mysql replication 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MySQL replication 장점&lt;/h2&gt;
&lt;p&gt;공식 홈페이지에 나와있는 장점 4가지는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scale-out solutions
&lt;ul&gt;
&lt;li&gt;다수의 replicas를 두고 load를 분산해서 퍼포먼스를 높이는 장점이 있다.&lt;/li&gt;
&lt;li&gt;대부분의 replication 적용이유이기도 하다.&lt;/li&gt;
&lt;li&gt;쓰기 및 업데이트는 master 서버에서 이루어진다.&lt;/li&gt;
&lt;li&gt;조회는 하나 또는 여러 slave 서버에 분산되서 처리된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data security
&lt;ul&gt;
&lt;li&gt;master 서버와 slave 서버가 분리되어 있으므로 하나의 slave 서버에 문제가 생겨도 다른 slave 서버에 영향을 미치지 않고 데이터를 보존할 수 있다.&lt;/li&gt;
&lt;li&gt;하지만 Master server에 장애가 생기면 문제가 생긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analytics
&lt;ul&gt;
&lt;li&gt;실시간 데이터 생성 및 업데이터가 master 서버에서 이루어지는 동안 데이터 분석처리는 slave 서버에서 처리하여 master 서버에 성능저하를 전혀 일으키지 않도록 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Long-distance data distribution
&lt;ul&gt;
&lt;li&gt;리모트에 필요한 데이터를 위한 local 데이터 복제를 master에 접촉하지 않고 slave 서버에서 처리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;더 많은 정보를 위해서는 다음 &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/replication.html&quot;&gt;링크&lt;/a&gt;를 참고한다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;   
&lt;h2 id=&quot;replication-적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#replication-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;replication 적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Replication 적용하기&lt;/h2&gt;
&lt;h3 id=&quot;적용이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;적용이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용이유&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재 진행중인 &lt;a href=&quot;pick-git.com&quot;&gt;프로젝트&lt;/a&gt;에 DB replication을 적용하기로 했다. 그 이유는 프로젝트가 SNS의 일종이므로 유저에 의한 페이지 이동이 잦고 그것에 따른 조회 쿼리가 매우 많기 때문이다. 따라서 Master server 1개, slave server 2개를 두어 조회 쿼리를 slave 서버 2개로 분산했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;참고사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%82%AC%ED%95%AD&quot; aria-label=&quot;참고사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고사항&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재 본 프로젝트의 WAS가 AWS EC2 인스턴스에서 실행 중이며 이번에 DB Replication을 적용하면서 DB 서버를 분리했다.&lt;/li&gt;
&lt;li&gt;AWS EC2 인스턴스 3개를 추가로 생성해서 MySQL master 서버 1개 + slave 서버 2개를 구성했다.&lt;/li&gt;
&lt;li&gt;쓰기 및 업데이트 작업은 master, 조회는 2개의 slave 서버를 RR(Round Robin) 방식으로 분산처리하도록 구성했다. DB는 MariaDB를 사용한다.&lt;/li&gt;
&lt;li&gt;조회 작업은 Transaction의 read-only 속성을 통해 확인하고 slave db를 연결했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;적용하기&lt;/h3&gt;
&lt;p&gt;DB replication 적용에는 크게 3가지 단계가 있다. 다음 &lt;a href=&quot;https://github.com/2021-pick-git/db-replication-learning-test&quot;&gt;레포지토리&lt;/a&gt;에 가면 적용을 위한 replication 학습테스트 코드를 확인할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remote 서버에 MariaDB 로컬 설치 및 기본 설정&lt;/li&gt;
&lt;li&gt;Master 서버와 Slave 서버 replication 연결 설정&lt;/li&gt;
&lt;li&gt;프로덕션 코드에 DB 수동 연결 및 (여러 slave 서버를 두고 있다면) slave DB 선택 로직 구현&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h4 id=&quot;1-1-mariadb-설치-및-기본-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-1-mariadb-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;1 1 mariadb 설치 및 기본 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-1) MariaDB 설치 및 기본 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;우분투에 MariaDB를 설치한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; update
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; mariadb-server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;현재 프로젝트를 위해서 제공받은 AWS 권한은 많이 닫혀있으므로 사용 가능한 포트(9000)으로 바꾸어주었다. &lt;a href=&quot;https://bskyvision.com/1049&quot;&gt;포트변경방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로젝트에 사용할 database를 생성한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 우리 프로젝트에서 사용하는 database는 &lt;code class=&quot;language-text&quot;&gt;pickgit&lt;/code&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 DB 서버에 계정을 생성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;create user &amp;#39;replication&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;password&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;계정 이름 뒤에 %로 지정해야 전체에서 접속이 허용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&quot;2-1-master-db-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-1-master-db-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;2 1 master db 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-1) Master DB 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;해당 계정에 권한을 부여한다. (master)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;$ grant all privileges on {database}.* to &amp;#39;replication&amp;#39;@&amp;#39;%&amp;#39;; 

$ flush privileges;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위와 같이 하면 해당 계정에 대한 전체 권한이 열린다. 불안하다면 다음과 같이 replication에 대한 권한만 설정해도 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;$ grant replication slave on *.* to &amp;#39;replication&amp;#39;@&amp;#39;%&amp;#39;; 

$ flush privileges;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;참고로 replication slave 권한을 줄 때는 &lt;code class=&quot;language-text&quot;&gt;*.*&lt;/code&gt;로 주지 않으면 db grant 및 global privileges 경고가 뜬다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;설정과정&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;masterDb&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132974481-47521392-72e8-4596-9c08-0481b572717a.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 경로의 설정파일을 열어 수정한다. master db 서버의 서버 id를 설정하는 과정이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설정파일 경로&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132974223-9df3b0cb-68fc-451f-bcb5-703980a36a79.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설정 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;masterDb&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132974298-64ba1690-5e69-441d-ba8e-b7ccc8887c43.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 설정이 끝난 뒤에 mysql를 재실행하여 설정을 적용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; mysqld restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master DB 정보를 다음 명령어로 확인한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File 값과 position 값으로 slave db에 master db에 대한 정보를 설정해야 한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;$ show master status;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;스크린샷 2021-09-05 오후 4 25 23&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132974579-e455d052-e082-40f3-b68d-858692cbbb79.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 두 정보가 의미하는 것이 무엇인지 확인하고 싶다면 다음 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterstatus.html&quot;&gt;링크&lt;/a&gt;를 참고하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The File column shows the name of the log file and the Position column shows the position within the file. In this example, the binary log file is mysql-bin.000003 and the position is 73. Record these values. You need them later when you are setting up the replica. They represent the replication coordinates at which the replica should begin processing new updates from the source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;간단히 말하면 replica가 master db의 데이터를 읽을 binary 파일과 읽기 시작할 위치인 position에 대한 정보이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&quot;2-2-slave-db-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-2-slave-db-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;2 2 slave db 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-2) Slave DB 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Master DB 과 동일하게 다음 설정경로로 가서 &lt;code class=&quot;language-text&quot;&gt;server-id&lt;/code&gt;를 수정한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 master의 &lt;code class=&quot;language-text&quot;&gt;server-id&lt;/code&gt;가 1이므로 &lt;code class=&quot;language-text&quot;&gt;slave1&lt;/code&gt;은 2, &lt;code class=&quot;language-text&quot;&gt;slave2&lt;/code&gt;는 3으로 설정해주었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; /etc/mysql/mysql.conf.d/mysqld.cnf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slave Db에서 이전에 기록해둔 Master DB의 정보를 입력해 두 DB를 연결한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&amp;gt; change master to master_host={master_db_ip}, master_port={master_db_port}, master_user={master_username}, master_password={master_password}, master_log_file={master_bin_file}, master_log_pos={position};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slave DB를 실행시킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&amp;gt; start slave;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실행 시키고 다음 명령어를 치면 slave db의 상태와 master와의 연결상태 여부를 확인할 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;스크린샷 2021-09-05 오후 4 25 23&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132976950-0bb84655-da17-4b4b-8d44-c03626b46e51.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 master db에 데이터를 추가하면 slave db에도 적용이 되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&quot;3-1-springboot-db-configuration-설정---datasource-정보-기입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-1-springboot-db-configuration-%EC%84%A4%EC%A0%95---datasource-%EC%A0%95%EB%B3%B4-%EA%B8%B0%EC%9E%85&quot; aria-label=&quot;3 1 springboot db configuration 설정   datasource 정보 기입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-1) Springboot DB configuration 설정 - datasource 정보 기입&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DB 서버에서 하는 설정은 Master DB에 쓰기 및 업데이트 처리시 Slave DB에 적용이 되도록 하는 연결 설정이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이외의 datasource를 선택하고, 설정에 맞게 connection을 만들고, 실제 쿼리를 처리하도록 하는 것은 어플리케이션 코드에서 구현을 해야한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132996798-4b1a4c22-484c-415b-acdb-d599cdb0fcc2.png&quot;&gt;&lt;br&gt;이전 yml datasource 설정&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음과 같이 datasource 정보를 &lt;code class=&quot;language-text&quot;&gt;yml&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;properties&lt;/code&gt;에 기록한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132996912-59fcf5f4-2cd9-40c7-89e0-9a142c5d20f8.png&quot;&gt;&lt;br&gt;datasource 정보&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;위 &lt;code class=&quot;language-text&quot;&gt;yml에&lt;/code&gt; 기입한 &lt;code class=&quot;language-text&quot;&gt;datasource&lt;/code&gt; 정보를 활용하기 위해서 다음과 같은 객체를 만들어 &lt;code class=&quot;language-text&quot;&gt;yml&lt;/code&gt; 정보를 바인딩 한다.
&lt;ul&gt;
&lt;li&gt;유의할 점은 내부에 선언된 정보를 위해서는 &lt;code class=&quot;language-text&quot;&gt;static inner class&lt;/code&gt;를 칼럼과 동일한 이름으로 생성해야 한다. 그러면 class 내부의 자료구조로 정보가 들어간다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;getter&lt;/code&gt; 및 &lt;code class=&quot;language-text&quot;&gt;setter&lt;/code&gt;가 필수적으로 있어야한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;datasource&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//이 annotation을 활용해서 yml 정보를 매핑한다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MasterDataSourceProperties&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Slave&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; slave &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//getter 및 setter &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//slave map에 대한 setter는 불필요하다.&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Slave&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//중첩 데이터 명과 일치해야한다. 즉, datasource.slave의 두번째 요소와 동일한 이름으로 static class를 만들어야한다.&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//getter 및 setter 생략 &lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&quot;3-2-springboot-db-configuration-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-2-springboot-db-configuration-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;3 2 springboot db configuration 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-2) Springboot DB configuration 구현&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 입력한 datasource는 하나가 아니기 때문에 자동으로 연결이 안되고 상황에 따라 다른 datasource가 연결이 된다. 해당 작업을 수동으로 해야하기 때문에 몇가지 직접 설정해야하는 것들이 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;첫번째는 적합한 상황에 다른 datasource를 제공하는 설정이다. 하나 이상의 datasource를 생성해 저장한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;두번째는 Jpa에 대한 entityManagerFactory &lt;code class=&quot;language-text&quot;&gt;@bean&lt;/code&gt; 설정이다. 본래 datasource가 자동연결되면서 JPA에 대한 설정도 되지만 여기서는 수동으로 해야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;이때 datasource가 매번 바뀌므로 entityManagerFactory 생성시 &lt;code class=&quot;language-text&quot;&gt;LazyConnectionDataSourceProxy&lt;/code&gt; 로 프록시 datasource를 연결해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;세번재는 TransactionManager에 대한 설정이다. 이 또한 수동으로 datasource를 관리하려고 하니 추가해야하는 부분이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;기존에 자동으로 Datasource를 연결하던 설정을 해제하고, 수동으로 연결할 datasource의 properties를 지정해주어야 한다. (class 상단에 annotation으로 설정)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exclude &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSourceAutoConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//4)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MasterDataSourceProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//4)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSourceConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MasterDataSourceProperties&lt;/span&gt; dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JpaProperties&lt;/span&gt; jpaProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSourceConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;MasterDataSourceProperties&lt;/span&gt; dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;JpaProperties&lt;/span&gt; jpaProperties
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataSourceProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jpaProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jpaProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//1)번 부분&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;routingDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;DataSource&lt;/span&gt; master &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; dataSources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        dataSources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;master&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; master&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        dataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSlave&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;
            dataSources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;ReplicationRoutingDataSource&lt;/span&gt; replicationRoutingDataSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReplicationRoutingDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        replicationRoutingDataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDefaultTargetDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dataSources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;master&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        replicationRoutingDataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTargetDataSources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dataSources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; replicationRoutingDataSource&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSourceBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HikariDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;driverClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;org.mariadb.jdbc.Driver&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//2)번 부분&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalContainerEntityManagerFactoryBean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;entityManagerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;EntityManagerFactoryBuilder&lt;/span&gt; entityManagerFactoryBuilder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;createEntityManagerFactoryBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jpaProperties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; entityManagerFactoryBuilder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.pickgit.dbreplicationlearningtest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EntityManagerFactoryBuilder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createEntityManagerFactoryBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;JpaProperties&lt;/span&gt; jpaProperties
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;HibernateJpaVendorAdapter&lt;/span&gt; vendorAdapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HibernateJpaVendorAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EntityManagerFactoryBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;vendorAdapter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; jpaProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LazyConnectionDataSourceProxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routingDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//3)번 부분&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;EntityManagerFactory&lt;/span&gt; entityManagerFactory
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;JpaTransactionManager&lt;/span&gt; jpaTransactionManager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JpaTransactionManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        jpaTransactionManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entityManagerFactory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; jpaTransactionManager&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;3-3-조회-쿼리시-datasource를-rr으로-선택하는-로직&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-3-%EC%A1%B0%ED%9A%8C-%EC%BF%BC%EB%A6%AC%EC%8B%9C-datasource%EB%A5%BC-rr%EC%9C%BC%EB%A1%9C-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81&quot; aria-label=&quot;3 3 조회 쿼리시 datasource를 rr으로 선택하는 로직 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-3) 조회 쿼리시 datasource를 RR으로 선택하는 로직&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재 연결가능한 datasources들을 순회하면서 쓰기 및 업데이트면 master, 조회시에는 slave를 번갈아 선택하는 로직을 구현한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReplicationRoutingDataSource&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbstractRoutingDataSource&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Logger&lt;/span&gt; LOGGER &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ReplicationRoutingDataSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SlaveNames&lt;/span&gt; slaveNames&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTargetDataSources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; targetDataSources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTargetDataSources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetDataSources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; replicas &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; targetDataSources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;slave&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slaveNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SlaveNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;replicas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  

      &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;determineCurrentLookupKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; isReadOnly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransactionSynchronizationManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isCurrentTransactionReadOnly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//조회 쿼리인 경우 &lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isReadOnly&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; slaveName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; slaveNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getNextName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//다음 slave 선택 &lt;/span&gt;

              LOGGER&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Slave DB name: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; slaveName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

              &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; slaveName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;master&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SlaveNames&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SlaveNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; slaveDataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;slaveDataSourceProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SlaveNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getNextName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;replication-test-하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#replication-test-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;replication test 하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Replication Test 하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Member를 입력하고 조회를 여러번 했을 때 의도된 대로 replication이 적용되는지 확인한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@DataJpaTest&lt;/code&gt;로도 진행할 수 있으나, 빈으로 등록된 설정 요소들이 필요하기 때문에 &lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;로 테스트를 진행했다. (@&lt;code class=&quot;language-text&quot;&gt;DataJpaTest&lt;/code&gt;를 진행하면서 해당 configuration만 빈으로 등록하는 방식으로 테스트해도 무방하다.)&lt;/li&gt;
&lt;li&gt;datasource를 자동 연결하지 않는 설정 annotation을 class 상단에 추가해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@AutoConfigureTestDatabase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;replace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NONE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//datasource 자동연결 x&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberRepositoryTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Master DB에 데이터를 추가하면 slave DB에도 반영된다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addMember_Success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pickgit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Slave DB에서 데이터를 조회한다 - 여러번 조회시 slave db를 번갈아 조회한다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findMember_Success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pickgit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// when&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//조회 할 때마다 사용 DB 로거가 번갈아서 찍힌다. &lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// then&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;결과 화면: 4번의 조회를 할때 1, 2 slave DB가 번갈아 선택된다.
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/63405904/133017838-c022df09-9d81-407e-9eac-7cd1e5af5de6.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;마주한-이슈&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A3%BC%ED%95%9C-%EC%9D%B4%EC%8A%88&quot; aria-label=&quot;마주한 이슈 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마주한 이슈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;yml에 properties 입력시 오타 주의 !! (자동완성 안해주기 때문에 접미사 -s 등을 주의해야함)&lt;/li&gt;
&lt;li&gt;JPA 정보 또한 자동연결할 때 해주는 설정들을 하나씩 다 명시해주어야한다.&lt;/li&gt;
&lt;li&gt;기존에 ddl 전략을 외부에 기입했다면 왜인지 &lt;code class=&quot;language-text&quot;&gt;hbm2ddl.auto=create&lt;/code&gt;로 지정해야 적용이 되었다.
&lt;ul&gt;
&lt;li&gt;현재 JPA properties
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;show-sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;dialect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; org.hibernate.dialect.MySQL8Dialect
        &lt;span class=&quot;token key atrule&quot;&gt;format_sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;physical_naming_strategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        &lt;span class=&quot;token key atrule&quot;&gt;hbm2ddl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; create
    &lt;span class=&quot;token key atrule&quot;&gt;generate-ddl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Slave DB 권한부여 및 bind address 오픈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host의 접근이 허가되지 않는다는 오류가 날 때는 다음 두가지를 해주어야한다.
&lt;ol&gt;
&lt;li&gt;slave db 계정 생성 및 권한 부여 (위 master db에 했던 작업과 동일)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf&lt;/code&gt;에 bind-address 부분 &lt;code class=&quot;language-text&quot;&gt;0.0.0.0&lt;/code&gt; 으로 지정&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/63405904/133018579-e3f0221f-a767-4203-9b07-18bc41fc7f7c.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다음 &lt;a href=&quot;https://blog.naver.com/6116949/221991858055&quot;&gt;링크&lt;/a&gt;를 참고하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Springboot JPA에 대한 Hibernate Naming Strategy 지정
&lt;ul&gt;
&lt;li&gt;Springboot에서 자동으로 지정할 때는 알아서 네이밍전략이 설정되었으나, 수동을 할 때는 이 부분도 yml에 기입해주어야 한다.&lt;/li&gt;
&lt;li&gt;그렇지 않으면 테이블 및 칼럼명이 그대로 camel case로 입력된다.&lt;/li&gt;
&lt;li&gt;yml에 다음 설정을 해서 DB에서 underscore로 지정되도록 전략을 지정한다.
&lt;code class=&quot;language-text&quot;&gt;physical_naming_strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;번외-기존-db의-데이터-dump-하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8-%EA%B8%B0%EC%A1%B4-db%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-dump-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;번외 기존 db의 데이터 dump 하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;번외) 기존 DB의 데이터 dump 하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기존 DB에 있던 데이터들을 새로 생성한 master db에 옮기기 위해 &lt;code class=&quot;language-text&quot;&gt;mySqldump&lt;/code&gt;를 사용해 마이그레이션을 했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ mysqldump -u &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;사용자 계정&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -p &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;원본 데이터베이스명&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;생성할 백업 파일명&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.sql &lt;span class=&quot;token comment&quot;&gt;#백업 sql 생성 &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#scp를 사용해 새로운 database가 있는 서버로 sql 파일 이동&lt;/span&gt;

$ mysql -u &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;사용자 계정&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -p &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;복원할 DB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;백업된 DB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.sql &lt;span class=&quot;token comment&quot;&gt;#sql 파일을 사용해 데이터 복원 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master DB에만 적용하면 slave DB에 알아서 적용이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mycup.tistory.com/237&quot;&gt;https://mycup.tistory.com/237&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@max9106/DB-Spring-Replication&quot;&gt;https://velog.io/@max9106/DB-Spring-Replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/97&quot;&gt;https://mangkyu.tistory.com/97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@kyujonglee/Mysql-%EB%B0%B1%EC%97%85-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98&quot;&gt;https://velog.io/@kyujonglee/Mysql-%EB%B0%B1%EC%97%85-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mysql-replication-%EC%9E%A5%EC%A0%90&quot;&gt;MySQL replication 장점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#replication-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;Replication 적용하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9%EC%9D%B4%EC%9C%A0&quot;&gt;적용이유&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%82%AC%ED%95%AD&quot;&gt;참고사항&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;적용하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-1-mariadb-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95&quot;&gt;1-1) MariaDB 설치 및 기본 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-1-master-db-%EC%84%A4%EC%A0%95&quot;&gt;2-1) Master DB 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-2-slave-db-%EC%84%A4%EC%A0%95&quot;&gt;2-2) Slave DB 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-1-springboot-db-configuration-%EC%84%A4%EC%A0%95---datasource-%EC%A0%95%EB%B3%B4-%EA%B8%B0%EC%9E%85&quot;&gt;3-1) Springboot DB configuration 설정 - datasource 정보 기입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-2-springboot-db-configuration-%EA%B5%AC%ED%98%84&quot;&gt;3-2) Springboot DB configuration 구현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-3-%EC%A1%B0%ED%9A%8C-%EC%BF%BC%EB%A6%AC%EC%8B%9C-datasource%EB%A5%BC-rr%EC%9C%BC%EB%A1%9C-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81&quot;&gt;3-3) 조회 쿼리시 datasource를 RR으로 선택하는 로직&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#replication-test-%ED%95%98%EA%B8%B0&quot;&gt;Replication Test 하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A7%88%EC%A3%BC%ED%95%9C-%EC%9D%B4%EC%8A%88&quot;&gt;마주한 이슈&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8-%EA%B8%B0%EC%A1%B4-db%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-dump-%ED%95%98%EA%B8%B0&quot;&gt;번외) 기존 DB의 데이터 dump 하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[쿠키와 세션 알아보기]]></title><description><![CDATA[INTRO HTTP는 Stateless 무상태성을 가지고 있다. 따라서 데이터를 상태로 저장하지 않는다. HTTP…]]></description><link>https://yjksw.github.io/cookie-session/</link><guid isPermaLink="false">https://yjksw.github.io/cookie-session/</guid><pubDate>Sat, 04 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP는 Stateless 무상태성을 가지고 있다. 따라서 데이터를 상태로 저장하지 않는다.&lt;/li&gt;
&lt;li&gt;HTTP가 무성태성이기 때문에 클라이언트에 대한 데이터를 유지하고 싶을 때는 쿠키 또는 세션을 이용한다. (이전에 요청을 보낸 동일한 사용자임을 확인하고 싶은 경우 등등)&lt;/li&gt;
&lt;li&gt;쿠키는 클라이언트가 정보를 가지고 브라우저에서 저장 및 관리한다.&lt;/li&gt;
&lt;li&gt;세션은 서버가 데이터를 가지고 저장 및 관리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;cookie&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cookie&quot; aria-label=&quot;cookie permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;쿠키는 클라이언트가 정보를 가지고 브라우저에서 해당 정보를 저장한다.&lt;/li&gt;
&lt;li&gt;따라서 요청을 보낼 때마다 브라우저에서 저장된 쿠키 데이터를 HTTP 헤더에 추가하여 서버에 보낼 수 있다.
&lt;ul&gt;
&lt;li&gt;HTTP 메세지 자체는 무상태성이기 때문에 매번 쿠키값을 보내주어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;쿠키에 저장되는 값의 형태는 text 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;쿠키의-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BF%A0%ED%82%A4%EC%9D%98-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;쿠키의 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쿠키의 단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트가 관리하는 것이기 때문에 데이터가 쉽게 훼손 될 수 있다.
&lt;ul&gt;
&lt;li&gt;실제로 크롬 브라우저에서 개발자 도구 -&gt; Application 탭에 가면 쿠키 데이터를 저장하는 저장소를 볼 수 있다.&lt;/li&gt;
&lt;li&gt;여기서 값을 조회, 수정, 삭제를 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;636&quot; alt=&quot;스크린샷 2021-09-04 오후 3 10 59&quot; src=&quot;https://user-images.githubusercontent.com/63405904/132084874-b28a2e15-6ade-4fec-87a5-87434675f0b4.png&quot;&gt;
&lt;/li&gt;
&lt;li&gt;다른 사람이 쉽게 열람할 수 있다. 따라서 민감한 정보를 저장할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;쿠키-설정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BF%A0%ED%82%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;쿠키 설정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쿠키 설정하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;쿠키를 설정하고 싶을때는 아래와 같이 서버에서 &lt;code class=&quot;language-text&quot;&gt;Set-Cookie&lt;/code&gt; 헤더로 값을 보내면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HttpResponse : 

HTTP/1.1 302 Found 
Set-Cookie: cookieValue=thisIsCookie!!!
Location: http://localhost:8080/index.html &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 이후 모든 클라이언트의 요청에는 위에 설정한 쿠키값이 Cookie 헤더로 서버에 전송된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HttpRequest : 

GET /login HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
Cookie: cookieValue=thisIsCookie!!!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;session&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#session&quot; aria-label=&quot;session permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;세션은 서버의 메모리에서 데이터를 관리한다.&lt;/li&gt;
&lt;li&gt;외부에 공개하기 위험한 정보를 서버의 메모리에 안전하게 저장할 수 있다.&lt;/li&gt;
&lt;li&gt;세션을 식별하기 위한 고유한 id인 session id가 부여되고 클라이언트는 해당 세션 Id만을 저장하고 관리하면 된다.&lt;/li&gt;
&lt;li&gt;세션에 저장되는 값의 형태는 object 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;세션의-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EC%85%98%EC%9D%98-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;세션의 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세션의 단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버의 메모리에서 지나치게 많은 세션 데이터를 관리하기 힘들 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;세션-설정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;세션 설정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세션 설정하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;서버에서 세션을 설정할 때 &lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;getSession()&lt;/code&gt;을 호출하면 해당 request의 세션을 생성해서 반환한다. 아래에 세션 생성 및 반환 시점에 대해서 추가로 설명한다.&lt;/li&gt;
&lt;li&gt;반환된 세션에 &lt;code class=&quot;language-text&quot;&gt;setAttribute()&lt;/code&gt;를 통해 속성값을 지정한다. 해당 값이 세션에 저장되는 데이터 정보이다.&lt;/li&gt;
&lt;li&gt;세션의 &lt;code class=&quot;language-text&quot;&gt;getId()&lt;/code&gt;를 호출해 해당 세션의 id를 &lt;code class=&quot;language-text&quot;&gt;Set-Cookie&lt;/code&gt; 헤더에 &lt;code class=&quot;language-text&quot;&gt;JSESSIONID&lt;/code&gt; 라는 key로 추가하여 클라이언트에게 응답힌다.&lt;/li&gt;
&lt;li&gt;이후에 쿠키로 등록된 세션 id를 통해서 세션을 유지하고 속성값에 접근할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;코드로 보기&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;스프링부트 웹 프로젝트라고 가정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; account&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; loginUSer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;account&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;HttpSession&lt;/span&gt; session &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; sessionId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;HttpHeaders&lt;/span&gt; responseHeaders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    responseHeaders&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Set-Cookie&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;JSESSIONID=&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sessionId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    responseHeaders&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Location&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;responseHeaders&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;그럼 다음과 같이 응답이 나간다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HTTPResponse : 

HTTP/1.1 302 Found 
Set-Cookie: JSESSIONID=2cfd4acb-0b67-4ce9-90c4-97ee3242e51b 
Location: http://localhost:8080/index.html &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;이후 클라이언트가 요청을 보낼 때마다 쿠키에 세션 ID 값이 포함되어서 보내어 진다. 이 아이디를 통해서 세션을 매핑하고 세션이 유지되는 것을 확인할 수 있다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HTTPRequest : 

GET /login HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
Cookie: JSESSIONID=2cfd4acb-0b67-4ce9-90c4-97ee3242e51b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;세션은-언제-생성될까-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C-&quot; aria-label=&quot;세션은 언제 생성될까  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세션은 언제 생성될까 ?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이번에 직접 HTTP 서버를 구현하는 프로젝트를 하면서 세션을 구현하면서 의문이 들었다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;request.getSession()&lt;/code&gt;을 하면 항상 세션을 반환하는데 그럼 모든 HttpRequest에 대한 세션이 생성되는 것인지 궁금했다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;request.getSession()&lt;/code&gt;을 하면 유지되던 세션, 혹은 새로 생성된 세션이 반환되므로 모든 요청에 대한 세션을 생성한다고 생각할 수 있지만 그렇지 않다.&lt;/li&gt;
&lt;li&gt;세션을 만드는 것도 비용이 필요하기 때문에 세션이 필요할 때만 lazy 하게 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HttpSession&lt;/code&gt;의 경우 세션은 ServletContainer에서 생성이 된다.&lt;/li&gt;
&lt;li&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt;에서 세션을 요청할 때 서블릿 컨테이너에서 내부적으로 생성해서 세션을 반환한다.&lt;/li&gt;
&lt;li&gt;실제로 세션이 생성되는 시기는 &lt;code class=&quot;language-text&quot;&gt;@Autowired&lt;/code&gt;로 세션이 주입되는지, 메서드 인자로 주입되는지, request에서 &lt;code class=&quot;language-text&quot;&gt;getSession()&lt;/code&gt;을 호출하는 지에 따라서 다르므로 참고하자.&lt;/li&gt;
&lt;li&gt;나는 주로 controller 메서드의 인자로 세션을 호출하는데 그때는 컨트롤러 메서드를 호출하는 즉시 세션을 생성/요청해서 주입해준다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpSession&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//..로직 생략 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;세션을 유지 할 때는 헤더에 관련 키가 있다면(&lt;code class=&quot;language-text&quot;&gt;JSESSIONID&lt;/code&gt;와 같은 쿠키값) 해당 세션을 요청해서 반환하고, 없다면 새로운 세션을 생성해서 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;주의할 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;세션이 쿠키보다 보안이 좋은 것은 사실이나, 쿠키에 저장된 &lt;code class=&quot;language-text&quot;&gt;JSSESIONID&lt;/code&gt;를 탈취하여 다른 브라우저의 쿠키값으로 설정한다면 서버는 위 세션 아이디와 동일한 브라우저로 판단해 요청을 처리한다.&lt;/li&gt;
&lt;li&gt;예를 들어서 A 사용자가 로그인해서 부여받은 세션 ID를 다른 브라우저의 쿠키값으로 집어넣기만 해도 A 사용자가 로그인한 상태로 요청을 보내는 것으로 처리되므로 여전히 위험할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;언제-무엇을-사용하는-것이-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;언제 무엇을 사용하는 것이 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;언제 무엇을 사용하는 것이 좋을까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;언제 세션을 사용하고 언제 쿠키를 사용하는지에 대해서는 물론 답이 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹을 구현하면서 워낙 많은 경우가 있기 때문에 각각 다른 이유들을 비교해서 더 적합한 것을 선택하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나의 경우에는 민감한 정보가 있을 때는 세션을, 그렇지 않은 경우는 쿠키로 관리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;번외-static-code-classlanguage-texthttpsessionscode-클래스-테스트하기-code-classlanguage-textmockstaticltcode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8-static-code-classlanguage-texthttpsessionscode-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0-code-classlanguage-textmockstaticltcode&quot; aria-label=&quot;번외 static code classlanguage texthttpsessionscode 클래스 테스트하기 code classlanguage textmockstaticltcode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;번외) static &lt;code class=&quot;language-text&quot;&gt;HttpSessions&lt;/code&gt; 클래스 테스트하기 &lt;code class=&quot;language-text&quot;&gt;MockStatic&amp;lt;&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;직접 Http 서버를 구현하면서 세션에 고유한 id를 부여하기 위해 &lt;code class=&quot;language-text&quot;&gt;UUID.randomUUID()&lt;/code&gt;를 통해서 구현했다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HttpSession&lt;/code&gt; 을 관리하는 &lt;code class=&quot;language-text&quot;&gt;HttpSessions&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;static&lt;/code&gt;으로 관리하고 있고, 해당 클래스에서 &lt;code class=&quot;language-text&quot;&gt;UUID.randomUUID()&lt;/code&gt;를 사용해 새로운 HttpSession을 생성하고 아이디를 부여해 리턴 및 저장한다.&lt;/li&gt;
&lt;li&gt;매번 랜덤한 값을 id로 부여하기 때문에 테스트 코드를 짜는데 어려움이 있었고, Mocking을 하려고 했으나 HttpSessions가 static이므로 기존의 모킹 방식으로는 테스트하기가 어려웠다.&lt;/li&gt;
&lt;li&gt;따라서 static 을 모킹할 수 있는 방법으로 테스트를 진행했다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockedStatic&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpSessions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; mockHttpSessions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; sessionId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpSessions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sessionId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hahahoho5915.tistory.com/32&quot;&gt;https://hahahoho5915.tistory.com/32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://soon-devblog.tistory.com/2&quot;&gt;https://soon-devblog.tistory.com/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OpoVuwxGRDI&quot;&gt;https://www.youtube.com/watch?v=OpoVuwxGRDI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#cookie&quot;&gt;Cookie&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BF%A0%ED%82%A4%EC%9D%98-%EB%8B%A8%EC%A0%90&quot;&gt;쿠키의 단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BF%A0%ED%82%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot;&gt;쿠키 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#session&quot;&gt;Session&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%B8%EC%85%98%EC%9D%98-%EB%8B%A8%EC%A0%90&quot;&gt;세션의 단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%B8%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot;&gt;세션 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C-&quot;&gt;세션은 언제 생성될까 ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot;&gt;주의할 점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;언제 무엇을 사용하는 것이 좋을까?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8-static-httpsessions-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0-mockstatic&quot;&gt;번외) static &lt;code class=&quot;language-text&quot;&gt;HttpSessions&lt;/code&gt; 클래스 테스트하기 &lt;code class=&quot;language-text&quot;&gt;MockStatic&amp;lt;&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[OAuth 알아보기]]></title><description><![CDATA[1. INTRO 많은 어플리케이션에서 소셜 로그인을 지원하는데, 이때 사용되는 것이 OAuth 2.0 이다. 간단하게 이야기하면 OAuth 2.0 이란 사용자의 정보에 대한 권한을 부여하는 의 일종이다. (정의) 제…]]></description><link>https://yjksw.github.io/oauth/</link><guid isPermaLink="false">https://yjksw.github.io/oauth/</guid><pubDate>Fri, 03 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;1-intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-intro&quot; aria-label=&quot;1 intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;많은 어플리케이션에서 소셜 로그인을 지원하는데, 이때 사용되는 것이 OAuth 2.0 이다.&lt;/li&gt;
&lt;li&gt;간단하게 이야기하면 OAuth 2.0 이란 사용자의 정보에 대한 권한을 부여하는 &lt;code class=&quot;language-text&quot;&gt;산업 표준 프로토콜&lt;/code&gt;의 일종이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(정의) 제 3의 앱이 자원의 소유자인 서비스 이용자를 대신하여 서비스를 요청할 수 있도록 자원 접근 권한을 위임하는 방법 &lt;br&gt; &lt;em&gt;출처: 금융보안원 “OAuth 2.0 개요 및 보안 고려사항” 보안연구부-2015-030&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;즉, 정보 소유자 (서비스 이용자)를 대신하여 앱이 다른 서비스에 등록되어 있는 자원에 대한 접근을 요청하는 권한을 위임한다.&lt;/li&gt;
&lt;li&gt;아래 글은 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2&quot;&gt;링크&lt;/a&gt; 원문을 번역하고 일부 요약한 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-oauth-주요-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-oauth-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;2 oauth 주요 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. OAuth 주요 개념&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;리소스 소유자&lt;/strong&gt; (Resource Owner) - 어플리케이션이 인가 요청을 하는 정보의 소유자이다. 즉, 그 정보를 소유하고 있는 ‘사용자’를 말한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;클라이언트&lt;/strong&gt; (Client) - 리소스 소유자의 정보를 요청하는 어플리케이션이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;리소스 서버&lt;/strong&gt; (Resource Server) - 리소스 소유자의 정보를 보유하고 있는 서버이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인가 서버&lt;/strong&gt; (Authorization Server) - 클라이언트가 사용자에 대한 정보 권한을 요청할 때, 그 사용자에 대해 검증하고 클라이언트 어플리케이션에 access token을 발급하는 인가 서버이다. 편의상 리소스 서버와 인가 서버를 구별하지 않고 이해해도 좋다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt; 
&lt;h2 id=&quot;3-간단히-보는-oauth-프로토콜-흐름&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B3%B4%EB%8A%94-oauth-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%ED%9D%90%EB%A6%84&quot; aria-label=&quot;3 간단히 보는 oauth 프로토콜 흐름 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 간단히 보는 OAuth 프로토콜 흐름&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;540&quot; alt=&quot;스크린샷 2021-08-17 오후 2 41 53&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129669922-d91d3405-3315-4b29-9e47-f8015dec6b13.png&quot;&gt;출처 : Digital Ocean의 An Introduction to OAuth 2.0&lt;/p&gt;
&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;어플리케이션 유저에게 리소스에 대한 인가를 요청한다.&lt;/li&gt;
&lt;li&gt;유저는 해당 인가를 승인한다.&lt;/li&gt;
&lt;li&gt;어플리케이션은 리소스를 보유하고 있는 인가 서버에 access token을 요청한다.&lt;/li&gt;
&lt;li&gt;본 어플리케이션이 인증이 되고, 인가 승인을 인증하면 인가 서버는 해당 어플리케이션에 access token을 발급하고 인가 절차가 마무리된다.&lt;/li&gt;
&lt;li&gt;인가를 받은 어플리케이션은 리소스 서버에 access token과 함께 리소스를 요청한다.&lt;/li&gt;
&lt;li&gt;리소스 서버에서 access token을 확인하면 해당 리소스를 어플리케이션에 제공한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-어플리케이션-등록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%93%B1%EB%A1%9D&quot; aria-label=&quot;4 어플리케이션 등록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 어플리케이션 등록&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OAuth 기능을 추가하기 이전 본 어플리케이션(클라이언트)를 리소스를 요청하고자 하는 제 3 서비스(Google, Kakao, Github 등등)에 등록해야한다.&lt;/li&gt;
&lt;li&gt;등록 정보
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 어플리케이션 이름
- 어플리케이션 웹사이트
- Redirect URI or Callback URL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;위에서 리다이렉트 URI는 인가 후, 인가 서버(리소스 서버)에서 code를 전송해줄 주소를 말한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션 등록 시 다음 정보를 발급 받는다. 다음은 &lt;code class=&quot;language-text&quot;&gt;Client Credentials&lt;/code&gt;이라고 도 한다.
&lt;ol&gt;
&lt;li&gt;Client Id - 외부에 노출되는 어플리케이션 identity 이다.&lt;/li&gt;
&lt;li&gt;Client Secret - 외부에 공개되어서는 안되는 key로 어플리케이션을 인증하고 유저의 계정에 접근을 요청할 때 사용한다. (Access Token 발급 시)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;5-authorization-부여하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-authorization-%EB%B6%80%EC%97%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;5 authorization 부여하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Authorization 부여하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OAuth 2.0은 3가지 종류로 인가를 부여한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authorization Code&lt;/li&gt;
&lt;li&gt;Client Credentials&lt;/li&gt;
&lt;li&gt;Device Code&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 3가지 중 이번 프로젝트에서는 &lt;code class=&quot;language-text&quot;&gt;Authorization Code&lt;/code&gt;를 사용했다. &lt;code class=&quot;language-text&quot;&gt;Authorization Code&lt;/code&gt;가 가장 빈번하게 사용이 되는데 server-side applications에 가장 최적화 되어 있기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래가 &lt;code class=&quot;language-text&quot;&gt;Authorization Code&lt;/code&gt;를 발급받는 기본 흐름인데, 보면 어플리케이션이 user-agent(유저의 웹 브라우저)와 소통할 수 있어야 하며 user-agent를 통해 라우팅 된 API authorization 코드를 받을 수 있어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;688&quot; alt=&quot;스크린샷 2021-08-17 오후 4 08 28&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129680013-50c21f7f-e1a2-4bb7-89fc-361450ef6c3e.png&quot;&gt;출처 : Digital Ocean의 An Introduction to OAuth 2.0&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;리소스를 요청하고자 하는 서버에 기재되어 있는 API authorization endpoint URI 에 1) client_id 2) redirect_uri 3) response_type 4) scope 등을 지정해서 요청을 보낸다.
&lt;ul&gt;
&lt;li&gt;본인은 프로젝트에서 Github 소셜 로그인을 구현했었는데 &lt;code class=&quot;language-text&quot;&gt;https://github.com/login/oauth/authorize?client_id=%s&amp;amp;redirect_uri=%s&amp;amp;scope=%s&lt;/code&gt; 로 유저 인가 request를 보내도록 되어 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그럼 해당 리소스 서버(Github 등)에서 인가를 허가할지 말지 여부를 물어보는 페이지로 이동하여 유저가 허가 또는 거절을 누른다.&lt;/li&gt;
&lt;li&gt;유저가 허가한다면 리소스 서버(인가 서버)는 user-agent(브라우저)가  어플리케이션 등록 시 기재한 redirect URI로 authorization code와 함께 리다이렉트 하도록 한다.&lt;/li&gt;
&lt;li&gt;어플리케이션은 리소스 서버(인가 서버)에 1) client_id 2) client_secrete 3) grant_type 4) code 5) redirect_uri 와 함께 Access Token 발급 request를 보낸다.&lt;/li&gt;
&lt;li&gt;리소스 서버(인가 서버)에서 요청을 검사하고 유효하다면 AccessToken을 반환한다.
`{“access_token”:“ACCESS_TOKEN”,“token_type”:“bearer”,“expires_in”:2592000,“refresh_token”:“REFRESH_TOKEN”,“scope”:“read”,“uid”:100101,“info”:{“name”:“developer_coda”,“email”:”&lt;a href=&quot;mailto:coda@coda.com&quot;&gt;coda@coda.com&lt;/a&gt;“}}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;`&lt;/p&gt;
&lt;br&gt; 
&lt;h2 id=&quot;6-access-token-활용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-access-token-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;6 access token 활용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Access Token 활용하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이후 어플리케이션은 리소스 서버에 원하는 정보 또는 행위를 요청할 때 헤더에 access token을 담아서 요청하도록 한다.&lt;/li&gt;
&lt;li&gt;Access token을 어플리케이션에 어떻게 관리할지는 내부 논의 후 정해서 저장하면 된다. (Redis, JWT 등등 이 있다.)&lt;/li&gt;
&lt;li&gt;본인은 프로젝트에서 JWT 토큰의 value로 저장하고 유저에게 JWT 토큰을 반환했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;7-전체적인-흐름도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%9D%90%EB%A6%84%EB%8F%84&quot; aria-label=&quot;7 전체적인 흐름도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 전체적인 흐름도&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;700&quot; alt=&quot;스크린샷 2021-08-17 오후 4 44 00&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129685067-5d0bbbdc-0224-42e8-bed4-fe984cb036ec.png&quot;&gt;출처 : NHN Cloud - OAuth 2.0 대표 취약점과 보안 고려 사항 알아보기&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;8-번외-oauth의-대표-취약점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EB%B2%88%EC%99%B8-oauth%EC%9D%98-%EB%8C%80%ED%91%9C-%EC%B7%A8%EC%95%BD%EC%A0%90&quot; aria-label=&quot;8 번외 oauth의 대표 취약점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 번외) OAuth의 대표 취약점&lt;/h2&gt;
&lt;h3 id=&quot;81-csrfcross-site-request-forgery-공격&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#81-csrfcross-site-request-forgery-%EA%B3%B5%EA%B2%A9&quot; aria-label=&quot;81 csrfcross site request forgery 공격 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8.1. CSRF(Cross Site Request Forgery) 공격&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OAuth 인증 진행 시, 발급받은 &lt;code class=&quot;language-text&quot;&gt;Authorization Code&lt;/code&gt;와 이전에 발급받은 &lt;code class=&quot;language-text&quot;&gt;client_secret&lt;/code&gt;을 함께 보내어 리소스 서버에 Access Token을 요청하는 단계가 있다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;client_secret&lt;/code&gt;은 CSRF token과 같은 역할을 해서 중간에 CSRF 공격을 예방하는 역할을 하는데, 만일 이것에 대한 검증이 누락되거나 취약하면 CSRF 공격에 의해 Authorization Code가 탈취되어 사용자의 계정이 노출될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;client_secret&lt;/code&gt;에 대한 검증이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;82-convert-redirect&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#82-convert-redirect&quot; aria-label=&quot;82 convert redirect permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8.2. Convert Redirect&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;유저가 로그인한 후 인가를 승인하고 Authorization Code에 대해서 발급할 때 리다이렉트 되는 redirect_uri에 대한 검증이 안될 경우 공격자가 해당 공격 서버의 uri로 대체하여 Authorization Token을 탈취할 수 있다.&lt;/li&gt;
&lt;li&gt;Redirect URI에 대한 Full path 검증을 진행해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[출처]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2&quot;&gt;https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meetup.toast.com/posts/105&quot;&gt;https://meetup.toast.com/posts/105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-intro&quot;&gt;1. INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-oauth-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90&quot;&gt;2. OAuth 주요 개념&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B3%B4%EB%8A%94-oauth-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%ED%9D%90%EB%A6%84&quot;&gt;3. 간단히 보는 OAuth 프로토콜 흐름&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#4-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%93%B1%EB%A1%9D&quot;&gt;4. 어플리케이션 등록&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#5-authorization-%EB%B6%80%EC%97%AC%ED%95%98%EA%B8%B0&quot;&gt;5. Authorization 부여하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#6-access-token-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;6. Access Token 활용하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#7-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%9D%90%EB%A6%84%EB%8F%84&quot;&gt;7. 전체적인 흐름도&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#8-%EB%B2%88%EC%99%B8-oauth%EC%9D%98-%EB%8C%80%ED%91%9C-%EC%B7%A8%EC%95%BD%EC%A0%90&quot;&gt;8. 번외) OAuth의 대표 취약점&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#81-csrfcross-site-request-forgery-%EA%B3%B5%EA%B2%A9&quot;&gt;8.1. CSRF(Cross Site Request Forgery) 공격&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#82-convert-redirect&quot;&gt;8.2. Convert Redirect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[CDN 알아보기]]></title><description><![CDATA[Intro 이번에 프로젝트를 진행하면서 보안상의 이유로 직접 S3 서버에 접근할 수 없었기 때문에 AWS에서 제공하는 CDN 서비스인 CloudFront를 통해서 이미지 등의 리소스에 접근해야 했다. (CDN…]]></description><link>https://yjksw.github.io/cdn/</link><guid isPermaLink="false">https://yjksw.github.io/cdn/</guid><pubDate>Thu, 02 Sep 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이번에 프로젝트를 진행하면서 보안상의 이유로 직접 S3 서버에 접근할 수 없었기 때문에 AWS에서 제공하는 CDN 서비스인 CloudFront를 통해서 이미지 등의 리소스에 접근해야 했다. (CDN서버의 본래 목적과는 다소 다른 이유로 사용했다.)&lt;/li&gt;
&lt;li&gt;CDN은 어떤 기술이며, 장점이 무엇이고, 어떻게 동작하는지에 대해서 알아본다.&lt;/li&gt;
&lt;li&gt;CDN을 퉁해 누릴 수 있는 보안적인 이점은 무엇이며, 프로젝트를 진행하면서 CloudFront를 어떻게 활용했는지에 대해서 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;cdn이란-무엇인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;cdn이란 무엇인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CDN이란 무엇인가?&lt;/h2&gt;
&lt;p&gt;CDN은 Content Delivery Network의 약자이다. 직역하자면 컨텐츠를 전달해주는 네트워크이다. CDN 컨텐츠를 전송하는 물리적인 서버가 지리적으로 여러곳에 상주하며 유저와 가까이 위치한 서버에서 요청한 컨텐츠를 고속으로 제공해준다.&lt;/p&gt;
&lt;p&gt;CDN이 제공하는 컨텐츠는 &lt;code class=&quot;language-text&quot;&gt;HTML&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;javascript&lt;/code&gt; 파일, &lt;code class=&quot;language-text&quot;&gt;css&lt;/code&gt;, 이미지, 동영상 등의 대부분의 인터넷 콘텐츠이다. CDN 서비스에 대해서 설명하는 예시에 항상 등장하는 어플리케이션은 넷플릭스이다. 전세계 곳곳에서 유저들이 넷플릭스 컨텐츠를 요청하면 가장 가까이 상주하고 있는 CDN 서버에서 넷플릭스 컨텐츠를 빠르게 유저에게 제공한다. 이외에 Facebook, Amazon 등도 사용 중이다.&lt;/p&gt;
&lt;p&gt;CDN을 자체로 웹을 호스팅 할 수는 없다. 다만 웹의 컨텐츠를 &lt;code class=&quot;language-text&quot;&gt;캐싱&lt;/code&gt;하여 호스팅하는 웹을 대신하여 전송해서 웹의 성능을 개선한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;cdn-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cdn-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;cdn 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CDN 장점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;캐싱으로 컨텐츠 고속 전송&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사용자와 물리적으로 가까운 CDN 서버에서 컨텐츠를 전송하므로 사용자의 입장에서 컨텐츠 로드 시간이 매우 단축된다. 또한 CDN 서버는 랜덤으로 배치되어 있는 것이 아니라, 전세계 트래픽이 많은 영역에 전략적으로 위치해 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;캐싱 과정&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 컨텐츠를 요청하면 가장 가까운 CDN 엣지 서버로 요청이 간다.&lt;/li&gt;
&lt;li&gt;(최초 요청일 경우) CDN 엣지 서버에서 원본 서버로 요청을 보낸다.&lt;/li&gt;
&lt;li&gt;원본 서버가 해당 컨텐츠를 엣지 서버에 응답한다.&lt;/li&gt;
&lt;li&gt;엣지 서버가 사용자에게 컨텐츠를 응답한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
  &lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;450&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130417611-508fcc23-79f2-4ae7-923b-5a0989a2cf54.png&quot;&gt;&lt;br&gt;이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 이후부터는 동일한 컨텐츠에 대한 요청이 있을 때 해당 컨텐츠가 동일한 CDN 엣지 서버에 요청을 보내고 원본 서버에 요청을 보낼 필요 없이 CDN 엣지 서버가 컨텐츠를 반환한다. 이때 속도가 굉장히 향상된다.
&lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;450&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130417751-e2d97680-8446-401e-bdec-90b95560f87f.png&quot;&gt;&lt;br&gt;이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CDN의 failover&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;failover란? 서버가 갑자기 중단되어 서버에 요청을 보내던 트래픽에 대해 정상적인 응답을 하지 못하는 것을 방지하는 것&lt;/li&gt;
&lt;li&gt;CDN은 요청을 보내던 origin server가 죽으면 정상적으로 응답을 할 수 있는 서버로 reroute 하여 사용자가 안정적으로 그 응답을 받을 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
 &lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;433&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130594395-77cf44f3-049c-4a4c-9be2-f59678f77b7c.png&quot;&gt;&lt;br&gt;이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로드밸런싱 및 DDos 공격 완화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로드 밸런서는 네트워크 트래픽을 여러 서버에 분산해서 성능을 개선하는 것이다.&lt;/li&gt;
&lt;li&gt;CDN은 GSLB(Global Server Load Balancing)으로 로드 밸런싱 기술을 제공한다. (DNS와 GSLB의 차이점에 대해서 학습해도 좋다.) &lt;a href=&quot;https://www.cloudflare.com/ko-kr/learning/cdn/glossary/global-server-load-balancing-gslb/&quot;&gt;GSLB 참고&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CDN은 데이터센터의 로드 밸런싱으로 사용자의 요청을 가능한 서버에 분산해서 요청한다. (GSLB를 사용하기 때문에 요청 서버에 대한 헬스체크도 수행하여 안정적이다.)&lt;/li&gt;
&lt;li&gt;속도도 개선시키고, 트래픽도 감소시키므로 DDos 공격도 방지할 수 있다.
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;630&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130593424-74c410aa-b465-4fee-8dd1-e4213090064a.png&quot;&gt;&lt;br&gt;이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;프로젝트에서-cdn-사용-목적&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81&quot; aria-label=&quot;프로젝트에서 cdn 사용 목적 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트에서 CDN 사용 목적&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;다음은 프로젝트의 인프라 구조이다.
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;605&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130720611-034be1a1-c358-4ce5-8fac-8383a87d19e0.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;일반적인지는 잘 모르겠지만, 현재 S3 버킷에 프론트 서버가 올라가있다. (그렇지 않더라도 이미지 및 동영상 리소스가 S3 버킷에 저장되어 있다.)&lt;/li&gt;
&lt;li&gt;프로젝트를 하는데 보안상의 이슈로 S3 버킷에 대한 접근을 전체공개할 수 없었고, Cloud Front를 통해서 우회하여 접근하도록 설계했다.&lt;/li&gt;
&lt;li&gt;CDN의 본래 목적은 리소스를 캐싱하여 빠르게 로딩하는 것이지만 이번 프로젝트에서는 S3 버킷 사용 목적으로 설계했다.&lt;/li&gt;
&lt;li&gt;프론트 서버를 분산하거나, 진행중인 프로젝트(개발자 친화적 SNS)의 특성상 이미지 및 동영상 리소스가 굉장히 많아져서 S3 버킷이 추가되면 로드 밸런싱, CDN failover 등의 이점을 누릴 수 있을 것이라고 생각한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/ko-kr/learning/cdn/performance/&quot;&gt;https://www.cloudflare.com/ko-kr/learning/cdn/performance/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/&quot;&gt;https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot;&gt;CDN이란 무엇인가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cdn-%EC%9E%A5%EC%A0%90&quot;&gt;CDN 장점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81&quot;&gt;프로젝트에서 CDN 사용 목적&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JPA N+1 문제 및 해결방법 알아보기]]></title><description><![CDATA[INTRO JPA에서는 데이터와 객체지향으로 설계 사이의 모순을 해소하기 위해서 나온 기술이다. 많은 객체들은 내부에 Collection…]]></description><link>https://yjksw.github.io/jpa-query-bug/</link><guid isPermaLink="false">https://yjksw.github.io/jpa-query-bug/</guid><pubDate>Thu, 26 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JPA에서는 데이터와 객체지향으로 설계 사이의 모순을 해소하기 위해서 나온 기술이다.&lt;/li&gt;
&lt;li&gt;많은 객체들은 내부에 Collection 형태로 다른 객체에 대한 참조가 가능하게 설계된다.
&lt;ul&gt;
&lt;li&gt;예) &lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt; 객체 내부에 &lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;에 속해있는 &lt;code class=&quot;language-text&quot;&gt;List&amp;lt;Member&gt;&lt;/code&gt; 와 팀에 할당된 &lt;code class=&quot;language-text&quot;&gt;List&amp;lt;Locker&gt;&lt;/code&gt;가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때 상위 객체를 select 하면서 하위 객체를 가져오는 경우 다음 두가지 fetch 타입에 각각 다음과 같은 문제가 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fetch = FetchType.EAGER&lt;/code&gt;일 경우 : &lt;code class=&quot;language-text&quot;&gt;MultipleBagFetchException&lt;/code&gt;이 발생&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fetch = FetchType.LAZY&lt;/code&gt;일 경우 : &lt;code class=&quot;language-text&quot;&gt;N+1&lt;/code&gt; 문제 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상위 엔티티에서 다수의 collection 형태의 연관엔티티를 가지고 있을 때 여러 상황 및 문제와 해결 방법에 대해서 공부해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;entity-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entity-%EC%83%81%ED%99%A9&quot; aria-label=&quot;entity 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entity 상황&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;Member&lt;/code&gt;가 1:N 연관관계 - &lt;code class=&quot;language-text&quot;&gt;FetchType.LAZY&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;cascadeType.PERSIST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;Locker&lt;/code&gt;가 1:N 연관관계 - &lt;code class=&quot;language-text&quot;&gt;FetchType.LAZY&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;cascadeType.PERSIST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;참고 : 우선 모든 연관관계는 &lt;code class=&quot;language-text&quot;&gt;LAZY&lt;/code&gt;로 적용하고 테스트 상황에 따라 &lt;code class=&quot;language-text&quot;&gt;EAGER&lt;/code&gt;로 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt; 엔티티&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EAGER&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; members &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EAGER&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; lockers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...생성자 생략 &lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addLocker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt; locker&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        locker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        lockers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;locker&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; members&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;members &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; members&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...getter 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Member&lt;/code&gt; 엔티티&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//생성자 및 setter, getter 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Locker&lt;/code&gt; 엔티티&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//생성자 및 setter, getter 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;jpa에서-collection-fetch-join&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jpa%EC%97%90%EC%84%9C-collection-fetch-join&quot; aria-label=&quot;jpa에서 collection fetch join permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JPA에서 collection fetch join&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Team에 대한 모든 정보가 필요한 경우 Team을 가져오면서 Members와 Lockers 정보도 모두 함께 가지고 와야하는 경우가 있을 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JPA에서는 &lt;code class=&quot;language-text&quot;&gt;OneToMany&lt;/code&gt;관계에서 fetch join을 할 경우 중복 데이터가 발생한다. 따라서 해결을 하기 위해서 쿼리에 &lt;code class=&quot;language-text&quot;&gt;distinct&lt;/code&gt;를 추가해주어 중복을 없애야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;distinct&lt;/code&gt;가 없는 collection fetch join&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TeamRepository.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select t from Team t join fetch t.members&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findAllJoinFetchMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;distinct&lt;/code&gt; 있는 collection fetch join&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TeamRepository.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select distinct t from Team t join fetch t.members&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findAllJoinFetchMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 실행된 query&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_2_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_2_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_0__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_0__ 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    team team0_ 
&lt;span class=&quot;token keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt;
    member members1_ 
        &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
  &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Test Method
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@BeforeEach&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;teamA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addLocker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;L1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addLocker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;L2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;teamB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addLocker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;L3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addLocker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;L4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberA1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberA2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberA3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberA3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberB1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberB1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberB2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberB2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; memberB3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;memberB3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamAMembers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberA1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memberA2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memberA3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamBMembers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberB1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memberB2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memberB3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamAMembers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamBMembers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;collection fetch join 데이터에 대해 데이터 뻥튀기가 발생한다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;collectionFetchJoin_DuplicatedDataSelected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teams &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//members와 lockers가 지연로딩이므로 select 쿼리 1개&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;======================================&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamsWithMembers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAllJoinFetchMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamsWithMembers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// members에 대한 fetch join을 할 경우(distinct 없음) 데이터 뻥튀기가 발생한다.&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teamsWithMembers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAllJoinFetchMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamsWithMembers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// members에 대한 fetch join을 할 경우(distinct 있음) 데이터 중복이 일어나지 않는다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;code-classlanguage-textfetchtypeeagercode---code-classlanguage-textmultiplebagfetchexceptioncode-발생&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textfetchtypeeagercode---code-classlanguage-textmultiplebagfetchexceptioncode-%EB%B0%9C%EC%83%9D&quot; aria-label=&quot;code classlanguage textfetchtypeeagercode   code classlanguage textmultiplebagfetchexceptioncode 발생 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;FetchType.EAGER&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;MultipleBagFetchException&lt;/code&gt; 발생&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;현재는 위에 연관관계 fetchType이 &lt;code class=&quot;language-text&quot;&gt;LAZY&lt;/code&gt;로 되어 있지만 두 가지를 &lt;code class=&quot;language-text&quot;&gt;EAGER&lt;/code&gt;로 설정하여 즉시로딩 할 경우 &lt;code class=&quot;language-text&quot;&gt;MultipleBagFetchExcpetion&lt;/code&gt;이 발생한다.&lt;/li&gt;
&lt;li&gt;JPA에서는 다수의 &lt;code class=&quot;language-text&quot;&gt;OneToMany&lt;/code&gt;로 연관관계가 맺어져 있는 연관 엔티티에 대한 즉시로딩을 막고 있는데, 위에서 언급한 컬렉션 즉시로딩 시 발생하는 데이터 뻥튀기에 대한 제어가 어렵기 때문이다.&lt;/li&gt;
&lt;li&gt;발생 예외 - &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;Caused by: org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;code-classlanguage-textfetchtypelazycode---code-classlanguage-textn1-문제code-발생&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textfetchtypelazycode---code-classlanguage-textn1-%EB%AC%B8%EC%A0%9Ccode-%EB%B0%9C%EC%83%9D&quot; aria-label=&quot;code classlanguage textfetchtypelazycode   code classlanguage textn1 문제code 발생 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;FetchType.LAZY&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;N+1 문제&lt;/code&gt; 발생&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;Member&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Locker&lt;/code&gt;가 각각 &lt;code class=&quot;language-text&quot;&gt;OneToMany&lt;/code&gt; 연관관계가 맺어져 있다.&lt;/li&gt;
&lt;li&gt;다음과 같이 메소드를 실행 할 때 N + 1 쿼리가 발생한다.&lt;/li&gt;
&lt;li&gt;실행 서비스 로직
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team의 Members, Lockers 관련 서비스 로직이 있을 때 N+1 문제가 발생한다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findAll_TooManyQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teams &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//모든 teams를 조회하는 select 쿼리 1개가 발생한다.&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; memberNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//각 팀 A개에 대한 각각의 Member select 쿼리 N개가 발생한다.&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; lockerNums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//각 팀 A개에 대한 각각의 Locker select 쿼리 N개가 발생한다.&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLockers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lockerNums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;실제 발생 쿼리
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;Hibernate: &lt;span class=&quot;token comment&quot;&gt;#Team 전체 조회&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_2_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_2_ 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    team team0_
Hibernate: &lt;span class=&quot;token comment&quot;&gt;#첫번째 Team의 Member 조회&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; 
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_1_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        member members0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?

Hibernate: &lt;span class=&quot;token comment&quot;&gt;#두번째 Team의 Member 조회&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_1_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        member members0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?

Hibernate: &lt;span class=&quot;token comment&quot;&gt;#첫번째 Team의 Locker 조회&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_1_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        locker lockers0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?

Hibernate: &lt;span class=&quot;token comment&quot;&gt;#두번째 Team의 Locker 조회&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_1_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        locker lockers0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;을 전체 조회할 때 지연로딩으로 인해 각 &lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt; 마다 &lt;code class=&quot;language-text&quot;&gt;Member&lt;/code&gt; 조회 쿼리, &lt;code class=&quot;language-text&quot;&gt;Locker&lt;/code&gt; 조회 쿼리가 팀의 개수 N 만큼 추가로 나가므로 &lt;code class=&quot;language-text&quot;&gt;N+1 문제&lt;/code&gt;가 발생한 것이다.&lt;/li&gt;
&lt;li&gt;팀의 개수가 많으면 많을수록 추가적인 쿼리가 많이 나가 성능이 더욱 떨어진다.&lt;/li&gt;
&lt;li&gt;해결하기 위해서는 연관관계 엔티티를 즉시로딩하거나 비슷한 방법을 사용하여 적은 쿼리로 select 할 수 있도록 해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;하나의-collection-code-classlanguage-textfetch-joincode을-할-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EB%82%98%EC%9D%98-collection-code-classlanguage-textfetch-joincode%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;하나의 collection code classlanguage textfetch joincode을 할 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하나의 collection &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt;을 할 경우&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;우선 하나의 Collection이라도 &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt; 한다면 어떻게 동작이 될까?&lt;/li&gt;
&lt;li&gt;Team을 조회할 때 다음과 같은 쿼리를 사용해서 Lockers 컬렉션만 join fetch 하도록 한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select distinct t from Team t join fetch t.lockers&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findAllJoinFetchLockers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;실행 서비스 로직은 바로 위와 같고, teams를 조회할 때문 위의 쿼리를 사용했다.&lt;/li&gt;
&lt;li&gt;실제 발생 쿼리
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;Hibernate: &lt;span class=&quot;token comment&quot;&gt;#전체 팀 조회 시 lockers를 join fetch 한다. &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;distinct&lt;/span&gt; team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_2_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lockers1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_2_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lockers1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lockers1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lockers1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_0__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lockers1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_0__ 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    team team0_ 
&lt;span class=&quot;token keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt;
    locker lockers1_ 
        &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;lockers1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id

Hibernate: &lt;span class=&quot;token comment&quot;&gt;#첫번째 Team의 Member 조회&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_1_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        member members0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?

    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#두번째 Team의 Member 조회&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_1_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        member members0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Lockers 컬렉션을 join fetch 해서 즉시로딩 했으니, lockers 컬렉션 관련 서비스 로직 실행 시 추가 쿼리는 발생하지 않았다.&lt;/li&gt;
&lt;li&gt;여전히 Members에 대해서는 team N개 만큼의 추가 쿼리 N개가 발생했다.&lt;/li&gt;
&lt;li&gt;어느정도 쿼리가 줄긴 했으나, 여젼히 &lt;code class=&quot;language-text&quot;&gt;N+1 문제&lt;/code&gt;가 발생하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;다수의-collection-code-classlanguage-textfetch-joincode을-할-경우---code-classlanguage-textmutiplebagfetchexceptioncode-발생&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%88%98%EC%9D%98-collection-code-classlanguage-textfetch-joincode%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0---code-classlanguage-textmutiplebagfetchexceptioncode-%EB%B0%9C%EC%83%9D&quot; aria-label=&quot;다수의 collection code classlanguage textfetch joincode을 할 경우   code classlanguage textmutiplebagfetchexceptioncode 발생 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다수의 collection &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt;을 할 경우 - &lt;code class=&quot;language-text&quot;&gt;MutipleBagFetchException&lt;/code&gt; 발생&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그렇다면 두 개의 컬렉션을 모두 fetch join 한다면 쿼리를 최적화 할 수 있지 않을까 생각할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 두개의 OneToMany 연관관계에 있는 collection fetch join을 할 경우 &lt;code class=&quot;language-text&quot;&gt;MutipleBagFetchException&lt;/code&gt; 예외가 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두개의 collection을 fetch join 하는 JPQL&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select distinct t from Team t join fetch t.members join fetch t.lockers&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findAllJoinFetchAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;발생 예외 - &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;Caused by: org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags:&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;collection을 &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt; 하면서 데이터 뻥튀기가 일어나기 때문인데 두 개 이상의 컬렉션을 할 경우 그 복잡도가 높아지기 때문에 JPA에서는 예외로 처리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위 쿼리를 실행하기도 전에 &lt;code class=&quot;language-text&quot;&gt;JPA Entity Manager&lt;/code&gt;에서 오류를 발견하여 어플리케이션 실행 시작 당시 &lt;code class=&quot;language-text&quot;&gt;Bean Creation&lt;/code&gt; 단계에서 예외를 던져 어플리케이션이 실행되지 못하게 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;또-다른-문제-jpa-pagination&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%AC%B8%EC%A0%9C-jpa-pagination&quot; aria-label=&quot;또 다른 문제 jpa pagination permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;또 다른 문제, JPA Pagination&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위와 같은 서비스 로직을 실행할 때 뿐 아니라 JPA Pagination을 적용하려고 할 때 collection fetch join의 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;collection fetch 를 할 경우 데이터 뻥튀기가 발생하기 때문에 Paging에 애매하게 되기 때문에 &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt; 할 때 &lt;code class=&quot;language-text&quot;&gt;WARN&lt;/code&gt;이 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;log&quot;&gt;&lt;pre class=&quot;language-log&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token date number&quot;&gt;2021-08-22&lt;/span&gt; &lt;span class=&quot;token time number&quot;&gt;22:04:27.898&lt;/span&gt;  &lt;span class=&quot;token level warning important&quot;&gt;WARN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4825&lt;/span&gt; &lt;span class=&quot;token separator comment&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    Test worker&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;internal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;QueryTranslatorImpl   &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HHH000104&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; firstResult&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;maxResults specified with collection fetch&lt;span class=&quot;token operator&quot;&gt;;&lt;/span&gt; applying in memory&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;Hibernate:&lt;/span&gt; 
    select
        distinct team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id as id1_2_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id as id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name as name2_2_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name as name2_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id as team_id3_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id as team_id3_1_0__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id as id1_1_0__ 
    from
        team team0_ 
    inner join
        member members1_ 
            on team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;members1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;그렇기 때문에 Pageable을 적용하면서 N+1 문제에 대해 &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt;만을 사용해서 해결하기는 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;해결방법-batchsize-적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;해결방법 batchsize 적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결방법: BatchSize 적용하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위 문제를 해결할 수 있는 방법 중 하나는 BatchSize를 적용하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;spring.jpa.properties.hibernate.default_batch_fetch_size={batchSize}&lt;/code&gt; 를 &lt;code class=&quot;language-text&quot;&gt;application.properties&lt;/code&gt;에 지정하면 설정된 Batch Size만큼 &lt;code class=&quot;language-text&quot;&gt;IN&lt;/code&gt; 쿼리로 날라간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위와 동일한 테스트 코드 실행 (Pagination을 추가한 것 외에는 동일히다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Batch size를 적용해 Pagination을 하면 N+1문제나 경고가 뜨지 않는다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findWithPagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Pageable&lt;/span&gt; pageable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PageRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; teams &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teamRepository
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; memberNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//최대 batch size만큼 IN 쿼리로 한번에 처리된다&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMembers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; lockerNums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//최대 batch size만큼 IN 쿼리로 한번에 처리된다&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLockers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Locker&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lockerNums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 실행된 쿼리&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;Hibernate: &lt;span class=&quot;token comment&quot;&gt;# 전체 팀 조회 쿼리&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_2_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_2_ 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    team team0_ &lt;span class=&quot;token keyword&quot;&gt;limit&lt;/span&gt; ?
Hibernate: 
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;team0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; col_0_0_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        team team0_
Hibernate: &lt;span class=&quot;token comment&quot;&gt;# Team 2개의 Id가 IN 절로 한번에 조회된다. &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_1_0_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        member members0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        members0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token operator&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            ?&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ?
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;:&lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt;:&lt;span class=&quot;token number&quot;&gt;39.149&lt;/span&gt; TRACE &lt;span class=&quot;token number&quot;&gt;5511&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;--- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;:&lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt;:&lt;span class=&quot;token number&quot;&gt;39.149&lt;/span&gt; TRACE &lt;span class=&quot;token number&quot;&gt;5511&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;--- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [2]&lt;/span&gt;
Hibernate: &lt;span class=&quot;token comment&quot;&gt;# Team 2개의 Id가 IN 절로 한번에 조회된다. &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_0_ 
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
        locker lockers0_ 
    &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
        lockers0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token operator&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            ?&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ?
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이전에는 전체 팀 조회 쿼리 1개 + Team 2개에 대한 Members 조회 쿼리 2개 + Team 2개에 대한 Lockers 조회 쿼리 2개해서 총 5개의 쿼리가 나갔다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Batch size를 적용한 이후에는 전체 팀 조회 쿼리 1개 + Team의 Members 조회 쿼리 1개 + Team의 Lockers 조회 쿼리 1개 총 2개의 쿼리가 나갔다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Team의 사이즈가 클 수록 더 쿼리 차이가 많이 난다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Batch size는 1000을 넘어가지 않도록 설정하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/457&quot;&gt;https://jojoldu.tistory.com/457&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.inflearn.com/questions/14663&quot;&gt;https://www.inflearn.com/questions/14663&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/165&quot;&gt;https://jojoldu.tistory.com/165&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://woowacourse.github.io/tecoble/post/2021-07-26-jpa-pageable/&quot;&gt;https://woowacourse.github.io/tecoble/post/2021-07-26-jpa-pageable/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#entity-%EC%83%81%ED%99%A9&quot;&gt;Entity 상황&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jpa%EC%97%90%EC%84%9C-collection-fetch-join&quot;&gt;JPA에서 collection fetch join&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#fetchtypeeager---multiplebagfetchexception-%EB%B0%9C%EC%83%9D&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;FetchType.EAGER&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;MultipleBagFetchException&lt;/code&gt; 발생&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#fetchtypelazy---n1-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;FetchType.LAZY&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;N+1 문제&lt;/code&gt; 발생&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%98%EB%82%98%EC%9D%98-collection-fetch-join%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0&quot;&gt;하나의 collection &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt;을 할 경우&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%A4%EC%88%98%EC%9D%98-collection-fetch-join%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0---mutiplebagfetchexception-%EB%B0%9C%EC%83%9D&quot;&gt;다수의 collection &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt;을 할 경우 - &lt;code class=&quot;language-text&quot;&gt;MutipleBagFetchException&lt;/code&gt; 발생&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%AC%B8%EC%A0%9C-jpa-pagination&quot;&gt;또 다른 문제, JPA Pagination&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;해결방법: BatchSize 적용하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JPA 프록시 알아보기]]></title><description><![CDATA[INTRO JPA는 DB…]]></description><link>https://yjksw.github.io/jpa-proxy/</link><guid isPermaLink="false">https://yjksw.github.io/jpa-proxy/</guid><pubDate>Thu, 26 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JPA는 DB의 데이터와 객체간의 모순을 해결하기 위해서 나온 것이다.&lt;/li&gt;
&lt;li&gt;객체는 객체 그래프로 탐색이 가능하지만 데이터베이스에 저장된 데이터는 객체를 탐색하듯이 탐색하기가 어렵다.&lt;/li&gt;
&lt;li&gt;따라서 데이터베이스에 저장된 데이터들을 가지고 객체 그래프 탐색이 가능하기 위해서 프록시 라는 기술이 나왔다.&lt;/li&gt;
&lt;li&gt;JPA에서는 연관된 객체를 로딩하는데 지연 로딩과 즉시 로딩이라는 두가지 기법을 사용한다.&lt;/li&gt;
&lt;li&gt;여기서 지연 로딩시 프록시 기술이 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;기본-예시-entity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity&quot; aria-label=&quot;기본 예시 entity permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 예시 Entity&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Member
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;team_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; team&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//getter 및 생성자 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Team
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//getter 및 생성자 생략 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;프록시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C&quot; aria-label=&quot;프록시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프록시&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;지연 로딩을 설정된 연관 객체를 가져올 때 프록시 객체를 가져온다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;em.find()&lt;/code&gt;를 사용하면 실제 객체를 가져오고, &lt;code class=&quot;language-text&quot;&gt;em.getReference()&lt;/code&gt;를 사용하면 프록시 객체를 가져온다.
&lt;ul&gt;
&lt;li&gt;프록시 객체를 가져온다는 것은 query는 실행되지 않는 것이다.&lt;/li&gt;
&lt;li&gt;특정 객체에 대해 &lt;code class=&quot;language-text&quot;&gt;em.find()&lt;/code&gt;를 하면 연관된 객체에 대해서는 설정되어 있는 &lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; 종류에 따라 즉시로딩 혹은 지연로딩한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt; 
&lt;h3 id=&quot;실제-entity-조회---code-classlanguage-textfindcode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textfindcode&quot; aria-label=&quot;실제 entity 조회   code classlanguage textfindcode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 Entity 조회 - &lt;code class=&quot;language-text&quot;&gt;find()&lt;/code&gt;&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;em.find()는 실제 entity를 조회하여 가져온다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;find_actualEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//select 퀴리가 호출된다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//실제 엔티티 클래스임을 확인할 수 있다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 테스트를 실행하면 다음과 같은 select 쿼리가 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_ 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    member member0_ 
&lt;span class=&quot;token keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#ManyToOne, OneToOne 기본 fetch 전략은 EAGER이므로 left join을 실행해서 Team까지 즉시로딩한다. &lt;/span&gt;
    team team1_ 
        &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;team1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id 
&lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;프록시-entity-조회---code-classlanguage-textgetreferencecode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textgetreferencecode&quot; aria-label=&quot;프록시 entity 조회   code classlanguage textgetreferencecode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프록시 Entity 조회 - &lt;code class=&quot;language-text&quot;&gt;getReference()&lt;/code&gt;&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;em.getReference()는 해당 entity에 대한 proxy 객체를 가져온다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getReference_proxyEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//아무 쿼리가 호출되지 않는다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//getId()는 여전히 쿼리는 호출되지 않는다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//실제 Entity 클래스가 아니다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//프록시 객체는 실제 Entity 를 상속한다.&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//출력 : class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 테스트 코드는 select 쿼리를 호출하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;getId()&lt;/code&gt;는 해당 entity에 대한 getter이기는 하나, 프록시는 해당 entity에 대한 식별자를 보관하므로 &lt;code class=&quot;language-text&quot;&gt;getId()&lt;/code&gt;를 호출하더라도 entity를 초기화하지 않는다. (여진히 쿼리가 실행되지 않는다.)&lt;/li&gt;
&lt;li&gt;위에서 &lt;code class=&quot;language-text&quot;&gt;findMember.getClass()&lt;/code&gt;를 출력해보면 &lt;code class=&quot;language-text&quot;&gt;class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR&lt;/code&gt; 와 같이 프록시 객체 임을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;프록시-객체-특징-및-초기화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94&quot; aria-label=&quot;프록시 객체 특징 및 초기화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프록시 객체 특징 및 초기화&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;초기화는 영속성 컨텍스트에 실제 객체가 없을 경우 엔티티 생성을 요청하여 영속성 컨텍스트에 실제 entity를 로드하고 참조값을 저장하는 것이다.&lt;/li&gt;
&lt;li&gt;프록시 객체는 실제 객체를 상속한다. 따라서 사용할 때는 실제 Entity처럼 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;500&quot; alt=&quot;스크린샷 2021-08-15 오후 3 58 10&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129469950-dd48c26f-5554-4fdd-9e1f-5d38399ae46b.png&quot;&gt;&lt;br&gt;이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;프록시 객체는 실제 Entity에 대한 식별자와 해당 Entity의 참조값을 저장하고 있다. 따라서 &lt;code class=&quot;language-text&quot;&gt;getId()&lt;/code&gt;로 식별자 조회 시 초기화 하지 않는다.&lt;/li&gt;
&lt;li&gt;더불어 프록시 객체가 초기화 될 때 실제 entity 객체로 대체되는 것이 아니라, 프록시에 저장되어 있는 entity 참조값으로 실제 객체 메소드에 위임하여 메소드가 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;500&quot; alt=&quot;스크린샷 2021-08-15 오후 4 03 26&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129470031-d0c8bcd1-ea2a-479c-a45f-bc3afa4f20de.png&quot;&gt;&lt;br&gt;이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;getter-호출시-code-classlanguage-textgetidcode-제외-프록시-객체-초기화---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-code-classlanguage-textgetidcode-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode&quot; aria-label=&quot;getter 호출시 code classlanguage textgetidcode 제외 프록시 객체 초기화   code classlanguage textgetreferencecode   code classlanguage textgetnamecode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getter 호출시 (&lt;code class=&quot;language-text&quot;&gt;getId()&lt;/code&gt; 제외) 프록시 객체 초기화 - &lt;code class=&quot;language-text&quot;&gt;getReference()&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;getName()&lt;/code&gt;&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;proxy 객체는 getName() 등을 호출 할 경우 초기화 된다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getReference_proxyEntity_getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; team &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//아무 쿼리가 호출되지 않는다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//getId()는 여전히 쿼리는 호출되지 않는다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//select 쿼리가 실행된다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//초기화 되어도 여전히 실제 Entity 클래스가 아니다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//프록시 객체는 실제 Entity 를 상속한다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; team_id3_0_0_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; id1_1_1_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    team1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; name2_1_1_ 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;
    member member0_ 
&lt;span class=&quot;token keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt;
    team team1_ 
        &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;team1_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id 
&lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt;
    member0_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;getName() 실행 시 위 select 쿼리가 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;프록시-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;프록시 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프록시 특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;처음 단 한번만 초기화 된다.&lt;/li&gt;
&lt;li&gt;프록시 객체가 대체되는 것이 아니라 프록시 객체를 통해 실제 entity 접근하는 것이다.&lt;/li&gt;
&lt;li&gt;타입 체크시 주의해야 한다. (아래 더 자세히 다룸)&lt;/li&gt;
&lt;li&gt;영속성 컨텍스트에 이미 해당 entity가 있다면 &lt;code class=&quot;language-text&quot;&gt;getReference()&lt;/code&gt;를 해도 실제 entity가 조회된다.&lt;/li&gt;
&lt;li&gt;영속성 컨텍스트를 통해 초기화 하므로 영속성 컨텍스트와 연결이 없다면 &lt;code class=&quot;language-text&quot;&gt;LazyInitializationException&lt;/code&gt; 예외가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;프록시-객체-타입-체크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC&quot; aria-label=&quot;프록시 객체 타입 체크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프록시 객체 타입 체크&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프록시 객체의 타입은 &lt;code class=&quot;language-text&quot;&gt;getClass()&lt;/code&gt; 로 비교할 경우 프록시 객체 클래스가 조회되기 때문에 비교하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;instanceOf&lt;/code&gt; 를 사용해야 한다.&lt;/li&gt;
&lt;li&gt;많은 경우 프록시 객체를 &lt;code class=&quot;language-text&quot;&gt;getClass()&lt;/code&gt;로 실제 entity와 비교하여 버그가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;proxy 객체의 타입은 실제 entity 객체 타입과 다르다. getClass()로 비교할 경우 false가 반환된다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;proxyType_getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//프록시 객체를 가져오기 위해 Member의 Team 프로퍼티를 FetchType.LAZY로 설정&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Team은 지연로딩으로 프록시객체이다.&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; findTeam &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findTeam&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//기존 TeamA와 프록시 팀인 findTeam의 필드값은 동일하다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findTeam&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//프록시 팀읜 findTeam의 class는 Team이 아니다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findTeam&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//isInstanceOf로 비교하면 상속 받은 Team.class 이다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;영속성-컨텍스트에-있는-entity-getreference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference&quot; aria-label=&quot;영속성 컨텍스트에 있는 entity getreference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;영속성 컨텍스트에 있는 entity getReference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;영속성 컨텍스트에 조회하고자 하는 entity가 이미 존재한다면 &lt;code class=&quot;language-text&quot;&gt;getReference()&lt;/code&gt;를 사용하더라도 프록시 객체가 아닌 실제 entity 가 반환된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;이미 영속성 컨텍스트에 있는 entity 조회시 getReference로 조회해도 실제 entity가 반환된다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getReference_AlreadyInPersistenceContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//영속성 컨텍스트에 존재햔다.&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getReference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 프록시 객체를 가져오듯 메서드를 호출한다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//프록시가 아닌 실제 entity 클래스를 가져온다. 추가적인 쿼리는 실행되지 않는다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;준영속-entity-초기화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94&quot; aria-label=&quot;준영속 entity 초기화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;준영속 entity 초기화&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;준영속이 된 프록시 객체에서 초기화를 시도할 경우 하이버네이트의 &lt;code class=&quot;language-text&quot;&gt;LazyInitializationException&lt;/code&gt;이 발생한다.&lt;/li&gt;
&lt;li&gt;프록시의 초기화는 영속성 컨텍스트와 매우 밀접하게 관련이 있으므로 영속성 컨텍스트와의 관계가 끊어지면 에외가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;준영속 프록시 객체에 대한 초기화 시 예외가 발생한다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getReference_InitializationExcpetion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.&lt;/span&gt;

    em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//먼저 영속성 컨텍스트를 clear 해주어야한다. &lt;/span&gt;
    em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//프록시 객체를 가져온 영속성 컨텍스트를 종료한다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThatThrownBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//영속성 컨텍스트가 종료된 이후에 초기화를 시도하면&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LazyInitializationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//하이버네이트 예외가 발생한다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Member&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;을 지연로딩으로 &lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; 타입을 설정하여 &lt;code class=&quot;language-text&quot;&gt;Member&lt;/code&gt; 조회시 &lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;은 프록시 객체이도록 한다.&lt;/li&gt;
&lt;li&gt;영속성 컨텍스트를 닫은 후에 초기화를 시도하면 예외가 발생한다.
&lt;ul&gt;
&lt;li&gt;단순히 &lt;code class=&quot;language-text&quot;&gt;Member.getTeam()&lt;/code&gt; 이 초기화를 실행하지 않고 실제 &lt;code class=&quot;language-text&quot;&gt;Team&lt;/code&gt;의 필드가 사용될 때 (&lt;code class=&quot;language-text&quot;&gt;getName()&lt;/code&gt; 등) 초기화가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;프록시-객체-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;프록시 객체 확인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프록시 객체 확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프록시 객체 확인을 위해서는 &lt;code class=&quot;language-text&quot;&gt;PersistenceUnitUtil.isLoaded(Object entity)&lt;/code&gt;를 사용해서 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;때때로 jpa repostiory에 대한 단위 테스트를 작성하려고 할 때, 의도한대로 지연로딩 또는 즉시로딩이 되었는지 확인할 때 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;만일 초기화가 안된 프록시 객체라면 위 결과값이 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;가 반환된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;프록시 객체를 확인할 수 있다. &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistenceUnitUtil_Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; member &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;member1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt; teamA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Team A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; savedMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;EntityManager&lt;/span&gt; em &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; testEntityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; findMember &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; savedMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; memberIsLoaded &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPersistenceUnitUtil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isLoaded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; teamIsLoaded &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; em&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEntityManagerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPersistenceUnitUtil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isLoaded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findMember&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTeam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//EntityManagerFactory에서 PersistenceUnitUtil을 가져온다.&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;memberIsLoaded&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//findMember 는 실제 entity 이므로 결과값이 true 이다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;teamIsLoaded&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFalse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//team 은 프록시 객체이므로 결과값이 false 이다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity&quot;&gt;기본 예시 Entity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C&quot;&gt;프록시&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---find&quot;&gt;실제 Entity 조회 - &lt;code class=&quot;language-text&quot;&gt;find()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---getreference&quot;&gt;프록시 Entity 조회 - &lt;code class=&quot;language-text&quot;&gt;getReference()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94&quot;&gt;프록시 객체 특징 및 초기화&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-getid-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---getreference---getname&quot;&gt;Getter 호출시 (&lt;code class=&quot;language-text&quot;&gt;getId()&lt;/code&gt; 제외) 프록시 객체 초기화 - &lt;code class=&quot;language-text&quot;&gt;getReference()&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;getName()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95&quot;&gt;프록시 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC&quot;&gt;프록시 객체 타입 체크&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference&quot;&gt;영속성 컨텍스트에 있는 entity getReference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94&quot;&gt;준영속 entity 초기화&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8&quot;&gt;프록시 객체 확인&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JPA 프록시 관련 버그 경험기]]></title><description><![CDATA[INTRO JPA 에서는 데이터베이스에서 연관객체 탐색을 효율적으로 하기 위해서 지연로딩 전략을 사용한다. 지연로딩의 핵심은 연관관계에 있는 Entity가 실제로 사용되기 이전까지 DB에 실제로 참조하지 않고 프록시 객체로 대체하는 것이다. JPA…]]></description><link>https://yjksw.github.io/jpa-proxy-equals-bug/</link><guid isPermaLink="false">https://yjksw.github.io/jpa-proxy-equals-bug/</guid><pubDate>Thu, 26 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JPA 에서는 데이터베이스에서 연관객체 탐색을 효율적으로 하기 위해서 지연로딩 전략을 사용한다.&lt;/li&gt;
&lt;li&gt;지연로딩의 핵심은 연관관계에 있는 Entity가 실제로 사용되기 이전까지 DB에 실제로 참조하지 않고 프록시 객체로 대체하는 것이다.&lt;/li&gt;
&lt;li&gt;JPA의 프록시 객체는 유용하지만 내부 동작방식에 대해서 제대로 알고있지 않으면 찾기 어려운 버그를 만날 수도 있다.&lt;/li&gt;
&lt;li&gt;다음은 JPA proxy 관련해서 프로젝트 진행시 만난 버그에 대한 내용이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;문제-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9&quot; aria-label=&quot;문제 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제 상황&lt;/h2&gt;
&lt;h3 id=&quot;entity-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#entity-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;entity 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entity 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고&lt;/strong&gt;: 설명과 관련된 부분만 남기고 다른 로직 및 어노테이션은 대부분 생략했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt; - 게시물 엔티티&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Images&lt;/span&gt; images&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PostContent&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Likes&lt;/span&gt; likes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//설명과 관련된 프로퍼티!! &lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comments&lt;/span&gt; comments&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PostTags&lt;/span&gt; postTags&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; githubRepoUrl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...부생성자 생략 &lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...불필요한 비지니스 로직 생략 &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//...getter 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Likes&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Like&lt;/code&gt; - Post 엔티티 하위의 Embedded 게시물 Like collection 포장객체&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고&lt;/strong&gt;: 설명하고자 하는 부분과 깊게 연관된 핵심 Entity는 아니지만  상황 설명을 위해 간단히 프로퍼티만 소개한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Embeddable&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Post 엔티티 안에 Embedded 되어 있음 &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Likes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; likes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Likes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Likes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; likes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;likes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; likes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...getter 및 불필요한 비지니스 로직 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Like&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...getter 및 불필요한 비지니스 로직 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; - 어플리케이션 사용자 (게시물 좋아요, 유저간 팔로우 팔로잉 등의 행위를 함)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Followers&lt;/span&gt; followers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Embedded&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Followings&lt;/span&gt; followings&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...일부 프로퍼티 생략 &lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...부 생성자 생략 &lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//문제를 발생시킨 핵심 메소드!!! &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;followings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...getter 및 불필요한 비지니스 로직 생략 &lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//User는 Entity 이므로 Id로 동일성 및 동등성 확인 &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//중요한 포인트!!!! &lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Followings&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Follow&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Followings&lt;/code&gt; - 해당 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;의 팔로워리스트를 저장하는 포장객체 (&lt;code class=&quot;language-text&quot;&gt;Followers&lt;/code&gt;도 동일한 형태로 되어 있다.)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Follow&lt;/code&gt; - Followers, Followings 리스트에 담겨 있는 VO 엔티티로 source, target 유저간의 팔로우 관계를 나타내는 엔티티&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Embeddable&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Followings&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        mappedBy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        cascade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PERSIST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        orphanRemoval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Follow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; followings&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Followings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...생성자 생략 &lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//문제를 발생시킨 핵심 메소드!!! &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; followings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anyMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;follow &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; follow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...일부 비지니스 로직 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    uniqueConstraints &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@UniqueConstraint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columnNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;target_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Follow&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IDENTITY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;source_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LAZY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;target_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Follow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...생성자 및 유효성 검사 로직 생략 &lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//문제를 발생시킨 핵심 메소드!!! &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...getter 생략 &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//equals &amp;amp; hashcode는 VO로 취급되어 필드가 같은지 확인 (즉, 유저가 같은 유저인지 확인)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PostRepository&lt;/code&gt; 게시물 좋아요 리스트 조회 쿼리&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select distinct p from Post p left join fetch p.likes where p.id = :postId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findPostWithLikeUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;postId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; postId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 포스트를 조회할 때 좋아요 리스트를 fetch join 해서 즉시로딩 한다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;버그-발생&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%84%EA%B7%B8-%EB%B0%9C%EC%83%9D&quot; aria-label=&quot;버그 발생 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;버그 발생&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;현재 흐름은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt;를 좋아요 한 유저 리스트를 반환하려함. (&lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt;내부의 &lt;code class=&quot;language-text&quot;&gt;Likes&lt;/code&gt;를 반환)&lt;/li&gt;
&lt;li&gt;좋아요 한 유저 리스트를 조회할 때, 조회하는 source 유저가 팔로잉 하고 있는 target 유저는 팔로잉 중이라고 나타냄.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
  &lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;220&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130729021-67475c69-7b74-46bf-ac55-2902ddded2f9.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;source 유저가 target user를 following 하고 있는 여부를 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;isFollowing&lt;/code&gt; 메소드를 통해서 확인함.
&lt;ul&gt;
&lt;li&gt;이때 source와 target이 같은 경우(자기 자신인 경우) - &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;source가 target을 팔로잉 중인 경우 - &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;source가 target을 필로우 하지 않는 경우 - &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt; 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;문제는, 로그인 한 source 유저와 즉시로딩 해 가져온 좋아요 리스트의 User 간의 팔로잉 여부가 모두 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;로 출력이 된 것이다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;발생-원인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8&quot; aria-label=&quot;발생 원인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;발생 원인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;PostRepository&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;findPostWithLikeUsers()&lt;/code&gt;를 사용해 포스트와 좋아요 리스트를 즉시로딩(&lt;code class=&quot;language-text&quot;&gt;@OneToMany&lt;/code&gt; 관계) 할 때 &lt;code class=&quot;language-text&quot;&gt;Like&lt;/code&gt; 엔티티 내부의 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;는 즉시로딩 하지 않으므로 proxy 객체이다.&lt;/li&gt;
&lt;li&gt;좋아요한 target 유저 리스트를 가져와서 로그인 유저인 source 유저의 &lt;code class=&quot;language-text&quot;&gt;isFollowing()&lt;/code&gt; 메소드로 두 유저간의 팔로잉 여부를 확인한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// User.java&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//자기 자신일 경우 null 반환&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;followings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Followings.java&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; followings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anyMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;follow &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; follow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Follow.java&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFollowing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//User.java 의 equals &amp;amp; hashCode를 사용 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;아무리 디버깅을 해봐도 비교하는 source 유저와 target 유저의 식별자(Id)가 같음에도 불구하고 &lt;code class=&quot;language-text&quot;&gt;Follow.java&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;isFollowing()&lt;/code&gt;에서 false가 반환 되었다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;그 원인은 &lt;code class=&quot;language-text&quot;&gt;User.java&lt;/code&gt;에서 오버라이드한 equals hashcode에 있었다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//(1) 중요한 포인트!!!! &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;위 &lt;strong&gt;(1)&lt;/strong&gt; 에서 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;객체의 Id로 비교하기 이전에 두 객체가 같은 클래스인지 &lt;code class=&quot;language-text&quot;&gt;o.getClass()&lt;/code&gt;로 비교하고 있었다. 하지만 proxy 객체는 &lt;code class=&quot;language-text&quot;&gt;getClass()&lt;/code&gt; 로 비교하면 실제 entity와 같지 않기 때문에 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;를 반환한다.&lt;/li&gt;
&lt;li&gt;따라서 프록시 객체와 실제 entity를 비교할때는 &lt;code class=&quot;language-text&quot;&gt;instance of&lt;/code&gt;를 사용해야한다. &lt;br&gt;&lt;a href=&quot;https://prolog.techcourse.co.kr/posts/1334&quot;&gt;JPA Proxy 참고링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;해결-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;해결 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;생각한 해결방법은 2가지 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Post&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Like&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt; 시 &lt;code class=&quot;language-text&quot;&gt;Like&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; 까지 모두 &lt;code class=&quot;language-text&quot;&gt;fetch join&lt;/code&gt;으로 즉시로딩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Post와 Like -&gt; &lt;code class=&quot;language-text&quot;&gt;@OneToMany&lt;/code&gt; 관계&lt;/li&gt;
&lt;li&gt;Like와 User -&gt; &lt;code class=&quot;language-text&quot;&gt;@ManyToOne&lt;/code&gt; 관계&lt;/li&gt;
&lt;li&gt;위와 같은 연관관계는 두 번 fetch join 하여 Like의 User까지 즉시로딩 할 수 있다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;select distinct p from Post p left join fetch p.likes.likes l left join fetch l.user where p.id = :postId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findPostWithLikeUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;postId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; postId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;위와 같이 &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;까지 즉시로딩 한다면, &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;가 더 이상 proxy 객체가 아니기 때문에 &lt;code class=&quot;language-text&quot;&gt;getClass()&lt;/code&gt;를 해도 문제가 발생하지 않는다.&lt;/li&gt;
&lt;li&gt;하지만 지나치게 복잡한 연관관계를 즉시로딩 하는 것이며 JPQL에서 fetch join 시 별칭을 쓰는 것은 JPA 표준 스펙에 맞지 않기 때문에 추천하는 방법이 아니다. (Hibernate 구현상 가능하므로 할 수 있긴 하다.) &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/questions/15876&quot;&gt;JPA fetch join 시 별칭 참고링크&lt;/a&gt;&lt;/p&gt;
 &lt;br&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;equals()&lt;/code&gt; 메소드의 &lt;code class=&quot;language-text&quot;&gt;getClass()&lt;/code&gt; 비교 부분을 &lt;code class=&quot;language-text&quot;&gt;instance of&lt;/code&gt; 로 수정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;User.java&lt;/code&gt;의 equals 메소드를 다음과 같이 수정하면 올바른 값을 반환한다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 이 부분!!  &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마무리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JPA Proxy 객체에 대해서 학습했으나, 이론으로 알고 있던 부분을 직접 버그로 경험하며 학습할 수 있었다.&lt;/li&gt;
&lt;li&gt;디버깅 시 User 객체의 주소값이 ID가 같을 경우 같은 해시값으로 찍혔기 때문에 원인을 알기 더 어려웠다.&lt;/li&gt;
&lt;li&gt;또한 디버깅 포인트를 override 하여 IDE에서 자동으로 추가한 &lt;code class=&quot;language-text&quot;&gt;equals()&lt;/code&gt;에 걸 생각을 하지 못한 것도 디버깅을 어렵게 했던 포인트였다.&lt;/li&gt;
&lt;li&gt;개인적으로 &lt;code class=&quot;language-text&quot;&gt;equals()&lt;/code&gt;를 수정하는 두번째 해결방법을 추천하지만, override 한 메소드를 수정하는 것이 다른 팀원에게 충분히 공유되지 않으면 또다른 버그 포인트가 될 수 있다고 생각한다. (당연하게 생각하여 자세히 들여다보지 않는 부분이므로)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9&quot;&gt;문제 상황&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#entity-%EA%B5%AC%EC%A1%B0&quot;&gt;Entity 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B2%84%EA%B7%B8-%EB%B0%9C%EC%83%9D&quot;&gt;버그 발생&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8&quot;&gt;발생 원인&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot;&gt;해결 방법&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Java IOStream 과 파일 입출력]]></title><description><![CDATA[자바 I/O 스트림 Stream은 데이터의 연속이다. Sequence of Data 다르게 말하면 Stream 이란 한쪽으로 흐르는 통로같은 것이다. 자바에서 Stream이란 한쪽 source에서 destination…]]></description><link>https://yjksw.github.io/java-iostream-file/</link><guid isPermaLink="false">https://yjksw.github.io/java-iostream-file/</guid><pubDate>Thu, 26 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;자바-io-스트림&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94-io-%EC%8A%A4%ED%8A%B8%EB%A6%BC&quot; aria-label=&quot;자바 io 스트림 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바 I/O 스트림&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stream은 데이터의 연속이다. Sequence of Data&lt;/li&gt;
&lt;li&gt;다르게 말하면 &lt;strong&gt;Stream 이란 한쪽으로 흐르는 통로같은 것이다.&lt;/strong&gt; 자바에서 Stream이란 한쪽 source에서 destination으로 흐르는 &lt;strong&gt;데이터를 위한 단방향 통로&lt;/strong&gt;이다. 자바에서는 여러 매체를 읽거나 쓸 수 있고 각자를 위한 I/O Stream이 구현되어 있다. (disk files, devices, programs, memory arrays)&lt;/li&gt;
&lt;li&gt;Stream은 단방향 통신이기때문에 들어오는 데이터, 나가는 데이터에 따로 InputStream, OutputStream이 있는 것이다.&lt;/li&gt;
&lt;li&gt;I/O 스트림은 여러가지 종류의 데이터들을 처리할 수 있다: 바이트, primitive data type, characters, objects&lt;/li&gt;
&lt;li&gt;Stream은 단순히 데이터를 전달하는 역할만 하기도하고, 몇몇 stream은 데이터를 조작하고 편리하게 변환하는 역할을 수행하기도 한다.&lt;/li&gt;
&lt;li&gt;모든 Stream은 사용 후 반드시 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt; 해주어야 한다. (&lt;code class=&quot;language-text&quot;&gt;try-with-resources&lt;/code&gt;를 추천한다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130890827-a907eff4-5edc-437c-b8d3-50cdb2cac0c9.png&quot;&gt;&lt;br&gt;TCP School&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;바이트-기반-stream&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%B0%98-stream&quot; aria-label=&quot;바이트 기반 stream permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;바이트 기반 Stream&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;바이트를 기반으로 입출력하는 스트림이다.&lt;/li&gt;
&lt;li&gt;FileInputStream(파일), ByteArrayInputStream(메모리), PipeInputStream(프로세스), AudioInputStream(오디오 장치) 등등이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;보조-stream&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%A1%B0-stream&quot; aria-label=&quot;보조 stream permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보조 Stream&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실제로 데이터를 주고받는 스트림이 아니라, 다른 스트림의 기능을 추가적으로 보조하여 새로운 기능을 수행할 수 있도록 해주는 스트림이다.&lt;/li&gt;
&lt;li&gt;생성시 인자로 &lt;code class=&quot;language-text&quot;&gt;InputStream&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;OutputStream&lt;/code&gt; 등을 받기도 한다.&lt;/li&gt;
&lt;li&gt;몇가지 예시)
&lt;ol&gt;
&lt;li&gt;BufferedInputStream / BufferedOutputStream - 버퍼를 이용한 입출력으로 데이터 처리 속도를 높일 수 있다.
&lt;ul&gt;
&lt;li&gt;지정되지 않았을 때 기본 버퍼 사이즈는 &lt;code class=&quot;language-text&quot;&gt;8192&lt;/code&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DataInputStream / DataOutputStream - 자바의 기본 타입으로 데이터를 읽음&lt;/li&gt;
&lt;li&gt;등등&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;문자-기반-stream&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90-%EA%B8%B0%EB%B0%98-stream&quot; aria-label=&quot;문자 기반 stream permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자 기반 Stream&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reader, Writer 를 통해서 UTF-8 등등의 인코딩 텍스트를 처리할 수 있다.
&lt;ul&gt;
&lt;li&gt;이것은 필터의 일종이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이것을 사용하면 데이터를 byte 단위가 아닌, char 단위로 처리할 수 있다.&lt;/li&gt;
&lt;li&gt;대표적으로 자주 사용하는 것이 &lt;code class=&quot;language-text&quot;&gt;BufferedReader&lt;/code&gt;가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;InputStream&lt;/span&gt; inputStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;또 많이 사용되는 것으로는 &lt;code class=&quot;language-text&quot;&gt;FileReader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;CharArrayReader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;PipedReader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;StringReader&lt;/code&gt; 등등이 있다. (각각 Writer도 있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;inputstream&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#inputstream&quot; aria-label=&quot;inputstream permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;InputStream&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;InputStream 은 &lt;em&gt;프로그램 입장&lt;/em&gt;에서 데이터를 읽어드리는 것이다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130889921-1ef178ae-5fa1-4597-a173-ffa3165cf897.png&quot;&gt;&lt;br&gt;이미지 출처: 오라클 docs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InputStream은 입출력 스트림의 기본 클래스이며 &lt;code class=&quot;language-text&quot;&gt;read()&lt;/code&gt; 메소드를 추상메소드를 지원한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;read()&lt;/code&gt;메소드를 적절하게 구현하여 사용허던지, 이미 구현한 하위 기타 InputStream을 활용하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기본적으로 바이트를 읽어드린다. &lt;code class=&quot;language-text&quot;&gt;read(byte[], int off, int len)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;read(byte[])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;바이트를-읽는다는데-왜-반환값은-int일까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%9D%BD%EB%8A%94%EB%8B%A4%EB%8A%94%EB%8D%B0-%EC%99%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%80-int%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;바이트를 읽는다는데 왜 반환값은 int일까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;바이트를 읽는다는데 왜 반환값은 int일까?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보면 &lt;code class=&quot;language-text&quot;&gt;InputStream&lt;/code&gt;의 overloading 되어 있는 모든 &lt;code class=&quot;language-text&quot;&gt;read()&lt;/code&gt; 메소드의 반환값이 &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt; 이다.&lt;/li&gt;
&lt;li&gt;그 이유는 스트림에 있는 데이터를 모두 읽었을 때 &lt;code class=&quot;language-text&quot;&gt;-1&lt;/code&gt; 을 반환하는데 반환값이 byte이면 &lt;code class=&quot;language-text&quot;&gt;-1&lt;/code&gt; 을 반환할 수 없기 때문이다.&lt;/li&gt;
&lt;li&gt;데이터를 읽을 때 우선 0-255 사이의 값을 int로 반환하고, 해당 값을 -128 부터 127 사이의 byte 타입으로 변환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;inputstream-to-string&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#inputstream-to-string&quot; aria-label=&quot;inputstream to string permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;InputStream to String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;여러가지 방법이 있겠지만 가장 간단한 방법은 다음이다.&lt;/li&gt;
&lt;li&gt;InputStream에서 읽은 byte 데이터를 &lt;code class=&quot;language-text&quot;&gt;new String()&lt;/code&gt;을 통해 반환한다.&lt;/li&gt;
&lt;li&gt;이때 두번째 인자로 인코딩 타입도 정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inputStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readAllBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UTF_8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;outputstream&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#outputstream&quot; aria-label=&quot;outputstream permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OutputStream&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;다른 매체 (콘솔, 모니터, 파일 등등)에 데이터를 쓸 때 사용되는 출력 스트림이다.
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/63405904/130900408-a052d0ba-0ac3-4818-8fc7-80c17f156d41.png&quot;&gt;&lt;br&gt;이미지 출처: 오라클 docs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;그냥 &lt;code class=&quot;language-text&quot;&gt;write()&lt;/code&gt;는 바이트 단위로 쓰기 때문에 비효율적이다. &lt;code class=&quot;language-text&quot;&gt;read()&lt;/code&gt;와 마찬가지로 &lt;code class=&quot;language-text&quot;&gt;write()&lt;/code&gt;도 byte[]을 인자로 넣어서 1 바이트 이상을 효율적으로 쓸 수 있다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; off&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;code-classlanguage-textbytearrayoutputstreamcode-vs-code-classlanguage-textbufferedoutputstreamcode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textbytearrayoutputstreamcode-vs-code-classlanguage-textbufferedoutputstreamcode&quot; aria-label=&quot;code classlanguage textbytearrayoutputstreamcode vs code classlanguage textbufferedoutputstreamcode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;ByteArrayOutputStream&lt;/code&gt; vs. &lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ByteArrayOutputStream&lt;/code&gt;는 메모리에 데이터를 출력하는 스트림이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;은 버퍼링 된 출력 스트림을 생성하는 filter stream의 일종으로 생성시 인자로 OutputStream을 받는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;BufferedOutputStream&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BufferedOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;outputStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;이 직접 출력 스트림에 쓰는 것이 아니라 우선 버퍼에 써서 저장이 되도록 지원하는 것이다. 그렇기 때문에 인자로 출력 스트림을 받아야한다.&lt;/li&gt;
&lt;li&gt;버퍼의 사이즈는 지정할 수 있으며 default 버퍼 사이즈는 &lt;code class=&quot;language-text&quot;&gt;8192&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;close()&lt;/code&gt;가 호출되면 버퍼에 있는 내용이 출력 스트림에 쓰인다.&lt;/li&gt;
&lt;li&gt;스트림을 닫지 않은 채로 내용을 쓰고 싶다면 &lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt;를 호출하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;차이점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%A8%EC%9D%B4%EC%A0%90&quot; aria-label=&quot;차이점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;차이점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ByteArrayOutputStream&lt;/code&gt;은 unbuffered I/O이고, &lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;은 buffered I/O 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&quot;왜-buffered-io를-사용할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-buffered-io%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 buffered io를 사용할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 buffered I/O를 사용할까?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;unbuffered I/O를 사용한다는 것은 매번 입력 및 출력시 OS에 직접적인 요청이 간다는 것이다. 디스크 접근, 네트워크, 등등의 OS관련 요청이 많아지면서 그 비용으로 인해 프로그램의 효율이 배우 떨어진다.&lt;/li&gt;
&lt;li&gt;그것을 해결하기 위해서 자바가 buffered I/O를 지원하도록 했다.
&lt;ul&gt;
&lt;li&gt;Buffered input stream은 데이터를 buffer라는 메모리 공간에서 읽고 native input API 는 버퍼가 비었을때만 호출된다.&lt;/li&gt;
&lt;li&gt;Buffered output stream은 반대로 출력하고자 하는 데이터가 buffer에 가득 찼을 때 native output API가 호출된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램은 unbuffered I/O인 입출력 스트림을 buffered 스트림 선언시 인자로 넘겨 버퍼링 되도록 한다.&lt;/li&gt;
&lt;li&gt;바이트 버퍼링을 위해 &lt;code class=&quot;language-text&quot;&gt;BufferedInputStream&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;이 있다.&lt;/li&gt;
&lt;li&gt;문자 버퍼링을 위해 &lt;code class=&quot;language-text&quot;&gt;BufferedReader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;BufferedWriter&lt;/code&gt;가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&quot;code-classlanguage-textflushcode는-언제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textflushcode%EB%8A%94-%EC%96%B8%EC%A0%9C&quot; aria-label=&quot;code classlanguage textflushcode는 언제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt;는 언제?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;언제 buffer를 비우는지가 중요한 포인트이다. 버퍼를 비우고 target에 입출력을 반영하는 것을 flushing이라고 한다.&lt;/li&gt;
&lt;li&gt;어떤 buffered output class들은 autoflush를 지원해서 특정 이벤트 동작시 자동 flush가 되도록 한다.
&lt;ul&gt;
&lt;li&gt;예를 들어 &lt;code class=&quot;language-text&quot;&gt;PrintWriter&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt; 등을 기점으로 &lt;code class=&quot;language-text&quot;&gt;flush&lt;/code&gt;를 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;버퍼에 있는 내용을 반영하고 싶을 때 수동으로 &lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt;를 호출하면 된다. 참고로 &lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt;는 모든 스트림에 존재하는 메소드이지만 버퍼링을 지원하는 스트림이 아니면 아무 효과가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;file&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#file&quot; aria-label=&quot;file permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File&lt;/h2&gt;
&lt;h3 id=&quot;path-absolute-path-canonical-path&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#path-absolute-path-canonical-path&quot; aria-label=&quot;path absolute path canonical path permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;path, absolute path, canonical path&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;파일 이름으로 경로를 찾아 해당 파일을 읽는 실습을 하면서 여러 종류의 path가 등장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;path - 가장 기본적인 path로 주로 입력된 경로 그대로이다.&lt;/li&gt;
&lt;li&gt;absolute path - 처음 root 부터 절대 경로를 나타낸다.
&lt;ul&gt;
&lt;li&gt;solaris의 경우 &lt;code class=&quot;language-text&quot;&gt;/home/sally/statusReport&lt;/code&gt; 이런 형태를 지닌다.&lt;/li&gt;
&lt;li&gt;Windows의 경우 &lt;code class=&quot;language-text&quot;&gt;C:\home\sally\statusReport&lt;/code&gt; 이런 형태를 지닌다.&lt;/li&gt;
&lt;li&gt;루트 디렉토리부터 시작하면 절대경로이다. 그러니까 다음 두가지 경우도 모두 절대경로이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/home/../home/originfile
/home/./././originfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;canonical path - 따라서 절대경로이면서 단 하나의 형식으로 유니크하게 표현하는 것이 canoncial path이다. 즉 위의 절대경로를 canonical path로 표현하면 다음과 같이 된다. 모든 파일의 canoncial path는 단 하나이며 같은 리소스일 경우 그 생김새는 항상 같다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; /home/originfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;java에서-리소스-파일-읽기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#java%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0&quot; aria-label=&quot;java에서 리소스 파일 읽기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Java에서 리소스 파일 읽기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java에서 리소스 파일을 읽을 때는 다음과 같이 하면 된다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt; resource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Path&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readlAllLines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;하지만 위와 같이 실행하여 IDE에서 제대로 돌아가더라도 jar로 실행을 시켜보면 리소스를 찾지 못한다는 오류가 발생한다. jar 내부에서 되어있는 파일 구조가 조금 다르기 때문이다.&lt;/li&gt;
&lt;li&gt;찾은 해결책은 resource를 inputStream으로 받아서 읽는 것이다.
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;InputStream&lt;/span&gt; in &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt; bufferedReader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; actual &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bufferedReader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    actual&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;아직 테스트는 해보지 않았으나 조만한 해볼 예정이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/io/streams.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/io/streams.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tcpschool.com/java/java_io_stream&quot;&gt;http://tcpschool.com/java/java_io_stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sgdev.tistory.com/23&quot;&gt;https://sgdev.tistory.com/23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/io/buffers.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/io/buffers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.benjaminlog.com/entry/absolute-path-vs-canonical-path&quot;&gt;https://www.benjaminlog.com/entry/absolute-path-vs-canonical-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/io/path.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/io/path.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://daplus.net/java-jar-%EB%82%B4%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0/&quot;&gt;http://daplus.net/java-jar-내에서-리소스-파일-읽기/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94-io-%EC%8A%A4%ED%8A%B8%EB%A6%BC&quot;&gt;자바 I/O 스트림&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%B0%98-stream&quot;&gt;바이트 기반 Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B3%B4%EC%A1%B0-stream&quot;&gt;보조 Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90-%EA%B8%B0%EB%B0%98-stream&quot;&gt;문자 기반 Stream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#inputstream&quot;&gt;InputStream&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%9D%BD%EB%8A%94%EB%8B%A4%EB%8A%94%EB%8D%B0-%EC%99%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%80-int%EC%9D%BC%EA%B9%8C&quot;&gt;바이트를 읽는다는데 왜 반환값은 int일까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#inputstream-to-string&quot;&gt;InputStream to String&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#outputstream&quot;&gt;OutputStream&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#bytearrayoutputstream-vs-bufferedoutputstream&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ByteArrayOutputStream&lt;/code&gt; vs. &lt;code class=&quot;language-text&quot;&gt;BufferedOutputStream&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;차이점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%9C-buffered-io%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot;&gt;왜 buffered I/O를 사용할까?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#flush%EB%8A%94-%EC%96%B8%EC%A0%9C&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;flush()&lt;/code&gt;는 언제?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#file&quot;&gt;File&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#path-absolute-path-canonical-path&quot;&gt;path, absolute path, canonical path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#java%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0&quot;&gt;Java에서 리소스 파일 읽기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[웹 개발 시 Profile 전략 - @Profile & @ActiveProfile]]></title><description><![CDATA[Intro 프로젝트를 진행하다 보면 상황에 따라 각기 다른 운영환경을 설정해야할때가 있다. 그때마다 properties…]]></description><link>https://yjksw.github.io/profile-active-profile/</link><guid isPermaLink="false">https://yjksw.github.io/profile-active-profile/</guid><pubDate>Thu, 19 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트를 진행하다 보면 상황에 따라 각기 다른 운영환경을 설정해야할때가 있다. 그때마다 properties 설정 파일에 가서 설정되어있는 운영 환경을 바꾸고 돌리기는 어렵다.&lt;/li&gt;
&lt;li&gt;이때 각기 다른 &lt;code class=&quot;language-text&quot;&gt;Profile&lt;/code&gt;를 적용해서 상황에 따라 적합한 &lt;code class=&quot;language-text&quot;&gt;Profile&lt;/code&gt; 설정을 따르도록 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;yml-파일로-설정-나누기---간단하게&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#yml-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%82%98%EB%88%84%EA%B8%B0---%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C&quot; aria-label=&quot;yml 파일로 설정 나누기   간단하게 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;yml 파일로 설정 나누기 - 간단하게&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yml&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;properties&lt;/code&gt;를 통해서 profile 설정을 나눌 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각각 원하는 환경에 대한 설정정보를 &lt;code class=&quot;language-text&quot;&gt;yml&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;properties&lt;/code&gt;에 기재한 후 &lt;code class=&quot;language-text&quot;&gt;application-{profile-name}.yml&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;application-{profile-name}.properties&lt;/code&gt;로 지정한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;317&quot; alt=&quot;스크린샷 2021-08-17 오후 8 42 39&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129719783-aeb9d93e-4c22-473e-9221-0b553393287d.png&quot;&gt;&lt;br&gt;resources 하위에 나누어진 profiles 설정들&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 profile 환경으로 나눠져 있을 경우 어떤 profile을 기본적으로 실행할 것인지 &lt;code class=&quot;language-text&quot;&gt;application.properties&lt;/code&gt;에 지정해 주어야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;properties&quot;&gt;&lt;pre class=&quot;language-properties&quot;&gt;&lt;code class=&quot;language-properties&quot;&gt;    spring.
        profiles.
&lt;span class=&quot;token attr-name&quot;&gt;            active&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token attr-value&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나누어진 profile을 적용하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;$ java -jar -Dspring.profiles.active={profile-name} [jar파일명]&lt;/code&gt;로 적용하고자하는 프로필을 지정하여 실행하거나 &lt;code class=&quot;language-text&quot;&gt;@ActiveProfile&lt;/code&gt; 어노테이션을 활용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;사용-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;사용 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용 예시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;본인은 프로젝트 진행 시 다음과 같이 local, prod, test로 환경을 나누었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;application-local.yml&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; jdbc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;mariadb&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;3306/pickgit&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;serverTimezone=UTC&lt;span class=&quot;token important&quot;&gt;&amp;amp;characterEncoding=UTF-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;***&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;***&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;show-sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;dialects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; org.hibernate.dialect.MySQL57Dialect
        &lt;span class=&quot;token key atrule&quot;&gt;format_sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;default_batch_fetch_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;generate-ddl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ddl-auto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application-prod.yml&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; jdbc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;mariadb&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;13306/pickgit&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;serverTimezone=UTC&lt;span class=&quot;token important&quot;&gt;&amp;amp;characterEncoding=UTF-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;***&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;***&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;driver-class-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; org.mariadb.jdbc.Driver
&lt;span class=&quot;token key atrule&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;show-sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;dialects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; org.hibernate.dialect.MySQL57InnoDBDialect
        &lt;span class=&quot;token key atrule&quot;&gt;format_sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;default_batch_fetch_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;generate-ddl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ddl-auto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; validate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application-test.yml&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; jdbc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;h2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;mem&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;~/test;MODE=MySQL;DB_CLOSE_DELAY=&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;1;DB_CLOSE_ON_EXIT=FALSE
    &lt;span class=&quot;token key atrule&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;**&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;show-sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;dialects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; org.hibernate.dialect.MySQL57Dialect
        &lt;span class=&quot;token key atrule&quot;&gt;format_sql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;default_batch_fetch_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;generate-ddl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ddl-auto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; create&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;drop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;spring.profiles.active:&lt;/code&gt; 로 기본 profile 환경을 세팅할 수 있다. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;spring.profiles.include:&lt;/code&gt; 로 포함할 다른 profile 설정을 지정할 수 있다. (주로 공통으로 적용될만한 보안 관련 profile, aws 관련 설정 등을 include로 포함한다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;profile-어노테이션으로-환경별-설정-다르게-하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#profile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-%ED%99%98%EA%B2%BD%EB%B3%84-%EC%84%A4%EC%A0%95-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;profile 어노테이션으로 환경별 설정 다르게 하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@Profile 어노테이션으로 환경별 설정 다르게 하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Profile&lt;/code&gt;을 사용하면 해당 어노테이션에서 지정한 환경으로 어플리케이션 실행 시 configuration을 설정할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Profile&lt;/code&gt; 어노테이션은 다음과 같이 3가지 방법으로 (더 있을 수도 있다) 사용할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;@Configuration 클래스 안에 method 위에&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InfrastructureConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;OAuthClient&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mockGithubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockGithubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;OAuthClient&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;githubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GithubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;OAuthClient 주입할 때 “test” profile 환경이면 &lt;code class=&quot;language-text&quot;&gt;MockGithubOAuthClient&lt;/code&gt;가 주입되고 “prod” profile 환경이면 &lt;code class=&quot;language-text&quot;&gt;GithubOAuthClient&lt;/code&gt;가 주입된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Configuration 클래스 안에 static class 위에&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InfrastructureConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;OAuthClient&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mockGithubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockGithubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;OAuthClient&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;githubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GithubOAuthClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;중첩 클래스로도 설정할 수 있다. 보기에 가독성이 좋은 것으로 선택하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터페이스를 구현하는 구현체 class 위에 설정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bean으로 등록되어 있는 클래스에 적용할 수 있다. (&lt;code class=&quot;language-text&quot;&gt;@Configuration&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@Component&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;OAuthClient 라는 인터페이스가 있을 때, 해당 인터페이스를 구현하는 구현체를 Profile에 따라 나누어서 적용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;!test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//profile이 테스트가 아닐 경우 적용된다. &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GithubOAuthClient&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//... 프로퍼티 생략&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLoginUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/login/oauth/authorize&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;?client_id=%s&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;redirect_uri=%s&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;scope=%s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            clientId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; redirectUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scope&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//... 세부 로직 생략 &lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//... 생략 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 로직은 Github OAuth관련 로직이므로 사용자 로그인 행위가 없는 테스트에서 실행하기 어렵기 때문에 아래와 같이 Profile이 “test”로 설정 되었을 경우 MockOAuthClient가 주입되도록 설정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//profile이 테스트가 아닐 경우 적용된다. &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockGithubOAuthClient&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//... 프로퍼티 생략&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLoginUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/login/oauth/authorize&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;?client_id=%s&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;redirect_uri=%s&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;scope=%s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            clientId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; redirectUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scope&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//... 생략 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;activeprofile-어노테이션으로-profile-설정-적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#activeprofile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-profile-%EC%84%A4%EC%A0%95-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;activeprofile 어노테이션으로 profile 설정 적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@ActiveProfile 어노테이션으로 profile 설정 적용하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이전에 말한대로 &lt;code class=&quot;language-text&quot;&gt;yml&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;properties&lt;/code&gt; 파일에 profile 설정을 나누고 &lt;code class=&quot;language-text&quot;&gt;application.properties&lt;/code&gt; 등의 파일에 profile 을 지정하거나 jar를 실행하면서 환경을 지정할 수 있다.&lt;/li&gt;
&lt;li&gt;하지만 어떤 profile 환경에서도 항상 특정 profile 환경으로 실행되어야 할 때가 있다. 예를 들어서 test 코드 같은 경우는 항상 test profile 환경으로 돌아가야한다.&lt;/li&gt;
&lt;li&gt;이때 해당 클래스 상단에 @ActiveProfile(“test”) 등으로 설정하면 해당 profile이 적용되어 실행된다.&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DataJpaTest&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthServiceIntegrationTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//...테스트 코드 생략 &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[출처]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wonwoo.ml/index.php/post/1933&quot;&gt;http://wonwoo.ml/index.php/post/1933&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-profiles&quot;&gt;https://www.baeldung.com/spring-profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://umanking.github.io/2019/04/13/spring-profile/&quot;&gt;https://umanking.github.io/2019/04/13/spring-profile/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#yml-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%82%98%EB%88%84%EA%B8%B0---%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C&quot;&gt;yml 파일로 설정 나누기 - 간단하게&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C&quot;&gt;사용 예시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#profile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-%ED%99%98%EA%B2%BD%EB%B3%84-%EC%84%A4%EC%A0%95-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%ED%95%98%EA%B8%B0&quot;&gt;@Profile 어노테이션으로 환경별 설정 다르게 하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#activeprofile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-profile-%EC%84%A4%EC%A0%95-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;@ActiveProfile 어노테이션으로 profile 설정 적용하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Springboot 언제 어떤 테스트를 사용할까]]></title><description><![CDATA[Intro 스프링부트 프로젝트를 진행하다보면 웹 mvc에 대한 테스트를 진행해야할 때가 있다. 때로는 각 layer에 대한 슬라이스 테스트를 작성하거나, 일부분에 대한 통합 테스트만을 진행할 때 Mock…]]></description><link>https://yjksw.github.io/spring-boot-test/</link><guid isPermaLink="false">https://yjksw.github.io/spring-boot-test/</guid><pubDate>Tue, 17 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스프링부트 프로젝트를 진행하다보면 웹 mvc에 대한 테스트를 진행해야할 때가 있다.&lt;/li&gt;
&lt;li&gt;때로는 각 layer에 대한 슬라이스 테스트를 작성하거나, 일부분에 대한 통합 테스트만을 진행할 때 Mock 테스트를 해야할 때도 있다.&lt;/li&gt;
&lt;li&gt;테스트 관련 annotation에 대해서 정리하고 각 annotation의 차이 및 언제 무엇을 사용하면 좋을지 정리해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;code-classlanguage-textspringboottestcode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textspringboottestcode&quot; aria-label=&quot;code classlanguage textspringboottestcode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt; 어노테이션은 &lt;code class=&quot;language-text&quot;&gt;@SpringBootApplication&lt;/code&gt; 을 찾아 해당 configuration에 맞추어 실제 Spring web context를 실행햔다.&lt;/li&gt;
&lt;li&gt;Spring context의 설정으로 그대로 적용해서 테스트를 진행해야 할 경우에 해당 어노테이션을 붙여서 테스트를 하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;하지만 전체 컨텍스트를 로드하는 만큼 굉장히 오랜 시간이 걸린다.&lt;/li&gt;
&lt;li&gt;실제로 &lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt; 어노테이션이 붙은 테스트를 돌려본다면 다음과 같은 스프링 컨텍스트르 로딩하는 긴 로그가 찍히는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//... 일부 생략
20:37:26.255 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}

  .   ____          _            __ _ _
 /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &apos;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.5.2)

//... 일부 생략 
 &gt; Running with Spring Boot v2.5.2, Spring v5.3.8
2021-08-16 20:37:26.559 DEBUG 4487 --- [           main] c.w.p.a.user.UserAcceptanceTest          : Running with Spring Boot v2.5.2, Spring v5.3.8
2021-08-16 20:37:26.560 INFO  main o.s.boot.SpringApplication.logStartupProfileInfo L:663 
 &gt; The following profiles are active: security,test
2021-08-16 20:37:26.560  INFO 4487 --- [           main] c.w.p.a.user.UserAcceptanceTest          : The following profiles are active: security,test
2021-08-16 20:37:27.252  INFO 4487 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-08-16 20:37:27.328  INFO 4487 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 70 ms. Found 4 JPA repository interfaces.
2021-08-16 20:37:28.062  INFO 4487 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 0 (http)
2021-08-16 20:37:28.068  INFO 4487 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2021-08-16 20:37:28.068  INFO 4487 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]
2021-08-16 20:37:28.115  INFO 4487 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2021-08-16 20:37:28.116  INFO 4487 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1379 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;code-classlanguage-textautoconfiguremockmvccode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textautoconfiguremockmvccode&quot; aria-label=&quot;code classlanguage textautoconfiguremockmvccode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위 어노테이션은 다음과 같이 &lt;code class=&quot;language-text&quot;&gt;MockMvc&lt;/code&gt;를 주입받아서 톰캣 서버를 띄우지 않은 상태로 API 요청 부분을 Mocking 해서 사용할 수 있다. 하지만 스프링 컨텍스트의 빈을 모두 로드하는 것은 &lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt; 와 동일하다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt;를 사용해서 테스트 코드를 실행해보면 위 &lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;를 사용했을때와 다르게 Tomcat을 시작하는 로그가 찍히지 않는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;테스트 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserControllerTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockMvc&lt;/span&gt; mockMvc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;사용자는 내 프로필을 조회할 수 있다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAuthenticatedUserProfile_LoginUser_Success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;UserProfileResponseDto&lt;/span&gt; responseDto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockLoginUserProfileResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// when&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ResultActions&lt;/span&gt; perform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mockMvc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/profiles/me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AUTHORIZATION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bearer testToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APPLICATION_JSON_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ALL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//...뒤 코드 생략&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;실행 시 로그&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//...일부 생략 
21:41:00.201 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}

  .   ____          _            __ _ _
 /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &apos;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.5.2)

//...일부 생략 
2021-08-16 21:41:03.332  INFO 4963 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet &apos;&apos;
2021-08-16 21:41:03.333  INFO 4963 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet &apos;&apos;
2021-08-16 21:41:03.334  INFO 4963 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
2021-08-16 21:41:03.349  INFO 4963 --- [           main] c.w.p.u.u.p.UserControllerTest           : Started UserControllerTest in 3.144 seconds (JVM running for 3.765)
2021-08-16 21:41:03.524  INFO 4963 --- [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &apos;default&apos;
2021-08-16 21:41:03.525  INFO 4963 --- [ionShutdownHook] .SchemaDropperImpl$DelayedDropActionImpl : HHH000477: Starting delayed evictData of schema as part of SessionFactory shut-down&apos;
2021-08-16 21:41:03.532  INFO 4963 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-08-16 21:41:03.537  INFO 4963 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;code-classlanguage-textwebmvctestcode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textwebmvctestcode&quot; aria-label=&quot;code classlanguage textwebmvctestcode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt;의 경우 &lt;code class=&quot;language-text&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt;와 비슷하게 서버가 모킹이 되지만 MVC와 관련된 빈들만 로드한다. 그렇기 때문에 MVC 관련 빈들만 사용한다면 위 어노테이션을 사용하는 것이 더 부화가 적다.&lt;/li&gt;
&lt;li&gt;해당 어노테이션 안에 특정 클래스를 지정하면 해당 클래스와 관련한 mvc 빈들이 올라가므로 더 효율적으로 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@AutoConfigureRestDocs&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@WebMvcTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserControllerTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockMvc&lt;/span&gt; mockMvc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;사용자는 내 프로필을 조회할 수 있다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAuthenticatedUserProfile_LoginUser_Success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// given&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;UserProfileResponseDto&lt;/span&gt; responseDto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockLoginUserProfileResponseDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// when&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ResultActions&lt;/span&gt; perform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mockMvc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/profiles/me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AUTHORIZATION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bearer testToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APPLICATION_JSON_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ALL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//...뒤 코드 생략&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위와 동일하게 Tomcat 관련 로그는 찍히지 않는다. 대신 &lt;code class=&quot;language-text&quot;&gt;SpringBootMockServletContext&lt;/code&gt;이 모킹된 서블릿을 초기화 하는 로그를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2021-08-16 23:46:28.495  INFO 5504 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet &apos;&apos;
2021-08-16 23:46:28.495  INFO 5504 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet &apos;&apos;
2021-08-16 23:46:28.496  INFO 5504 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;컨트롤러 슬라이스 테스트 8개에 대한 각 MockMvc 테스트를 비교했을 때, 미세하지만 &lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt;가 더 빠른 것을 확인할 수 있다. 더 많은 숫자의 테스트 일 때 그 차이는 더 커진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;스크린샷 2021-08-16 오후 11 48 46&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129583308-1e306f3c-0b51-4c97-8606-ee810a739289.png&quot;&gt;&lt;br&gt;@WebMvcTest 사용&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600&quot; alt=&quot;스크린샷 2021-08-16 오후 11 50 11&quot; src=&quot;https://user-images.githubusercontent.com/63405904/129583673-8bd736da-f88d-407f-a894-40f1e29a94fa.png&quot;&gt;&lt;br&gt;@AutoConfigureMockMvc 사용&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;code-classlanguage-textextendwithmockitoextensionclasscode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-classlanguage-textextendwithmockitoextensionclasscode&quot; aria-label=&quot;code classlanguage textextendwithmockitoextensionclasscode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@ExtendWith(MockitoExtension.class)&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@ExtendWith&lt;/code&gt;는 JUnit에서 제공하는 기능이다. (위 테스트 어노테이션은 SpringBoot에서 제공한다.)&lt;/li&gt;
&lt;li&gt;흔히 코드에서 &lt;code class=&quot;language-text&quot;&gt;@ExtendWith(MockitoExtension.class)&lt;/code&gt;으로 많이 사용하고 위의 모킹과 어떠한 부분이 다른지에 대해서 많이 헷갈려한다.&lt;/li&gt;
&lt;li&gt;위 모킹은 서블릿 컨테이너에 대한 모킹을 스프링 부트 에서 제공하는 것이다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@ExtendWith(MockitoExtension.class)&lt;/code&gt; 은 Mock이라는 가짜 객체를 지원하는 Mockito 테스트 프레임워크를 JUnit5와 연동하여 사용하도록 하는 것이다. (두 개의 테스트 프레임워크의 결합)&lt;/li&gt;
&lt;li&gt;주로 하나의 Layer의 단위테스트를 할 때 나머지 객체들을 모킹하도록 지원한다.&lt;/li&gt;
&lt;li&gt;즉, 서블릿 컨테이너와 상관없이 어느 한 객체에 대한 단위 테스트를 진행하면서 의존하고 있는 다른 객체의 행동을 stub하여 제어할 때 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[출처]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/testing-web/&quot;&gt;https://spring.io/guides/gs/testing-web/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://elevatingcodingclub.tistory.com/61&quot;&gt;https://elevatingcodingclub.tistory.com/61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meetup.toast.com/posts/124&quot;&gt;https://meetup.toast.com/posts/124&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-boot-testing&quot;&gt;https://www.baeldung.com/spring-boot-testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#extensions&quot;&gt;https://junit.org/junit5/docs/current/user-guide/#extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pinokio0702.tistory.com/143&quot;&gt;https://pinokio0702.tistory.com/143&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springboottest&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@SpringBootTest&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autoconfiguremockmvc&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webmvctest&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@WebMvcTest&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#extendwithmockitoextensionclass&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@ExtendWith(MockitoExtension.class)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[LazyInitializationException 란?]]></title><description><![CDATA[LazyInitialization 에러 발생 이유 Lazy Loading…]]></description><link>https://yjksw.github.io/jpa-lazyinitialization-exception/</link><guid isPermaLink="false">https://yjksw.github.io/jpa-lazyinitialization-exception/</guid><pubDate>Wed, 04 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;lazyinitialization-에러-발생-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lazyinitialization-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;lazyinitialization 에러 발생 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LazyInitialization 에러 발생 이유&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token class-name&quot;&gt;LazyInitializationException&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; could not initialize proxy &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; no session&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Lazy Loading을 하려고 하는데 세션이 사라져서 프록시 초기화가 불가능해 지연로딩을 못하는 경우에 발생하는 에러&lt;/li&gt;
&lt;li&gt;가장 단순한 방법으로는 &lt;code class=&quot;language-text&quot;&gt;FetchType&lt;/code&gt; 을 &lt;code class=&quot;language-text&quot;&gt;EAGER&lt;/code&gt;로 설정해서 일괄적으로 부모 호출시 자식이 모두 즉시로딩으로 초기화되도록 하면 되지만, 비니지스적인 이유가 아닌 &lt;code class=&quot;language-text&quot;&gt;LazyInitialization&lt;/code&gt;을 피하기 위해 &lt;code class=&quot;language-text&quot;&gt;EAGER&lt;/code&gt;로 설정하는 것은 좋지 않다.&lt;/li&gt;
&lt;li&gt;위 에러는 Lazy Loading을 하는 시점까지 session을 유지시켜주는 것이 핵심이며 주로 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt; 추가로 해당 문제는 해결된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;서비스-외부에서-lazyloading-collection-호출-시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-lazyloading-collection-%ED%98%B8%EC%B6%9C-%EC%8B%9C&quot; aria-label=&quot;서비스 외부에서 lazyloading collection 호출 시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서비스 외부에서 LazyLoading Collection 호출 시&lt;/h2&gt;
&lt;p&gt;서비스에서 LazyLoading을 하고 싶다면 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt; 을 붙여서 해결할 수 있지만 간혹 서비스 클래스 밖에서 지연로딩 지정되어 있는 컬렉션을 조회해야할 때가 있다. 그럴 때 &lt;code class=&quot;language-text&quot;&gt;LazyInitialization&lt;/code&gt; 에러를 피할 수 있는 방법은 두가지이다.&lt;/p&gt;
&lt;h3 id=&quot;1-code-classlanguage-texthibernateinitializecode를-사용해-서비스-내에서-조회&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-code-classlanguage-texthibernateinitializecode%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A1%B0%ED%9A%8C&quot; aria-label=&quot;1 code classlanguage texthibernateinitializecode를 사용해 서비스 내에서 조회 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. &lt;code class=&quot;language-text&quot;&gt;Hibernate.initialize()&lt;/code&gt;를 사용해 서비스 내에서 조회&lt;/h3&gt;
&lt;p&gt;만일 서비스가 아닌 다른 클래스 내에서 JPA 조회를 하고 싶다면 세션이 유지되지 않는다. (&lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt; 어노테이션을 붙이는 것이나, &lt;code class=&quot;language-text&quot;&gt;FetchType.EAGER&lt;/code&gt; 을 붙이는 것이 모두 부적합하거나 비효율적이다) &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이때는 해당 컬렉션을 조회하는 메서드를 서비스 내에 만들어 호출하여 사용하고, 해당 메서드 내에서 &lt;code class=&quot;language-text&quot;&gt;Hibernate.initialize(Entity)&lt;/code&gt; 를 사용해서 프록시가 즉시 초기화 되도록 하면 된다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;readOnly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getTaskListEager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; taskId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; taskList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tasksRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;taskId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTaskList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Hibernate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;taskList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; taskList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;주의할 점:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;Hibernate.initialize()&lt;/code&gt; 는 그 안에 중첩되어 있는 LazyCollection에 대해서는 가지고오지 못하므로 그것에 대한 &lt;code class=&quot;language-text&quot;&gt;Hibernate.initialize()&lt;/code&gt;는 따로 해줘야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-transactionmanager-사용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-transactionmanager-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;2 transactionmanager 사용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. TransactionManager 사용&lt;/h3&gt;
&lt;p&gt;어노테이션이 아니라 Spring에서 제공해주는 TransactionManager를 직접 사용해서 session을 직접 지정하도록 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PlatformTransactioinManager&lt;/span&gt; transactionManager&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getTaskListEager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; tasksId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;TransactionStatus&lt;/span&gt; transactionStatus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transactionManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; taskList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		taskList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tasksRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tasksId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTaskList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transactionManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transactionStatus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transactionManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transactionStatus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; taskList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thorben-janssen.com/lazyinitializationexception/&quot;&gt;https://thorben-janssen.com/lazyinitializationexception/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HomoEfficio/dev-tips/blob/master/Spring%20Data%20JPA%20-%20LazyInitialization%20%EC%97%90%EB%9F%AC%20-%20getOne().md&quot;&gt;https://github.com/HomoEfficio/dev-tips/blob/master/Spring Data JPA - LazyInitialization 에러 - getOne().md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#lazyinitialization-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0&quot;&gt;LazyInitialization 에러 발생 이유&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-lazyloading-collection-%ED%98%B8%EC%B6%9C-%EC%8B%9C&quot;&gt;서비스 외부에서 LazyLoading Collection 호출 시&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-hibernateinitialize%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A1%B0%ED%9A%8C&quot;&gt;1. &lt;code class=&quot;language-text&quot;&gt;Hibernate.initialize()&lt;/code&gt;를 사용해 서비스 내에서 조회&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-transactionmanager-%EC%82%AC%EC%9A%A9&quot;&gt;2. TransactionManager 사용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[CQS(Command Query Separation) 간단히 알아보기]]></title><description><![CDATA[Intro 함수는 시스템의 상태를 바꾸는지에 따라서 크게 두 가지로 나뉜다. 1) Command 2) Query. 이 두 가지 분류법에 대해서 하나의 함수가 두 가지 경우를 모두 담당하는 것은 좋지 않다. Command vs. Query Query…]]></description><link>https://yjksw.github.io/java-cqs/</link><guid isPermaLink="false">https://yjksw.github.io/java-cqs/</guid><pubDate>Sat, 17 Jul 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;p&gt;함수는 &lt;strong&gt;시스템의 상태를 바꾸는지&lt;/strong&gt;에 따라서 크게 두 가지로 나뉜다. 1) Command 2) Query. 이 두 가지 분류법에 대해서 하나의 함수가 두 가지 경우를 모두 담당하는 것은 좋지 않다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;command-vs-query&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#command-vs-query&quot; aria-label=&quot;command vs query permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Command vs. Query&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;주어진 쿼리에 대한 결과값을 반환하고 시스템의 상태를 변화시키지는 않는다.&lt;/p&gt;
&lt;p&gt;다른 값을 바꾸지 않고 오직 질문에만 대답한다.&lt;/p&gt;
&lt;p&gt;부작용에서 자유롭다. (read-only)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Command&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;값을 반환하지 않아도 시스템의 상태를 변화시킨다. (영구적)&lt;/p&gt;
&lt;p&gt;부작용이 생길 여기자 있다. (mutator, modifier)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 함수를 두 가지로 나누는 것은 유용하다. 현재 사용하는 함수가 상태를 바꾸지 않는 query 라면 신뢰를 가지고 사용할 수 있다. 하지만 상태를 바꾸는 command라면 함수간 순서에 주의를 기울이고 부작용이 생길 여지를 인지하고 있어야 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;cqs---command-query-separation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cqs---command-query-separation&quot; aria-label=&quot;cqs   command query separation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CQS - Command Query Separation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Betrand Meyer&lt;/strong&gt;&lt;/em&gt;라는 프랑스 학자는 하나의 함수가 command 이거나 query 이어야 한다고 주장한다. 이러한 프로그램 원칙을 CQS라고 하며 한 함수에서는 둘은 분명히 구분해야 한다고 말했다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;하지만 스택의 pop() 연산 같은 경우는 위 두가지를 모두 담당하기도 한다. 이러한 예외 상황은 융통성 있게 허용하는 것이 전반적으로 더 효율적일 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;위 개념은 현재 진행중인 프로젝트에서 다음과 같은 코드에 대한 크루의 코드리뷰로 접하게 되었다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt; newPost &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;updatedContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 경우 CQS를 준수하지 않은 것이므로 둘 중 하나를 담당하도록 구현로직을 바꾸고 필요하면 재조회하는 방향으로 리팩토링 했다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://shoark7.github.io/programming/knowledge/command-and-query-method&quot;&gt;https://shoark7.github.io/programming/knowledge/command-and-query-method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#command-vs-query&quot;&gt;Command vs. Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cqs---command-query-separation&quot;&gt;CQS - Command Query Separation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Transaction의 동시성 제어(Currency Control)]]></title><description><![CDATA[동시성 문제 발생 가능 상황 두개의 트랜잭션이 모두 읽는 연산을 하는 경우 문제가 되지 않는다. 하나의 트랜잭션은 read, 하나는 write인 경우 (Isolation으로 해결) Dirty Read 상황: 트랜잭션1이 write 할 때 트랜잭션…]]></description><link>https://yjksw.github.io/database-transaction-currency-control/</link><guid isPermaLink="false">https://yjksw.github.io/database-transaction-currency-control/</guid><pubDate>Thu, 01 Jul 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;동시성-문제-발생-가능-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D-%EA%B0%80%EB%8A%A5-%EC%83%81%ED%99%A9&quot; aria-label=&quot;동시성 문제 발생 가능 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동시성 문제 발생 가능 상황&lt;/h2&gt;
&lt;p&gt;두개의 트랜잭션이 모두 읽는 연산을 하는 경우 문제가 되지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 트랜잭션은 read, 하나는 write인 경우 (&lt;strong&gt;Isolation&lt;/strong&gt;으로 해결)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dirty Read&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상황&lt;/strong&gt;: 트랜잭션1이 write 할 때 트랜잭션2가 update된 데이터를 읽었지만 트랜잭션1이 rollback 되었을 때 발생 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;: 트랜잭션2가 무효된 데이터를 읽었음 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Non-repeatable Read&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상황&lt;/strong&gt;: 트랜잭션1이 데이터를 read하고, 트랜잭션2가 데이터를 write 한 후, 트랜잭션1이 다시 동일한 데이터를 read 할 경우에 발생 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;: 트랜잭션이 1이 동일한 read를 했음에도 불구하고 바뀐 데이터를 읽음 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Phantom Read&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상황&lt;/strong&gt;: 트랜잭션1이 데이터(범위)를 read하고, 트랜잭션 2가 데이터를 추가(insert) 했는데, 트랜잭션1이 다시 데이터를 read한 경우 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;: 동일한 read를 실행하였는데, 이전에 없었던 값이 추가됨 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;두개의 트랜잭션이 모두 wrtie인 경우 (&lt;strong&gt;Currency Control&lt;/strong&gt;로 해결)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lost Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상황&lt;/strong&gt;: 두개의 트랜잭션이 한 개의 데이터를 동시에 update 할 때 발생 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;: 하나의 트랜잭션의 내용을 다른 트랜잭션이 덮어씀으로 이전에 update 한 내용이 손실됨 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Inconsistency(or Unrecoverability)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상황&lt;/strong&gt;: 한 트랜잭션(T1)이 두개의 일관된 값을 읽어야하는데 다른 트랜잭션(T2)이 그 사이에 실행될 때 발생 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;이 두개의 값 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Y&lt;/code&gt;를 읽어 수정할 때, &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt;만 읽어서 수정한 상태에서 &lt;code class=&quot;language-text&quot;&gt;T2&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Y&lt;/code&gt;를 수정하고 이후에 &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;Y&lt;/code&gt;를 읽어 수정함. 이때 &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;의 입장에서 하나는 갱신 이전의 값, 또 하나는 갱신 이후의 값을 읽어서 데이터가 불일치한 모순이 일어남. &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cascading Rollback&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상황&lt;/strong&gt;: 한 트랜잭션(T1)이 두개의 값을 읽고 수정하는 사이에 다른 트랜잭션(T2)이 완료되었지만 T1이 rollback 되어야 할 때 발생&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;이 두개의 값 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Y&lt;/code&gt;를 읽어서 수정할 때, &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt;를 수정한 상태에서 &lt;code class=&quot;language-text&quot;&gt;T2&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt;를 수정하고 해당 트랜잭션을 완료함. 이후 &lt;code class=&quot;language-text&quot;&gt;T1&lt;/code&gt;에서 오류가 발생해 rollback이 되어야하는 상황에서 &lt;code class=&quot;language-text&quot;&gt;T2&lt;/code&gt;는 이미 완료되었으므로 &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt; 값에 대한 rollback이 되지 못하여 문제가 발생함. &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;트랜잭션-스케줄&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%8A%A4%EC%BC%80%EC%A4%84&quot; aria-label=&quot;트랜잭션 스케줄 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 스케줄&lt;/h2&gt;
&lt;p&gt;위 문제를 해결하기 위해서 트랜잭션 스케줄을 통해 연산들의 실행 순서를 제어하여 데이터에 오류가 없도록 해야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Serial Schedule 직렬 스케줄&lt;/p&gt;
&lt;p&gt;모든 트랜잭션이 순차적으로 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nonsercial Schedule 비직렬 스케줄&lt;/p&gt;
&lt;p&gt;트랜잭션이 상관없이 병행하여 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Serializable Schedule 직렬 가능 스케줄&lt;/p&gt;
&lt;p&gt;서로 영향을 주지 않는 스케줄의 경우 병행 실행하고, 나머지는 실행 순서를 제어하여 실행&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;직렬 스케줄의 경우 오류가 생기지 않도록 보장할 수는 있지만, 효율이 떨어진다는 단점이 있다. 따라서 트랜잭션을 최대한 직렬 가능한 스케줄로 만드는 것이 중요하고 &lt;strong&gt;Locking&lt;/strong&gt; 기법을 통해서 트랜잭션 실행 순서를 제어해 직렬 가능한 스케줄로 만들어 데이터에 생길 수 있는 오류를 제어한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;예를 들어, 두개의 트랜잭션이 모두 READ 연산을 한다면 연산 순서가 중요하지 않으므로 병행 실행한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;또 두개의 트랜잭션이 다른 데이터에 접근한다면 연산 순서가 중요하지 않으므로 병행 실행한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;만일 한 데이터에 대해서 읽고 쓰는 작업이 한꺼번에 발생한다면 실행순서가 중요하므로 Lock을 통해서 그 순서를 제어한다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;locking-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#locking-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;locking 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Locking 기법&lt;/h2&gt;
&lt;p&gt;여러 트랜잭션이 동일한 데이터에 대해서 병행 접근을 하지 못하도록 제어해서 데이터간 문제가 발생하지 않도록 하는 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shared-lock 공유락&lt;/p&gt;
&lt;p&gt;읽기를 할 때 거는 lock &lt;br&gt;&lt;/p&gt;
&lt;p&gt;read 트랜잭션은 서로 영향을 주지 않으므로 shared-lock이 걸린 상태에서 추가 shared-lock을 걸 수 있음 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;read 트랜잭션 중 쓰기가 발생할 경우 데이터가 손상되어 문제가 발생하므로 추가 exclusive-lock은 걸 수 없음 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exclusive-lock 베타락&lt;/p&gt;
&lt;p&gt;읽고 쓰기를 할 때 거는 lock &lt;br&gt;&lt;/p&gt;
&lt;p&gt;write 트랜잭션은 읽거나 쓰는 트랜잭션 모두에게 영향을 주기 때문에 exclusive-lock이 걸린 상태에서는 다른 lock을 걸 수 없음 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2단계-로킹-규약-2plp&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2%EB%8B%A8%EA%B3%84-%EB%A1%9C%ED%82%B9-%EA%B7%9C%EC%95%BD-2plp&quot; aria-label=&quot;2단계 로킹 규약 2plp permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2단계 로킹 규약 2PLP&lt;/h3&gt;
&lt;p&gt;lock을 걸고 해제할 때 제한을 두어서 두 트랜잭션이 동시 실행되면서 생기는 데이터 일관성이 깨지는 현상을 방지하는 것이다. 로킹 단계를 2가지로 구분 지어서, 각 단계에 다른 제한을 두어 트랜잭션 동시 실행으로 발생할만한 데이터 오류를 방지한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Growing Phase 확장 단계&lt;/p&gt;
&lt;p&gt;해당 트랜잭션이 새로운 Lock 연산은 가능하나 unlock 연산을 가능하지 않은 상태&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shrinking Phase 축소 단계&lt;/p&gt;
&lt;p&gt;해당 트랜잭션이 unlock 연산만 가능하고 lock 연산은 가능하지 않은 상태&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 2PLP을 준수하므로 &lt;strong&gt;deadlock&lt;/strong&gt;이 발생할 여지가 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;→ 2단계 로킹 규약을 적용하지 않아서 데이터의 일관성이 깨진 경우 &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135496848-c9c42362-63c5-493f-a2e9-fcd05f5cf6c6.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;→ 2단계 로킹 기법을 사용하여 일관성 문제 해결한 경우 &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135496984-e425dd70-3f11-4718-a42e-28513c3452bb.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;deadlock-데드락-교착상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#deadlock-%EB%8D%B0%EB%93%9C%EB%9D%BD-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C&quot; aria-label=&quot;deadlock 데드락 교착상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deadlock 데드락 (교착상태)&lt;/h3&gt;
&lt;p&gt;두개의 트랜잭션이 각자의 데이터에 lock을 걸어놓고 상대의 데이터에 요청을 하므로 무한 대기 상태에 빠지게 되는 문제&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;트랜잭션-isolation-level&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-isolation-level&quot; aria-label=&quot;트랜잭션 isolation level permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 Isolation Level&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;READ UNCOMMITTED (LEVEL 0)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터를 읽을 때 shared-lock을 걸지 않고, write 작업 시 exclusive-lock만 거는 것(갱신손실문제 방지) &lt;br&gt;&lt;/p&gt;
&lt;p&gt;다른 트랜잭션에 shared-lock/exclusive-lock이 걸렸더라도 데이터를 대기하지 않고 읽는 것&lt;br&gt;&lt;/p&gt;
&lt;p&gt;따라서 Dirty read, non-repeatable read, phantom read 모두 방지할 수 없다.&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;READ COMMITED (LEVEL 1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터를 읽을 때 shared-lock을 걸지만, 트랜잭션이 끝나기 전에도 unlock 가능&lt;br&gt;&lt;/p&gt;
&lt;p&gt;다른 트랜잭션에 shared-lock이 걸렸다면 데이터를 읽지만, exclusive-lock이 걸린 경우에는 읽지 못함&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Dirty read 방지 가능, non-repeatable read, phantom read 방지 불가능&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REPEATABLE READ (LEVEL 2)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;본 데이터에 설정된 shared-lock과 exclusive-lock을 트랜잭션 종료시까지 유지&lt;br&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션이 완료될 때까지 SELECT문이 사용하는 모든 데이터에 대해서 shared-lock이 걸린다. 따라서 update가 불가능하지만, insert에 대해서는 다른 제약이 없다.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;다른 트랜잭션이 공유한 공유락은 읽고, 배타락은 읽지 않음&lt;br&gt;&lt;/p&gt;
&lt;p&gt;다른 isolation level에 비해서 동시성이 낮아 잘 사용하지 않는 것을 추천&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Dirty read, non-repeatable read 방지, phantom read 방지 불가능&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SERIALIZABLE (LEVEL 3)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터의 집합 범위에 잠금을 설정함&lt;br&gt;&lt;/p&gt;
&lt;p&gt;다른 사용자가 데이터를 update 혹은 insert 할 때 모두 트랜잭션을 격리함&lt;br&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션이 완료될 때까지 SELECT문이 사용하는 모든 데이터에 대해서 shared-lock이 걸린다.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;인덱스에 공유락을 설정&lt;/strong&gt;한다. 따라서 다른 트랜잭션의 insert가 불가능&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Dirty read, non-repeatable read, phantom read 방지 &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/30&quot;&gt;https://mangkyu.tistory.com/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/pocs/%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4-%EA%B8%B0%EB%B2%95-%EC%9E%A0%EA%B8%88-locking-%EA%B8%B0%EB%B2%95-319bd0e6a68a&quot;&gt;https://medium.com/pocs/동시성-제어-기법-잠금-locking-기법-319bd0e6a68a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://goodmilktea.tistory.com/62&quot;&gt;https://goodmilktea.tistory.com/62&lt;/a&gt;## 동시성 문제 발생 가능 상황&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D-%EA%B0%80%EB%8A%A5-%EC%83%81%ED%99%A9&quot;&gt;동시성 문제 발생 가능 상황&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%8A%A4%EC%BC%80%EC%A4%84&quot;&gt;트랜잭션 스케줄&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#locking-%EA%B8%B0%EB%B2%95&quot;&gt;Locking 기법&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2%EB%8B%A8%EA%B3%84-%EB%A1%9C%ED%82%B9-%EA%B7%9C%EC%95%BD-2plp&quot;&gt;2단계 로킹 규약 2PLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deadlock-%EB%8D%B0%EB%93%9C%EB%9D%BD-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C&quot;&gt;Deadlock 데드락 (교착상태)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-isolation-level&quot;&gt;트랜잭션 Isolation Level&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[클래식한 스프링 웹 어플리케이션 구조]]></title><description><![CDATA[다음 글은 [링크](Understanding Spring Web Application Architecture: The Classic Way)에 기술되어 있는 스프링 웹 어플리케이션 구조에 대한 글을 번역 한 내용이다. 좋은 architecture…]]></description><link>https://yjksw.github.io/spring-spring-web-application-architecture/</link><guid isPermaLink="false">https://yjksw.github.io/spring-spring-web-application-architecture/</guid><pubDate>Sat, 26 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;다음 글은 [링크](Understanding Spring Web Application Architecture: The Classic Way)에 기술되어 있는 스프링 웹 어플리케이션 구조에 대한 글을 번역 한 내용이다.&lt;/p&gt;
&lt;h2 id=&quot;좋은-architecture를-위한-두-기둥&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A2%8B%EC%9D%80-architecture%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%91%90-%EA%B8%B0%EB%91%A5&quot; aria-label=&quot;좋은 architecture를 위한 두 기둥 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;좋은 architecture를 위한 두 기둥&lt;/h2&gt;
&lt;h3 id=&quot;the-socseparation-of-concerns-원칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-socseparation-of-concerns-%EC%9B%90%EC%B9%99&quot; aria-label=&quot;the socseparation of concerns 원칙 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The SoC(Separation of Concerns) 원칙&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A design principle for separating a computer program into distinct sections, which each section addresses a separate concern. &lt;br&gt; &lt;a href=&quot;%5Bhttps://en.wikipedia.org/wiki/Separation_of_concerns%5D(https://en.wikipedia.org/wiki/Separation_of_concerns)&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SoC에서 신경써야 할 부분은 두가지이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;고려해야 할 &lt;strong&gt;concerns&lt;/strong&gt;가 무엇인지&lt;/li&gt;
&lt;li&gt;어디서 해당 &lt;strong&gt;concern&lt;/strong&gt;을 다루고 싶은지&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SoC를 준수하게 된다면 각각의 layer와 해당 layer의 책임에 대해서 자연스럽게 정의할 수 있도록 도와준다.&lt;/p&gt;
&lt;h3 id=&quot;the-kisskeep-it-simple-stupid-원칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-kisskeep-it-simple-stupid-%EC%9B%90%EC%B9%99&quot; aria-label=&quot;the kisskeep it simple stupid 원칙 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The KISS(Keep It Simple Stupid) 원칙&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Most systems work best if they are kept simple rather than made complicated; therefore simplicity should be a key goal in design and unnecessary complexity should be avoided. &lt;br&gt; &lt;a href=&quot;%5Bhttp://en.wikipedia.org/wiki/KISS_principle%5D(http://en.wikipedia.org/wiki/KISS_principle)&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 원칙은 각 레이어는 그만큼의 비용이 들고 복잡한 구조를 가진 어플리케이션은 그만큼의 높은 비용을 감수해야 한다는 것을 상기시켜준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로운 feature를 추가하는 경우 해당 정보를 여러 layer에 모두 전달해야 하기 때문에 과정이 오래 걸림&lt;/li&gt;
&lt;li&gt;지나치게 복잡한 구조를 가지고 있기 때문에 아무도 제대로 이해하고 있지 않아서 해당 어플리케이션의 유지보수가 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-layers가-가장-적당하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-layers%EA%B0%80-%EA%B0%80%EC%9E%A5-%EC%A0%81%EB%8B%B9%ED%95%98%EB%8B%A4&quot; aria-label=&quot;3 layers가 가장 적당하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3 Layers가 가장 적당하다&lt;/h2&gt;
&lt;p&gt;웹 어플리케이션의 책임을 고려했을때 웹 어플리케이션 전체적으로 다음과 같은 concerns가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 입력을 받아서 적당한 응답을 반환&lt;/li&gt;
&lt;li&gt;예외 처리를 하여 예외 상황시 적절한 에외 메세지를 반환&lt;/li&gt;
&lt;li&gt;트랜잭션 관리 전략을 가짐&lt;/li&gt;
&lt;li&gt;인가와 인증을 처리함&lt;/li&gt;
&lt;li&gt;어플리케이션의 비지니스 로직을 작성&lt;/li&gt;
&lt;li&gt;사용되는 데이터 저장소와 외부 리소스와의 커뮤니케이션 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 역할을 감당하기 위해서 다음 3가지 layer로 충분하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Web Layer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;웹 어플리케이션의 최상단에 있는 layer이다. 사용자의 입력을 받아서 적정한 응답을 반환하는 역할을 맡는다. 이 레이어에서는 다른 레이어에서 발생한 예외들에 대한 핸들링을 처리해야한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;현재 레이어는 해당 어플리케이션의 입구이기 때문에 인증 및 인가를 담당하여 허가되지 않은 사용자에 대한 1차 방어를 해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Service Layer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;웹 레이어 다음에 위치한 레이어이다. 이 레이어는 트랜잭션 단위를 구분하고, application과 infrastructure 서비스를 모두 포함한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;여기서 &lt;strong&gt;application services&lt;/strong&gt;는 서비스 레이어의 &lt;strong&gt;public API&lt;/strong&gt;를 제공한다. 이 뜻은, 어플리케이션 서비스에서 처리하고하고자 하는 일들이 서비스 레이어의 &lt;code class=&quot;language-text&quot;&gt;public&lt;/code&gt; 메소드에서 처리된다는 것이다. 이 메소드 별로 트랜잭션 단위가 나뉘어지고 인증 및 인가 작업도 여기서 담당한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;서비스 레이어에서 &lt;strong&gt;infrastructure services&lt;/strong&gt;는 파일 시스템, 데이터베이스, 이메일 서버 등등의 외부 리소스와 커뮤니케이션하기 때문에 “plumbing code” (배관 코드)라고 불리기도 한다. 이 메소드들은 하나 이상의 어플리케이션 서비스 코드에서 주로 활용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Repository Layer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;웹 어플리케이션의 최하위에 위치해있는 레이어이다. 데이터 저장소와의 연결을 담당한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;특정 레이어에 속한 컴포넌트는 동일 레이어, 혹은 더 하위 레이어의 컴포넌트를 활용할 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135494819-559541d9-1b75-4f2b-a5fe-f03519508483.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;layer-나누어-설계하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#layer-%EB%82%98%EB%88%84%EC%96%B4-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;layer 나누어 설계하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layer 나누어 설계하기&lt;/h2&gt;
&lt;p&gt;이제는 각 레이어에 대한 인터페이스를 설계해야하는데, 여기서 DTO(Domain Transfer Object)와 domain model이라는 키워드가 등장한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DTO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;단순한 데이터를 담는 객체로 각기 다른 프로세스와 어플리케이션의 레이어간 데이터 전달 때 사용되는 객체이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Domain Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;도메인 모델에는 3가지 다른 역할의 객체들이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Domain Service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;도메인과 관련된 operation 이지만 enity나 VO의 일부는 아닌 상태가 없는(stateless) 클래스&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Entity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;전체 라이프 사이클 동안 바뀌지 않고 그 indentity 자체로 정의되는 객체 &lt;strong&gt;(?????)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Value Object&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어떤 것의 속성을 나타내고, 그 자체로의 identity나 lifecycle이 없는 객체이다. 주로 VO의 life cycle은 entity의 lifecycle에 종속되어 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 레이어의 인터페이스에는 다음 것들이 포함되어 있어야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web layer는 DTO만을 다루어야 한다.&lt;/li&gt;
&lt;li&gt;service layer는 DTO를 메소드 인자로 받고 도메인 모델을 핸들링 할 수는 있지만 DTO만을 web layer에 다시 반환해야 한다.&lt;/li&gt;
&lt;li&gt;repository layer는 entity를 메소드 인자로 받고 entity를 반환해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그렇다면 왜 VO가 아닌 DTO로 레이어간 소통을 해야하는지 궁금할 수 있다. 다음 두가지 이유로 VO를 직접 사용하는 것은 좋지 않다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;도메인 모델은 어플리케이션 내부 모델이다. 따라서 도메인 모델을 외부로 노출한다면 클라이언트는 해당 도메인 모델을 어떻게 다루어야하는지 인지해야한다. 하지만, 클라이언트는 해당 로직에 대해서 알 필요가 없다. 만일 DTO를 사용한다면 도메인 모델을 클라이언트에게 숨기고, 깔끔하고 쉬운 API를 제공할 수 있다.&lt;/li&gt;
&lt;li&gt;도메인 모델을 외부에 노출한다면 도메인 모델을 수정할 때 해당 도메인 모델이 의존하는 것들을 함께 수정해야한다. 하지만 만일 DTO를 사용한다면도메인 모델을 수정하더라도 다른 것(other stuff)들이 DTO와 연결되어 있기 때문에 다른 것들을 수정하지 않아도 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135494900-92d34444-4d4a-4312-af6a-a0d45bf62f75.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.petrikainulainen.net/software-development/design/understanding-spring-web-application-architecture-the-classic-way/&quot;&gt;https://www.petrikainulainen.net/software-development/design/understanding-spring-web-application-architecture-the-classic-way/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A2%8B%EC%9D%80-architecture%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%91%90-%EA%B8%B0%EB%91%A5&quot;&gt;좋은 architecture를 위한 두 기둥&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-socseparation-of-concerns-%EC%9B%90%EC%B9%99&quot;&gt;The SoC(Separation of Concerns) 원칙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-kisskeep-it-simple-stupid-%EC%9B%90%EC%B9%99&quot;&gt;The KISS(Keep It Simple Stupid) 원칙&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-layers%EA%B0%80-%EA%B0%80%EC%9E%A5-%EC%A0%81%EB%8B%B9%ED%95%98%EB%8B%A4&quot;&gt;3 Layers가 가장 적당하다&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#layer-%EB%82%98%EB%88%84%EC%96%B4-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0&quot;&gt;Layer 나누어 설계하기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[HandlerMethodArgumentResolver 내부동작 원리 알아보기]]></title><description><![CDATA[INTRO 는 Spring framework에서 제공하는 인터페이스로 request에서 메소드의 parameters를 해당하는 인자값으로 변환 혹은 바인딩 하는 resolver…]]></description><link>https://yjksw.github.io/handler-method-argument-resolver/</link><guid isPermaLink="false">https://yjksw.github.io/handler-method-argument-resolver/</guid><pubDate>Fri, 25 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;INTRO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HandlerMethodArgumentResolver&lt;/code&gt;는 Spring framework에서 제공하는 인터페이스로 request에서 메소드의 parameters를 해당하는 인자값으로 변환 혹은 바인딩 하는 resolver이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;인터페이스-내용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%82%B4%EC%9A%A9&quot; aria-label=&quot;인터페이스 내용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 내용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HandelrMethodArgumentResolver&lt;/code&gt;에는 두가지 메소드가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;supportsParameter()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;resolveArgument()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;첫번째-parameter가-해당-resolver를-지원하는-여부-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B2%AB%EB%B2%88%EC%A7%B8-parameter%EA%B0%80-%ED%95%B4%EB%8B%B9-resolver%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;첫번째 parameter가 해당 resolver를 지원하는 여부 확인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫번째, Parameter가 해당 resolver를 지원하는 여부 확인&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token function&quot;&gt;supportsParameter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MethodParameter&lt;/span&gt; parameter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[참고]&lt;/strong&gt; 아래 설명은 &lt;code class=&quot;language-text&quot;&gt;@RequestBody&lt;/code&gt;가 붙은 인자의 경우를 보는 것이므로 그 구현체가 &lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcess.java&lt;/code&gt;의 예시로 설명한 것이다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parameter가 있는 수만큼 &lt;code class=&quot;language-text&quot;&gt;InvocableHanderMethod#InvokeForRequest()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;getMethodArgumentValues()&lt;/code&gt; 안에서 for문을 돌면서 해당 parameter에 대한 argument resolve를 한다. 이때 resolve를 하기 위해서 현재 클래스가 가지고 있는 &lt;code class=&quot;language-text&quot;&gt;resolvers&lt;/code&gt; 가 해당 parameter 지원 하는지 여부를 확인한다.&lt;/li&gt;
&lt;li&gt;→ 확인하는 로직은 &lt;code class=&quot;language-text&quot;&gt;HandlerMethodArgumentResolverComposite&lt;/code&gt; 안에 있는 resolver들의 배열을 돌면서(한번 찾으면 캐싱함) 해당 parameter를 지원하는 resolver를 찾아서 반환하고, null인지 여부를 체크해 boolean을 반환한다. 이때 &lt;code class=&quot;language-text&quot;&gt;supportsParameter()&lt;/code&gt; 메소드가 수행된다.&lt;/li&gt;
&lt;li&gt;→ 다시 &lt;code class=&quot;language-text&quot;&gt;InvocableHanderMethod#InvokeForRequest()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;getMethodArgumentValues()&lt;/code&gt; 의 반복문 안에서  &lt;code class=&quot;language-text&quot;&gt;HandlerMethodArgumentResolver#resolveArgument()&lt;/code&gt; 가 실행이 되면서(어노테이션에 따라서 구현체가 각기 따로 있음 ex. &lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcess&lt;/code&gt; 등등) controller 메서드에서 사용되는 인자를 배열에 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;두번째-해당-parameter를-argument-value로-변환-및-바인딩&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%95%B4%EB%8B%B9-parameter%EB%A5%BC-argument-value%EB%A1%9C-%EB%B3%80%ED%99%98-%EB%B0%8F-%EB%B0%94%EC%9D%B8%EB%94%A9&quot; aria-label=&quot;두번째 해당 parameter를 argument value로 변환 및 바인딩 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;두번째, 해당 parameter를 argument value로 변환 및 바인딩&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token function&quot;&gt;resolveArgument&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MethodParameter&lt;/span&gt; parameter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ModelAndViewContainer&lt;/span&gt; mavContainer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NativeWebRequest&lt;/span&gt; webRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebDataBinderFactory&lt;/span&gt; binderFactory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Method parameter를 argument value로 변환 및 바인딩 하는 역할을 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ModelAndViewContainer&lt;/code&gt; 는 request의 model에 접근할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WebDataBinderFactory&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;WebDataBinder&lt;/code&gt; 인스턴스를 추출해 데이터 바인딩이나 타입 변환을 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;성공 시 argument value를 리턴하고, 없다면 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;을 리턴한다.&lt;/p&gt;
&lt;p&gt;만일 &lt;code class=&quot;language-text&quot;&gt;@Valid&lt;/code&gt; 어노테이션이 해당 인자에 붙어있다면 해당하는 validation도 이 메소드에서 처리한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;custom-resolver-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#custom-resolver-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;custom resolver 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Resolver 구현&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HandlerMethodArgumentResolver&lt;/code&gt; 인터페이스를 구현하는 custom resovler 클래스를 구현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@Override&lt;/code&gt; 한 &lt;code class=&quot;language-text&quot;&gt;supportParameter()&lt;/code&gt; 메소드에서 원하는 타입의 인자인 경우 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;를 반환하도록 구현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@Override&lt;/code&gt;한 &lt;code class=&quot;language-text&quot;&gt;resolveArgument()&lt;/code&gt;에서 controller의 메서드 인자로 보면 값을 반환하도록 구현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WebMvcConfiguration&lt;/code&gt; 를 구현하는 클래스의 &lt;code class=&quot;language-text&quot;&gt;addArgumentResolver()&lt;/code&gt;라는 메소드를 override하여 위 구현한 custom resolver를 추가해준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html&quot;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://enai.tistory.com/31&quot;&gt;https://enai.tistory.com/31&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[유용링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스프링에서 요청을 처리하는 과정
&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=duco777&amp;#x26;logNo=220605479481&amp;#x26;proxyReferer=https:%2F%2Fwww.google.com%2F&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=duco777&amp;#x26;logNo=220605479481&amp;#x26;proxyReferer=https:%2F%2Fwww.google.com%2F&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;INTRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%82%B4%EC%9A%A9&quot;&gt;인터페이스 내용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B2%AB%EB%B2%88%EC%A7%B8-parameter%EA%B0%80-%ED%95%B4%EB%8B%B9-resolver%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%97%AC%EB%B6%80-%ED%99%95%EC%9D%B8&quot;&gt;첫번째, Parameter가 해당 resolver를 지원하는 여부 확인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%95%B4%EB%8B%B9-parameter%EB%A5%BC-argument-value%EB%A1%9C-%EB%B3%80%ED%99%98-%EB%B0%8F-%EB%B0%94%EC%9D%B8%EB%94%A9&quot;&gt;두번째, 해당 parameter를 argument value로 변환 및 바인딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#custom-resolver-%EA%B5%AC%ED%98%84&quot;&gt;Custom Resolver 구현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[초간단 Interceptor 알아보기]]></title><description><![CDATA[개요 Handler interceptors는 어떤 요청들에 대한 특정 기능을 적용하고 싶을 때 사용이 되는데, 특히 어떤 조건 및 원칙들을 검증하는데 많이 사용된다. Interceptor 구성 Interceptor…]]></description><link>https://yjksw.github.io/spring-interceptor/</link><guid isPermaLink="false">https://yjksw.github.io/spring-interceptor/</guid><pubDate>Wed, 23 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개요&lt;/h2&gt;
&lt;p&gt;Handler interceptors는 어떤 요청들에 대한 특정 기능을 적용하고 싶을 때 사용이 되는데, 특히 어떤 조건 및 원칙들을 검증하는데 많이 사용된다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;interceptor-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#interceptor-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;interceptor 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interceptor 구성&lt;/h2&gt;
&lt;p&gt;Interceptor를 구현하기 위해서는 HandlerInterceptor를 구현해야 한다. 해당 인터페이스에는 interceptor가 실행되는 3가지 경우에 대한 메소드가 정의되어 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;handler가 실행되기 이전&lt;/li&gt;
&lt;li&gt;handler가 실행된 이후&lt;/li&gt;
&lt;li&gt;전체 요청 처리가 모두 수행된 이후&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것들 중 handler 실행 이전에 수행되는 메소드인 &lt;code class=&quot;language-text&quot;&gt;preHandle()&lt;/code&gt; 은 boolean 값을 반환한다. &lt;code class=&quot;language-text&quot;&gt;postHandle()&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;afterCompletion()&lt;/code&gt;은 void를 반환한다.&lt;/p&gt;
&lt;p&gt;위 세가지 메소드 모두 공통된 인자로 Servlet에 의해서 생성된 &lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;HttpServletResponse&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;(Object 타입)을 받는다. 따라서 void 반환타입인 경우 HttpServletResponse에 후처리를 할 수 있다. (&lt;code class=&quot;language-text&quot;&gt;postHandle()&lt;/code&gt;의 경우에는 &lt;code class=&quot;language-text&quot;&gt;ModelAndView&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;afterCompletion()&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;Exception&lt;/code&gt;을 &lt;code class=&quot;language-text&quot;&gt;@Nullable&lt;/code&gt; 속성으로 받는다)&lt;/p&gt;
&lt;h3 id=&quot;prehandle-동작원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prehandle-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;prehandle 동작원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;preHandle() 동작원리&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;interceptors&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;를 execution chain으로 실행한다. (마지막에 handler가 실행이 되는 형태)&lt;/p&gt;
&lt;p&gt;이 &lt;code class=&quot;language-text&quot;&gt;preHandle()&lt;/code&gt; 메소드를 통해서 이 execution chain 중단 여부를 결정할 수 있다. 만일 체이닝 되어 있는 interceptor가 true를 반환한다면 그 다음 interceptor 혹은 handler를 실행한다. 만일 false를 반환한다면 체이닝 된 interceptor 혹은 handler 실행을 멈추고 &lt;strong&gt;DispatcherServlet은 해당 interceptor가 알아서 response에 필요한 처리를 했다고 간주한다.&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/3.0.x/reference/mvc.html#mvc-handlermapping-interceptor&quot;&gt;https://docs.spring.io/spring-framework/docs/3.0.x/reference/mvc.html#mvc-handlermapping-interceptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%9C%EC%9A%94&quot;&gt;개요&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#interceptor-%EA%B5%AC%EC%84%B1&quot;&gt;Interceptor 구성&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#prehandle-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot;&gt;preHandle() 동작원리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대칭키와 비대칭키 비교하기]]></title><description><![CDATA[Intro 암호화(encryption)에는 3가지 기술이 있다. Symmetric encryption - 대칭키 Asymmestric encryption - 비대칭키 Hash functions(keyless…]]></description><link>https://yjksw.github.io/symmetric-vs-asymmetric-encryption/</link><guid isPermaLink="false">https://yjksw.github.io/symmetric-vs-asymmetric-encryption/</guid><pubDate>Mon, 21 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;intro&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#intro&quot; aria-label=&quot;intro permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;p&gt;암호화(encryption)에는 3가지 기술이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Symmetric encryption - 대칭키&lt;/li&gt;
&lt;li&gt;Asymmestric encryption - 비대칭키&lt;/li&gt;
&lt;li&gt;Hash functions(keyless) - 해싱&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서는 대칭키, 비대칭키에 대해서만 다룰 것인데 둘다 각각의 장단점이 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;대칭키와 비대칭키의 간단한 차이점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선 모두 key를 사용해서 데이터를 encrypt/decrypt 한다.&lt;/li&gt;
&lt;li&gt;대칭키의 경우 동일한 key를 가지고 암호화/복호화를 하기 때문에 사용하기가 쉽다.&lt;/li&gt;
&lt;li&gt;비대칭키의 경우 public key를 사용해서 데이터를 암호화하고, private key를 사용해서 복호화한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;symmetric-encryption-대칭키&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#symmetric-encryption-%EB%8C%80%EC%B9%AD%ED%82%A4&quot; aria-label=&quot;symmetric encryption 대칭키 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Symmetric encryption 대칭키?&lt;/h2&gt;
&lt;p&gt;대칭키를 사용하면 데이터의 암호화/복호화 모두 하나의 key를 사용한다. 그리고 해당 키를 수령인과 공유한다. (수령인이 암호화된 데이터를 받았을 때 복호화를 위해서 필요) &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135317204-d0bcfee1-fc3a-4fc8-ab1a-dc3e644d772c.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;대칭키-장단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;대칭키 장단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대칭키 장단점&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;세팅이 쉽고 간단하다. (jiffy 순간적으로 처리된다)&lt;/li&gt;
&lt;li&gt;개념이 간단하기 때문에 여러 환경에서 거의 모두 적용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비밀키가 수령인과 공유되어야 한다.&lt;/li&gt;
&lt;li&gt;따라서 보안적 측면에서 다소 위험한 부분이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;asymmetric-encryption-비대칭키&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#asymmetric-encryption-%EB%B9%84%EB%8C%80%EC%B9%AD%ED%82%A4&quot; aria-label=&quot;asymmetric encryption 비대칭키 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asymmetric encryption 비대칭키?&lt;/h2&gt;
&lt;p&gt;비대칭키 방식은 데이터를 암호화/복호화 하는데 두개의 key가 필요하다. public key를 사용해서 데이터를 암호화하고, private key를 통해서 데이터를 복호화한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;암호화된 데이터를 수령하는 수령인은 반드시 private key를 가지고 있어야 하는데, 그것을 private하게 유지하기 위해서 local 하게 저장하는 것이 가장 좋다.&lt;/p&gt;
&lt;h3 id=&quot;비대칭키-장단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;비대칭키 장단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비대칭키 장단점&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비밀키를 공유하지 않아도 된다.&lt;/li&gt;
&lt;li&gt;digital sigining을 지원하기 때문에 수령인의 identity를 보장할 수 있고, 메세지의 오염여부를 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간과 이외의 다른 많은 노력들이 소요된다.&lt;/li&gt;
&lt;li&gt;이메일이나 데이터를 보낼 때, 상대방이 key pair를 생성했는지 항상 확인해야한다.&lt;/li&gt;
&lt;li&gt;만일 key을 잃어버리면 복구할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;언제-무엇을-사용할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;언제 무엇을 사용할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;언제 무엇을 사용할까?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;만일 빠르게 암호화된 메세지를 전송하고 싶을 경우 Symmetric encryption 대칭키를 사용하기를 추천한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.mailfence.com/symmetric-vs-asymmetric-encryption/&quot;&gt;https://blog.mailfence.com/symmetric-vs-asymmetric-encryption/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#symmetric-encryption-%EB%8C%80%EC%B9%AD%ED%82%A4&quot;&gt;Symmetric encryption 대칭키?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot;&gt;대칭키 장단점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#asymmetric-encryption-%EB%B9%84%EB%8C%80%EC%B9%AD%ED%82%A4&quot;&gt;Asymmetric encryption 비대칭키?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%84%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot;&gt;비대칭키 장단점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot;&gt;언제 무엇을 사용할까?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Hash와 Salt]]></title><description><![CDATA[들어가기 전에 암호화(Encryption)과 해싱은 다른 개념 암호화 - 양방향이므로 복호화가 가능 해싱 - 단방향이므로 복호화가 불가능 단방향 해시 함수 (One-Way Hash Function…]]></description><link>https://yjksw.github.io/hash-salt/</link><guid isPermaLink="false">https://yjksw.github.io/hash-salt/</guid><pubDate>Mon, 21 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;들어가기-전에&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90&quot; aria-label=&quot;들어가기 전에 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;암호화(Encryption)과 해싱은 다른 개념&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;암호화 - 양방향이므로 복호화가 가능&lt;/li&gt;
&lt;li&gt;해싱 - 단방향이므로 복호화가 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;단방향-해시-함수-one-way-hash-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-one-way-hash-function&quot; aria-label=&quot;단방향 해시 함수 one way hash function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단방향 해시 함수 (One-Way Hash Function)&lt;/h2&gt;
&lt;p&gt;기본적으로 패스워드 등의 보안의 문제가 걸린 정보를 DB에 저장할 때 평문으로 저장하지 않고 해싱한 값을 저장한다. (평문으로 저장할 경우 DB가 해킹되었을 때 심각한 문제가 발생한다) &lt;br&gt;&lt;/p&gt;
&lt;p&gt;단방향 해시 함수를 사용해서 원본 내용을 완전히 새로운 내용으로 &lt;strong&gt;다이제스트&lt;/strong&gt;(&lt;strong&gt;digest&lt;/strong&gt;)로 매핑한다. 이때 매핑하는 것을 &lt;strong&gt;해시&lt;/strong&gt;라고 한다. 이것은 단방향이므로 복호화할 수 없다. &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135313771-acb38bc5-e482-41a0-a0b8-2a7415bd2903.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해시 함수 종류
&lt;ol&gt;
&lt;li&gt;SHA&lt;/li&gt;
&lt;li&gt;MD&lt;/li&gt;
&lt;li&gt;HAS&lt;/li&gt;
&lt;li&gt;WHIRLPOOL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;한계점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%9C%EA%B3%84%EC%A0%90&quot; aria-label=&quot;한계점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;한계점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rainbow Table&lt;/p&gt;
&lt;p&gt;동일한 데이터를 동일한 해시 함수로 연산한 &lt;strong&gt;다이제스트&lt;/strong&gt;는 동일한 값을 가진다. 따라서 여러 값들에 대한 다이제스트를 모아놓은 &lt;strong&gt;Rainbow Table&lt;/strong&gt;이라는 것이 존재하고 이것을 통해서 원본 데이터를 유추할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brute-force&lt;/p&gt;
&lt;p&gt;해싱 자체가 빠른 검색을 하기 때문에 반대로 다이제스트를 얻는 과정도 빠르게 실행된다. 무작위 데이터를 대입하여 다이제스트를 비교(해싱이므로 더 빠르게 수행됨)하여 원본 데이터를 유추할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;단방향-해시-함수-보완&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EB%B3%B4%EC%99%84&quot; aria-label=&quot;단방향 해시 함수 보완 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단방향 해시 함수 보완&lt;/h2&gt;
&lt;h3 id=&quot;key-stretching&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#key-stretching&quot; aria-label=&quot;key stretching permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key Stretching&lt;/h3&gt;
&lt;p&gt;n번의 해시를 통해서 다이제스트의 다이제스트를 얻어내어 해커 입장에서 원문 데이터를 얻는데 시간을 더 오래 소요하게 한다. (Brute-force 무력화) &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135314064-923f6f7a-d9bf-4987-9996-05c371b77aa9.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;salt&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#salt&quot; aria-label=&quot;salt permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Salt&lt;/h3&gt;
&lt;p&gt;원본 데이터에 임의의 문자열을 덧붙여서 해싱을 해서 다이제스트를 얻어내는 방법이다. 따라서 다이제스트의 원문을 알아낸다고 하더라도 사용자가 입력한 원본 password를 알아내는 것은 어려워진다. &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135314140-e59783ad-2587-4ba2-98d0-32763bb66f49.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 두가지 방법을 모두 사용하여 다이제스트에 대한 보안성을 더 높인다. &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135314236-2f313ce8-33aa-4c3a-9c39-2ec9fb18ea45.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;간단하게-구현해보기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;간단하게 구현해보기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;간단하게 구현해보기&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SALT 크기를 지정&lt;/p&gt;
&lt;p&gt;너무 짧으면 안전하지 않다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;랜덤 함수를 하용해 SALT를 생성하는 것이 좋으나, &lt;code class=&quot;language-text&quot;&gt;java.util.Random&lt;/code&gt; 은 암호학적으로 안전하지 않아서&lt;code class=&quot;language-text&quot;&gt;java.security.SecureRandom&lt;/code&gt;을 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해시 함수를 쓰기 위해서 &lt;code class=&quot;language-text&quot;&gt;java.security.MessageDigest&lt;/code&gt; 외부 라이브러리를 Import 한다. (이외의 다른 라이브러리도 존재한다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;랜덤 함수를 통해서 SALT를 얻어 사용자 입력 password에 덧붙인다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MessageDigest&lt;/code&gt; 라이브러리의 &lt;code class=&quot;language-text&quot;&gt;update()&lt;/code&gt;를 통해서 문자열을 해싱하여 해당 라이브러리에 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MessageDigest&lt;/code&gt; 라이브러리의 &lt;code class=&quot;language-text&quot;&gt;digest()&lt;/code&gt; 를 통해서 다이제스트를 얻는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st-lab.tistory.com/100&quot;&gt;https://st-lab.tistory.com/100&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90&quot;&gt;들어가기 전에&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-one-way-hash-function&quot;&gt;단방향 해시 함수 (One-Way Hash Function)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%9C%EA%B3%84%EC%A0%90&quot;&gt;한계점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EB%B3%B4%EC%99%84&quot;&gt;단방향 해시 함수 보완&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#key-stretching&quot;&gt;Key Stretching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#salt&quot;&gt;Salt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0&quot;&gt;간단하게 구현해보기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[@ControllerAdvice 알아보기]]></title><description><![CDATA[를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면  메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller…]]></description><link>https://yjksw.github.io/springboot-controller-advice/</link><guid isPermaLink="false">https://yjksw.github.io/springboot-controller-advice/</guid><pubDate>Sat, 19 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@ControllerAdvice&lt;/code&gt;를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면 &lt;code class=&quot;language-text&quot;&gt;@RequestMapping&lt;/code&gt; 메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller classes)&lt;/li&gt;
&lt;li&gt;주로 &lt;code class=&quot;language-text&quot;&gt;@ControllerAdvice&lt;/code&gt;에서 전역적으로 처리하고 싶은 어노테이션은 &lt;code class=&quot;language-text&quot;&gt;@ExceptionHandler&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@InitBinder&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt; 등이 있다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ResponseEntityExceptionHandler&lt;/code&gt; 클래스가 &lt;code class=&quot;language-text&quot;&gt;@ControllerAdvice&lt;/code&gt; 어노테이션에서 전역적인 exception handling 을 구현할 수 있도록 하는 base class이다. 해당 클래스에서 Spring MVC 내부에서 발생한 예외들을 처리할 수 있는 메서드들을 제공한다. (&lt;code class=&quot;language-text&quot;&gt;DefaultHandlerExceptionResolver&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;ModelAndView&lt;/code&gt;를 반환하는 반면 &lt;code class=&quot;language-text&quot;&gt;ResponseEntityExceptionHandler&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;ResponseEntity&lt;/code&gt;를 반환한다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;여러-controlleradvice-간의-우선순위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot; aria-label=&quot;여러 controlleradvice 간의 우선순위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여러 @ControllerAdvice 간의 우선순위&lt;/h2&gt;
&lt;p&gt;@ControllerAdvice 클래스들은 Bean으로 등록이 되도록 하는데, 해당 빈들은 &lt;code class=&quot;language-text&quot;&gt;Ordered&lt;/code&gt; 인터페이스를 구현하여 orderable 한 속성을 부여하거나, &lt;code class=&quot;language-text&quot;&gt;@Order&lt;/code&gt;/ &lt;code class=&quot;language-text&quot;&gt;@Priority&lt;/code&gt;를 사용해서 우선순위를 부여할 수 있다. (여기서 &lt;code class=&quot;language-text&quot;&gt;Ordered&lt;/code&gt; semantic이 &lt;code class=&quot;language-text&quot;&gt;@Order&lt;/code&gt;/ &lt;code class=&quot;language-text&quot;&gt;@Priority&lt;/code&gt; 에 우선순위를 가진다)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예외를 처리하는 경우&lt;/p&gt;
&lt;p&gt;매칭이 되는 exception handler method가 있는 가장 처음 매칭되는 advice의 &lt;code class=&quot;language-text&quot;&gt;@ExceptionHandler&lt;/code&gt;가 실행된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model attribute와 data binding 초기화 경우&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;@InitBinder&lt;/code&gt; 메소드가 &lt;code class=&quot;language-text&quot;&gt;ControllerAdvice&lt;/code&gt;의 우선순위 순서에 따라서 실행된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@ControlerAdvice&lt;/code&gt;의 우선순위에 따른 ExceptionHandler 선언 팁&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135494123-1441631a-7277-4b6f-b82e-30610bcf4b5e.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기본적으로 &lt;code class=&quot;language-text&quot;&gt;@ControllerAdvice&lt;/code&gt;는 모든 controller에 전역적으로 적용이 되기 때문에, 더 구체적인 controller에 적용하기 위해서는 selectors를 사용해야한다. (&lt;code class=&quot;language-text&quot;&gt;annotations()&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;basePackageClasses()&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;basePackages()&lt;/code&gt;)만일 여러 selectors가 있으면 OR 로 적용이되면 이 selectors 체크는 runtime에 실행이 되므로, 만일 너무 많은 selectors를 사용하면 런타임 퍼포먼스 효율이 떨어지게 된다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zetcode.com/springboot/controlleradvice/&quot;&gt;https://zetcode.com/springboot/controlleradvice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html&quot;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot;&gt;여러 @ControllerAdvice 간의 우선순위&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[스프링부트의 Exception handling]]></title><description><![CDATA[Spring Boot Spring boot 자체에서 핸들링 되지 않은 error 에 대한 대비책을 마련해 두었다. 먼저, Spring boot 자체에서  에 대한 매핑을 찾아서 해당 URL…]]></description><link>https://yjksw.github.io/spring-exception-handling/</link><guid isPermaLink="false">https://yjksw.github.io/spring-exception-handling/</guid><pubDate>Sat, 19 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;spring-boot&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-boot&quot; aria-label=&quot;spring boot permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Boot&lt;/h2&gt;
&lt;p&gt;Spring boot 자체에서 핸들링 되지 않은 error 에 대한 대비책을 마련해 두었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;먼저, Spring boot 자체에서 &lt;code class=&quot;language-text&quot;&gt;/error&lt;/code&gt; 에 대한 매핑을 찾아서 해당 URL에 대해서 동일한 이름을 가진 &lt;code class=&quot;language-text&quot;&gt;error&lt;/code&gt; 뷰를 매핑 한다. 해당 뷰는 &lt;code class=&quot;language-text&quot;&gt;error.html&lt;/code&gt; 을 반환한다. (해당 뷰는  Thymeleaf template인데, 만일 JSP를 사용한다면 &lt;code class=&quot;language-text&quot;&gt;error.jsp&lt;/code&gt;를 반환하도록 &lt;code class=&quot;language-text&quot;&gt;InternalResourceViewResolver&lt;/code&gt;에서 변경할 수 있다) 실질적인 매핑은 ViewResolver에서 담당한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만일 &lt;code class=&quot;language-text&quot;&gt;/error&lt;/code&gt;에 대해 그 어떠한 view-resolver도 매핑이 되어 있지 않다면 spring boot는 내부적으로 가지고 있는 대체 에러 페이지인 “Whitelabel Error Page”를 가지고 있다.&lt;/p&gt;
&lt;p&gt;이때 만일 RESTful request에 대한 응답이라면 Spring boot는 자체적인 JSON 형태로 “Whitelabel Error Page”의 응답을 받은 error 정보를 반환한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-04-11T05:56:03.845+0000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;No message available&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/no-such-page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring boot는 컨테이너에 대한 디폴트 error-page 또한 구축해놓았다. 만일 예외가 Spring MVC 밖에서 발생했더라도(ex. servlet Filter) 여전히 Spring Boot에 대비되어 있는 error page에 리포트 되어 반환된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;exception-handling-동작원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#exception-handling-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;exception handling 동작원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exception Handling 동작원리&lt;/h2&gt;
&lt;br&gt;
&lt;h3 id=&quot;handlerexceptionresolverinterface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#handlerexceptionresolverinterface&quot; aria-label=&quot;handlerexceptionresolverinterface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HandlerExceptionResolver(interface)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;의 application context에 선언되어 있는 Spring bean의 예외들은(Spring MVC system 내에서 발생한 경우들) &lt;code class=&quot;language-text&quot;&gt;HandlerExceptionResolver&lt;/code&gt;을 구현하여 intercept를 통해 핸들링 된다. 즉, Controller에서 에외를 핸들링하지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HandlerExceptionResolver&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolveException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드에서 &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; 는 해당 예외가 발생한 controller를 말한다.&lt;/p&gt;
&lt;p&gt;MVC는 기본적은 3가지 resolvers를 생성한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ExceptionHandlerExceptionResolver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;예외들을 적합한 &lt;code class=&quot;language-text&quot;&gt;@ExceptionHander&lt;/code&gt; 어노테이션이 붙은 메소드에 매칭한다. handler(controller)와 controller-advice 두가지 모두 고려한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ResponseStatusExceptionResolver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;처리되지 않은 예외들 중 &lt;code class=&quot;language-text&quot;&gt;@ResponseStatus&lt;/code&gt;가 붙은 것들을 확인한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DefaultHandlerExceptionResolver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;기본 Spring Exceptions를 Http Status Codes로 변경하는 작업을 한다.(MVC 내부적인 부분)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 3가지 resolvers들은 체이닝 되어 위 순서대로 처리되는데 Spring이 내부적으로 해당 일을 처리하는 &lt;code class=&quot;language-text&quot;&gt;HandlerExceptionResolverComposite&lt;/code&gt; 빈을 생성하여 처리하도록 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;simplemappingexceptionresolver&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#simplemappingexceptionresolver&quot; aria-label=&quot;simplemappingexceptionresolver permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SimpleMappingExceptionResolver&lt;/h3&gt;
&lt;p&gt;Spring은 자체적으로 위 &lt;code class=&quot;language-text&quot;&gt;HandlerExceptionResolver&lt;/code&gt; 구현체인 &lt;code class=&quot;language-text&quot;&gt;SimpleMappingExceptionResolver&lt;/code&gt;를 제공하고 대부분의 어플리케이션에서 사용되고 있다. 해당 리졸버에서는 다음과 같은 것들을 결정하여 처리할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exception 클래스를 뷰에 매핑&lt;/li&gt;
&lt;li&gt;아무 곳에서도 처리되지 않은 예외에 대한 기본(default) error page를 설정&lt;/li&gt;
&lt;li&gt;Model에 추가되는 &lt;code class=&quot;language-text&quot;&gt;exception&lt;/code&gt; 속성의 이름을 설정한다.(View에서 추후 사용할 수 있도록) 기본값은 “exception” 이다. &lt;code class=&quot;language-text&quot;&gt;@ExceptionHandler&lt;/code&gt;에서 반환되는 뷰는 exception 자체에 대한 접근 권한이 없지만 &lt;code class=&quot;language-text&quot;&gt;SimpleMappingExceptionResolver&lt;/code&gt;에 정의되어 있는 뷰는 접근 권한이 있으므로 여기서 설정하도록 되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableWebMvc&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Optionally setup Spring MVC defaults (if you aren&apos;t using&lt;/span&gt;
               &lt;span class=&quot;token comment&quot;&gt;// Spring Boot &amp;amp; haven&apos;t specified @EnableWebMvc elsewhere)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MvcConfiguration&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;simpleMappingExceptionResolver&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleMappingExceptionResolver&lt;/span&gt;
                  &lt;span class=&quot;token function&quot;&gt;createSimpleMappingExceptionResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;SimpleMappingExceptionResolver&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleMappingExceptionResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt; mappings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    mappings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DatabaseException&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;databaseError&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    mappings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;InvalidCreditCardException&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;creditCardError&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setExceptionMappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mappings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// None by default&lt;/span&gt;
    r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDefaultErrorView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// No default&lt;/span&gt;
    r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setExceptionAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// Default is &quot;exception&quot;&lt;/span&gt;
    r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setWarnLogCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;example.MvcLogger&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;// No default&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위에서 &lt;code class=&quot;language-text&quot;&gt;defaultErrorView&lt;/code&gt; 속성으로 처리되지 않은 예외들에 대한 적합한 error 페이지를 설정할 수 있으므로 유용하다. 현재 대부분의 어플리케이션에 기본값은 java stack-trace를 노출하는 것인데 유저들은 stack-trace에 관심이 없다. 따라서 Spring boot는 해당 부분을 “white-label” 에러 페이지로 처리한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;extending-simplemappingexceptionresolver&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#extending-simplemappingexceptionresolver&quot; aria-label=&quot;extending simplemappingexceptionresolver permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending SimpleMappingExceptionResolver&lt;/h3&gt;
&lt;p&gt;다음과 같은 이유로 &lt;code class=&quot;language-text&quot;&gt;SimpleMappingExceptionResolver&lt;/code&gt;를 확장하여 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Constructor를 사용하여 속성들 직접 지정하는 경우&lt;/p&gt;
&lt;p&gt;예를 들어서 exception 관련 로깅 및 로거를 설정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;default log message를 오버라이딩하여 변경하는 경우 (&lt;code class=&quot;language-text&quot;&gt;buildLogMessage&lt;/code&gt;를 변경)&lt;/p&gt;
&lt;p&gt;현재 기본 메세지는 &lt;em&gt;Handler execution resulted in exception&lt;/em&gt; 이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;에러 view에 추가 정보를 설정하고 싶은 경우&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;doResolverException&lt;/code&gt;을 오버라이딩 하여 설정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyMappingExceptionResolver&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleMappingExceptionResolver&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyMappingExceptionResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Enable logging by providing the name of the logger to use&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setWarnLogCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyMappingExceptionResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildLogMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MVC exception: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLocalizedMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doResolveException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Call super method to get the ModelAndView&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;ModelAndView&lt;/span&gt; mav &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doResolveException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
    &lt;span class=&quot;token comment&quot;&gt;// Make the full URL available to the view - note ModelAndView uses&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// addObject() but Model uses addAttribute(). They work the same. &lt;/span&gt;
    mav&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mav&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest&quot;&gt;https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#spring-boot&quot;&gt;Spring Boot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#exception-handling-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot;&gt;Exception Handling 동작원리&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#handlerexceptionresolverinterface&quot;&gt;HandlerExceptionResolver(interface)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simplemappingexceptionresolver&quot;&gt;SimpleMappingExceptionResolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#extending-simplemappingexceptionresolver&quot;&gt;Extending SimpleMappingExceptionResolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[@ModelAttribute vs. @RequestBody 더 깊이 파헤치기]]></title><description><![CDATA[@RequestBody request body를 method argument로 바꿀 때 를 사용한다.  는 두가지를 담당한다. 첫번째는 Http request message를 객체로 변환하는 것, 두번째는 객체를 Http response body…]]></description><link>https://yjksw.github.io/request-body-model-attribute-advanced/</link><guid isPermaLink="false">https://yjksw.github.io/request-body-model-attribute-advanced/</guid><pubDate>Sat, 19 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;requestbody&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#requestbody&quot; aria-label=&quot;requestbody permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@RequestBody&lt;/h2&gt;
&lt;p&gt;request body를 method argument로 바꿀 때 &lt;code class=&quot;language-text&quot;&gt;HttpMessageConverter&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HttpMessageConverter&lt;/code&gt; 는 두가지를 담당한다. 첫번째는 Http request message를 객체로 변환하는 것, 두번째는 객체를 Http response body로 변환하는 작업이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;동작원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;동작원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동작원리&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;에 의해서 호출되는 handler의 method parameters은 스프링의 &lt;code class=&quot;language-text&quot;&gt;HandlerMethodArgumentResolver&lt;/code&gt;에 의해 생성이 되고, handler의 return value는 &lt;code class=&quot;language-text&quot;&gt;HandlerMethodReturnValueHandler&lt;/code&gt;에 의해서 처리된다. &lt;code class=&quot;language-text&quot;&gt;@ResponseBody&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;@RequestBody&lt;/code&gt;를 다루는 구현체는 &lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcess&lt;/code&gt;이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DispatcherServlet의 handle에서부터 Argument resolve 하는 과정&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DispatcherServlet#handle()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;AbstractHandlerMethodAdapter#handle()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;RequestMappingHandlerAdapter#handleInternal()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;RequestMappingHandlerAdapter#invokeHandlerMethod()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;ServletInvocableHandlerMethod#invokeAndHandle()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;InvocableHandlerMethod#invokeForRequest()&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;InvocableHandlerMethod #getMethodArgumentValues()&lt;/code&gt; → &lt;em&gt;(Interface)&lt;/em&gt;&lt;code class=&quot;language-text&quot;&gt;HandlerMethodArgumentResolver#resolveArgument()&lt;/code&gt; → &lt;em&gt;(Imp)&lt;/em&gt;&lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcessor#resolveArgument()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcessor#resolveArgument()&lt;/code&gt; 내부에서 HttpMessageConverter를 사용해서 변환시키는 과정&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcessor#resolveArgument()&lt;/code&gt; → (e&lt;em&gt;xtends  AbstractMessageConverterMethodArgumentResolver&lt;/em&gt;)&lt;code class=&quot;language-text&quot;&gt;RequestResponseBodyMethodProcessor#readWithMessageConverters()&lt;/code&gt; → (&lt;em&gt;Imp HandlerMethodArgumentResolver&lt;/em&gt;)&lt;code class=&quot;language-text&quot;&gt;AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters()&lt;/code&gt; 에서 변환 로직을 시행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이때 HttpMessageConverter default 인스턴스들은 &lt;code class=&quot;language-text&quot;&gt;WebMvcConfigurationSupport#addDefaultHttpMessageConverters()&lt;/code&gt; 를 통해 등록된다.&lt;/p&gt;
&lt;h3 id=&quot;httpmessageconverter-로직&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#httpmessageconverter-%EB%A1%9C%EC%A7%81&quot; aria-label=&quot;httpmessageconverter 로직 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HttpMessageConverter 로직&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@RequestBody&lt;/code&gt; 일때&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HttpMessageConverter#canRead()&lt;/code&gt; 로 converter가 해당 content의 인스턴스를 읽고 생성할 수 있는지 확인한다. 이후에 argument를 생성하여 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@ResponseBody&lt;/code&gt; 일때&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HttpMessageConverter#canWrite()&lt;/code&gt; 를 통해서 &lt;code class=&quot;language-text&quot;&gt;HttpMessageConverter&lt;/code&gt;가 해당 반환값을 serialize 할 수 있는지 확인하고 response content를 생성하고, &lt;code class=&quot;language-text&quot;&gt;Accept&lt;/code&gt; 헤더가 있다면 해당 content-type에 매칭되는지도 확인한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MessagConverter&lt;/code&gt;를 사용하는 &lt;code class=&quot;language-text&quot;&gt;@RequestBody&lt;/code&gt;는 값을 바인딩하는 것이 아니라, 해당 내용을 Java Object로 변환한다. 그렇기 때문에 Body가 존재하지 않은 &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; 메서드에 &lt;code class=&quot;language-text&quot;&gt;@RequestBody&lt;/code&gt;를 적용하려고 하면 예외가 발생한다.&lt;/p&gt;
&lt;h3 id=&quot;4가지-default-messageconverters&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4%EA%B0%80%EC%A7%80-default-messageconverters&quot; aria-label=&quot;4가지 default messageconverters permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4가지 Default MessageConverters&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ByteArrayHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;byte[]&lt;/code&gt; 오브젝트 타입을 지원하여 들어오는 요청을 모두 바이트 배열로 받을 수 있다. 또한 리턴 타입이 &lt;code class=&quot;language-text&quot;&gt;byte[]&lt;/code&gt; 일 경우 &lt;code class=&quot;language-text&quot;&gt;Content-type&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;applcation/octet-stream&lt;/code&gt;으로 설정된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;StringHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; 오브젝트 타입을 지원하여 HTTP 본문을 그대로 &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt;으로 가져오고, 그대로 리턴할 경우 &lt;code class=&quot;language-text&quot;&gt;Content-type&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;text/plain&lt;/code&gt;으로 전달된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;FormHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MultiValueMap&amp;#x3C;String, String&gt;을 지원하는데, 지원하는 미디어 타입은 &lt;code class=&quot;language-text&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt;이다. 하지만 form 데이터의 경우 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;가 더 유용하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SourceHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;XML 문서를 Source 타입 객체로 변환하고 싶을 때 사용하지만 요즘에는 잘 쓰이지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;자주-쓰이는-messageconverters-3가지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-messageconverters-3%EA%B0%80%EC%A7%80&quot; aria-label=&quot;자주 쓰이는 messageconverters 3가지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자주 쓰이는 MessageConverters 3가지&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Jaxb2RootElementHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;JAXB의 @XmlRootElement와 @XmlType이 붙은 클래스로 XML과 오브젝트 사이의 변환을 해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MashallingHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;스프링 OXM 추상화 &lt;code class=&quot;language-text&quot;&gt;Mashaller&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Unmarshaller&lt;/code&gt;를 이용해서 &lt;code class=&quot;language-text&quot;&gt;XML&lt;/code&gt;과 오브젝트 사이의 변환을 해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MappingJacksonHttpMessageConverter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Jackson&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;ObjectMapper&lt;/code&gt;를 사용해서 &lt;code class=&quot;language-text&quot;&gt;JSON&lt;/code&gt;과 오브젝트 사이의 변환을 해주고 지원하는 미디어타입은 &lt;code class=&quot;language-text&quot;&gt;application/json&lt;/code&gt;이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;참고링크: &lt;a href=&quot;https://joont92.github.io/spring/MessageConverter/&quot;&gt;https://joont92.github.io/spring/MessageConverter/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;modelattribute&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#modelattribute&quot; aria-label=&quot;modelattribute permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@ModelAttribute&lt;/h2&gt;
&lt;p&gt;흔히 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;를 들어온 요청에 대해서 method parameter를 매핑시키는 용도로만 알고 있는데, 이외에 return value를 지정된 model attribute로 바인딩하고 웹 뷰에 표현하는 작업도 담당한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;는 두 가지 level에서 사용되는데 &lt;strong&gt;1) method parameter&lt;/strong&gt;와 &lt;strong&gt;2) method level&lt;/strong&gt;이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;는 form data에 사용이 되는데, 이때 value 속성의 값을 함께 넘겨준다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;POST&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/spring-mvc-basics/addEmployee&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; 
  &lt;span class=&quot;token attr-name&quot;&gt;modelAttribute&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;employee&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Name&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Id&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;submit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Submit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;form:&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 만일 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; 속성이 함께 제공되지 않았다면 default로 Method level에 적용되는 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;에게는 반환 타입이, Method-argument에는 parameter 타입이  지정된다.&lt;/p&gt;
&lt;h3 id=&quot;at-method-level&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#at-method-level&quot; aria-label=&quot;at method level permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;At Method Level&lt;/h3&gt;
&lt;p&gt;Method level에서 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;이 추가되어 있다면 해당 메서드는 Model에 하나 또는 여러개의 속성(attribute)을 추가한다는 것을 의미한다. &lt;code class=&quot;language-text&quot;&gt;@RequestMapping&lt;/code&gt; 어노테이션이 붙어있는 메서드와 마찬가지로 같은 argument(Model mode)을 제공하는것은 동일하지만, 들어오는 request에 직접적으로 매핑되지는 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//하나의 model attribute를 추가할 때&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ModelAttribute&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; accountManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//하나 이상의 model attributes를 추가할 때 &lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ModelAttribute&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addAttributes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Welcome to the Netherlands&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;This is name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반적으로 Spring MVC는 위 메서드를 request handler를 호출하기 이전에 우선적으로 호출한다.  &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!!! &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt; 메서드들이 controller에서 &lt;code class=&quot;language-text&quot;&gt;@RequestMapping&lt;/code&gt;으로 지정된 메서드들 보다 먼저 실행된다는 것이다. (같은 controller에 있는 경우)&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;만일 global하게 들어오는 모든 요청에 대해서 특정 model attribute을 추가하고 싶다면, 해당 controller를 &lt;code class=&quot;language-text&quot;&gt;@ControllerAdvice&lt;/code&gt;을 지정하는 것이 좋다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;일반적으로 method level의 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;의 목적은 하나 또는 하나 이상의 model attributes를 추가하기 위해서이다. Controller는 여러개의 &lt;code class=&quot;language-text&quot;&gt;@MethodAttribute&lt;/code&gt; 메소드들을 가지고 있을 수 있는데, 그 어떤 요청이 들어오면 같은 controller 안에 있는 그 모든 메소드들이 실행된다. 전역적으로 실행하고 싶다면 &lt;code class=&quot;language-text&quot;&gt;@ControllerAdvice&lt;/code&gt; 어노테이션을 추가하면 된다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;at-method-argument&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#at-method-argument&quot; aria-label=&quot;at method argument permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;At Method Argument&lt;/h3&gt;
&lt;p&gt;만일 method argument 레벨에서 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;가 사용된다면 model 에서 인자가 추출되어야 한다는 것을 의미한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“An @ModelAttribute on a method argument indicates the argument should be retrieved from the model. If not present in the model, the argument should be instantiated first and then added to the model.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;즉, Method Argument 레벨에서 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;를 사용하면, 우선 model에 해당 attribute가 있는지 확인하여 반환하고, 없다면 &lt;strong&gt;1) arguments를 초기화&lt;/strong&gt; &lt;strong&gt;2)model에 추가&lt;/strong&gt;한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/owners/{ownerId}/pets/{petId}/edit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;POST&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processSubmit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ModelAttribute&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pet&lt;/span&gt; pet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 Method Argument에서 &lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt;가 사용되었을 경우 인자인 Pet instance의 출처는 다음 4가지 중 하나일 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@SessionAttributes&lt;/code&gt; 에 의해 이미 존재하는 model attribute&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt; 메소드에 의해 이미 존재하는 model attribute&lt;/li&gt;
&lt;li&gt;URI template와 type converter에 의해 추출된 instance&lt;/li&gt;
&lt;li&gt;default constructor에 의해 초기화된 instance&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/remoting.html#rest-message-conversion&quot;&gt;https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/remoting.html#rest-message-conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/72&quot;&gt;https://mangkyu.tistory.com/72&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29517613/how-exactly-works-requestbody-annotation-and-how-it-is-related-to-the-httpmessa&quot;&gt;https://stackoverflow.com/questions/29517613/how-exactly-works-requestbody-annotation-and-how-it-is-related-to-the-httpmessa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17362177/how-does-the-modelattribute-annotation-work-why-cant-i-got-the-value&quot;&gt;https://stackoverflow.com/questions/17362177/how-does-the-modelattribute-annotation-work-why-cant-i-got-the-value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-methods&quot;&gt;https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[MORE]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HttpMessageConverters 내부동작원리&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-httpmessageconverter-rest&quot;&gt;https://www.baeldung.com/spring-httpmessageconverter-rest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;언제 무엇? 장단점&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URI template와 type converter에 의해 추출된 instance 동작원리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#requestbody&quot;&gt;@RequestBody&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC&quot;&gt;동작원리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#httpmessageconverter-%EB%A1%9C%EC%A7%81&quot;&gt;HttpMessageConverter 로직&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4%EA%B0%80%EC%A7%80-default-messageconverters&quot;&gt;4가지 Default MessageConverters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-messageconverters-3%EA%B0%80%EC%A7%80&quot;&gt;자주 쓰이는 MessageConverters 3가지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#modelattribute&quot;&gt;@ModelAttribute&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#at-method-level&quot;&gt;At Method Level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#at-method-argument&quot;&gt;At Method Argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JWT (JSON Web Token) 알아보기]]></title><description><![CDATA[JWT(JSON Web Token) 배경 이전에 인증 절차를 거치려면 사용자의 해싱값을 DB에 저장하고 매번 요청이 있을 때마다 해당 해싱값을 검증해야한다. 검증시 DB에 접근하는 쿼리가 실행되어야하는데 성능면에서 좋지 않다. 따라서 JWT…]]></description><link>https://yjksw.github.io/jwt-token/</link><guid isPermaLink="false">https://yjksw.github.io/jwt-token/</guid><pubDate>Sun, 13 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;jwtjson-web-token-배경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwtjson-web-token-%EB%B0%B0%EA%B2%BD&quot; aria-label=&quot;jwtjson web token 배경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT(JSON Web Token) 배경&lt;/h2&gt;
&lt;p&gt;이전에 인증 절차를 거치려면 사용자의 해싱값을 DB에 저장하고 매번 요청이 있을 때마다 해당 해싱값을 검증해야한다. 검증시 DB에 접근하는 쿼리가 실행되어야하는데 성능면에서 좋지 않다. 따라서 JWT가 등장하게 되고 위와 같은 절차를 거치지만 DB 접근 쿼리가 필요하지 않게 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;JWT 정의: A string that is sent in the HTTP request (from client or server) to validate the authenticity of the client. It is saved on the client-side only.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;%5Bhttps://medium.com/jspoint/so-what-the-heck-is-jwt-or-json-web-token-dca8bcb719a6%5D(https://medium.com/jspoint/so-what-the-heck-is-jwt-or-json-web-token-dca8bcb719a6)&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;jwt-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;jwt 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;compact&lt;/li&gt;
&lt;li&gt;self-contained&lt;/li&gt;
&lt;li&gt;digitally signed : it is signed using a secret key(&lt;strong&gt;HMAC&lt;/strong&gt; algorithm) or public/private key pair using (&lt;strong&gt;RSA&lt;/strong&gt; or &lt;strong&gt;ECDSA&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;sgined 토큰 이라면 claim의 무결성(integrity)를 검증할 수 있다.&lt;/li&gt;
&lt;li&gt;만일 토큰이 public/private key로 signed 되었다면, 시그니처는 private key를 들고있는 쪽이 signed 한 것이라는 것을 보장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;jwt-언제-사용하면-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;jwt 언제 사용하면 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT 언제 사용하면 좋을까&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: 유저가 로그인하여 어떠한 요청들을 보낼 때, JWT를 통해서 인증을 한다. JWT가 사용되는 가장 대표적인 시나리오다. &lt;code class=&quot;language-text&quot;&gt;Single Sign On&lt;/code&gt; 이라고 하는데, 이 때 JWT를 사용하면 부하도 적고 여러 다른 도메인에서 쉽게 사용될 수 있다. (cross-origin일 때 용이)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Information Exchange&lt;/strong&gt;: 정보들을 안전하게 전달하려고 할 때 JWT를 사용하기도 한다. JWT를 signed 할 수 있으니 송신자가 누군지 보장할 수 있다. 또한 시그니처를 통해서 header와 payload를 계산하기 때문에 해당 컨텐츠가 무결함을 보장할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;jwt-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;jwt 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT 생성&lt;/h2&gt;
&lt;p&gt;secret key를 사용해서 JWT를 생성하며, 해당 secret key는 private하여 외부에 공개되거나 JWT 토큰에 주입될 경우가 없다. 또한 JWT를 클라이언트에게 받았을 때 서버에 저장되어 있는 secret key를 통해서 검증한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;JWT 생성하기 위해서 &lt;a href=&quot;%5Bhttps://jwt.io/%5D(https://jwt.io/)&quot;&gt;여기&lt;/a&gt; 에서 원하는 라이브러리를 다운 받아서 사용한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;jwt-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;jwt 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT 구조&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;xxxx.yyyy.zzzz&lt;/code&gt; 으로 header, payload, signature가 (&lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;)로 연결되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header
&lt;ul&gt;
&lt;li&gt;type of token (ex. JWT)&lt;/li&gt;
&lt;li&gt;signing algorithm&lt;/li&gt;
&lt;li&gt;JSON 타입, &lt;code class=&quot;language-text&quot;&gt;Base64Url&lt;/code&gt;로 인코딩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Payload
&lt;ul&gt;
&lt;li&gt;claims - entity(유저) 정보나 이외의 추가 정보 등등&lt;/li&gt;
&lt;li&gt;registered - 등록되어 있는 claims로 항상 추가하기를 권장하는 유용한 claims
&lt;ul&gt;
&lt;li&gt;iss(issuer), exp(expiration time), sub(subject), aud(audience) 등등&lt;/li&gt;
&lt;li&gt;JWT은 compact 하기 때문에 3글자로 제한하여 정의함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;public -  JWT 사용하는 입장에서 정의할 수 있는 claims
&lt;ul&gt;
&lt;li&gt;충돌을 피하기 위해서 JWT Registry에 정의된 것들만 사용하거나, 충돌방지할 수 있는 URI 형태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;private - 커스텀 claims로 양쪽에서 합의하여 공유하기로 한 정보에 대해서 서술한 claims&lt;/li&gt;
&lt;li&gt;JSON 타입, &lt;code class=&quot;language-text&quot;&gt;Base64Url&lt;/code&gt;로 인코딩, 때문에 어느 누구나 디코딩하여 접근할 수 있는 정보이기 때문에 민감한 정보는 담지 않도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Signature
&lt;ul&gt;
&lt;li&gt;인코딩 된 header, payload, secrete을 조합하여 header에 있는 알고리즘으로 시그니처를 생성&lt;/li&gt;
&lt;li&gt;이 시그니처를 통해서 담긴 정보의 무결성을 보장&lt;/li&gt;
&lt;li&gt;private key로 signed 되었을 경우 JWT sender 또한 보장 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jwt-signature&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt-signature&quot; aria-label=&quot;jwt signature permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT Signature&lt;/h3&gt;
&lt;p&gt;위 header와 payload는 쉽게 디코딩해 내용을 확인할 수 있다. 따라서 해당 token을 보안에 사용할 수 있도록 하는 요소는 signature이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;제 3자가 토큰의 header나 payload를 변경하지 않았음을 보장하기 위해서 secret key와 해당 키로 생성된 signaturer를 사용한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Token 검증을 할 때, 전송된 JWT에 있는 header, payload를 가지고 서버에 저장되어 있는 secret을 통해서 test signature를 생성한다. test signature와 token에 있는 처음 token 생성시 추가된 original signature와 동일한지 비교하여 데이터 변경 여부를 체크한다. 이 방법을 통해서 token은 데이터 무결성을 보장한다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;왜-jwt&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-jwt&quot; aria-label=&quot;왜 jwt permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 JWT?&lt;/h2&gt;
&lt;p&gt;Simple Web Tokens(&lt;strong&gt;SWT&lt;/strong&gt;)와 Security Assertion Markup Language Tokens(&lt;strong&gt;SAML&lt;/strong&gt;) 비교했을 때 장점들이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;JSON은 우선 XML보다 간단(덜 장황함)하여 인코딩 했을 때, 그 사이즈가 훨씬 작고 &lt;strong&gt;SAML&lt;/strong&gt;보다 compact 하다. &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135121193-926e8de5-411d-49dc-873c-09cfb0a552df.png&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135121388-68caa14c-464b-449e-8901-70491a30b765.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;보안적 측면에서는 &lt;strong&gt;SWT&lt;/strong&gt;는 대칭키를 활용하는 HMAC 알고리즘만 사용이 가능한데, &lt;strong&gt;JWT&lt;/strong&gt;, &lt;strong&gt;SAML&lt;/strong&gt;은 public/private key 페어를 사용할 수 있다. 더해서 XML signing보다 JSON signing이 훨씬 쉽다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;또한 잘 구축되어 있는 여러 JSON 파서들을 활용할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;마지막으로 활용 측면에서 &lt;strong&gt;JWT&lt;/strong&gt;는 인터넷 환경에서 많이 쓰인다. 그렇기 때문에 클라이언트의 입장에서 &lt;strong&gt;JWT&lt;/strong&gt;를 여러 환경(특히, 모바일 환경에서도)에서 활용하기 용이하다는 장점이 있다.  &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jwt.io/introduction&quot;&gt;https://jwt.io/introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31309759/what-is-secret-key-for-jwt-based-authentication-and-how-to-generate-it&quot;&gt;https://stackoverflow.com/questions/31309759/what-is-secret-key-for-jwt-based-authentication-and-how-to-generate-it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jwtjson-web-token-%EB%B0%B0%EA%B2%BD&quot;&gt;JWT(JSON Web Token) 배경&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jwt-%ED%8A%B9%EC%A7%95&quot;&gt;JWT 특징&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jwt-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;JWT 언제 사용하면 좋을까&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jwt-%EC%83%9D%EC%84%B1&quot;&gt;JWT 생성&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jwt-%EA%B5%AC%EC%A1%B0&quot;&gt;JWT 구조&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#jwt-signature&quot;&gt;JWT Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%99%9C-jwt&quot;&gt;왜 JWT?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[자바빈 규약 (번외: Serialization)]]></title><description><![CDATA[간단한 JavaBean 규약에 대해서 알고 넘어가기 JavaBean 자바빈 규약을 따르는 Java Class를 말한다. JavaBean 규약 defulat 패키지가 아닌 패키지 하위에 있는 클래스 기본 생성자가 존재 (no-arg constructor…]]></description><link>https://yjksw.github.io/java-bean/</link><guid isPermaLink="false">https://yjksw.github.io/java-bean/</guid><pubDate>Tue, 08 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;간단한 JavaBean 규약에 대해서 알고 넘어가기&lt;/p&gt;
&lt;h2 id=&quot;javabean&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javabean&quot; aria-label=&quot;javabean permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaBean&lt;/h2&gt;
&lt;p&gt;자바빈 규약을 따르는 Java Class를 말한다.&lt;/p&gt;
&lt;h2 id=&quot;javabean-규약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javabean-%EA%B7%9C%EC%95%BD&quot; aria-label=&quot;javabean 규약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaBean 규약&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;defulat 패키지가 아닌 패키지 하위에 있는 클래스&lt;/li&gt;
&lt;li&gt;기본 생성자가 존재 (no-arg constructor)&lt;/li&gt;
&lt;li&gt;Property는 모두 private으로 선언&lt;/li&gt;
&lt;li&gt;Getter/setter를 통해서 properties를 조작&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Serializable&lt;/code&gt;을 implement 하여 직렬화 가능&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;번외--serialization--deserialization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8--serialization--deserialization&quot; aria-label=&quot;번외  serialization  deserialization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;번외 : Serialization &amp;#x26; Deserialization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Serialization : converting state of an object into a byte stream&lt;/li&gt;
&lt;li&gt;Deserialization: reverse process of serialization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;해당 객체에 영속성을 부여하기 위해서 사용되는 매커니즘이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Java 객체를 serialize 하게 하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;java.io.Serializable&lt;/code&gt; 인터페이스를 구현하도록 한다. 해당 인터페이스는 멤버변수나 메소드가 존재하지 않는 marker interface(Cloneable이나 Remote와 같은) 이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Serializable하면 1) 해당 객체 그대로에 영속성을 부여할 수 있으며 2) 네트워크 상에서 byte stream으로 전송이 가능하다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serialization 특징&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;부모 클래스가 Serializable interface를 구현하면 자식 클래스는 자동으로 Serializable 하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;non-static 멤버 변수만 Serialization 으로 저장될 수 있다. (static 과 transient 데이터는 불가)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비밀번호 등의 보안으로 인해 어떠한 멤버 변수가 serialize 되어 저장되지 않기를 원한다면 해당 데이터를 trasient 데이터로 지정하도록 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해당 객체가 deserialized 될 때 해당 객체의 생성자는 호출되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Serializable 한 객체와 연관되어 있는 객체 또한 Serializable 인터페이스를 반드시 구현해야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectA&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;	
	&lt;span class=&quot;token comment&quot;&gt;//ObjectB는 반드시 Serializable을 구현해야 함	&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;ObjectB&lt;/span&gt; oj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SerialVersionUID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Serialization을 진행하면서 각 Serializable class는 &lt;code class=&quot;language-text&quot;&gt;SerialVersionUID&lt;/code&gt; 라는 id를 할당받는다. 해당 id를 통해서 직렬화된 객체의 sender와 receiver를 판별하는데, sender와 reciever는 동일해야한다. 만일 동일하지 않다면 &lt;code class=&quot;language-text&quot;&gt;InvalidClassException&lt;/code&gt;이 deserialize 할 때 발생한다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dololak.tistory.com/133&quot;&gt;https://dololak.tistory.com/133&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/javabean-class-java/#:~:text=JavaBeans%20are%20classes%20that%20encapsulate,public%20getters%20and%20setter%20methods&quot;&gt;https://www.geeksforgeeks.org/javabean-class-java/#:~:text=JavaBeans are classes that encapsulate,public getters and setter methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/serialization-in-java/&quot;&gt;https://www.geeksforgeeks.org/serialization-in-java/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.javatpoint.com/serialization-in-java#:~:text=Serialization%20in%20Java%20is%20a,is%20converted%20into%20an%20object&quot;&gt;https://www.javatpoint.com/serialization-in-java#:~:text=Serialization in Java is a,is converted into an object&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[MORE]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;non-static 만 serialization 가능한 이유&lt;/li&gt;
&lt;li&gt;SerialVersionUID&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#javabean&quot;&gt;JavaBean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javabean-%EA%B7%9C%EC%95%BD&quot;&gt;JavaBean 규약&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8--serialization--deserialization&quot;&gt;번외 : Serialization &amp;#x26; Deserialization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Dispatcher Servlet 알아보기]]></title><description><![CDATA[Servlet 개념 및 구조 Servlet은 웹 서버를 구현한 자바의 프로그램이며 interface이다. 서블릿이 하는 일은 다음과 같다. Servlet은 웹 클라이언트로부터 요청을 받아서 응답을 반환한다. Servlet 인터페이스는 servlet…]]></description><link>https://yjksw.github.io/dispatcher-servlet/</link><guid isPermaLink="false">https://yjksw.github.io/dispatcher-servlet/</guid><pubDate>Thu, 03 Jun 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;servlet-개념-및-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#servlet-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;servlet 개념 및 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Servlet 개념 및 구조&lt;/h2&gt;
&lt;p&gt;Servlet은 &lt;strong&gt;웹 서버&lt;/strong&gt;를 구현한 &lt;strong&gt;자바&lt;/strong&gt;의 프로그램이며 &lt;strong&gt;interface&lt;/strong&gt;이다. 서블릿이 하는 일은 다음과 같다. Servlet은 웹 클라이언트로부터 요청을 받아서 응답을 반환한다.&lt;/p&gt;
&lt;p&gt;Servlet 인터페이스는 servlet을 초기화하고, 서비스를 요청하고, servlet을 서버에서 제거하는 메소드를 제공한다. (이걸 life-cycle 메소드라고 말한다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt; 메소드를 통해서 서블릿이 구축된다.&lt;/li&gt;
&lt;li&gt;클라이언트에서 호출된 &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt; 메소드가 수행된다.&lt;/li&gt;
&lt;li&gt;수행된 서블릿이 &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt;에서 제거되고 &lt;code class=&quot;language-text&quot;&gt;destroy&lt;/code&gt; 메소드를 통해서 소멸된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;추가로 Servlet 초기세팅 정보를 &lt;code class=&quot;language-text&quot;&gt;ServletConfig&lt;/code&gt; 에 담아서 반환하는 &lt;code class=&quot;language-text&quot;&gt;getServletConfig()&lt;/code&gt; 와, Servlet 정보를 반환하는 &lt;code class=&quot;language-text&quot;&gt;getServletInfo()&lt;/code&gt; 메소드도 존재한다.&lt;/p&gt;
&lt;h3 id=&quot;httpservlet-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#httpservlet-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;httpservlet 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HttpServlet 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GenericServlet&lt;/code&gt;을 확장하고 &lt;code class=&quot;language-text&quot;&gt;Servlet&lt;/code&gt; 인터페이스를 구현한다.&lt;/li&gt;
&lt;li&gt;웹 환경에 최적화되어 있어서 HTTP 메소드를 지원한다. 즉, HttpServlet 에서는 &lt;code class=&quot;language-text&quot;&gt;service()&lt;/code&gt; 를 override 할 이유가 거의 없다. 왜냐햐면 이미 정의되어 있는 Http 요청들을 수행하도록 되어 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135119857-ab8335e6-7bbf-409f-9213-76beb4941e03.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;servlet-동작방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#servlet-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;servlet 동작방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Servlet 동작방식&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;브라우저에서 URL을 입력해서 request를 Servlet Container 로 전송&lt;/li&gt;
&lt;li&gt;Servlet Container에서 &lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;HttpServletResponse&lt;/code&gt; 객체 생성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;xml&lt;/code&gt;에 기입된 정보를 통해서 해당 URL과 매칭되는 서블릿을 검색&lt;/li&gt;
&lt;li&gt;해당 서블릿의 service를 호출하여 처리&lt;/li&gt;
&lt;li&gt;해당 서블릿의 service 내의 메소드에서 처리하고 동적 페이지를 생성하여 &lt;code class=&quot;language-text&quot;&gt;HttpServletResponse&lt;/code&gt; 에 응답을 담아서 전송&lt;/li&gt;
&lt;li&gt;모든 처리가 끝난 후 &lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;HttpServletResponse&lt;/code&gt; 소멸&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;servlet-container&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#servlet-container&quot; aria-label=&quot;servlet container permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Servlet Container&lt;/h2&gt;
&lt;p&gt;서블릿을 관리하기 위해서는 서블릿 컨테이너가 필요하다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;톰캣(Tomcat)과 같이 클라이언트의 요청을 받아서 정의된 서블릿을 수행하고, 응답을 할 수 있도록 웹 서버와 소켓 통신을 관리한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;본래 클라이언트와 웹서버만 통신했을 때에는 정적 페이지만 전송할 수 이기때문에 비효율적이다. 따라서 동적으로 웹 페이지를 서버에서 만들어서 전송할 수 있도록 하는 것이 servlet container이다. 웹 서버에서 클라이언트와 서블릿이 소통할 수 있도록하는 일부분이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;웹 서버는 http 요청을 받은 경우 servlet container로 해당 요청을 포워딩한다. 이때 부터 서블릿 컨테이너가 요청을 받아서 생명주기에 맞게 핸들링 한다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;역할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AD%ED%95%A0&quot; aria-label=&quot;역할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;역할&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;통신 지원 (웹 서버 ↔  소켓)&lt;/p&gt;
&lt;p&gt;서버와 소켓 통신을 하기 위해서는 소켓 생성 및 listen, accept 등의 일을 해야하지만 해당 과정은 복잡하고 동일하게 반복해야하는 부분이다. 따라서 서블릿 컨테이너는 해당 일과 관련된 기능을 API로 제공**(?)** 해줘서 관리하게 해준다. 즉, 비지니스 로직에만 집중할 수 있도록 지원한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서블릿 생명주기 관리&lt;/p&gt;
&lt;p&gt;서블릿의 탄생 및 죽음을 관리한다.&lt;/p&gt;
&lt;p&gt;즉, 요청이 들어왔을 때, 해당되는 서블릿 클래스를 인스턴스화(&lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;HttpServletResponse&lt;/code&gt; 등등) 하고, 서비스 메소드 호출, 처리 후 GC를 진행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티 스레드 지원 및 관리&lt;/p&gt;
&lt;p&gt;하나의 서블릿 요청 당 하나의 자바 스레드가 생성된다. 서비스 메소드 실행 후 스레드는 소멸된다. 그리고 서버에서 다중 스레드를 관리해준다. (하나의 소켓 당 하나의 스레드가 할당되기 때문에? 그렇다면 소켓 관리를 톰캣이 한다는 것이기 때문에)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선언적 보안 관리&lt;/p&gt;
&lt;p&gt;서블릿 컨테이너를 사용할 경우, 보안 내용을 xml에 기록하므로 서블릿이나 자바에 구현하지 않아도 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;servlet-생명주기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#servlet-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot;servlet 생명주기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Servlet 생명주기&lt;/h3&gt;
&lt;p&gt;간단하게 서블릿의 생명주기는 &lt;code class=&quot;language-text&quot;&gt;init() → service() → destroy()&lt;/code&gt; 로 진행된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;init()&lt;/code&gt;은 요청이 왔을 때, 서블릿이 메모리에 있는지 확인하고 없는 경우 &lt;code class=&quot;language-text&quot;&gt;init()&lt;/code&gt; 을 실행하고 처음에 한번만 실행한다. 서블릿 요청별로 새로운 스레드가 생성되기 때문에 해당 스레드간 공통적인 부분은 여기에 구현하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;서블릿 컨테이너가 서블릿 종료 요청(&lt;em&gt;&lt;strong&gt;종료 요청 시점은? 우선은 톰캣 종료 시점&lt;/strong&gt;&lt;/em&gt;)을 할 때 호출되는 &lt;code class=&quot;language-text&quot;&gt;destroy()&lt;/code&gt; 도 마찬가지로 마지막에 한번만 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;servlet-과-jvm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#servlet-%EA%B3%BC-jvm&quot; aria-label=&quot;servlet 과 jvm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Servlet 과 Jvm&lt;/h3&gt;
&lt;p&gt;Servlet을 사용하면 jvm에서 각각의 요청들을 각각의 자바 스레드에서 사용할 수 있도록 해준다. jvm에서 각각의 servlet은 하나의 자바 클래스이고, servlet에 요청이 들어오면 그것을 Jvm에서 처리해서 반환한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;dispatcher-servlet&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dispatcher-servlet&quot; aria-label=&quot;dispatcher servlet permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dispatcher Servlet&lt;/h2&gt;
&lt;p&gt;디스패쳐 서블릿을 이해하려면 우선 front controller 패턴에 대한 이해가 있어야 한다. Front controller 패턴(&lt;a href=&quot;https://www.geeksforgeeks.org/front-controller-design-pattern/&quot;&gt;https://www.geeksforgeeks.org/front-controller-design-pattern/&lt;/a&gt;) 에 대해서 간단하게 설명하자면, front-controller는 들어오는 요청에 대해서 하나의 핸들러가 처리를 담당하고 그것을 처리할 수 있는 적합한 핸들러에게 dispatch 즉, 보내는 역할을 하도록 하는 디자인 패턴이다.&lt;/p&gt;
&lt;h3 id=&quot;dispatcher-servlet-processing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dispatcher-servlet-processing&quot; aria-label=&quot;dispatcher servlet processing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dispatcher servlet processing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;여러 Web-context가 존재할 수 있기 때문에 우선 해당 DispatcherServlet에 해당되는 WebApplicatonContext 을 DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE 를 키로 우선 검색한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;HandlerAdapter&lt;/code&gt; 의 구현체를 &lt;code class=&quot;language-text&quot;&gt;getHandle()&lt;/code&gt; 을 통해서 구현체를 가져온다. 그래서 &lt;code class=&quot;language-text&quot;&gt;handle()&lt;/code&gt; 메서드를 통해서 해당 요청에 대해 처리할 것을 진행한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HandlerExceptionResolver -&lt;/strong&gt;  WebapplicationContext 안에 선언되어 있는, 요청 처리 중 발생한 exceptions 들을 처리하는 resolver&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;handleradapter-interfaces&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#handleradapter-interfaces&quot; aria-label=&quot;handleradapter interfaces permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HandlerAdapter Interfaces&lt;/h3&gt;
&lt;p&gt;HandlerAdapter 인터페이스는 controller, servlets, HttpRequests를 관리하여 사용하게 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;HandlerAdapter 구현체는 디스패처의 &lt;code class=&quot;language-text&quot;&gt;getHandler()&lt;/code&gt; 메서드를 통해서 &lt;code class=&quot;language-text&quot;&gt;HandlerExecutionChain&lt;/code&gt; 에 들어간다. 여기에 들어간 각각의 구현체들이 &lt;code class=&quot;language-text&quot;&gt;handle()&lt;/code&gt; 메서드를 통해서 &lt;code class=&quot;language-text&quot;&gt;HttpServletRequest&lt;/code&gt; 요청을 처리한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mapping&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HandlerMapping 인터페이스는 컨트롤러와 밀접하게 연관이 되어 있다. 때문에 컨트롤러에 어떠한 annotation이 붙어있는지에 따라서 HandlerMapping을 다르게 동작한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SimpleControllerHandlerAdapter&lt;/code&gt; 의 경우에는 &lt;code class=&quot;language-text&quot;&gt;@Controller&lt;/code&gt; 어노테이션이 붙어있지 않은 컨트롤러의 경우에 동작할 수 있고, &lt;code class=&quot;language-text&quot;&gt;RequestMappingHandler&lt;/code&gt; 은 &lt;code class=&quot;language-text&quot;&gt;@RequestMapping&lt;/code&gt; 어노테이션이 붙은 메서드의 경우에만 적용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RequestMappingHandler&lt;/code&gt;의 경우를 자세히 들여다보자. @RequestMapping 어노테이션은 해당 &lt;code class=&quot;language-text&quot;&gt;WebApplicationContext&lt;/code&gt; 내에서 handler가 가능한 지점을 알려준다. 그렇기 때문에 &lt;code class=&quot;language-text&quot;&gt;@RequestMapping&lt;/code&gt; 어노테이션에 서술되어 있는 path는 &lt;code class=&quot;language-text&quot;&gt;HandlerMapping&lt;/code&gt; 인터페이스에 의해서 관리된다. (URL 구조는 &lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;과 관련이 깊으며, servlet mapping에 직접 사용된다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP Request Handling&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DispatcherServlet 의 핵심적인 책임 중 하나는 들어오는 HttpRequest를 알맞은  handler에 보내는(dispatch) 것이다. (여기서 &lt;code class=&quot;language-text&quot;&gt;@Controller&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@RestController&lt;/code&gt; 어노테이션에 관련이 있다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ViewResolver Interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ViewResolver&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;ApplicationContext&lt;/code&gt;에 대한 환경설정을 담당한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ViewResolver&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;dispatcher&lt;/code&gt;에 의해서 제공되는 view의 종류와 어디서 해당 view가 제공되는지 파악한다.  &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ViewResolver&lt;/code&gt;가 실제적으로 수행하는 일은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;prefix 설정 : 적절한 view를 찾기위한 default URL 경로를 설정&lt;/li&gt;
&lt;li&gt;suffix 설정 : default view type을 설정하는 접미사 설정&lt;/li&gt;
&lt;li&gt;view class 설정 : 적절한 view 클래스를 resolver에 설정해서 렌더링이 필요한 기술을 제공받을 수 있도록 한다. (JSTL or Tiles)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LocaleResolver Interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;디스패처로 session, request, cookie information 등을 LocaleResolver로 커스텀 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CookieLocaleResolver&lt;/code&gt;는 쿠키를 통해 stateless한 어플리케이션의 property를 설정할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SessionLocalResolver&lt;/code&gt;로 stateful한 어플리케이션의 session-specific  configuration을 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CookieLocaleResolver&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cookieResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;CookieLocaleResolver&lt;/span&gt; localeResolver
		&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CookieLocaleResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	localeResolver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDefaultLocale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ENGLISH&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	localeResolver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setCookieName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cookiename&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	localeResolver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setCookieMaxAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; localeResolver&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ThemeResolver &amp;#x26; MultipartResolver 생략&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HandlerExceptionResolver&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;스프링의 &lt;code class=&quot;language-text&quot;&gt;HandlerExceptionResolver&lt;/code&gt;는 전체 웹 어플리케이션에 대해서 균일한 에러 핸들링을 가능하게 해준다. 어플리케이션 전역적으로 적용이 되는 커스텀 에러 핸들링을 구현하기 위해서는 &lt;strong&gt;@ControllerAdvice 어노테이션을 추가해서 구현하도록 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ControllerAdvice&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExampleGlobalExceptionHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	 
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@ExceptionHandler&lt;/span&gt;
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleExampleException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우 &lt;code class=&quot;language-text&quot;&gt;@ExceptionHandler&lt;/code&gt; 어노테이션이 추가된 클래스는 디스패쳐의 영역 안에 있는 모든 컨트롤러에 적용될 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;spring-mvc-와-dispatcherservlet-동작방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-mvc-%EC%99%80-dispatcherservlet-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;spring mvc 와 dispatcherservlet 동작방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring MVC 와 DispatcherServlet 동작방식&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/135120169-742f3adf-be12-4f14-8d35-6c18c4115e06.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id=&quot;파생-키워드-및-주제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%83%9D-%ED%82%A4%EC%9B%8C%EB%93%9C-%EB%B0%8F-%EC%A3%BC%EC%A0%9C&quot; aria-label=&quot;파생 키워드 및 주제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파생 키워드 및 주제&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;⇒ 서블릿 컨테이너의 웹 서버와 통신 지원 방식 (Tomcat 내부구현 확인 필요)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⇒ Front Controller desgin pattern (&lt;/strong&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/front-controller-design-pattern/&quot;&gt;https://www.geeksforgeeks.org/front-controller-design-pattern/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⇒ SimpleControllerHandlerAdapter 와 annotation이 붙지 않은 controller의 동작 방식&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⇒ SpringController 깊이 알기&lt;/strong&gt; (&lt;a href=&quot;https://www.baeldung.com/spring-controllers&quot;&gt;https://www.baeldung.com/spring-controllers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⇒ Spring의 error handling 깊이 알기&lt;/strong&gt; (&lt;a href=&quot;https://www.baeldung.com/exception-handling-for-rest-with-spring&quot;&gt;https://www.baeldung.com/exception-handling-for-rest-with-spring&lt;/a&gt;)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;의문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%98%EB%AC%B8&quot; aria-label=&quot;의문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;의문&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Spring MVC 의 DispatcherServlet의 동작방식에서 &lt;strong&gt;HandlerMapping&lt;/strong&gt;과 &lt;strong&gt;HandlerAdapter&lt;/strong&gt;의 차이&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;참고링크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC&quot; aria-label=&quot;참고링크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고링크&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/14&quot;&gt;https://mangkyu.tistory.com/14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/what-servlet-container&quot;&gt;https://dzone.com/articles/what-servlet-container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-dispatcherservlet&quot;&gt;https://www.baeldung.com/spring-dispatcherservlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@ehdrms2034/%EC%8A%A4%ED%94%84%EB%A7%81-MVC-Dispatcher-Servlet%EC%9D%84-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90&quot;&gt;https://velog.io/@ehdrms2034/스프링-MVC-Dispatcher-Servlet을-직접-구현해보자&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#servlet-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EA%B5%AC%EC%A1%B0&quot;&gt;Servlet 개념 및 구조&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#httpservlet-%EA%B5%AC%EC%A1%B0&quot;&gt;HttpServlet 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#servlet-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D&quot;&gt;Servlet 동작방식&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#servlet-container&quot;&gt;Servlet Container&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%AD%ED%95%A0&quot;&gt;역할&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#servlet-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0&quot;&gt;Servlet 생명주기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#servlet-%EA%B3%BC-jvm&quot;&gt;Servlet 과 Jvm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#dispatcher-servlet&quot;&gt;Dispatcher Servlet&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dispatcher-servlet-processing&quot;&gt;Dispatcher servlet processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#handleradapter-interfaces&quot;&gt;HandlerAdapter Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-mvc-%EC%99%80-dispatcherservlet-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D&quot;&gt;Spring MVC 와 DispatcherServlet 동작방식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%83%9D-%ED%82%A4%EC%9B%8C%EB%93%9C-%EB%B0%8F-%EC%A3%BC%EC%A0%9C&quot;&gt;파생 키워드 및 주제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%98%EB%AC%B8&quot;&gt;의문&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC&quot;&gt;참고링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Bean Scope 종류 알아보기]]></title><description><![CDATA[스프링 프레임워크에서 사용되는 Bean scope에 6가지 종류가 있다. 일반적으로 많이 쓰이는 scope은 싱글톤이다. Singleton scope 스프링 빈이 singleton scope…]]></description><link>https://yjksw.github.io/bean-scope/</link><guid isPermaLink="false">https://yjksw.github.io/bean-scope/</guid><pubDate>Sun, 30 May 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;스프링 프레임워크에서 사용되는 Bean scope에 6가지 종류가 있다. 일반적으로 많이 쓰이는 scope은 싱글톤이다.&lt;/p&gt;
&lt;h2 id=&quot;singleton-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#singleton-scope&quot; aria-label=&quot;singleton scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Singleton scope&lt;/h2&gt;
&lt;p&gt;스프링 빈이 singleton scope을 가지고 있다면, 컨테이너가 빈의 단 하나의 인스턴스를 해당 빈이 필요할 때마다 캐싱된 빈을 리턴한다. 빈 객체를 수정하면 해당 빈을 참조하고 있는 모든 곳에 반영이 된다. 싱글톤 스콥은 스프링의 기본값이다.&lt;/p&gt;
&lt;h2 id=&quot;prototype-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prototype-scope&quot; aria-label=&quot;prototype scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prototype scope&lt;/h2&gt;
&lt;p&gt;프로토타입 스콥은 빈 요청이 있을때마다 매번 다른 인스턴스를 컨테이너로부터 반환한다. 설정방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;prototype&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Persion&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;personPrototype&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;web-aware-scopes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#web-aware-scopes&quot; aria-label=&quot;web aware scopes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Web Aware Scopes&lt;/h2&gt;
&lt;p&gt;앞에 두 개의 범위를 제외하고 4개의 범위가 더 존재한다. 하지만 조건이 있는데, web-aware application 맥락에서만 적용이 될 수 있는 범위이다.&lt;/p&gt;
&lt;h3 id=&quot;request-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#request-scope&quot; aria-label=&quot;request scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Request Scope&lt;/h3&gt;
&lt;p&gt;Request scope은 하나의 HTTP request 당 하나의 빈을 생성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebApplicationContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SCOPE_REQUEST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; proxyMode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScopedProxyMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TARGET_CLASS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;requestScopedBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 scope을 사용할 때는 proxyMode 속성이 필수로 필요하다. 왜냐하면 웹 어플리케이션 context가 시작하는 그 순간에는 활성화 되어 있는 request 가 없기 때문에 proxy 객체가 필요하다. 스프링이 시작되었을 때 프록시 객체가 주입된다. 그리고 해당 빈이 필요한 request가 왔을 때 대상 bean을 초기화하고 주입한다.&lt;/p&gt;
&lt;p&gt;더 간단하게는 아래와 같이 표현이 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestScope&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;requestScopedBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 컨트롤러에서 requestScopedBean을 정의해서 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScopesController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Resource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;requestScopedBean&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt; requestScopedBean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/scopes/request&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRequestScopeMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;previousMessage&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; requestScopedBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//이 메세지가 항상 null이 된다.&lt;/span&gt;
		requestScopedBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Good Morning!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;currentMessage&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; requestScopedBean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scopeExample&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;session-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#session-scope&quot; aria-label=&quot;session scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Session Scope&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebApplicationContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SCOPE_SESSION&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; proxyMode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ScopedProxyMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TARGET_CLASS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sessionScopedBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloMessageGenerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세션의 생명주기와 같은 범위로 bean이 생성된다.&lt;/p&gt;
&lt;h3 id=&quot;application-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#application-scope&quot; aria-label=&quot;application scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Application Scope&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Application scope&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;ServletContext&lt;/code&gt;의 생명주기와 동일하게 빈 생명주기가 결정된다. 그렇기 때문에 어떻게 보면 &lt;code class=&quot;language-text&quot;&gt;singleton scope&lt;/code&gt; 과 굉장히 비슷하지만 bean 의 관점에서 보면 중요한 차이가 있다.&lt;/p&gt;
&lt;p&gt;만일 &lt;code class=&quot;language-text&quot;&gt;application scope&lt;/code&gt;로 되어 있다면, 동일한 bean 인스턴스가 동일한 &lt;code class=&quot;language-text&quot;&gt;ServletContext&lt;/code&gt; 공유하는 여러 servlet-based 어플리케이션에서 활용된다. 하지만 만일, &lt;code class=&quot;language-text&quot;&gt;singleton scope&lt;/code&gt;이라면 하나의 어플리케이션에서 싱글톤 인스턴스로 관리된다.&lt;/p&gt;
&lt;h3 id=&quot;websocket-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#websocket-scope&quot; aria-label=&quot;websocket scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebSocket Scope&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;WebSocket scope&lt;/code&gt;을 사용하면 Bean들이 WebSocket session 속성에 저장이 된다. 따라서 동일한 WebSocket session에 빈 요청이 있을 때, 같은 bean 인스턴스를 반환한다.&lt;/p&gt;
&lt;p&gt;참고자료: &lt;a href=&quot;https://www.baeldung.com/spring-bean-scopes&quot;&gt;https://www.baeldung.com/spring-bean-scopes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s04.html#beans-factory-scopes-prototype&quot;&gt;https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s04.html#beans-factory-scopes-prototype&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#singleton-scope&quot;&gt;Singleton scope&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#prototype-scope&quot;&gt;Prototype scope&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#web-aware-scopes&quot;&gt;Web Aware Scopes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#request-scope&quot;&gt;Request Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#session-scope&quot;&gt;Session Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#application-scope&quot;&gt;Application Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#websocket-scope&quot;&gt;WebSocket Scope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[@Valid 어노테이션 초간단 입문]]></title><description><![CDATA[@Valid - 스프링 부트에서 어노테이션으로 validation을 할 수 있도록 기능을 추가해주는 것. 즉, controller에서 인자를 받을 때 유효성 검사를 할 수 있도록 해주는 것이다. DTO…]]></description><link>https://yjksw.github.io/annotation-valid/</link><guid isPermaLink="false">https://yjksw.github.io/annotation-valid/</guid><pubDate>Mon, 24 May 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;@Valid&lt;/strong&gt; - 스프링 부트에서 어노테이션으로 validation을 할 수 있도록 기능을 추가해주는 것. 즉, controller에서 인자를 받을 때 유효성 검사를 할 수 있도록 해주는 것이다.&lt;/p&gt;
&lt;p&gt;DTO의 필드나, 도메인 객체의 필드 위에 유효성 검사를 하고 싶은 어노테이션을 추가하고, controller의 인자 앞에 &lt;strong&gt;@Valid&lt;/strong&gt; 를 추가해서 붙여준다.&lt;/p&gt;
&lt;h2 id=&quot;javavalidation-어노테이션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javavalidation-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98&quot; aria-label=&quot;javavalidation 어노테이션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;java.validation 어노테이션&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@NotNull&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Null&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@NotEmpty&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@NotBlank&lt;/span&gt; 

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;min&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; max&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Pattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 정규식 만족

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;숫자&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;숫자&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Positive&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@PositiveOrZero&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Negative&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@NegativeOrZero&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Email&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Digits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;integer&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fraction&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 대상 수가 지정된 정수와 소수 자리수보다 작은가&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; 

&lt;span class=&quot;token annotation punctuation&quot;&gt;@DecimalMax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@DecimalMin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@AssertFalse&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@AssertTrue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;사용-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;사용 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용 예시&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@NotNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;id는 필수 값입니다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;25세 이하만 가능합니다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;18세 이상만 가능합니다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Pattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regxp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[젠킨스를 활용한 CI/CD 적용기]]></title><description><![CDATA[자바 + 스프링 MVC 프로젝트 배포과정 (별도 인스턴스 활용) 이번에 몇몇 크루들과 미션을 진행하면서 웹을 처음으로 호스팅 해보았다. 웹을 배포 할 때 더욱 편리하다는 DevOps의 꽃 ci/cd를 학습해보기 위해서…]]></description><link>https://yjksw.github.io/cicd-jenkins/</link><guid isPermaLink="false">https://yjksw.github.io/cicd-jenkins/</guid><pubDate>Wed, 19 May 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;자바--스프링-mvc-프로젝트-배포과정-별도-인스턴스-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94--%EC%8A%A4%ED%94%84%EB%A7%81-mvc-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B0%B0%ED%8F%AC%EA%B3%BC%EC%A0%95-%EB%B3%84%EB%8F%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;자바  스프링 mvc 프로젝트 배포과정 별도 인스턴스 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바 + 스프링 MVC 프로젝트 배포과정 (별도 인스턴스 활용)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이번에 몇몇 크루들과 미션을 진행하면서 웹을 처음으로 호스팅 해보았다. 웹을 배포 할 때 더욱 편리하다는 DevOps의 꽃 ci/cd를 학습해보기 위해서 6명이 모여서 한번 적용해보았다. 적용하면서 밟은 단계들을 기록해둔다.&lt;/li&gt;
&lt;li&gt;아래와 같이 그대로 적용하다가 본 프로젝트에 맞게 어느정도 커스텀하여 다르게 설정한 것도 있다. 특히 버전같은 것들은 좀 outdated 된 정보일 수 있다.&lt;/li&gt;
&lt;li&gt;추후에 진행할 팀 프로젝트에 큰 도움이 될 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;docker-설치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#docker-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;docker 설치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;docker 설치&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;get update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;get install &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;y apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;transport&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;https ca&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;certificates curl software&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;properties&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;common &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
curl &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;fsSL https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;download&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;docker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;linux&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ubuntu&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;gpg &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;key add &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;key fingerprint &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;EBFCD88 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo add&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;repository &lt;span class=&quot;token string&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;get update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;get install &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;y docker&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ce &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo usermod &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;aG docker ubuntu &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo curl &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;o &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;usr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;local&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;docker&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;compose &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo chmod &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;usr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;local&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;docker&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;compose &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
sudo ln &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;usr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;local&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;docker&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;compose &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;usr&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;docker&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;compose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ec2에서-jenkins-key-받기-및-적용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ec2%EC%97%90%EC%84%9C-jenkins-key-%EB%B0%9B%EA%B8%B0-%EB%B0%8F-%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;ec2에서 jenkins key 받기 및 적용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EC2에서 Jenkins key 받기 및 적용&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;$ sudo wget &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;q &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;pkg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jenkins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;debian&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;pkg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jenkins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;debian&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; sudo apt&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;key add &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;

$ sudo sh &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;c &lt;span class=&quot;token string&quot;&gt;&apos;echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list&apos;&lt;/span&gt;

$ sudo apt update

$ sudo apt install jenkins

&lt;span class=&quot;token comment&quot;&gt;//실행중 확인&lt;/span&gt;
$ systemctl status jenkins&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jenkins-포트-번호-변경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jenkins-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;jenkins 포트 번호 변경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins 포트 번호 변경&lt;/h3&gt;
&lt;p&gt;젠킨스는 내부적으로 톰캣 서버를 이용하므로 기본포트 8080을 이용한다. 대부분의 스프링 프로젝트도 8080 톰캣 포트를 이용하기 때문에 젠킨스의 포트번호를 변경해야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins 홈 디렉토리&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;$ cd &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lib&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins 기본 설정파일 &amp;#x26; 로그 파일&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//기본 설정 파일 &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//여기서 포트번호 변경&lt;/span&gt;
$ cd &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;etc&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins

&lt;span class=&quot;token comment&quot;&gt;//로그파일&lt;/span&gt;
$ cd &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포트 변경 후 재시작&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;$ sudo systemctl restart jenkins&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jenkins-접속-및-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jenkins-%EC%A0%91%EC%86%8D-%EB%B0%8F-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;jenkins 접속 및 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins 접속 및 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins 접속&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;서버IP&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;변경포트번호&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;암호 가져오기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;$ sudo docker exec jenkins cat &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jenkins_home&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;secrets&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;initialAdminPassword&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;해당 암호를 접속한 Jenkins에 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install suggested plugins 로 추천 플러그인 설치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어드민 계정 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;플러그인 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Deploy to Container&lt;/code&gt; - 배포 후 빌드 파일 container에 배치&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Public Over SSH&lt;/code&gt; - ssh로 빌드파일 전송&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jenkins-key-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jenkins-key-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;jenkins key 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins Key 생성&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//유저 변경 &amp;amp; 홈 디렉토리로 이동 &lt;/span&gt;
$ sudo su jenkins &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd 

&lt;span class=&quot;token comment&quot;&gt;//키 생성&lt;/span&gt;
$ ssh&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;keygen &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;t rsa &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ 배포용 어플리케이션(톰캣?)의 키도 생성해야함&lt;/p&gt;
&lt;h3 id=&quot;ssh-key-교환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ssh-key-%EA%B5%90%ED%99%98&quot; aria-label=&quot;ssh key 교환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SSH KEY 교환&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins 인스턴스에서 유저 변경후 public ssh key 확인&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;su&lt;/span&gt; jenkins
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt;
$ .ssh/id_rsa.pub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins의 public ssh key 를 tomcat (배포서버) 에 저장&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;//배포 서버에 키 복사
$ &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; .ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jenkins-시스템-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jenkins-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;jenkins 시스템 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins 시스템 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Publish over SSH → Path to key : jekins private ssh key 경로 기입&lt;/li&gt;
&lt;li&gt;SSH Servers → Application Server 주소, user name, remote directory 경로 기입&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;global-tool-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#global-tool-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;global tool 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Global Tool 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JDK 경로 기입&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jenkins-프로젝트-생성--github-연동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jenkins-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1--github-%EC%97%B0%EB%8F%99&quot; aria-label=&quot;jenkins 프로젝트 생성  github 연동 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins 프로젝트 생성 → Github 연동&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins 에 Github 프로젝트 추가하고 Credentials 추가&lt;/li&gt;
&lt;li&gt;Jenkins에서 배포 버튼을 누르면 빌드, 배포가 이루어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;docker--jenkins-배포-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#docker--jenkins-%EB%B0%B0%ED%8F%AC-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;docker  jenkins 배포 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker + Jenkins 배포 과정&lt;/h2&gt;
&lt;h3 id=&quot;docker-에서-jenkins-이미지-받기-및-컨테이너-실행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#docker-%EC%97%90%EC%84%9C-jenkins-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B0%9B%EA%B8%B0-%EB%B0%8F-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;docker 에서 jenkins 이미지 받기 및 컨테이너 실행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker 에서 Jenkins 이미지 받기 및 컨테이너 실행&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;//이미지 받기
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; docker pull jenkins/jenkins:버전

//이미지 확인
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; docker images

//컨테이너 실행
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; docker run -d -p &lt;span class=&quot;token number&quot;&gt;8181&lt;/span&gt;:8080 -v /jenkins:/var/jenkins_home --name jm_jenkins -u root jenkins/jenkins:버전&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;-d : 도커 백그라운드 모드&lt;/li&gt;
&lt;li&gt;-p : 호스트와 컨테이너의 포트 연결 (포워딩)&lt;/li&gt;
&lt;li&gt;-v : 호스트와 컨테이너 디렉토리 연결 (마운트)&lt;/li&gt;
&lt;li&gt;—name : 컨테이너 이름 설정&lt;/li&gt;
&lt;li&gt;-u : 사용자 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ip와-포트로-jenkins-브라우저-접속-및-admin-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ip%EC%99%80-%ED%8F%AC%ED%8A%B8%EB%A1%9C-jenkins-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A0%91%EC%86%8D-%EB%B0%8F-admin-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;ip와 포트로 jenkins 브라우저 접속 및 admin 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IP와 포트로 Jenkins 브라우저 접속 및 admin 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;비밀번호 확인&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; docker logs jenkins&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;플러그인-설치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;플러그인 설치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플러그인 설치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;위와 동일&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;github-연결&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#github-%EC%97%B0%EA%B2%B0&quot; aria-label=&quot;github 연결 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github 연결&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins 브라우저에서 새로운 Item → Freestyle project&lt;/li&gt;
&lt;li&gt;레포지토리 URL 입력&lt;/li&gt;
&lt;li&gt;Credentials 추가
&lt;ul&gt;
&lt;li&gt;Kind → username with password (테스트용)
&lt;ul&gt;
&lt;li&gt;계정 이름 및 비밀번호 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kind → 실재로는 SSH 연동을 많이 사용한다. 해당 내용은 아래에 기입.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Branch Specifier 추가
&lt;ul&gt;
&lt;li&gt;ex. &lt;code class=&quot;language-text&quot;&gt;*/master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Builder Trigger → Github hook trigger&lt;/li&gt;
&lt;li&gt;Build → execute shell
&lt;ul&gt;
&lt;li&gt;push 시 실행하도록 등록&lt;/li&gt;
&lt;li&gt;shell 스크립트 작성 필요 *&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jenkins-github-ssh-연동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jenkins-github-ssh-%EC%97%B0%EB%8F%99&quot; aria-label=&quot;jenkins github ssh 연동 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins Github SSH 연동&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;현재 사용자 확인&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; aux &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; jenkins&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 전환&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;//jnkins가 서버에 등록된 사용자가 아닌 경우가 많으므로 &lt;span class=&quot;token function&quot;&gt;su&lt;/span&gt; -u 로 전환이 안될 수 있는 것 참고 
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; -u jenkins /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.ssh 디렉토리 생성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; /var/lib/jenkins/.ssh
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /var/lib/jenkins/.ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh 키 생성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ssh-keygen -t rsa -f /var/lib/jenkins/.ssh/github_ansible-in-action

//비밀키, 공개키 생성 확인 
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github 설정 - 공개키 등록&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Settings → Deploy keys → add deploy key → 공개키 복붙&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /var/lib/jenkins/.ssh/github_ansible-in-action.pub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins 브라우저에 비밀키 등록&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Credentials → System → Global credentials → Add credentials → 비밀키 복붙&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /var/lib/jenkins/.ssh/github_ansible-in-action&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kind → SSH Username with private key&lt;/p&gt;
&lt;p&gt;Username → github_ansible-in-action(Job에서 보여줄 인증키 이름이므로 원하는 것 설정)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;github-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#github-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;github 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github 설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Setting → Integration &amp;#x26; Services → Add Service → Jenkins hook url → Jenkins 주소 입력
&lt;ul&gt;
&lt;li&gt;주소 뒤에 &lt;code class=&quot;language-text&quot;&gt;/github-webhook/&lt;/code&gt; 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 슬랙 연동도 가능&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/139&quot;&gt;https://jojoldu.tistory.com/139&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/442&quot;&gt;https://jojoldu.tistory.com/442&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94--%EC%8A%A4%ED%94%84%EB%A7%81-mvc-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B0%B0%ED%8F%AC%EA%B3%BC%EC%A0%95-%EB%B3%84%EB%8F%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%99%9C%EC%9A%A9&quot;&gt;자바 + 스프링 MVC 프로젝트 배포과정 (별도 인스턴스 활용)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#docker-%EC%84%A4%EC%B9%98&quot;&gt;docker 설치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ec2%EC%97%90%EC%84%9C-jenkins-key-%EB%B0%9B%EA%B8%B0-%EB%B0%8F-%EC%A0%81%EC%9A%A9&quot;&gt;EC2에서 Jenkins key 받기 및 적용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jenkins-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8-%EB%B3%80%EA%B2%BD&quot;&gt;Jenkins 포트 번호 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jenkins-%EC%A0%91%EC%86%8D-%EB%B0%8F-%EC%84%A4%EC%A0%95&quot;&gt;Jenkins 접속 및 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jenkins-key-%EC%83%9D%EC%84%B1&quot;&gt;Jenkins Key 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ssh-key-%EA%B5%90%ED%99%98&quot;&gt;SSH KEY 교환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jenkins-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EC%A0%95&quot;&gt;Jenkins 시스템 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#global-tool-%EC%84%A4%EC%A0%95&quot;&gt;Global Tool 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jenkins-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1--github-%EC%97%B0%EB%8F%99&quot;&gt;Jenkins 프로젝트 생성 → Github 연동&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#docker--jenkins-%EB%B0%B0%ED%8F%AC-%EA%B3%BC%EC%A0%95&quot;&gt;Docker + Jenkins 배포 과정&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#docker-%EC%97%90%EC%84%9C-jenkins-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B0%9B%EA%B8%B0-%EB%B0%8F-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8B%A4%ED%96%89&quot;&gt;Docker 에서 Jenkins 이미지 받기 및 컨테이너 실행&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ip%EC%99%80-%ED%8F%AC%ED%8A%B8%EB%A1%9C-jenkins-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A0%91%EC%86%8D-%EB%B0%8F-admin-%EC%83%9D%EC%84%B1&quot;&gt;IP와 포트로 Jenkins 브라우저 접속 및 admin 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98&quot;&gt;플러그인 설치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#github-%EC%97%B0%EA%B2%B0&quot;&gt;Github 연결&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jenkins-github-ssh-%EC%97%B0%EB%8F%99&quot;&gt;Jenkins Github SSH 연동&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#github-%EC%84%A4%EC%A0%95&quot;&gt;Github 설정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[CI/CD란 무엇일까]]></title><description><![CDATA[CI/CD 의 필요성 개발 후 운영을 하기까지 다음 그림의 프로세스가 반복해서 진행된다.  즉, 개발 프로세스(Dev)의 일종으로 개발을 하여 빌드를 하고 운영 프로세스(Ops…]]></description><link>https://yjksw.github.io/cicd/</link><guid isPermaLink="false">https://yjksw.github.io/cicd/</guid><pubDate>Mon, 17 May 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;cicd-의-필요성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cicd-%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1&quot; aria-label=&quot;cicd 의 필요성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CI/CD 의 필요성&lt;/h2&gt;
&lt;p&gt;개발 후 운영을 하기까지 다음 그림의 프로세스가 반복해서 진행된다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;즉, 개발 프로세스(Dev)의 일종으로 개발을 하여 빌드를 하고 운영 프로세스(Ops)의 일종으로 릴리즈, 배포, 모니터링이 반복된다. 점점 이것을 짧은 쥐기로 반복하는 &lt;strong&gt;DevOps&lt;/strong&gt;가 등장하면서 CI/CD가 중요해졌다. &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134931614-8317ab00-fa6f-4a28-9e6c-ad77beaa3429.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ci---continuous-integration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ci---continuous-integration&quot; aria-label=&quot;ci   continuous integration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CI - Continuous Integration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;정의:&lt;/strong&gt; 지속적으로 퀄리티 컨트롤을 적용하는 프로세스를 실행하는 것&lt;/p&gt;
&lt;p&gt;어플리케이션 코드에 변경이 생기더라도 정기적인 빌드와 테스트를 통과하여 하나의 레포지토리에 관리가 되는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;예시:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCM(Source Code Management): 깃헙 레포 하나로 소스코드를 머지하고 충도를 처리하는 과정&lt;/li&gt;
&lt;li&gt;테스트 코드를 통해서 유효성을 검증하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소스코드를 Ready-to-run 상태로 유지할 수 있다. 이 부분은 혼자 개발할 경우 장점을 느끼기 어렵지만 주로 여러명이서 협업하여 개발을 하기 때문에 중간에 합류한 그 누구도 빌드가 가능한 소스코드를 공유받을 수 있다.&lt;/li&gt;
&lt;li&gt;빌드가 가능한 소스코드를 받으면 합류한 사람과의 소통비용이 감소해 생산성이 올라간다.&lt;/li&gt;
&lt;li&gt;미루었다가 병합하는 과정을 거치는 것보다 짧은 주기로 바로바로 빌드 가능한 상태로 업데이트하는 것이  시간 효율적이며 소스코드의 퀄리티도 유지된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cd---continuous-delivery--continuous-deployment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cd---continuous-delivery--continuous-deployment&quot; aria-label=&quot;cd   continuous delivery  continuous deployment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CD - Continuous Delivery &amp;#x26; Continuous Deployment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Continuous Delivery - CI 과정 후 유효성 검증이 끝난 코드를 레포지토리에 올리는 것을 자동화 (즉, 프로덕션 레벨로 배포할 수 있는 소스코드를 자동으로 올리는 것)&lt;/li&gt;
&lt;li&gt;Continous Deployment - 위 소스코드를 프로덕션 레벨로 릴리즈 하는 것. 쉽게 말해서 수정한 어플리케이션이 몇분 이내로 재배포되어 자동 실행될 수 있도록 하는 것.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;개발 → 배포 과정이 간단하여 사용자 피드백을 빠르게 받을 수 있다. 즉, 장애 대응을 빠르게 할 수 있다.&lt;/li&gt;
&lt;li&gt;여러 서버를 사용하는 경우 자동화 되어 있지 않으면 개별 서버에서 각각 실행을 해야하기 때문에 배포에 소요되는 시간이 굉장히 길다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cicd-툴&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cicd-%ED%88%B4&quot; aria-label=&quot;cicd 툴 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CI/CD 툴&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins - 직접 설치해서 서버 운용해야하고 자바 분야에서 자주 사용된다.&lt;/li&gt;
&lt;li&gt;Circle CI&lt;/li&gt;
&lt;li&gt;Travis CI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;참고링크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC&quot; aria-label=&quot;참고링크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고링크&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://minz.dev/18&quot;&gt;https://minz.dev/18&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#cicd-%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1&quot;&gt;CI/CD 의 필요성&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#ci---continuous-integration&quot;&gt;CI - Continuous Integration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#cd---continuous-delivery--continuous-deployment&quot;&gt;CD - Continuous Delivery &amp;#x26; Continuous Deployment&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#cicd-%ED%88%B4&quot;&gt;CI/CD 툴&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC&quot;&gt;참고링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[@Transactional]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/transaction-annotation/</link><guid isPermaLink="false">https://yjksw.github.io/transaction-annotation/</guid><pubDate>Mon, 10 May 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;트랜잭션을-사용하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;트랜잭션을 사용하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션을 사용하는 이유&lt;/h2&gt;
&lt;p&gt;트랜잭션을 사용하면 각각의 단위로 나누어져있는 작업의 단위를 하나로 합칠 수 있다. 즉, 일련의 연산들을 하나의 독립된 작업 단위로 보고 &lt;strong&gt;하나&lt;/strong&gt;로 취급하기 위해서 사용하는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;언제 일련의 연산들을 하나로 봐야 할 때가 생길까? &lt;br&gt;&lt;/p&gt;
&lt;p&gt;예를 들어서 돈을 송금하는 시스템이 있다고 가정해보자. 계좌A에서 계좌B로 돈을 송금해야 할 때, 계좌A에 충분한 잔액이 있는 것을 확인하고 돈을 송금하기 위해서 돈을 차감했다. 그리고 계좌B에 입금을 하려고 하는 순간 예외가 발생하면서 입금을 하지 못했다. 그런데 계좌A에서는 여전히 돈이 차감된 상태이다. 중간에 송금하려고 했던 돈이 사라지게 된 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이때, 위의 과정을 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;로 관리를 하게 된다면 위의 여러 작업들을 하나의 단위로 보고 중간에 예외가 발생한다면 위에서 실행중이던 작업을 한꺼번에 롤백해준다.&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-기본-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B8%B0%EB%B3%B8-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;트랜잭션 기본 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 기본 방법&lt;/h2&gt;
&lt;p&gt;2개 이상의 쿼리를 하나의 커넥션으로 묶어 DB에 전송하고, 에러가 발생할 경우 자동으로 모든 과정을 rollback 한다. 따라서 트랜잭션은 하나 이상의 쿼리를 처리할 때 동일한 connection 객체를 공유하도록 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션은 코드기반의 트랜잭션(Programmactic Transaction)과 선언적 트랜잭션(Declarative Transaction)을 지원한다. Spring에서는 어노테이션을 활용한 선언적 트랜잭션을 주로 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션의-성질&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%98-%EC%84%B1%EC%A7%88&quot; aria-label=&quot;트랜잭션의 성질 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션의 성질&lt;/h2&gt;
&lt;p&gt;워낙 많은 곳에서 트랜잭션의 성질에 대해서 말하지만 기록을 위해서 그대로 한번 옮겨보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원자성(Atomicity) : 한 트랜잭션 내에서 실행한 작업들을 하나로 간주&lt;/li&gt;
&lt;li&gt;일관성(Consistency) : 일관성 있는 데이터베이스 상태를 유지&lt;/li&gt;
&lt;li&gt;격리성(isolation) : 동시에 실행되는 트랜잭션들이 서로 영향을 미치지 않도록 격리. 따라서 트랜잭션의 동시 접근 데이터에 대한 제어가 필요함&lt;/li&gt;
&lt;li&gt;지속성(Durability) : 트랜잭션 성공시 결과가 항상 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;다수의-트랜잭션-실행-시-발생-가능한-문제상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%88%98%EC%9D%98-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%8B%A4%ED%96%89-%EC%8B%9C-%EB%B0%9C%EC%83%9D-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9&quot; aria-label=&quot;다수의 트랜잭션 실행 시 발생 가능한 문제상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다수의 트랜잭션 실행 시 발생 가능한 문제상황&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dirty Read&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A가 변경 후 커밋하지 않은 상태에서 B가 조회를 한다.&lt;/li&gt;
&lt;li&gt;A가 중간에 문제가 생겨서 롤백되었으면 B는 잘못된 값을 조회한 상황이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Non-Repeatable Read&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A가 반복적으로 쿼리를 사용하는 사이에 B가 값을 변경하고 커밋을 해서, A의 쿼리 중간에 결과가 달라지는 상황이 된다.&lt;/li&gt;
&lt;li&gt;한 트랜잭션 안에서 같은 쿼리를 두번 실행했을 때, 데이터 불일치 문제 발생.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Phantom Read&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A가 특정 범위를 조회하는 쿼리를 두번 이상 실행할 때, B가 중간에 값을 추가해서 이후 실행된 A의 쿼리에 이전에 없던 유령 데이터가 생기는 문제가 발상한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;문제상황을-해결하기-위한-격리수준&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B2%A9%EB%A6%AC%EC%88%98%EC%A4%80&quot; aria-label=&quot;문제상황을 해결하기 위한 격리수준 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제상황을 해결하기 위한 격리수준&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;사용방법&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional(isolation = Isolation.DEFAULT)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DEFAULT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본 격리 수준이며 DB의 격리수준을 따른다.&lt;/li&gt;
&lt;li&gt;MySql → Repeatable-read, Oracle → Read committed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;READ_UNCOMMITED(level 0)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;커밋되지 않은 데이터에 대한 읽기를 허용&lt;/li&gt;
&lt;li&gt;Dirty Read 발생 가능&lt;/li&gt;
&lt;li&gt;데이터 잠금을 위한 간접 비용이 적고 교착 상태에 빠질 위험이 없어 성능이 빠름&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;READ_COMMITTED(level 1)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;커밋 확정된 데이터에 대해서만 읽기를 허용&lt;/li&gt;
&lt;li&gt;Dirty Read 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;REPEATABLE_READ(level 2)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이 완료될 때까지 &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; 하는 데이터에 대해서 shared-lock이 걸리므로 해당 데이터는 수정이 불가하다.&lt;/li&gt;
&lt;li&gt;트랜잭션이 종료되기 전가지 한번 조회한 값은 계속 같은 값으로 조회되도록 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Non-Repeatable Read&lt;/code&gt; 문제를 방지한다. (같은 값을 반복적으로 조회할 때 중간에 다른 값이 조회되는 문제)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SERIALIZABLE(level 3)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이 완료될 때까지 &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; 하는 데이터에 대해서 shared-lock이 걸리므로 해당 데이터는 수정과 입력이 불가하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 격리수준이 올라갈 수록 성능 저하의 우려가 있다는 것을 명심하자.&lt;/p&gt;
&lt;h2 id=&quot;transaction-안에-transaction--전파속성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#transaction-%EC%95%88%EC%97%90-transaction--%EC%A0%84%ED%8C%8C%EC%86%8D%EC%84%B1&quot; aria-label=&quot;transaction 안에 transaction  전파속성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transaction 안에 Transaction : 전파속성&lt;/h2&gt;
&lt;p&gt;하나의 트랜잭션 안에서 또 다른 트랜잭션이 발생하면 어떻게 처리가 될지 전파속성에 따라서 다르게 관리할 수 있다. 여러가지 전파속성이 있지만,  그중 몇가지만 다루어보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;사용방법&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional(propagation=Propagation.REQUIRED)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_MANDATORY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;부모의 트랜잭션 내에서 실행되고 없으면 예외가 발생한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_NESTED&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기존에 트랜잭션이 있는 경우, 포함하여서 실행한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_NEVER&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션이 있는 상황에서 다른 트랜잭션이 실행된다면 예외를 발생한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_REQUIRED (기본설정)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션이 있으면 그 상황에서 실행하고, 없으면 새로운 트랜잭션을 실행한다. 즉, 부모의 트랜잭션에서 실행하거나, 없으면 새로운 트랜잭션을 생성하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_REQUIRED_NEW&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;자신만의 고유한 트랜잭션을 실행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전파속성 관련 참고링크: &lt;a href=&quot;https://happyer16.tistory.com/entry/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%A0%84%ED%8C%8C-%EC%86%8D%EC%84%B1-propagation-%EB%A1%A4%EB%B0%B1-%EC%98%88%EC%99%B8&quot;&gt;https://happyer16.tistory.com/entry/트랜잭션-전파-속성-propagation-롤백-예외&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;transaction-추가-옵션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#transaction-%EC%B6%94%EA%B0%80-%EC%98%B5%EC%85%98&quot; aria-label=&quot;transaction 추가 옵션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transaction 추가 옵션&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional(readOnly = true)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션 작업 내에서 쓰기 작업이 일어나면 예외를 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional(rollbackFor = Exception.class)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@Transactional(rollbackForClassName={&quot;NullPointerException&quot;})&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로는 런타임 예외에 대해서 롤백을 하는데, 그 대상을 바꿀 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@Transactional(timeout = 10)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;지정한 시간 내에 작업을 완료하도록 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@EnableTransactionManagement&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빈 인스턴스에 트랜잭션을 적용하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;트랜잭션-동작-원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;트랜잭션 동작 원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 동작 원리&lt;/h2&gt;
&lt;p&gt;일반적으로 JPA를 사용할 때 스프링과 같은 IoC 컨테이너를 사용하지 않을 경우 transaction management 기능을 직접 구현해줘야 한다. 트랜잭션의 흐름은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;UserTransaction&lt;/span&gt; utx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entityManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	utx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;businessLogin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	utx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	utx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;스프링에서-code-classlanguage-texttransactionalcode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C-code-classlanguage-texttransactionalcode&quot; aria-label=&quot;스프링에서 code classlanguage texttransactionalcode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스프링에서 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;스프링에서 트랜잭션을 알아서 관리해주지만 troubleshooting을 위해서 내부 동작 원리를 알아야 할 필요가 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이해하기 위해서 필요한 개념 2가지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the persistence context&lt;/li&gt;
&lt;li&gt;the database transaction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두번째 개념인 database transaction은 우리가 사용하는 메서드 레벨의 &lt;code class=&quot;language-text&quot;&gt;@Transactional&lt;/code&gt; 로 그 생명주기와 범위가 설명된다. 이 database  transaction은 persistence context의 범위 안에서 일어난다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;JPA에서 persistence context는 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt;를 말한다. Persistence context는 한정된 자바 객체들의 상태를 확인하고, 변경 사항들이 DB에 반영이 되도록 관리한다. 따라서 database transaction과 비슷하다고 생각할 수 있지만, 둘은 다른 개념이다. 주로 하나의 Entity Manager가 여러 database transactions 에 대해 사용된다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;우선 트랜잭션 동작원리에 대해서 알기 이전에 &lt;code class=&quot;language-text&quot;&gt;@PersistenceContext&lt;/code&gt; 의 동작 방식에 대해서 아는 것이 중요하다.  해당 어노테이션은 컨테이너의 시작 시점에서 단 한번 entity manager를 주입하는 것처럼 보인다. 실은 &lt;code class=&quot;language-text&quot;&gt;EntityManager&lt;/code&gt; 는 인터페이스이고 스프링 빈으로 주입되는 것은 실제 entity manager가 아닌, &lt;em&gt;context aware proxy&lt;/em&gt; 이며, runtime 중 실제 entity manager에서 책임을 위임한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;트랜잭션 관리를 위해 필요한 3가지 components&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EntityManager Proxy
&lt;ul&gt;
&lt;li&gt;비지니스 로직에서 EntityManager 관련 메소드를 호출했을 때 entity manager를 직접적으로 호출하지 않는다. 비지니스 로직은 proxy에 의존하고 해당 proxy가 스레드에서 현재 entity manager를 추출한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transactional Aspect
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TransactionInterceptor&lt;/code&gt; 로 구현이 되며, 비지니스 메소드 이전과 이후에 (before &amp;#x26; after) 호출된다.&lt;/li&gt;
&lt;li&gt;Before moment: 실행될 비지니스 메서드가 기존에 실행되고 있는 database transaction의 범위 내에서 실행되어야 하는 것인지, 새로운 transaction을 시작해야 하는지 판단&lt;/li&gt;
&lt;li&gt;After moment: 해당 transaction이 커밋, 롤백, 실행중지 되어야 하는지 등등을 판단&lt;/li&gt;
&lt;li&gt;여기서 ‘before moment’ 에 해당하는 책임은 Transactional Aspect 에서 실제로 담당하지 않고, 판단하는 책임을 Transaction Manager에 위임한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transaction Manager
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다음 두가지에 대해서 판단 및 처리한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;새로운 Entity Manager가 생성되어야 하는지&lt;/li&gt;
&lt;li&gt;새로운 database transaction이 시작되어야 하는지&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 두가지는 Transactional Aspect의 ‘before moment’ 로직이 호출되었을 때 판단되어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;판단은 다음에 기반한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;다른 transaction의 실행 중 여부&lt;/li&gt;
&lt;li&gt;해당 transaction 메서드의 propagation 속성 (예를 들어 &lt;code class=&quot;language-text&quot;&gt;REQUIRES_NEW&lt;/code&gt; 일 경우 항상 새로운 transaction을 시작한다)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만일 새로운 transaction을 생성하도록 했다면 다음이 실행된다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;새로운 entity manager 생성&lt;/li&gt;
&lt;li&gt;생성된 entity manager를 현재 쓰레드에 바인딩&lt;/li&gt;
&lt;li&gt;DB connection pool에서 커넥션 가져오기&lt;/li&gt;
&lt;li&gt;해당 커넥션을 현재 쓰레드에 바인딩&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Entity manager와 connection 모두 현재 스레드(즉, 모두 스레드 단위로 실행 및 관리)에 바인딩 되어 있고, transaction이 끝났을 때 Transaction Manager가 제거한다. &lt;strong&gt;따라서 현재 entity manager나 connection이 필요한 경우 현재 스레드에서 추출하여 사용하고, 이 부분을 EntityManager proxy가 담당한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Spring configuration에서 위 @Transactional 매커니즘이 동작하도록 설정해준다.&lt;/em&gt;&lt;/p&gt;
 &lt;br&gt;
 &lt;br&gt;
&lt;p&gt;&lt;strong&gt;[참고링크]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/how-does-spring-transactional&quot;&gt;https://dzone.com/articles/how-does-spring-transactional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hleee.medium.com/%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80-3287d4bcc64d&quot;&gt;https://hleee.medium.com/격리-수준-3287d4bcc64d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/30&quot;&gt;https://mangkyu.tistory.com/30&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MORE&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 Entity Manger(persistence context) 에 여러 database transactions가 연관되어 있는 경우는 무엇일까?&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[@Controller vs. @RestController]]></title><description><![CDATA[제일 핵심이 되는 차이점은 HTTPResponse Body의 생성 방식이다. @Controller 본래 Spring MVC 컨트롤러의 주 역할은 View를 반환하는 것이다. 아래 사진을 보면, 클라이언트가 URL을 통해서 Dispatcher…]]></description><link>https://yjksw.github.io/controller-vs-restcontroller/</link><guid isPermaLink="false">https://yjksw.github.io/controller-vs-restcontroller/</guid><pubDate>Wed, 28 Apr 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;제일 핵심이 되는 차이점은 HTTPResponse Body의 생성 방식이다.&lt;/p&gt;
&lt;h2 id=&quot;controller&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#controller&quot; aria-label=&quot;controller permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@Controller&lt;/h2&gt;
&lt;p&gt;본래 Spring MVC 컨트롤러의 주 역할은 View를 반환하는 것이다.&lt;/p&gt;
&lt;p&gt;아래 사진을 보면, 클라이언트가 URL을 통해서 Dispatcher Servlet 에 요청을 보내면 적절한 Handler를 매핍하고 컨트롤러에서 해당 View를 &lt;code class=&quot;language-text&quot;&gt;ViewResolver&lt;/code&gt;를 통해서 반환한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134930324-a380f854-7718-4ef1-8161-1fe94cdd2e30.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;하지만 컨트롤러는 항상 View를 반환하는 것이 아니라 data도 반환해야한다. 이때는 @ResponseBody 어노테이션을 통해서 Json 형태로 클라이언트에 데이터를 반환할 수 있도록 해야 한다. 이때는 View를 반환할 때 사용하는 ViewResolver를 반환하는 것이 아니라 HttpMessageConverter 을 사용해서 데이터를 반환한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;85%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134930518-240c33bd-f309-47d1-b836-2ad737a5c201.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;따라서 Data를 반환하는 응답에 대해서는 &lt;code class=&quot;language-text&quot;&gt;@ResponseBody&lt;/code&gt;를 붙여주어야하는데 매번 그러기가 번거로우니 Controller에 &lt;code class=&quot;language-text&quot;&gt;@ResponseBody&lt;/code&gt;가 자동으로 붙어있는 &lt;code class=&quot;language-text&quot;&gt;@RestController&lt;/code&gt;가 등장하게 된 것이다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#controller&quot;&gt;@Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[개발자를 본격 꿈꾸기 시작하면서 나의 마음가짐]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/start-journey-as-programmer/</link><guid isPermaLink="false">https://yjksw.github.io/start-journey-as-programmer/</guid><pubDate>Tue, 30 Mar 2021 12:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;다음은 우아한테크코스를 시작한지 얼마 되지 않은 시점에 쓴 글 입니다. 진솔한 마음으로 써서 올려봅니다 😶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;-국제학교-나온-문과생이-개발자를-꿈꾸기까지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B5%AD%EC%A0%9C%ED%95%99%EA%B5%90-%EB%82%98%EC%98%A8-%EB%AC%B8%EA%B3%BC%EC%83%9D%EC%9D%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EA%BF%88%EA%BE%B8%EA%B8%B0%EA%B9%8C%EC%A7%80&quot; aria-label=&quot; 국제학교 나온 문과생이 개발자를 꿈꾸기까지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💭 국제학교 나온 문과생이 개발자를 꿈꾸기까지&lt;/h2&gt;
&lt;p&gt;“너 컴퓨터 전공이니까 와서 이것 좀 고쳐봐”&lt;/p&gt;
&lt;p&gt;컴퓨터 전공으로 전과하고 가장 많은 들은 말이다. 사실 나도 흔히 컴퓨터 공학을 전공하면 컴퓨터를 잘 고칠(?) 거로 생각하는 사람들 중 하나였다. 코딩이 무엇인지도 모르는 사람 말이다. 그리고 대학교 1학년 때 처음 코딩을 접했다. 교양 필수였던 &lt;code class=&quot;language-text&quot;&gt;C 프로그래밍&lt;/code&gt; 수업을 통해서 말이다. 국제 중고등학교를 나와서 국제 정치학 전공을 선택한 나에게 그렇게 우연히 코딩의 기회가 닿았다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;이 친구 진짜 솔직하구나&lt;/code&gt; 코딩의 첫인상이다. 누군가 나에게 어떤 종류의 사람들을 좋아하느냐고 물어본다면 단번에 &lt;code class=&quot;language-text&quot;&gt;솔직한 사람&lt;/code&gt;이라고 대답할 것이다. 눈속임으로 알맹이가 없는 것을 있는 것처럼 꾸미는 것보다 담백하게 있으면 있거나 없으면 없다고 말하는 사람이나 글을 좋아한다. 그런 의미에서 코드는 정말 너무나도 정직하다. 있어야 할 것만 딱 있어야지 가장 잘 돌아간다. 잘못 짰다면 실행되지 않는다. 괜히 있어보이려고 이것저것 추가하면 작동 시간만 늘어날 뿐 아무런 이득을 주지 않는다. 코드는 거짓말을 하지 않는다.&lt;/p&gt;
&lt;p&gt;코딩의 두 번째 매력은 &lt;code class=&quot;language-text&quot;&gt;기승전결과 논리적 흐름이 있는 글&lt;/code&gt;이라는 것이다. 우선 본캐는 문과생이기 때문에 글을 좋아한다. 좋은 글은 처음, 중간, 끝이 있고 앞 문장과 뒷 문장이 논리적으로 연결이 되어야 한다. 한마디로 표현하면 일단 &lt;code class=&quot;language-text&quot;&gt;말이 되어야 한다&lt;/code&gt;. 무언가랑 많이 닮지 않았나? 코드는 시작 시점과 중간 처리 과정 마무리(출력 혹은 저장) 과정이 있다. 그리고 그사이를 메꾸는 코드 한줄 한줄은 논리적인 흐름에 따라서 앞 과정과 그다음 과정이 이어져야 한다.&lt;/p&gt;
&lt;p&gt;‘나랑 잘 맞네?’ 문과생이 개발자를 꿈꾸게 된 매우 단순한 이유다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-첫-발자국-자취&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%B2%AB-%EB%B0%9C%EC%9E%90%EA%B5%AD-%EC%9E%90%EC%B7%A8&quot; aria-label=&quot; 첫 발자국 자취 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🐾 첫 발자국 자취&lt;/h2&gt;
&lt;p&gt;‘우아한테크코스’에 입문하기 위한 첫 발걸음은 프리코스다. 포비의 말을 인용하자면 &lt;code class=&quot;language-text&quot;&gt;우테코도 나를 탐색하고 나도 우테코를 탐색하는 시간&lt;/code&gt;. 탐색을 정말 열심히 했더랬다. Notion에 미션내용과 요구사항 분석한 것, 매일 해야 할 Todo와 회고를 정리했다. 우테코 생활을 한 달 넘게 한 이 시점에서 글을 쓰기 위해서 다시 한번 들여다보았다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111900110-eacb5b80-8a73-11eb-8abc-d943b79ee484.png&quot; width=&quot;60%&quot; height=&quot;70%&quot; alt=&quot;첫 발을 잘 내딪자고 다짐하며 고른 발자국 이모지&quot;&gt;
&lt;/p&gt;
&lt;p&gt;프리코스 첫 번째 미션을 시작했을 때 작성했던 &lt;code class=&quot;language-text&quot;&gt;나만의 규칙 ver1.&lt;/code&gt;이 마지막 미션 &lt;code class=&quot;language-text&quot;&gt;나만의 규칙 ver3.&lt;/code&gt;가 되기까지 짧다면 짧은 3주 동안 늘어난 규칙만큼 성장했다. 중간에 너무 좌절하지 않으려고 애를 써야 했던 시간도 있었지만 너무 재미있어서 반드시 합격하고 싶다는 간절함도 커졌다. 그리고 노력하고 기다린 끝에 루터회관 14층에 입성!&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111900120-ffa7ef00-8a73-11eb-8c2c-6628fb29f434.png&quot; width=&quot;80%&quot; alt=&quot;프리코스를 진행하며 덧붙인 나만의 규칙 목록 변천사&quot;&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;️-일단-루터회관-14층이-마음에-든-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EF%B8%8F-%EC%9D%BC%EB%8B%A8-%EB%A3%A8%ED%84%B0%ED%9A%8C%EA%B4%80-14%EC%B8%B5%EC%9D%B4-%EB%A7%88%EC%9D%8C%EC%97%90-%EB%93%A0-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;️ 일단 루터회관 14층이 마음에 든 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;☘️ 일단 루터회관 14층이 마음에 든 이유&lt;/h2&gt;
&lt;p&gt;첫 번째는 초록색이다. 한달 동안 온라인으로 진행하다가 3월 초 처음 교육장에 들어왔을 때 초록초록하고 싱그러운 분위기가 나를 맞았다. 눈이 좋아지겠구나 싶었다. 포근한 소파랑 빈백, 위트있는 문구들도 마음에 들었다. 본래 도서관같이 정숙하는 분위기보다 일상 소음이 있는 카페에서 더 집중을 잘하는 스타일이다. 역시 나랑 잘 맞네 ㅎㅎ&lt;/p&gt;
&lt;p&gt;두 번째는 같은 곳을 향해 가는 실력있는 크루들이다. 쇼파에 앉아서 무언가를 하고 있으면 지나가던 크루들이 와서 뭐하냐고 물어본다. 쓸모 있는 얘기도 하고 쓸모 없는 얘기도 하는 데 둘 다 좋다. 모르는 것들을 물어보면 자기가 공부한 것을 설명한다. 모르면 같이 찾아본다. 그리고 지루하면 딴짓을 하면서 조금 쉰다. 프리코스를 하면서 가장 힘들었던 것은 ‘내가 지금 잘하고 있나?’ 확신할 수 없었던 것이다. 잘못된 방향으로 열심히 달리고 있었던 것이면 어쩌지 하는 고민. 그러나 우테코에서는 그것을 걱정할 필요가 없다. 루터회관 14층에는 어디를 가도 물어볼 크루와 코치가 있다는 것이 가장 마음에 든다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-좋은-개발자가-되고-싶은데&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B3%A0-%EC%8B%B6%EC%9D%80%EB%8D%B0&quot; aria-label=&quot; 좋은 개발자가 되고 싶은데 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👾 좋은(?) 개발자가 되고 싶은데..&lt;/h2&gt;
&lt;p&gt;그럼 좋은 개발자가 뭐지? 지금 시점에서 되돌아보니, 우테코 레벨1 동안은 &lt;code class=&quot;language-text&quot;&gt;좋은 개발자&lt;/code&gt;에 대한 정의를 내리는 기간이라고 할 수 있을 것 같다. 정리하면 다음 두 가지를 갖춘 개발자다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;같이 일하고 싶은 개발자&lt;/li&gt;
&lt;li&gt;좋은 코드를 작성하는 개발자&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;먼저 내 동료에게 좋은 개발자이다. 페어 프로그래밍을 하면서 내가 좋은 페어였을까 돌아보면서 두 가지 질문을 했다. 페어에게 좋은 피드백을 했는지, 그리고 페어의 피드백을 잘 받아들였는지. 두 가지가 적당히 잘 어우러져야 좋은 페어다. 흔히 개발자는 혼자 컴퓨터랑만 이야기하는 이미지가 강한데 사실 그렇지 않다. 내가 짜는 코드도 페어가 이해하기 쉽도록 배려심이 가득한 코드여야 한다.&lt;/p&gt;
&lt;p&gt;두 번째는 좋은 코드를 작성하는 개발자다. 이건 좀 어렵다. 배운 키워드로 말하자면 TDD, 객체지향, 코드 컨벤션 등을 잘 적용해야 한다. 처음에는 &lt;code class=&quot;language-text&quot;&gt;내가 보기 좋은 코드&lt;/code&gt;를 짠다. 그다음에는 &lt;code class=&quot;language-text&quot;&gt;페어가 보기 좋은 코드&lt;/code&gt;. 그리고 그다음에는 &lt;code class=&quot;language-text&quot;&gt;리뷰어가 보기에 좋은 코드&lt;/code&gt;. 이 정도 오면 충돌 지점이 생긴다. 각자 보기에 좋은 코드가 다른 형태일 때가 오는 것이다. 그럼.. &lt;code class=&quot;language-text&quot;&gt;포비가 보기에 좋은 코드&lt;/code&gt;?&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;-그래서-답을-좀-찾았어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%8B%B5%EC%9D%84-%EC%A2%80-%EC%B0%BE%EC%95%98%EC%96%B4&quot; aria-label=&quot; 그래서 답을 좀 찾았어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤔 그래서 답을 좀 찾았어?&lt;/h2&gt;
&lt;p&gt;결론부터 말하자면 ‘아니요’ 이다. 우테코 레벨1을 지나면서 많은 것을 듣고 배웠지만 지금은 답을 정의할 때가 아니라 질문을 던질 때다. 그냥 질문이 아니라 좋은 질문을. 좋은 코드가 무엇일지 끊임없이 고민하면서 이런 코드 저런 코드를 탐색해야한다. 좋은 개발자가 무엇일지, 좋은 기술이 무엇일지, 정말 성장하고 있는지 스스로 물어봐야한다. 생각에 생각을 더하고 시야를 넓히는 질문을 던져야할 때다.&lt;/p&gt;
&lt;p&gt;그럴싸한 답은 아직 없지만.. 우선은 정직한 코드가 내가 애쓴 시간을 그대로 보여줄 때까지 열심히 해보는 수밖에!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[@ModelAttribute vs. @RequestBody]]></title><description><![CDATA[이번에 스프링 체스 자바 웹 어플리케이션을 사용하여 구현하면서 처음에는 모두  으로 데이터를 가져왔었다. 하지만 인자가 너무 많아지는 경우 메서드에 파라미터가 많아지면서 가독성이 안 좋아졌다. 또한 DTO…]]></description><link>https://yjksw.github.io/model-attribute-request-body/</link><guid isPermaLink="false">https://yjksw.github.io/model-attribute-request-body/</guid><pubDate>Thu, 25 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번에 스프링 체스 자바 웹 어플리케이션을 사용하여 구현하면서 처음에는 모두 &lt;code class=&quot;language-text&quot;&gt;@RequestParam&lt;/code&gt; 으로 데이터를 가져왔었다. 하지만 인자가 너무 많아지는 경우 메서드에 파라미터가 많아지면서 가독성이 안 좋아졌다. 또한 DTO에 해당 데이터를 담아서 서비스 레이어에 전달해야하거나 할 때 일일이 데이터를 DTO에 담아서 가공해야 하는 작업을 해야하기도 했다. 코드를 구현할 때 손가락이 아프다면 수정할 부분을 찾으라고 했었는데 확실히 &lt;code class=&quot;language-text&quot;&gt;@RequestParam&lt;/code&gt;으로 받는 것은 손가락이 아팠다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;아니나 다를까 리뷰어가 @ModelAttribute를 사용하는 걸 추천했다. 마침 레벨1 제이슨 톡방에서도 @ModelAttribute 에 대한 논의가 활발하길래 공부도 하고 코드에 적용을 하며 배운 것을 기록해본다.&lt;/p&gt;
&lt;h2 id=&quot;modelattribute-vs-requestbody&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#modelattribute-vs-requestbody&quot; aria-label=&quot;modelattribute vs requestbody permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;@ModelAttribute vs. @RequestBody&lt;/h2&gt;
&lt;p&gt;간단하게 말하면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@ModelAttribute&lt;/span&gt;은 form data로 오는 데이터를 저장한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestBody&lt;/span&gt;는 JSON&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;xml 타입으로 오는 body에 담긴 데이터를 저장한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@ModelAttribute&lt;/code&gt; 같은 경우는 parameter 값으로 DTO에 바인딩한다. 따라서 해당 DTO 객체에 &lt;code class=&quot;language-text&quot;&gt;setter&lt;/code&gt; 메소드가 반드시 있어야 한다. 따라서 타입에 대한 검증을 한 후에 setting을 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@RequestBody&lt;/code&gt;의 경우는 본문 body에 있는 Json/xml 타입을 바인딩하기 때문에 &lt;code class=&quot;language-text&quot;&gt;HttpMessageReader&lt;/code&gt;를 통해서 &lt;code class=&quot;language-text&quot;&gt;ObjectMapper&lt;/code&gt;를 한다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;HttpMessageReader&lt;/code&gt;는 들어온 request body의 데이터값을 Java object로 역직렬화 해준다. 이때 역직렬화는 &lt;code class=&quot;language-text&quot;&gt;ObjectMapper&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;readValue()&lt;/code&gt; 메서드로 변환하므로 setter가 필요가 없다. (단, 기본 생성자의 경우는 필요한 경우가 많다)&lt;/p&gt;
&lt;h2 id=&quot;사용예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%98%88%EC%8B%9C&quot; aria-label=&quot;사용예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용예시&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;form 데이터로 넘어오는 경우 @ModelAttribute를 사용해서 바인딩한다. 여기서 @RequestBody를 쓰면 에러가 발생한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/white-game&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;whiteStart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpSession&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@ModelAttribute&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RoomInfoRequestDto&lt;/span&gt; roomInfoRequestDto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; roomInfoRequestDto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRoomName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; roomInfoRequestDto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;room&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;game&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래의 경우 js에서 데이터를 보내줄 content-type을 지정하지 않았을 때 오류가 났다. 이후에 @RequestBody는 json 타입을 받기 때문에 &lt;code class=&quot;language-text&quot;&gt;Content-type&lt;/code&gt;을  &lt;code class=&quot;language-text&quot;&gt;application/json&lt;/code&gt;으로 지정하니 잘 바인딩이 되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@PutMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/game&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MoveResponseDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpSession&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MoveRequestDto&lt;/span&gt; moveRequestDto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; chessService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;moveRequestDto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;번외로, 서버로 내보내는 content-type에서 json을 지정하고 싶을 경우 &lt;code class=&quot;language-text&quot;&gt;Content-type : &apos;application/json&apos;&lt;/code&gt; 으로 지정하고 서버에서 받는 데이터의 경우 &lt;code class=&quot;language-text&quot;&gt;Data-type : &apos;json&apos;&lt;/code&gt; 으로 지정해야 한다. (중요한 이유는 없고 그냥 설정이 그렇게 되어 있음)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#modelattribute-vs-requestbody&quot;&gt;@ModelAttribute vs. @RequestBody&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%98%88%EC%8B%9C&quot;&gt;사용예시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Stream vs. Collection]]></title><description><![CDATA[요약하자면 Stream과 Collection의 차이는 다음과 같다. 개념적으로 접근했을 때 Collection의 경우에는 어떠한 데이터를 담는 자료구조의 역할을 주로 하지만, Stream의 경우는 연산과 관련된 것이 주라고 볼 수 있다. Quote…]]></description><link>https://yjksw.github.io/stream-vs-collection/</link><guid isPermaLink="false">https://yjksw.github.io/stream-vs-collection/</guid><pubDate>Sat, 20 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;요약하자면 Stream과 Collection의 차이는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt; 스트림은 요소를 보관하지 않고 필요할 때 생성되거나 하위 &lt;span class=&quot;token class-name&quot;&gt;Collection&lt;/span&gt;에 보관한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt; 스트림은 원본을 변경하기보다 새로운 스트림을 생성하여 반환한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt; 스트림 연산은 lazy operation이다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;따라서 무한 스트림도 가능한 것이다&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;개념적으로 접근했을 때 Collection의 경우에는 어떠한 데이터를 담는 자료구조의 역할을 주로 하지만, Stream의 경우는 연산과 관련된 것이 주라고 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quote&lt;/p&gt;
&lt;p&gt;Java &lt;em&gt;Collection&lt;/em&gt;s offer efficient mechanisms to store and process the data by providing data structures like &lt;em&gt;&lt;a href=&quot;https://drafts.baeldung.com/java-linkedlist&quot;&gt;List&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://drafts.baeldung.com/java-hashset&quot;&gt;Set&lt;/a&gt;&lt;/em&gt;, and &lt;em&gt;&lt;a href=&quot;https://drafts.baeldung.com/java-hashmap&quot;&gt;Map&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;However, the Stream API is useful for performing various operations on the data without the need for intermediate storage.&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&quot;https://www.baeldung.com/java-return-stream-collection&quot;&gt;https://www.baeldung.com/java-return-stream-collection&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;traversal&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#traversal&quot; aria-label=&quot;traversal permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Traversal&lt;/h3&gt;
&lt;p&gt;Collection은 여러번 데이터를 횡단할 수 있지만, Stream은 한번만 가능하며 source로부터 새로운 Stream을 추출해야 새롭게 traverse 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//error 없음&lt;/span&gt;
numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//error 발생&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;lazy-operation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lazy-operation&quot; aria-label=&quot;lazy operation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy Operation&lt;/h3&gt;
&lt;p&gt;Collection은 요소를 보관하기 때문에 해당 Collection에 어떠한 요소가 추가되기 전에 operation을 우선 실행해야한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;하지만 Stream은 lazy하기 연산을 하기 때문에 우선 Stream에 담겨진 요소들에 대해서 선실행을 하지 않는다. 이후에 필요할 때 요소를 꺼내오고 연산을 하도록 한다. 또한 Stream은 불변이므로 요소를 추가하거나 삭제할 수 없다.&lt;/p&gt;
&lt;h3 id=&quot;외부반복-vs-내부반복&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%B8%EB%B6%80%EB%B0%98%EB%B3%B5-vs-%EB%82%B4%EB%B6%80%EB%B0%98%EB%B3%B5&quot; aria-label=&quot;외부반복 vs 내부반복 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;외부반복 vs. 내부반복&lt;/h3&gt;
&lt;p&gt;외부에서 값을 꺼내서 반복해야하는 Collection과 다르게 Stream은 내부적으로 알아서 반복문을 돌면서 명령한 연산을 수행한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;내부 반복을 했을 경우 1) 반복자를 사용하여 명시적으로 표시할 필요가 없고 2) 병렬처리시 스레드간 공유자원에 대한 관리를 할 필요가 없다.&lt;/p&gt;
&lt;h3 id=&quot;유연성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EC%97%B0%EC%84%B1&quot; aria-label=&quot;유연성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유연성&lt;/h3&gt;
&lt;p&gt;Stream은 여러 operation의 조합으로 유연하게 데이터 연산이 가능한 장점이 있다. 어떤 특정 result set을 도출해서 consumer에게 넘겨줄 필요 없이 필요한 연산을 조합하여 바로바로 처리할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;functional-behavior&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#functional-behavior&quot; aria-label=&quot;functional behavior permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functional Behavior&lt;/h3&gt;
&lt;p&gt;Stream은 functional 하기 때문에 기존 데이터를 변경시키지 않는다. 따라서 result set도 immutable (연산 중에) 하기 때문에 병렬 처리에 강하다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;참고 링크:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bk-investing.tistory.com/42&quot;&gt;https://bk-investing.tistory.com/42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://javaconceptoftheday.com/collections-and-streams-in-java/#:~:text=Difference%20Between%20Collections%20Vs%20Streams%20In%20Java%20%3A&amp;#x26;text=Collections%20are%20mainly%20used%20to%20store%20and%20group%20the%20data,or%20remove%20elements%20from%20streams&quot;&gt;https://javaconceptoftheday.com/collections-and-streams-in-java/#:~:text=Difference Between Collections Vs Streams In Java %3A&amp;#x26;text=Collections are mainly used to store and group the data,or remove elements from streams&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/java-return-stream-collection&quot;&gt;https://www.baeldung.com/java-return-stream-collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#traversal&quot;&gt;Traversal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lazy-operation&quot;&gt;Lazy Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%B8%EB%B6%80%EB%B0%98%EB%B3%B5-vs-%EB%82%B4%EB%B6%80%EB%B0%98%EB%B3%B5&quot;&gt;외부반복 vs. 내부반복&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%A0%EC%97%B0%EC%84%B1&quot;&gt;유연성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#functional-behavior&quot;&gt;Functional Behavior&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Boolean 대신 timestamp]]></title><description><![CDATA[이것은 정답이 아니라 한 블로그에 기술된 하나의 의견이다. 읽어보고 신선한 접근이라고 생각해서 정리해둔다. 링크 데이터베이스에서 boolean 값을 지정해서 저장해야하는 경우들이 있다. , ,  등등을 기록해야하는 경우들이다. 이 경우에 boolean…]]></description><link>https://yjksw.github.io/boolean-timestamp/</link><guid isPermaLink="false">https://yjksw.github.io/boolean-timestamp/</guid><pubDate>Wed, 17 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;이것은 정답이 아니라 한 블로그에 기술된 하나의 의견이다. 읽어보고 신선한 접근이라고 생각해서 정리해둔다. &lt;a href=&quot;%5Bhttps://changelog.com/posts/you-might-as-well-timestamp-it%5D(https://changelog.com/posts/you-might-as-well-timestamp-it)&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터베이스에서 boolean 값을 지정해서 저장해야하는 경우들이 있다. &lt;code class=&quot;language-text&quot;&gt;is_published&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;is_signed&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;is_finished&lt;/code&gt; 등등을 기록해야하는 경우들이다. 이 경우에 boolean으로 저장하지 말고 timestamp로 저장하도록 해보자! 글쓴이의 말을 인용하자면 “단 한번도 후회한적이 없다”. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Boolean 값으로 저장할만한 데이터는 언제 해당 데이터가 set 되었는지에 대한 timestamp를 제공함으로 잃는 것이 없다. 아무리 해당 시간 데이터가 필요하지 않더라도 말이다. 이렇게 구현을 하게 된다면 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; 은 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;로 &lt;code class=&quot;language-text&quot;&gt;non-null&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;로 간주되어 처리하면 될 것이다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//boolean 사용&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;is_finished&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//timestamp 사용&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;finished_at&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;따라서 자연스럽게 &lt;code class=&quot;language-text&quot;&gt;deleted_at&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;hidden_at&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;signed_in_at&lt;/code&gt; 등등으로 변환될 것이다.&lt;/p&gt;
&lt;h3 id=&quot;의견&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%98%EA%B2%AC&quot; aria-label=&quot;의견 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;의견&lt;/h3&gt;
&lt;p&gt;글쓴이의 말이 일리가 있다. 큰 구현의 차이나 처리의 차이 없이 동일한 연산을 수행할 수 있고, 더 많은 정보를 제공하는 이점이 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;하지만 해당 데이터가 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;로 지정이 되어 있는 시점이 있다는 것이 해당 코드를 취약하게 만들 수도 있을 것 같다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이 부분에 대한 다른 크루들의 생각을 첨부! &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; alt=&quot;_2021-04-25__7 01 27&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134771368-791c2734-8e0e-49e4-9b58-b9608036c69f.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[DIP 의존관계 역전의 원칙]]></title><description><![CDATA[스프링 강의 중 DAO vs. Repository의 차이점에 대해서 논의하다가 다음과 같은 표현이 나왔다. Repository의 추상 인터페이스는 Domain Layer에 속하며 Domain…]]></description><link>https://yjksw.github.io/dip/</link><guid isPermaLink="false">https://yjksw.github.io/dip/</guid><pubDate>Sat, 13 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;스프링 강의 중 DAO vs. Repository의 차이점에 대해서 논의하다가 다음과 같은 표현이 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repository의 추상 인터페이스는 Domain Layer에 속하며 Domain 객체들을 관리하고 생애주기를 같이한다. 그 구현체인 SimpleJpaRepository는 Infrastructure에 속한다. 추상화된 repository 인터페이스를 사용하면서 추상에 의존하고 구체에 의존하지 않도록 구성(DIP) 하여 유연성 있는 시스템을 구성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 나오는 DIP는 무엇이고 위와 같은 구성이 어떻게 우연성을 제공하는 걸까?&lt;/p&gt;
&lt;h3 id=&quot;dip-요약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dip-%EC%9A%94%EC%95%BD&quot; aria-label=&quot;dip 요약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DIP 요약&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt;의 약자이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;본래 객체는 상위 계층이 하위 계층에 의존한다. DIP는 그 관계를 역전시켜서 상위 계층이 하위 계층의 구현에서 독립하도록 한다. 그러기 위한 원칙 두가지는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상위 모듈과 하위 모듈이 서로 의존하는 것이 아니라 모두 추상화에 의존한다.&lt;/li&gt;
&lt;li&gt;추상화가 구현에 의존하는 것이 아니라 구현이 추상화에 의존해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;한마디로 요약하면 다음이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“The DIP is about inverting the classic dependency between high-level and low-level components by abstracting away the interacting between them.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;출처 : &lt;a href=&quot;https://www.baeldung.com/java-dependency-inversion-principle&quot;&gt;https://www.baeldung.com/java-dependency-inversion-principle&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;즉 상위 모듈과 하위 모듈 사이에 추상화를 껴서 서로를 의존하는 것이 아니라 인터페이스를 통해서 협력하도록 하는 것이다.&lt;/p&gt;
&lt;h3 id=&quot;dip-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dip-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;dip 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DIP 구현&lt;/h3&gt;
&lt;p&gt;다음과 같은 구현이 있을 때 어떤 것이 DIP 일까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; class StringProcessor {
    
    private final StringReader stringReader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    private final StringWriter stringWriter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; StringProcessor&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StringReader stringReader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; StringWriter stringWriter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; {
        this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stringReader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stringReader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stringWriter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stringWriter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    }

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; void printString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; {
        stringWriter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stringReader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getValue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;StringReader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;StringWriter&lt;/code&gt; 가 인터페이스이고 &lt;code class=&quot;language-text&quot;&gt;StringProcessor&lt;/code&gt;와 같은 패키지에 존재한다. (구현체는 함께 있지 않다)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;StringReader&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;StringWriter&lt;/code&gt;가 인터페이스이면서 &lt;code class=&quot;language-text&quot;&gt;StringProcessor&lt;/code&gt;와 다른 패키지에 존재한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;즉 구현체와 따로 분리되어 있어서 StringProcessor는 인터페이스에 의존하고 인터페이스는 언제나 변경이 가능하여 구현체에 존재하지 않도록 한다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dip-%EC%9A%94%EC%95%BD&quot;&gt;DIP 요약&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dip-%EA%B5%AC%ED%98%84&quot;&gt;DIP 구현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Transaction의 동작제어]]></title><description><![CDATA[Transaction 이란? 개인이 설정할 수 있는 작업의 최소 단위이다. Transaction을 기준으로 을 할 수도, 을 할 수도 있다. Transaction을 사용할 때 DBMS에서 ACID를 제공받을 수 있다. Atomic…]]></description><link>https://yjksw.github.io/transaction/</link><guid isPermaLink="false">https://yjksw.github.io/transaction/</guid><pubDate>Tue, 09 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;transaction-이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#transaction-%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;transaction 이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transaction 이란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개인이 설정할 수 있는 작업의 최소 단위이다.&lt;/li&gt;
&lt;li&gt;Transaction을 기준으로 &lt;code class=&quot;language-text&quot;&gt;commit&lt;/code&gt;을 할 수도, &lt;code class=&quot;language-text&quot;&gt;rollback&lt;/code&gt;을 할 수도 있다.&lt;/li&gt;
&lt;li&gt;Transaction을 사용할 때 DBMS에서 ACID를 제공받을 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomic(원자성)&lt;/strong&gt; : 한꺼번에 모두 처리가 되거나, 한꺼번에 모두 처리가 되지 않도록 원자성을 부여한다. 데이터 관련 일부만 처리되었을 때 생길 복잡한 상황과 부작용을 막을 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency(일치성)&lt;/strong&gt; : 하나의 데이터가 처리되었을 때 관련된 다른 테이블 혹은 상황에서 일관된 논리가 수행 되도록 하는 것을 보장한다 (ex. A 에서 1000원이 차감되면 B에서 1000원이 증감되어야 하는 상황 등등.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation(독립성)&lt;/strong&gt; : 데이터가 처리되는 도중 다른 일이 중간에 일어나지 않도록 해당 데이터를 보호하도록 보장. 중간에 다른 일이 끼어들어 부작용이 생기는 것을 방지한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability(영구보존성)&lt;/strong&gt; : 데이터를 DB에 저장하여 보존하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jdbc에서-transaction-설정-및-응용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jdbc%EC%97%90%EC%84%9C-transaction-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%9D%91%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;jdbc에서 transaction 설정 및 응용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JDBC에서 Transaction 설정 및 응용하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JDBC에서 &lt;code class=&quot;language-text&quot;&gt;Connection&lt;/code&gt;을 생성할 때 해당 &lt;code class=&quot;language-text&quot;&gt;Connection&lt;/code&gt;은 default로 &lt;code class=&quot;language-text&quot;&gt;setAutoCommit(true)&lt;/code&gt; 로 설정이 되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 말은 각 SQL statements가 모두 기본 transaction으로 래핑되어 있다는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개인적으로 작업 단위를 설정해서 ACID를 보장받으며 처리하고 싶을 경우 다음과 같이 설정해야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;Connection con &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DriverManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getConnection&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setAutoCommit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;//sql 실행&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;결과 정상 처리&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; {
 con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
} &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; {
	con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jdbc-savepoint-설정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jdbc-savepoint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;jdbc savepoint 설정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JDBC Savepoint 설정하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Transaction을 통해서 commit 과 rollback 작업단위를 설정할 수 있지만, 하나의 작업 단위 내에서도 rollback 하고 싶은 지점을 직접 설정할 수도 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이때는 &lt;code class=&quot;language-text&quot;&gt;setAutoCommit(false)&lt;/code&gt;로 설정해야지 아니면 자동으로 각 sql 문이 하나의 transaction으로 묶인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Savepoint를 설정해서 원하는 작업 포인트로 rollback 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setSavepoint(String savepointName) : 새로운 savePoint를 설정하고 해당 객체를 리턴&lt;/li&gt;
&lt;li&gt;releaseSavepoint(Savepoint savepoint) : 해당 savepoint 지점을 해제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용 예시:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;try {
	con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setAutoCommit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
	Statement stmt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;createStatement&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;SavePoint&lt;/span&gt; savePoint1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setSavepoint&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;savepoint1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;//sql 쿼리 실행&lt;/span&gt;
	con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
} catch &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SQLException&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; {
	con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;savepoint1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt; : &lt;a href=&quot;http://yimoyimo.tk/transaction_DI/&quot;&gt;http://yimoyimo.tk/transaction_DI/&lt;/a&gt;, &lt;a href=&quot;https://hamait.tistory.com/345&quot;&gt;https://hamait.tistory.com/345&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#transaction-%EC%9D%B4%EB%9E%80&quot;&gt;Transaction 이란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jdbc%EC%97%90%EC%84%9C-transaction-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%9D%91%EC%9A%A9%ED%95%98%EA%B8%B0&quot;&gt;JDBC에서 Transaction 설정 및 응용하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jdbc-savepoint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot;&gt;JDBC Savepoint 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[웹 Layers에 대해]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/web-layer/</link><guid isPermaLink="false">https://yjksw.github.io/web-layer/</guid><pubDate>Fri, 05 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;데이터의 흐름 또는 코드가 책임지는 부분의 유사도에 따라서 계층별로 나누어서 대규모 웹 어플리케이션을 구현한다. 이때의 이점은 각 계층이 담당하고 있는 책임을 알 수 있기 때문에 대량의 코드에서도 필요한 부분을 찾아서 수정하기 다소 쉽다. 또한 구조적으로 정리되어 있는 이점이 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;웹 어플리케이션을 구현할 때 이러한 계층들에 대한 제대로 된 정의를 가지고 각자가 담당하는 기능을 구현하는 것이 좋다. 함께 일하는 동료 개발자나 이후에 레거시 코드로 받을 다른 개발자들과의 의사소통 비용을 크게 감소하고 쉽게 코드와 구조를 이해할 수 있기 때문이다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;총 5개의 계층이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt; 프레젠테이션 계층 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Presentation Layer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt; 제어 계층 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Control Layer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt; 비지니스 로직 계층 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Business Logic Layer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4.&lt;/span&gt; 퍼시스턴스 계층 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Persistence Layer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5.&lt;/span&gt; 도메인 모델 계층 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Domain Model Layer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;presentation-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#presentation-layer&quot; aria-label=&quot;presentation layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Presentation Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;식당에서 &lt;code class=&quot;language-text&quot;&gt;메뉴판&lt;/code&gt; 역할&lt;/li&gt;
&lt;li&gt;UI를 담당하는 계층이다.
&lt;ul&gt;
&lt;li&gt;User에게 보여지는 화면 담당&lt;/li&gt;
&lt;li&gt;User의 입력을 받는 담당&lt;/li&gt;
&lt;li&gt;입력에 따른 결과를 서버로부터 받아서 다시 화면에 띄우는 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다른 계층과의 접촉이 없고 Control layer를 통해서 다른 계층과 협업한다. 따라서 presentation layer의 모든 요청과 응답은 control layer를 통해서 이루어진다.&lt;/li&gt;
&lt;li&gt;UI에서 직접적인 비지니스 로직을 수행해서 일을 처리하지 않는다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;control-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#control-layer&quot; aria-label=&quot;control layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Control Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;식당에서 &lt;code class=&quot;language-text&quot;&gt;지배원&lt;/code&gt; 역할&lt;/li&gt;
&lt;li&gt;Presentation layer와 비지니스 로직을 담당하는 계층 분리하는 연결 계층이다. UI에서 직접적으로 핵심 비지니스 로직에 접근하지 않도록 UI에서 온 요청에 대해 한차례 필터링 한다.&lt;/li&gt;
&lt;li&gt;즉, 사용자 화면에서 온 요청을 분석해서 비지니스 로직에 해당 요청에 대한 처리(핵심적인 일 수행)을 결정하고 그에 따른 결과를 다시 사용자 화면으로 응답한다.
&lt;ul&gt;
&lt;li&gt;다르게 이해하면, 핵심 비지니스 로직을 처리하는 계층은 어떠한 요청인지, 누구로부터의 요청인지를 알지 못한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UI 입력 검증, 요청/응답 전달, 예외 핸들링, Domain에서 처리된 로직 뷰와 연결 등의 기능을 담당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;business-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#business-layer&quot; aria-label=&quot;business layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Business Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;식당에서 &lt;code class=&quot;language-text&quot;&gt;요리사&lt;/code&gt; 역할&lt;/li&gt;
&lt;li&gt;핵심 업무를 처리하는 로직을 담당하는 계층이다.&lt;/li&gt;
&lt;li&gt;즉, 어플리케이션의 핵심 기능이 어떻게 처리될 것인지에 대한 코드 구현이 모두 포함되어 있다.&lt;/li&gt;
&lt;li&gt;웹 어플리케이션의 핵심 부분이기 때문에 다른 요소들(사용자 화면, 연결하는 컨트롤러 등)은 변경이 잦을 수 있지만 비지니스 계층은 핵심 기능의 변경 요청이 있지 않은 이상 대체로 변경되지 않는다.&lt;/li&gt;
&lt;li&gt;서버의 주를 이루기 때문에 재사용 가능성이 높고 따라서 잘 설계되어야 한다.&lt;/li&gt;
&lt;li&gt;Business layer 로직은 다른 계층들과 특별히 더 분리되어 있는 것이 좋다. 그래야 유지보수가 쉽고 응집성이 높아진다.&lt;/li&gt;
&lt;li&gt;추가로 Business layer 의 코드는 뷰와 persitence layer(다음 설명 계층) 의 연결고리 역할도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;persistence-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#persistence-layer&quot; aria-label=&quot;persistence layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Persistence Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;식당에서 &lt;code class=&quot;language-text&quot;&gt;재료&lt;/code&gt; 역할&lt;/li&gt;
&lt;li&gt;데이터 처리를 담당하는 계층으로 CRUD를 담당한다.&lt;/li&gt;
&lt;li&gt;관계형 정보를 저장 및 업데이트, 삭제 등등의 역할을 수행하는데, 서버에서 생성되는 정보에 &lt;code class=&quot;language-text&quot;&gt;영속성&lt;/code&gt;을 부여한다는 측면에서 persistence layer라고 부른다.&lt;/li&gt;
&lt;li&gt;반대로 DB에서 가져온 정보를 객체화 하는 역할도 수행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;domain-model-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#domain-model-layer&quot; aria-label=&quot;domain model layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domain Model Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;식당에서 &lt;code class=&quot;language-text&quot;&gt;그릇&lt;/code&gt; 역할&lt;/li&gt;
&lt;li&gt;계층 사이에 전달되는 &lt;strong&gt;비지니스 객체&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;DTO의 형태로 계층간 전달이 되며 핵심 데이터를 보관하여 전달된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[참고자료]&lt;/strong&gt; : &lt;a href=&quot;https://postitforhooney.tistory.com/entry/Spring-MVC-%ED%8C%A8%ED%84%B4%EC%97%90%EC%84%9C%EC%9D%98-5%EA%B0%80%EC%A7%80-%EA%B3%84%EC%B8%B5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%B3%B4-%ED%8D%BC%EC%98%B4&quot;&gt;https://postitforhooney.tistory.com/entry/Spring-MVC-패턴에서의-5가지-계층에-대한-정보-퍼옴&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#presentation-layer&quot;&gt;Presentation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#control-layer&quot;&gt;Control Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#business-layer&quot;&gt;Business Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#persistence-layer&quot;&gt;Persistence Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#domain-model-layer&quot;&gt;Domain Model Layer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Gradle 의존성 주입 시 implementation vs. compile]]></title><description><![CDATA[웹 UI/DB…]]></description><link>https://yjksw.github.io/gradle-dependency/</link><guid isPermaLink="false">https://yjksw.github.io/gradle-dependency/</guid><pubDate>Tue, 02 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;웹 UI/DB 를 적용한 온라인 체스 게임을 구현하는 중 리뷰어가 다음과 같은 질문을 했다. 처음 웹 개발을 해보는 것이라서 우선 돌아가기 위해 인터넷과 크루들이 추가한 &lt;code class=&quot;language-text&quot;&gt;dependency&lt;/code&gt; 를 우선 가져와 추가했었는데 리뷰어의 질문을 받고 해당 개념을 찾아보았다.&lt;/p&gt;
&lt;p&gt;[참고 링크](&lt;a href=&quot;https://tomgregory.com/gradle-implementation-vs-compile-dependencies/#:~:text=The%20compile%20dependency%20configuration%20is,the%20same%20functionality%20as%20compile.&amp;#x26;text=You%20should%20always%20use%20implementation,as%20compile%20is%20now%20deprecated&quot;&gt;https://tomgregory.com/gradle-implementation-vs-compile-dependencies/#:~:text=The compile dependency configuration is,the same functionality as compile.&amp;#x26;text=You should always use implementation,as compile is now deprecated&lt;/a&gt;.)&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134770516-da835d13-928a-4cf9-95fc-61b73542173c.png&quot;&gt;&lt;/p&gt; 
&lt;p&gt;결론부터 말해서 다음을 기억하면 될 것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;compile&lt;/code&gt; 은 Gradle 7.0 부터 depracated 되므로 대부분의 상황에서 &lt;code class=&quot;language-text&quot;&gt;implementation&lt;/code&gt; 을 사용하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Compile&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;implementation&lt;/code&gt;은 거의 같은 가능을 하기 때문에 서로가 대체 되어도 상관없다.&lt;/p&gt;
&lt;h3 id=&quot;그렇다면-implementation-의존성-주입은-무엇일까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-implementation-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;그렇다면 implementation 의존성 주입은 무엇일까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그렇다면 implementation 의존성 주입은 무엇일까?&lt;/h3&gt;
&lt;p&gt;Java 프로젝트가 실행이 될 때 2개의 classpath가 존재한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complie classpath&lt;/li&gt;
&lt;li&gt;Runtime classpath&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gradle dependency를 추가할 때 위 두가지 경우에 필요한 의존성들이 나누어지고 둘다 필요한 경우도 있다. 따라서 각각 필요한 경우에 추가할 수 있는 경우들과 두가지 경우 모두 필요할 경우 추가할 수 있는 키워드가 따로 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compileOnly : compile classpath에서 필요한 경우&lt;/li&gt;
&lt;li&gt;runtimeOnly : runtime classpath에서 필요한 경우&lt;/li&gt;
&lt;li&gt;implementation : 위 두가지에 모두 필요한 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 경우들을 나누어서 의존성을 추가했을 때, 각각의 경우에 dependencies와 classpaths의 간결함으로 컴파일 시간이 단축되고 프로그램 복잡도를 낮출 수 있다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-implementation-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C&quot;&gt;그렇다면 implementation 의존성 주입은 무엇일까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[싱글톤 vs. Static]]></title><description><![CDATA[아직 잘 모르는 분야라서 우선 두개의 차이점에 대해서만 기록해본다. 둘 중 어느 것을 어느 때에 사용해야 하는지에 대한 판단은 잘 모르겠지만 이 링크 를  확인해보면 singleton…]]></description><link>https://yjksw.github.io/singleton-vs-static/</link><guid isPermaLink="false">https://yjksw.github.io/singleton-vs-static/</guid><pubDate>Wed, 03 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;아직 잘 모르는 분야라서 우선 두개의 차이점에 대해서만 기록해본다. 둘 중 어느 것을 어느 때에 사용해야 하는지에 대한 판단은 잘 모르겠지만 이 &lt;a href=&quot;%5Bhttps://www.yegor256.com/2016/06/27/singletons-must-die.html%5D(https://www.yegor256.com/2016/06/27/singletons-must-die.html)&quot;&gt;링크&lt;/a&gt; 를  확인해보면 singleton 사용을 지양하라고 했고, 또 정적 메소드도 객체지향에서는 지양하는 것이 좋다고 한다.&lt;/p&gt;
&lt;h3 id=&quot;싱글톤&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%B1%EA%B8%80%ED%86%A4&quot; aria-label=&quot;싱글톤 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;싱글톤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단 하나의 객체만을 생성할 수 있는 패턴이다. 객체를 생성하려고 할 때마다 이미 생성된 것을 반환하거나 없다면 해당 시간에 처음 생성하도록 한다.&lt;/li&gt;
&lt;li&gt;정적 클래스와는 달리 싱클톤 클래스는 &lt;code class=&quot;language-text&quot;&gt;확장&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;인터페이스 구현&lt;/code&gt;이 가능하다.&lt;/li&gt;
&lt;li&gt;언제 생성하는지에 대한 시점을 조정할 수 있다.&lt;/li&gt;
&lt;li&gt;객체이기 때문에 힙에 싱글톤 객체가 저장된다. 따라서 쓰레드간 공유가 가능하다.&lt;/li&gt;
&lt;li&gt;싱글톤은 구현으로 단 하나만 생성되게 보장한 것이지만 그 자체로는 클래스 객체이기 때문에 직렬화가 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static-클래스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#static-%ED%81%B4%EB%9E%98%EC%8A%A4&quot; aria-label=&quot;static 클래스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Static 클래스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Static 메소드를 가지는 클래스를 말한다.&lt;/li&gt;
&lt;li&gt;어플리케이션이 메모리에 로드 될 때 정적 스택에 바로 초기화 된다.&lt;/li&gt;
&lt;li&gt;표준 클래스라고 보기는 어렵고 &lt;code class=&quot;language-text&quot;&gt;함수와 변수가 있는 네임스페이스&lt;/code&gt; 라고 볼 수 있다.&lt;/li&gt;
&lt;li&gt;정적 스택에 저장이 되기 때문에 쓰레드 관리가 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;차이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;차이&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;엘레강트 오브젝트 발췌
&lt;ul&gt;
&lt;li&gt;싱클톤 패턴과 정적 클래스의 가장 큰 차이는 싱클톤은 분리 가능한 의존성으로 연결되어 있지만 정적 클래스는 하드코딩의 결정체라는 것이다.&lt;/li&gt;
&lt;li&gt;싱글톤 패턴을 사용하면 내부에 선언된 정적 객체를 교체해서 변경할 수 있다.&lt;/li&gt;
&lt;li&gt;정적 메소드로 구현된 유틸리티 클래스는 분리할 수 없는 하드코딩된 의존성이다.&lt;/li&gt;
&lt;li&gt;따라서 OOP 관점에서는 정적 클래스가 싱글톤 패턴보다 더 안좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%B1%EA%B8%80%ED%86%A4&quot;&gt;싱글톤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#static-%ED%81%B4%EB%9E%98%EC%8A%A4&quot;&gt;Static 클래스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B0%A8%EC%9D%B4&quot;&gt;차이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[전략 패턴이란?]]></title><description><![CDATA[전략 패턴(Strategy Pattern…]]></description><link>https://yjksw.github.io/strategy-pattern/</link><guid isPermaLink="false">https://yjksw.github.io/strategy-pattern/</guid><pubDate>Tue, 02 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;전략-패턴strategy-pattern이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;전략 패턴strategy pattern이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전략 패턴(Strategy Pattern)이란?&lt;/h2&gt;
&lt;p&gt;객체가 할 수 있는 &lt;strong&gt;행위&lt;/strong&gt;에 대한 &lt;code class=&quot;language-text&quot;&gt;전략 클래스&lt;/code&gt; 생성하여 해당 행위들을 캡슐화(인터페이스화) 하여 사용하는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;즉, 행위를 각각의 전략 클래스로 생성하고 수정이 필요한 경우 전략을 바꾸는 것으로 행위를 수정하도록 한다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;왜-전략-패턴을-사용해야-할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 전략 패턴을 사용해야 할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 전략 패턴을 사용해야 할까?&lt;/h2&gt;
&lt;p&gt;예를 들어 움직이는 Bus, Train 이라는 객체가 있다고 하고 각각 move() 함수를 통해서 움직인다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;그런데, Bus는 도로로 Train은 선로로 움직인다. 만약 이때 버스가 더 이상 길이 아니라 선로로 움직인다고 가정할 때, 버스의 move() 메소드를 선로로 움직이는 로직으로 수정해야 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이때 두 가지 문제가 발생한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OCP (Open-Closed Principle)에 위배 : 수정에 닫혀있어야 하는데, &lt;code class=&quot;language-text&quot;&gt;move()&lt;/code&gt; 메소드를 직접 수정&lt;/li&gt;
&lt;li&gt;확장이 될 경우 메서드 중복 문제 : &lt;code class=&quot;language-text&quot;&gt;move()&lt;/code&gt; 메소드를 가진 여러 객체가 있을 때 일일이 수정을 해아함&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;이 때 전략 패턴을 사용하면, 위 두 문제를 마주하지 않으면서 행위를 수정할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;전략-패턴-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;전략 패턴 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전략 패턴 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;행위에 대한 메소드를 정의하는 &lt;code class=&quot;language-text&quot;&gt;Strategy&lt;/code&gt; 인터페이스를 생성하고 해당 인터페이스를 구현하는 구현체로 각기 다른 전략 로직을 구현한다. &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;80%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134760341-bf9b0e5b-8db9-489f-a529-63a46844a877.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;움직이는 객체인 &lt;code class=&quot;language-text&quot;&gt;Bus&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Train&lt;/code&gt; 등등에 위 &lt;code class=&quot;language-text&quot;&gt;MovableStrategy&lt;/code&gt; 를 조합하여, &lt;code class=&quot;language-text&quot;&gt;move()&lt;/code&gt; 메소드에서 지정된 전략 패턴으로 실행되도록 한다. (Bus, Train 등을 Movable 이라는 추상 클래스나 부모 클래스로부터 확장을 해서 추가적으로 중복을 줄일 수도 있다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Moving&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MovableStrategy&lt;/span&gt; movableStrategy&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        movableStrategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMovableStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MovableStrategy&lt;/span&gt; movableStrategy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;movableStrategy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; movableStrategy&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전략 패턴은 상태 패턴과 유사한 매커니즘으로 구조가 되어 있다. 다만 조금 다른 점은 전략 패턴이 대체하고자 하는 것은 &lt;code class=&quot;language-text&quot;&gt;상속&lt;/code&gt; 에 가깝다. 반면 상태 패턴이 대체하고자 하는 것은 수많은 &lt;code class=&quot;language-text&quot;&gt;조건문&lt;/code&gt; 이다. 두 패턴 모두 조합을 통해서 문제를 해결하려고 하기 때문에 그 생김새가 매우 유사하다. &lt;a href=&quot;%5Bhttps://github.com/KWSStudy/Refactoring/issues/2%5D(https://github.com/KWSStudy/Refactoring/issues/2)&quot;&gt;참고&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;출처&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B6%9C%EC%B2%98&quot; aria-label=&quot;출처 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;출처&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://victorydntmd.tistory.com/292&quot;&gt;https://victorydntmd.tistory.com/292&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern%EC%9D%B4%EB%9E%80&quot;&gt;전략 패턴(Strategy Pattern)이란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%99%9C-%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot;&gt;왜 전략 패턴을 사용해야 할까?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84&quot;&gt;전략 패턴 구현&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B6%9C%EC%B2%98&quot;&gt;출처&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[상태 패턴이란?]]></title><description><![CDATA[FSM 을 State Design Pattern 으로! FSM (Finite State Machine…]]></description><link>https://yjksw.github.io/state-pattern/</link><guid isPermaLink="false">https://yjksw.github.io/state-pattern/</guid><pubDate>Mon, 01 Mar 2021 14:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;fsm-을-state-design-pattern-으로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fsm-%EC%9D%84-state-design-pattern-%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;fsm 을 state design pattern 으로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FSM 을 State Design Pattern 으로!&lt;/h2&gt;
&lt;p&gt;FSM (Finite State Machine) : 유한 상태 기계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;유한한 개수의 상태를 가짐.&lt;/li&gt;
&lt;li&gt;그 중 하나의 상태만 취함.&lt;/li&gt;
&lt;li&gt;특정 조건이 되면 다른 상태로 변함.&lt;/li&gt;
&lt;li&gt;가능한 상태 집합과 각 상태들의 전이 조건으로 정의됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;왜 쓸까?
&lt;ul&gt;
&lt;li&gt;가능한 상태들을 명확히 규정할 수 있음.&lt;/li&gt;
&lt;li&gt;상태 중복을 피하고 전이들읠 명확하게 규정할 수 있음.&lt;/li&gt;
&lt;li&gt;기계의 동작이 명확히 규정됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 FSM 을 구현하려면 각 상황에 대한 수많은 분기문들을 통해서 구현이 되어야 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;또한 기능이 하나 추가가 될 때 고려해야 할 상황과 추가해야할 코드들이 굉장히 많아진다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;state-design-pattern-상태-디자인-패턴&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state-design-pattern-%EC%83%81%ED%83%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;state design pattern 상태 디자인 패턴 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State Design Pattern 상태 디자인 패턴&lt;/h2&gt;
&lt;h3 id=&quot;언제-사용할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;언제 사용할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;언제 사용할까?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;객체가 상태를 가져야 할 때&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정한 조건을 판단하여 해당하는 상태로 변환해야 하는 로직이 있을 때&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 상태마다 전이 조건이 있어 상황이 달라질 때&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;예를 들어보자&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
어떤 캐릭터가 있다고 가정해보자&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 이 캐릭터는 휴식&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 이동&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 배고픔&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 싸움 상태가 있다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
할 수 있는 행동은 휴식&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 이동&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 먹기&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 싸우기 행동이 있다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 

캐릭터 상태가 이동일 때&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 휴식을 하면 휴식 상태로 전환된다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
캐릭터 상태가 휴식일 때&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 싸우면 싸움 상태로 전환된다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
캐릭터 상태가 싸움일 때&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 싸우면 이기고 배고픈 상태로 전환된다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이런 전이 조건에 따른 상태 변화가 이루어지는 경우에 상태 패턴이 적합하다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;state-pattern-을-사용한다면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state-pattern-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;state pattern 을 사용한다면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State Pattern 을 사용한다면?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;State Pattern 을 사용하지 않을 때 객체 자신이 상태를 체크하고 행위에 따라서 상태를 바꾼다.
&lt;ul&gt;
&lt;li&gt;이 때 수많은 분기문이 생긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State Pattern 을 사용한다면 객체가 아니라 상태가 직접 행동하고 변환된 새로운 상태를 반환하도록 위힘이하는 패턴이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;어떻게-사용하지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80&quot; aria-label=&quot;어떻게 사용하지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어떻게 사용하지?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;객체의 상태들을 클래스로 선언한다.&lt;/li&gt;
&lt;li&gt;각 클래스에서 각 상태들이 할 수 있는 행위를 메서드로 정의한다.&lt;/li&gt;
&lt;li&gt;이 모든 상태 클래스들을 인터페이스로 캡슐화 해서 Client 에서는 이 인터페이스를 호출하고 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;출처&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B6%9C%EC%B2%98&quot; aria-label=&quot;출처 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;출처&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://daru-daru.tistory.com/70&quot;&gt;https://daru-daru.tistory.com/70&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ozt88.tistory.com/8&quot;&gt;https://ozt88.tistory.com/8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://victorydntmd.tistory.com/294&quot;&gt;https://victorydntmd.tistory.com/294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#fsm-%EC%9D%84-state-design-pattern-%EC%9C%BC%EB%A1%9C&quot;&gt;FSM 을 State Design Pattern 으로!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#state-design-pattern-%EC%83%81%ED%83%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4&quot;&gt;State Design Pattern 상태 디자인 패턴&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot;&gt;언제 사용할까?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#state-pattern-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4&quot;&gt;State Pattern 을 사용한다면?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80&quot;&gt;어떻게 사용하지?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B6%9C%EC%B2%98&quot;&gt;출처&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TDD 맛보기 - 테스트 종류]]></title><description><![CDATA[총 4가지 테스트에 대해서 간단히 다룰 것이다. 지금 우테코 LEVEL1에서 진행하고 있는 미션에서는 단위 테스트를 연습하는 TDD를 하고 있다. 내가 TDD를 할 줄이야.. 유닛 테스트(Unit Test…]]></description><link>https://yjksw.github.io/tdd-tests/</link><guid isPermaLink="false">https://yjksw.github.io/tdd-tests/</guid><pubDate>Thu, 25 Feb 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;총 4가지 테스트에 대해서 간단히 다룰 것이다. 지금 우테코 LEVEL1에서 진행하고 있는 미션에서는 단위 테스트를 연습하는 TDD를 하고 있다. &lt;del&gt;내가 TDD를 할 줄이야..&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;유닛-테스트unit-test&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8unit-test&quot; aria-label=&quot;유닛 테스트unit test permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유닛 테스트(Unit Test)&lt;/h3&gt;
&lt;p&gt;가장 작은 단위의 테스트로 메서드 레벨로 테스트를 한다. (현재 내가 진행중인 TDD 방식) &lt;br&gt;&lt;/p&gt;
&lt;p&gt;즉각적인 결과가 나와서, 해당 메소드에 대한 원하는 결과가 연산이 되는지에 대한 확인이 가능한 테스트이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;테스트 하기 어려운 메소드들이 등장하곤 하는데 이때는 stub (더미 객체가 마치 실제로 동작하는 것처럼 보이도록 만든 객체) 을 사용하여서 테스트 하는데 비용을 따져서 판단하도록 한다. (비용 관점을 항상 고려해야한다!) &lt;br&gt;&lt;/p&gt;
&lt;p&gt;하나의 메소드가 원하는 방식으로 동작한다는 것을 확인할 수 있지만, 결합되었을 때, 잘 동작하는지에 대한 보장은 어렵다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;전-구간-테스트end-to-end-test&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84-%EA%B5%AC%EA%B0%84-%ED%85%8C%EC%8A%A4%ED%8A%B8end-to-end-test&quot; aria-label=&quot;전 구간 테스트end to end test permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전 구간 테스트(End-To-End Test)&lt;/h3&gt;
&lt;p&gt;시스템 자체와 시스템을 구축하고 배포하는 프로세스를 모두 시험한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;내부 기능들(클래스 및 메소드)를 테스트 할 필요는 없다. 단위 테스트의 영역으로 구분한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;테스트 만들기가 쉽지 않고 신뢰하기도 어렵다ㅜㅜ &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;통합-테스트integration-test&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8integration-test&quot; aria-label=&quot;통합 테스트integration test permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;통합 테스트(Integration Test)&lt;/h3&gt;
&lt;p&gt;여러개를 통합하여 테스트 할 때 사용하는 테스트 기법이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;변경할 수 없는 (외부 라이브러리 등) 부분 까지 묶어서 같이 테스트 할 때 주로 사용된다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;인수-테스트acceptance-test&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8acceptance-test&quot; aria-label=&quot;인수 테스트acceptance test permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인수 테스트(Acceptance Test)&lt;/h3&gt;
&lt;p&gt;인수 테스트의 초점은 기술 보다는 비즈니스 쪽이라고 할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;구현하고자 하는 기능에 대한 테스트인데, 주로 전 구간 테스트를 사용하여 기능을 테스트하곤 한다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8unit-test&quot;&gt;유닛 테스트(Unit Test)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%84-%EA%B5%AC%EA%B0%84-%ED%85%8C%EC%8A%A4%ED%8A%B8end-to-end-test&quot;&gt;전 구간 테스트(End-To-End Test)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8integration-test&quot;&gt;통합 테스트(Integration Test)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8acceptance-test&quot;&gt;인수 테스트(Acceptance Test)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[MVC 패턴 첫 적용기]]></title><description><![CDATA[처음 MVC 패턴을 공부하게 되면서 잘 이해하지 못한 상태로 1단계 코드를 제출한 것 같다.  라는 부분을 간과하고 모든 도메인 모델에 대한 로직을 모두 Controller로 넘겼다. 하지만 MVC…]]></description><link>https://yjksw.github.io/mvc-pattern/</link><guid isPermaLink="false">https://yjksw.github.io/mvc-pattern/</guid><pubDate>Wed, 24 Feb 2021 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;처음 MVC 패턴을 공부하게 되면서 잘 이해하지 못한 상태로 1단계 코드를 제출한 것 같다. &lt;code class=&quot;language-text&quot;&gt;객체가 핵심적인 비지니스 로직을 담당해야 한다&lt;/code&gt; 라는 부분을 간과하고 모든 도메인 모델에 대한 로직을 모두 Controller로 넘겼다. 하지만 MVC는 그렇게 분리되는 것이 아니었다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이 부분에 대해 리뷰어에게 질문을 했더니 좋은 소스와 함께 정성스럽게 답해주셨다. &lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;90%&quot; src=&quot;https://user-images.githubusercontent.com/63405904/134760085-c1dd5e76-65e9-4ecf-9e53-55020b69bcc8.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;즉, &lt;code class=&quot;language-text&quot;&gt;Controller는 도메인 모델과 View를 연결한다&lt;/code&gt; 인데 Controller는 View로 부터 받은 입력을 기반으로 Model에 적절한 메세지를 보낸다. 그리고, Model은 해당 메시지에 따른 로직을 수행하고, 그에 따른 결과를 다시 Controller에 전달한다. 이렇게 왔다갔다 상호작용 하는 중간다리 역할이 Controller이다. &lt;del&gt;모든 서비스 로직을 Controller에다가만 구현하는 것이 아니다.&lt;/del&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;우테코에서 제공한 MVC 패턴에 대한 설명에도 핵심적인 설명이 있다. &lt;code class=&quot;language-text&quot;&gt;핵심 비지니스 로직을 가지는 객체를 domain 패키지로&lt;/code&gt; 리뷰어도 이것만 챙겨도 절반 이상이 MVC 패턴에 맞추어 진다고 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;공부하기에 좋은 자료로 추천한 &lt;a href=&quot;%5Bhttps://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%5D(https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC)&quot;&gt;위키피디아&lt;/a&gt;와, &lt;a href=&quot;%5Bhttps://bsnippet.tistory.com/13%5D(https://bsnippet.tistory.com/13)&quot;&gt;모델-뷰-컨트롤러&lt;/a&gt; 도 한번 살펴보자. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;mvc-패턴이란-무엇인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;mvc 패턴이란 무엇인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MVC 패턴이란 무엇인가?&lt;/h3&gt;
&lt;p&gt;위키피디아에 나온 정의에 따르면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;MVC에서 모델은 어플리케이션의 정보&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;데이터&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 나타내며&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
뷰는 텍스트&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 체크박스 항목 등과 같은 상요자 인터페이스 요소를 나타내고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
컨트롤러는 데이터와 비즈니스 로직 사이의 상호동작을 관리한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때 나오는 질문이 &lt;code class=&quot;language-text&quot;&gt;각각의 역할이 뭐지?&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;컨트롤러의 역할은 어디까지인가?&lt;/code&gt; 이다. 하나씩 간단히 살펴보자&lt;/p&gt;
&lt;h3 id=&quot;모델model&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8model&quot; aria-label=&quot;모델model permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델(Model)&lt;/h3&gt;
&lt;p&gt;데이터를 가진 객체이다. 내부 상태에 대한 정보이거나, 모델을 표현하는 이름 속성을 가질 수 있다. &lt;br&gt;
모델이 가지고 있는 규칙은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 편집하기를 원하는 모든 데이터를 가지고 있다.&lt;/li&gt;
&lt;li&gt;View나 Controller에 대한 어떤 정보도 알지 말아야 한다.&lt;/li&gt;
&lt;li&gt;변경이 일어나면 변경에 대한 통지를 해야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;모델은 무엇을 할 것인지 정의한다. 내부 비지니스 로직을 처리하기 위한 역할을 담당한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;처리도는 알고리즘, DB와 상호작용, 데이터 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;뷰view&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B7%B0view&quot; aria-label=&quot;뷰view permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뷰(View)&lt;/h3&gt;
&lt;p&gt;화면에 표시되는 글자, 체크박스, 윈도우와 같은 UI 시작적 요소들이다. &lt;br&gt;
뷰가 가지고 있는 규칙은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;모델이 가지고 있는 정보를 따로 저장하지 않는다.&lt;/li&gt;
&lt;li&gt;모델이나 컨트롤러와 같은 다른 구성 요소를 몰라야 한다.
&lt;ul&gt;
&lt;li&gt;자기 자신을 빼고는 참조하거나 동작하는지 알아서는 안된다.&lt;/li&gt;
&lt;li&gt;뷰는 데이터를 받으면 화면에 표시해주는 역할만 가진다고 본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;변경이 일어났을 때, 변경 통지에 대한 처리 방법이 있어야 한다.
&lt;ul&gt;
&lt;li&gt;모델과 유사하다.&lt;/li&gt;
&lt;li&gt;사용자가 화면에 표시된 내용을 변경하게 되면, 이것을 모델에 전달하여 모델을 변경해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;즉, 모델이나 뷰에서 변경이 일어나면, 컨트롤러에 이것을 알리고, 컨트롤러가 처리 방법을 결정해 다른 구성 요소들에게 또 알리는 방식으로 중재자 역할을 하도록 한다.
뷰는 무엇을 보여주기 위한 역할을 하는 것이다. 컨트롤러의 하위에 종속되어서 모델이나 컨트롤러가 보여주려고 하는 필요한 것들을 보여줄 것이다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;컨트롤러controller&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%ACcontroller&quot; aria-label=&quot;컨트롤러controller permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨트롤러(Controller)&lt;/h3&gt;
&lt;p&gt;모델과 뷰를 연결해주는 역할을 한다.
&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;모델이나 뷰에 대해서 알고 있다.&lt;/li&gt;
&lt;li&gt;모델이나 뷰의 변경을 모니터링 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;컨트롤러는 모델이 어떻게 처리할지 알려주는 역할을 할 것이다. 즉, 화면의 로직처리 부분이라고 할 수 있다. 화면에서 사용자의 요청을 받아서 처리되는 부분을 구현하고, 요청 내용을 분석해서 모델과 뷰에 업데이트 요청을 하게 된다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;컨트롤러는 모델과 뷰가 각각 무엇을 해야 할 지를 알아서 통제한다. 때문에 비지니스 로직을 처리하는 모델과 뷰는 서로 직접 이야기할 수 없다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;mvc에서-발생할-수-있는-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mvc%EC%97%90%EC%84%9C-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;mvc에서 발생할 수 있는 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MVC에서 발생할 수 있는 문제점&lt;/h3&gt;
&lt;p&gt;우선 지금 당장 MVC 패턴으로 구현을 할 때는 지나치게 복잡한 정도로 구현을 하지는 않지만 훨씬 복잡한 어플리케이션이 작성이 된다면 다수의 뷰와 다수의 모델이 컨트롤러에 연결되어 있는 상황이 생길 수 있다. 그러면서 소스 코드 테스트나 분석이 어려워지는 &lt;code class=&quot;language-text&quot;&gt;Massive ViewController&lt;/code&gt; 탄생하게 되면서 문제가 발생한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이러한 문제를 해결하기 위한 다른 다수의 패턴이 있다는 것을 기억하자. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot;&gt;MVC 패턴이란 무엇인가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8model&quot;&gt;모델(Model)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B7%B0view&quot;&gt;뷰(View)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%ACcontroller&quot;&gt;컨트롤러(Controller)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mvc%EC%97%90%EC%84%9C-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot;&gt;MVC에서 발생할 수 있는 문제점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[GitHub] Commit Message Convetion]]></title><description><![CDATA[Github에 익숙하지 않기 때문에 커밋은 나에게 push…]]></description><link>https://yjksw.github.io/commit-message-convetion/</link><guid isPermaLink="false">https://yjksw.github.io/commit-message-convetion/</guid><pubDate>Sun, 29 Nov 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Github에 익숙하지 않기 때문에 커밋은 나에게 push를 해서 업로드를 하기 위한 중간과정 중 하나였다. 하지만 다른 곳에서 깃헙이나 프로젝트 진행을 하면서 커밋을 하는 단위의 중요성과 깃헙의 최대 장점인 프로젝트를 되돌리기 위한 커밋 메세지의 중요성에 대해서 여러번 들었었다. 이번에 프리코스를 시작하면서 커밋 메세지에 대한 가이드를 읽고 정리해보기로 했다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;%5Bhttps://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits%5D(https://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits)&quot;&gt;참고 사이트&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;changelogmd-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#changelogmd-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;changelogmd 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CHANGELOG.md 생성하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;changelog에는 3개의 section이 있다: new features, bug fixes, breaking changes.&lt;/li&gt;
&lt;li&gt;이러한 정보들은 배포가 될 때 script로 생성이 되어야 하며 해당하는 commit과 함께 제공되어야 한다.&lt;/li&gt;
&lt;li&gt;해당 로그들을 보는 방법들은 다음과 같다.
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;지난 release 이후에 발생한 모든 subject(커밋 메세지의 첫번째 라인) 조회:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;git log &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;lasg tag&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; HEAD &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;pretty&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;format&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;$s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이번 release의 새로운 feature:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;git log &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;last release&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; HEAD &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;grep feature&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;recognizing-unimportant-commits&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#recognizing-unimportant-commits&quot; aria-label=&quot;recognizing unimportant commits permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recognizing unimportant commits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사소한 버그 수정 등과 같이 중요하지 않은 커밋들을 걸러낼 수 있다. 코드의 logic이 수정된 부분들이 아닌 경우에는 다음과 같은 명령어로 무시할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;git bisect skip $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;git rev&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;list &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;grep irrelevant &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;good place&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; HEAD&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;history-브라우징-시-정보-제공을-위한-커밋&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#history-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95-%EC%8B%9C-%EC%A0%95%EB%B3%B4-%EC%A0%9C%EA%B3%B5%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%BB%A4%EB%B0%8B&quot; aria-label=&quot;history 브라우징 시 정보 제공을 위한 커밋 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;History 브라우징 시 정보 제공을 위한 커밋&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;커밋 메세지를 작성할 때 가능한 많은 정보들을 제공하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;그렇기에 메세지로 무슨 변경이나 추가가 있었는지 확인 할 수 있는데, 해당 메세지가 일정한 convention을 지닐 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;commit-message-형식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#commit-message-%ED%98%95%EC%8B%9D&quot; aria-label=&quot;commit message 형식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commit Message 형식&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;scope&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;subject&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;BLANK LINE&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;BLANK LINE&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;footer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;커밋 메세지는 100자를 넘지 않는다. 이래야지 깃헙이나 깃 툴을 사용할 때 메세지 읽기가 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;subject-line&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#subject-line&quot; aria-label=&quot;subject line permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Subject line&lt;/h3&gt;
&lt;p&gt;어떤 변경이 일어났는지에 대한 간단명료한 설명을 담고 있다. (커밋 메세지의 첫 줄)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allowed &lt;code class=&quot;language-text&quot;&gt;&amp;lt;type&gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;feat (feature)&lt;/li&gt;
&lt;li&gt;fix (bug fix)&lt;/li&gt;
&lt;li&gt;docs (documentation)&lt;/li&gt;
&lt;li&gt;style (formatting, missing semi colons, …)&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;li&gt;test (when adding missing tests)&lt;/li&gt;
&lt;li&gt;chore (maintain)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allowed &lt;code class=&quot;language-text&quot;&gt;&amp;lt;scope&gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;적용 범위를 나타내는 것으로 커밋에 대한 부가적인 정보이다. (선택 사항)&lt;/li&gt;
&lt;li&gt;적용 범위에 대한 예시는 이러하다: $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;subject&gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;현재형으로 작성한다: “change” → x “changed” or “changes”&lt;/li&gt;
&lt;li&gt;첫 문자를 대문자로 작성하지 않는다.&lt;/li&gt;
&lt;li&gt;(.)을 작성하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해당 커밋에 major 한 변화가 있다면 큰 변화가 있기 때문에 호환이 안되는 부분들이 있을 수 있다. 해당 부분들을 footer에 반드시 작성하게 되는데, 해당 메세지를 확인하지 못할 수도 있기 때문에 다음과 같이 &lt;code class=&quot;language-text&quot;&gt;BREAKING CHANGE: 설명&lt;/code&gt; 있음을 표시한다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;예: fead(pipeling)!: Add pipeline function&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;message-body&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#message-body&quot; aria-label=&quot;message body permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Message body&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;커밋 메세지와 같이 현재형 동사로 작성한다.&lt;/li&gt;
&lt;li&gt;수정의 동기화, 수정 이전과의 비교를 명시한다.&lt;/li&gt;
&lt;li&gt;본문에 여러개가 있을 경우에는 (-)로 구분한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;message-footer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#message-footer&quot; aria-label=&quot;message footer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Message footer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;커밋이 어떤 이슈에서 왔는지 촘조 정보들을 추가하는 용도로 사용.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 이슈와의 연관을 표현하기 위해 &lt;code class=&quot;language-text&quot;&gt;close #123 #245&lt;/code&gt; 같이 커밋 메세지를 추가한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breaking changes에 대해서 footer에 작성한다&lt;/p&gt;
&lt;p&gt;어떤 것이 수정되었는지, 수정이 된 정의, migration note 등이 추가되도록한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;BREAKING CHANGE&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; isolate scope bindings definition has changed and
    the inject option &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the directive controller injection was &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;removed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;
    
    To&lt;/span&gt; migrate the code follow the example below&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    
    scope&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      myAttr&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;attribute&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      myBind&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bind&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      myExpression&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;expression&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      myEval&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;evaluate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      myAccessor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;accessor&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    
    scope&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      myAttr&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      myBind&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      myExpression&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;amp;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// myEval - usually not useful, but in cases where the expression is assignable, you can use &apos;=&apos;&lt;/span&gt;
      myAccessor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;=&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// in directive&apos;s template change myAccessor() to myAccessor&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;The&lt;/span&gt; removed `inject` wasn&apos;t generaly useful &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; directives so there should be no code using it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C&quot; aria-label=&quot;예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token function&quot;&gt;feat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$browser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; onUrlChange event &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;popstate&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;hashchange&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;polling&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Added&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; event &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; $browser&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; forward popstate event &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; available
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; forward hashchange event &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; popstate not available
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; polling when neither popstate nor hashchange available

&lt;span class=&quot;token class-name&quot;&gt;Breaks&lt;/span&gt; $browser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onHashChange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; which was removed &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;use onUrlChange instead&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$compile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; couple of unit tests &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; IE9

&lt;span class=&quot;token class-name&quot;&gt;Older&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEs&lt;/span&gt; serialize html uppercased&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; but IE9 does not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Would&lt;/span&gt; be better &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; insensitive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unfortunately jasmine does
not allow &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;user&lt;/span&gt; regexps &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;expectations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;

Closes&lt;/span&gt; #&lt;span class=&quot;token number&quot;&gt;392&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Breaks&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bar api&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;baz should be used instead&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;guide&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; updated fixed docs from &lt;span class=&quot;token class-name&quot;&gt;Google&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Docs&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Couple&lt;/span&gt; of typos fixed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; indentation
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; batchLogbatchLog &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; batchLog
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; start periodic checking
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; missing brace&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#changelogmd-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot;&gt;CHANGELOG.md 생성하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#recognizing-unimportant-commits&quot;&gt;Recognizing unimportant commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#history-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95-%EC%8B%9C-%EC%A0%95%EB%B3%B4-%EC%A0%9C%EA%B3%B5%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%BB%A4%EB%B0%8B&quot;&gt;History 브라우징 시 정보 제공을 위한 커밋&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#commit-message-%ED%98%95%EC%8B%9D&quot;&gt;Commit Message 형식&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#subject-line&quot;&gt;Subject line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#message-body&quot;&gt;Message body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#message-footer&quot;&gt;Message footer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C&quot;&gt;예시&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[JAVA] 구글에서 제공하는 Java Coding Convention Guide]]></title><description><![CDATA[프리코스를 진행하면서 구글에서 제공하는 javaGuide를 읽고 해당 convention…]]></description><link>https://yjksw.github.io/java-coding-convention/</link><guid isPermaLink="false">https://yjksw.github.io/java-coding-convention/</guid><pubDate>Sat, 28 Nov 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;프리코스를 진행하면서 구글에서 제공하는 javaGuide를 읽고 해당 convention을 따라서 코딩 하도록 하기 위해서 해당 문서를 정독했다. 원래 알고 있던 부분들도 있고 아닌 부분들도 있는데, 이렇게 잘 문서화 되어 있다는 것을 처음 알았다. 다음은 해당 문서를 읽으면서 두고두고 참고할 내용들을 정리한 것들이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;다음 사이트 참고: &lt;a href=&quot;https://google.github.io/styleguide/javaguide.html&quot;&gt;Google Java Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-source-file-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-source-file-structure&quot; aria-label=&quot;1 source file structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Source file structure&lt;/h2&gt;
&lt;p&gt;Java 소스 파일은 다음과 같은 구조를 가지고 있다. 순서에 유의하여 구조화 되어 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만약 존재한다면, license or copyright information&lt;/li&gt;
&lt;li&gt;Package 명시&lt;/li&gt;
&lt;li&gt;Import statements&lt;/li&gt;
&lt;li&gt;단 하나의 top-level class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ 위의 4 section을 1줄 간격(exactly one blank)으로 나눈다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;1-1-copyright-information&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-1-copyright-information&quot; aria-label=&quot;1 1 copyright information permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-1. copyright information&lt;/h3&gt;
&lt;p&gt;소스파일 맨 위에 시작 주석으로 파일 클래스 이름, 버전 정보, 날짜, 저작권 주의를 보여주는 주석으로 시작한다.&lt;/p&gt;
&lt;h3 id=&quot;1-2-import-statements&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-2-import-statements&quot; aria-label=&quot;1 2 import statements permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-2. Import Statements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Wildcard imports는 지양한다.
&lt;ul&gt;
&lt;li&gt;(*) 추가해서 전체를 한꺼번에 import 하는 것.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tharakamd.12/is-it-bad-to-use-wildcard-imports-in-java-1b46a863b2be#:~:text=Wildcard%20imports%20tell%20java%20compiler,performance%20may%20lower%20a%20bit&quot;&gt;관련 참고 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;한 줄이 너무 길어도 line wrapping 하지 않는다.&lt;/li&gt;
&lt;li&gt;static imports를 하나의 block에 non-static imports를 하나의 block에 넣고 두 block 사이만 한 줄 간격이 있다.&lt;/li&gt;
&lt;li&gt;각 block 내에서는 ASCII sort order에 따라서 정렬한다.&lt;/li&gt;
&lt;li&gt;class는 static import 가 아닌 normal import 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-3-class-declaration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-3-class-declaration&quot; aria-label=&quot;1 3 class declaration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-3 Class Declaration&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Top-level 클래스는 각 소스파일 당 단 1개만 존재한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-formatting&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-formatting&quot; aria-label=&quot;2 formatting permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Formatting&lt;/h2&gt;
&lt;h3 id=&quot;2-1-괄호&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-1-%EA%B4%84%ED%98%B8&quot; aria-label=&quot;2 1 괄호 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-1. 괄호&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;optional인 경우에도 괄호를 쓴다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;if, else, for, do, while&lt;/code&gt; 이 비어 있거나 한 줄만 있더라도 괄호를 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비어 있지 않은 블록의 경우 다음과 같이 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;’{’ 앞에 줄 간격 두지 않는다.&lt;/li&gt;
&lt;li&gt;’{’ 이후에  줄 간격 둔다.&lt;/li&gt;
&lt;li&gt;’}’ 이전에 줄 간격 둔다.&lt;/li&gt;
&lt;li&gt;’}’ 이후에 다음과 같은 경우에만 줄 간격을 둔다.
&lt;ul&gt;
&lt;li&gt;statement가 끝났을 때, 메소드, constructor, class가 끝났을 때&lt;/li&gt;
&lt;li&gt;, 나 else 가 그 다음에 나오는 경우에는 줄 간격을 두지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ProblemException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;otherCondition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;somethingElse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;lastThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빈 블록의 경우:&lt;/p&gt;
&lt;p&gt;다음 두 경우 모드 가능하나, multi-block 인 경우에는 consice 하게 할 수 없다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is acceptable&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// This is equally acceptable&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doNothingElse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is not acceptable: No concise empty blocks in a multi-block statement&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-2-블록-indentation-2-spaces&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-2-%EB%B8%94%EB%A1%9D-indentation-2-spaces&quot; aria-label=&quot;2 2 블록 indentation 2 spaces permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-2. 블록 indentation: +2 spaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;새로운 블록일 경우 2 만큼 들여쓰기 한다.&lt;/li&gt;
&lt;li&gt;하지만 우테코에서는 +2 가 아니라 +4 만큼 들여쓰기 하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-3-한-줄에-한-statement만-작성한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-3-%ED%95%9C-%EC%A4%84%EC%97%90-%ED%95%9C-statement%EB%A7%8C-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 3 한 줄에 한 statement만 작성한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-3 한 줄에 한 statement만 작성한다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;각 statement는 줄 간격을 둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-4-column-limit-100&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-4-column-limit-100&quot; aria-label=&quot;2 4 column limit 100 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-4 Column limit: 100&lt;/h3&gt;
&lt;p&gt;다음과 같은 경우가 아니라 한 줄에 100자가 넘지 않도록 line-wrapping을 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;line-wrapping이 불가능한 경우&lt;/li&gt;
&lt;li&gt;package / import 일 경우&lt;/li&gt;
&lt;li&gt;shell에 복사 붙여넣기 해야 하는 comment일 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-5-line-wrapping&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-5-line-wrapping&quot; aria-label=&quot;2 5 line wrapping permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-5 Line-wrapping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다음과 같은 상황에서 line break를 하여 line-wrapping 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;non-assignment operator일 경우 줄 간격은 해당 Operator 앞에서 break 한다.&lt;/p&gt;
&lt;p&gt;다음과 같은 것들에도 적용된다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dot separator (.)&lt;/li&gt;
&lt;li&gt;two colons of method reference (::)&lt;/li&gt;
&lt;li&gt;an ampersand in a type bound (&amp;#x3C;T extends Foo &amp;#x26; Bar&gt;)&lt;/li&gt;
&lt;li&gt;pipe in a catch block ( catch (FooException | BarException e) )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assignment-operator일 경우 해당 operator 다음에 line break 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;( 앞에 있는 메소드나 constructor 이름은 붙어 있도록 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;, 같은 경우 그 앞의 토큰과 붙어 있는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lambda 의 → 다음에는 line break 하지 않는데, lambda body가 single expression 인 경우를 제외하고는 반드시 ( 다음에 line break 해야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;MyLambda&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; lambda &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; predicate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;longExpressionInvolving&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;line-wrapping 이후에는 +4 만큼의 들여쓰기를 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-6-공백-whitespace&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-6-%EA%B3%B5%EB%B0%B1-whitespace&quot; aria-label=&quot;2 6 공백 whitespace permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-6 공백 Whitespace&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Vertical Whitespace
&lt;ul&gt;
&lt;li&gt;다음과 같은 경우 빈 줄이 들어간다.
&lt;ol&gt;
&lt;li&gt;consecutive members 나 initializers of a class 사이에 빈 줄
&lt;ul&gt;
&lt;li&gt;필드, constructors, methods, nested classes, static initializer, instance initializer&lt;/li&gt;
&lt;li&gt;두 필드 사이에 공백은 선택이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;빈 줄은 가독성을 위해서 필요한 곳에 어디든 추가될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizontal whitespace
&lt;ol&gt;
&lt;li&gt;if, for, catch 뒤에 있는 ’(’ 사이에 공백&lt;/li&gt;
&lt;li&gt;else, catch 앞에 있는 ’}’ 사이에 공백&lt;/li&gt;
&lt;li&gt;’{’ 앞에 공백.
&lt;ul&gt;
&lt;li&gt;예외1: annotation 안에 있는 ’{’ 앞에는 공백 없음&lt;/li&gt;
&lt;li&gt;배열 안에 원소로 인한 ’{’ 앞에는 공백 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;binary 나 ternary operator 앞 뒤로 공백 넣는다.
&lt;ul&gt;
&lt;li&gt;&amp;#x3C;T extends Foo &amp;#x26; Bar&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;catch (FooException | BarException e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;(String str) -&gt; str.length()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(::) 이나 (.) 앞 뒤에는 공백 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;,:; 나 ’)’ 뒤에 공백 있음.&lt;/li&gt;
&lt;li&gt;변수이름과 type 사이에 공백: List&lt;String&gt; list&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-naming&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-naming&quot; aria-label=&quot;3 naming permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Naming&lt;/h2&gt;
&lt;h3 id=&quot;3-1-package-names&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-1-package-names&quot; aria-label=&quot;3 1 package names permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-1. Package names&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;패지키 이름은 Camel Case도 아니고 전부 소문자로 띄어쓰기 없이 이루어진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-2-class-names&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-2-class-names&quot; aria-label=&quot;3 2 class names permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-2. Class names&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;클래스 이름은 UpperCamelCase로 이루어 진다.&lt;/li&gt;
&lt;li&gt;주로 noun이나 noun phase이다.&lt;/li&gt;
&lt;li&gt;Test 클래스의 경우 뒤에 Test가 붙는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-3-method-names&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-3-method-names&quot; aria-label=&quot;3 3 method names permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-3 Method names&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;메소드 이름은 lowerCamelCase로 나타난다.&lt;/li&gt;
&lt;li&gt;주로 verb 이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-4-constant-names&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-4-constant-names&quot; aria-label=&quot;3 4 constant names permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-4 Constant names&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;상수의 경우 CONSTANT_CASE 와 같이 전부 대문자, _ 로 구분되어 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 상수라고 하는 것은 static final field 이며, 잘 변하지 않고, 메소드에 이거에 의한 부작용이 없는 숫자를 말한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예시:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Constants&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; NUMBER &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; NAMES &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ann&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; AGES &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ann&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Joiner&lt;/span&gt; COMMA_JOINER &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// because Joiner is immutable&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; EMPTY_ARRAY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeEnum&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ENUM_CONSTANT &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Not constants&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; nonFinal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;non-final&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; nonStatic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;non-static&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; mutableCollection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; mutableElements &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImmutableMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; mutableValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;ImmutableMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mutableInstance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ann&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mutableInstance2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Logger&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; nonEmptyArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;these&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;can&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;change&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-5-non-cnastant-field-names&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-5-non-cnastant-field-names&quot; aria-label=&quot;3 5 non cnastant field names permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-5 Non-cnastant field names&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Non-constant field(static 이거나 아니거나)의 경우 lowerCamelCase로 되어 있다. 주로 noun 이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-6-이외의-다른-camelcase&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-6-%EC%9D%B4%EC%99%B8%EC%9D%98-%EB%8B%A4%EB%A5%B8-camelcase&quot; aria-label=&quot;3 6 이외의 다른 camelcase permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3-6 이외의 다른 CamelCase&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Parameter, local variable, type variable 모두 lowCamelCase로 쓴다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-source-file-structure&quot;&gt;1. Source file structure&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-1-copyright-information&quot;&gt;1-1. copyright information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1-2-import-statements&quot;&gt;1-2. Import Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1-3-class-declaration&quot;&gt;1-3 Class Declaration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-formatting&quot;&gt;2. Formatting&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2-1-%EA%B4%84%ED%98%B8&quot;&gt;2-1. 괄호&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-2-%EB%B8%94%EB%A1%9D-indentation-2-spaces&quot;&gt;2-2. 블록 indentation: +2 spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-3-%ED%95%9C-%EC%A4%84%EC%97%90-%ED%95%9C-statement%EB%A7%8C-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot;&gt;2-3 한 줄에 한 statement만 작성한다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-4-column-limit-100&quot;&gt;2-4 Column limit: 100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-5-line-wrapping&quot;&gt;2-5 Line-wrapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-6-%EA%B3%B5%EB%B0%B1-whitespace&quot;&gt;2-6 공백 Whitespace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#3-naming&quot;&gt;3. Naming&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#3-1-package-names&quot;&gt;3-1. Package names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-2-class-names&quot;&gt;3-2. Class names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-3-method-names&quot;&gt;3-3 Method names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-4-constant-names&quot;&gt;3-4 Constant names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-5-non-cnastant-field-names&quot;&gt;3-5 Non-cnastant field names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-6-%EC%9D%B4%EC%99%B8%EC%9D%98-%EB%8B%A4%EB%A5%B8-camelcase&quot;&gt;3-6 이외의 다른 CamelCase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[동적계획법] 이항계수]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/binomial-coefficient/</link><guid isPermaLink="false">https://yjksw.github.io/binomial-coefficient/</guid><pubDate>Thu, 24 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이런 말이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;동적 계획법이라는 말은 전문가들이 전문가들처럼 보여줄 수 있도록 해주는 말이고 일반인들에게는 그냥 ‘기억해서 풀기’ 다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이항계수에 관련한 성질은 기억해두면 이후 코딩이나 알고리즘 문제를 풀 때 유용하기 때문에 기록해 준다. 이항계수를 풀 때 중요한 성질은 다음과 같다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$
{n \choose k} = {n \choose n-k}
$$&lt;/p&gt;
&lt;p&gt;$$
{n \choose k} = {n-1 \choose k} + {n-1 \choose k-1}
$$&lt;/p&gt;
&lt;p&gt;$$
\sum_{k=1}^n {n \choose k} = 2^n
$$&lt;/p&gt;
&lt;p&gt;위의 공식은 이항계수의 정의식을 참고해서 유도하는 방법으로 이항 계수의 정의식을 알고 있어야 한다.&lt;/p&gt;
&lt;p&gt;$$
{n \choose k} = &lt;em&gt;{n}\mathrm{C}&lt;/em&gt;{k} = \frac{n!}{(n-k)!k!}
$$&lt;/p&gt;
&lt;h2 id=&quot;동적-계획법을-활용한-이항계수-풀이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9D%B4%ED%95%AD%EA%B3%84%EC%88%98-%ED%92%80%EC%9D%B4&quot; aria-label=&quot;동적 계획법을 활용한 이항계수 풀이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적 계획법을 활용한 이항계수 풀이&lt;/h2&gt;
&lt;p&gt;이항계수에 관련한 알고리즘 문제를 풀기 위해서 이항계수의 2번째 성질을 이용하기로 한다. 그 이유는 2번째 성질이 동적 계획법 활용에 알맞게 더 작은 부분으로 분할하여 정복 할 수 있는 성질을 잘 드러내고 있기 때문이다. 다음 방법을 사용해서 알고리즘을 풀어보자. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;여기서 일반 재귀나 분할 정복보다 동적 계획법에 알맞게 진행하기 위해서 memoization을 사용한다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//DAC&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; sc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token function&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token function&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
				&lt;span class=&quot;token function&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;단순히 이항계수의 정의를 이용한 유도식을 재귀를 통해서 구현한 것이다. 다음과 같이 구현하면 작은 숫자들에 대해서는 충분히 답을 낼 수 있지만 숫자가 커지게 되면 할당해야 하는 배열의 크기가 기하급수적으로 커지게되고, 그 결과 값 또한 long 타입으로도 담을 수 없기 때문에 매우 제한적이다. 따라서 &lt;a href=&quot;https://www.acmicpc.net/problem/11401&quot;&gt;백준 11401&lt;/a&gt;에서는 이항계수를 소수인 1,000,000,007로 나눈 프로그램을 작성하도록 되어 있다. 그 연산에 대해서는 2가지 접근 방법이 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;우선, 왜 위에서 소개한 이항계수 정의식에 바로 % 1,000,000,007을 하지 않는지에 대한 이유를 짚고 넘어가야 한다. 이항계수 정의식은 분수꼴이기 때문에 소수 p로 % 연산을 했을 때 분자와 분모에 나뉘어서 적용되지 않는다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$
\frac{N!}{K!(N-K)!}%p\qquad  \Longrightarrow \qquad \text{나뉘어서 적용 불가}
$$&lt;/p&gt;
&lt;h3 id=&quot;접근-방법--1-확장-유클리드-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95--1-%ED%99%95%EC%9E%A5-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;접근 방법  1 확장 유클리드 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근 방법  1. 확장 유클리드 알고리즘&lt;/h3&gt;
&lt;p&gt;확장 유클리드 알고리즘은 기본 원리로 유클리드 호제법으로 GCD를 구하는 것을 따라가며, 두 정수 A,B가 주어졌을 때, 베주 항등식인 $Ax+By=gcd(A,B)$ 에서 gcd(A,B)를 구하고 정수해 (x,y)를 구하는 알고리즘이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;여기서 사용하고 싶은 확장 유클리드 알고리즘의 항을 써보면 다음과 같다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$
(AB^{-1}) % p
$$&lt;/p&gt;
&lt;p&gt;위에서 말했던 이항계수 정의식을 보면 $A$와 $B$에 각각 무엇이 대입되는지 알 수 있다. 여기서 확장 유클리드 알고리즘을 사용하는데, 확장 유클리드 알고리즘은 두 수의 최대공약수와 베주 항등식의 $x$와 $y$까지 구할 수 있는 알고리즘이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$
Bx + py =1 \qquad (i)
$$&lt;/p&gt;
&lt;p&gt;$$
Bx \equiv 1 \pmod{p} \qquad (ii)
$$&lt;/p&gt;
&lt;p&gt;위의 (i)에서 확장 유클리드 알고리즘으로 정수해 $(x, y)$를 구할 수 있는데 그럼 다음 식에 대입하면 원하는 식을 구할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$
(AB^{-1}) % p \= (AB^{-1} \cdot 1) %p\=(AB^{-1} \cdot Bx)%p\=Ax%p
$$&lt;/p&gt;
&lt;p&gt;결론은, &lt;strong&gt;베주 항등식에서 구한 $x$와 정의식에서 정의한 $A$를 곱한 것을 $p$로 modular 하면 원하는 식을 구할 수 있다.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;여기서 확장 유클리드 알고리즘을 이해하고 최종적으로 $x$를 구하는 것이 어렵게 느껴졌는데, 구현해보니 지나치게 길거나 복잡하지는 않았다. 재귀를 사용해서 구현하였다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;euc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;euc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt;[참고 자료]: &lt;a href=&quot;https://onsil-thegreenhouse.github.io/programming/problem/2018/04/02/problem_combination/&quot;&gt;https://onsil-thegreenhouse.github.io/programming/problem/2018/04/02/problem_combination/&lt;/a&gt;&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81-%EA%B3%84%ED%9A%8D%EB%B2%95%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9D%B4%ED%95%AD%EA%B3%84%EC%88%98-%ED%92%80%EC%9D%B4&quot;&gt;동적 계획법을 활용한 이항계수 풀이&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95--1-%ED%99%95%EC%9E%A5-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;접근 방법  1. 확장 유클리드 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[알고리즘]분할정복 - 백준 2261 가장 가까운 두 점]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/dac-closestPoint/</link><guid isPermaLink="false">https://yjksw.github.io/dac-closestPoint/</guid><pubDate>Thu, 17 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;분할정복 알고리즘을 배울 때 나오는 유명한 문제 중 하나이다. 하지만 난이도가 굉장히 높기 때문에 쉽게 접근하기 어려웠는데, 분할 정복에 남은 마지막 문제를 그냥 안풀고 넘어가기엔 마음에 걸려서 마음먹고 공부해보기로 했다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;백준 사이트에서도 검색을 추천하여 알고리즘을 공부하기를 권하기 때문에 검색을 통해 &lt;a href=&quot;https://octorbirth.tistory.com/274&quot;&gt;좋은 글&lt;/a&gt;을 발견했다. 그리고 해당 문제의 솔루션을 이해하는데만 집중했다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;분할정복 문제를 반복해서 풀어보니 분할정복은 DP 만큼이나 여러가지 형태의 문제가 있으니 최대한 많은 문제들을 풀어보는 것이 중요하다는 것을 알 수 있었다. 그리고 여러 문제를 풀어 본 결과 다음을 깨달을 수 있었다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;분할정복에서 분할을 하는 이유 중 하나는 &lt;strong&gt;굳이 필요 없는 연산/비교 등을 하지 않기 위해서&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다르게 이야기하면 &lt;strong&gt;쓸데없는 것을 쳐내기 위해서&lt;/strong&gt; 특정 기준에 따라서 계속 분할을 하는 것이다. &lt;a href=&quot;https://www.acmicpc.net/problem/2261&quot;&gt;백준 2261&lt;/a&gt; 문제를 보면 어떤 의미인지 알 수 있다. 이 사실이 나로 하여금 더 구현을 잘하게 해주지는 못하지만 &lt;em&gt;개발자 마인드&lt;/em&gt;를 갖추는데 어느 정도 일조했다고 생각한다. 알고리즘 문제들을 풀면 풀수록 쌓이는 &lt;em&gt;개발자 마인드&lt;/em&gt; 룰을 통해서 새로운 문제를 바라보더라도 개발자스럽게 생각해야지 적합한 알고리즘을 찾을 수 있다.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이렇게 지나지게 많은 비교 연산을 해야할 때 필요 없는 것이 무엇인지부터 접근해야 한다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;문제-해결&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;문제 해결 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제 해결&lt;/h2&gt;
&lt;p&gt;가장 가까운 두 점 문제의 솔루션을 요약하면 다음과 같다. &lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;x값 기준으로 정렬.&lt;/li&gt;
&lt;li&gt;중간을 기준으로 왼쪽과 오른쪽을 나눔.&lt;/li&gt;
&lt;li&gt;왼쪽 가장 가까운 거리 d1, 오른쪽 가장 가까운 거리 d2 찾아냄.&lt;/li&gt;
&lt;li&gt;d1과 d2 중 더 최소값을 d 에다가 저장함.&lt;/li&gt;
&lt;li&gt;중간으로 가로지르는 점들 중 중앙과 d 이상 차이나는 점들을 제외함.&lt;/li&gt;
&lt;li&gt;해당 점들을 y 기준으로 정렬해서 위의 점과 높이가 d 이상 차이나는 점들을 제외하여 비교하여 d3을 구함.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111621456-5c649900-882b-11eb-9fc0-3f1dbdaca71e.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;위의 그림을 보면 보다 직관적으로 이해할 수 있다. 위 과정을 반복하면서 최소값을 지속적으로 업데이트하면 최종적으로 최소값을 찾을 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이렇게 x 값을 기준으로 정렬해서 제외한 후에, 아래 사진과 같이 y 값을 기준으로 또 정렬하여 제외시키면 된다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111621504-69818800-882b-11eb-9fb4-7be3a658c7b8.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;솔루션-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%94%EB%A3%A8%EC%85%98-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;솔루션 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;솔루션 구현&lt;/h2&gt;
&lt;p&gt;다음 솔루션을 구현하기 위해서 이해하거나 응용하면 좋을 개념들은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JAVA comparator&lt;/li&gt;
&lt;li&gt;재귀&lt;/li&gt;
&lt;li&gt;객체 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“완전히 모르는 건 아닌데?” 라고 생각하기 쉽지만 제대로 생각해보면 나는 잘 활용하지 않았던 개념들이 있었다. 예를 들어, comparator를 생성하여 정렬하기 보다 조금 돌아가지만 이전에 하던 방식으로 일일이 정렬하는 방법을 주로 사용하고, 객체를 생성하여 코드가 직관적이게 되기 보다 배열에 나만 아는 규칙으로 끼워 넣는 경우가 많았던 것 같다. 한번 이 모든 개념들을 제대로 응용해서 좋은 코드를 짜보자. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;아래의 대부분의 코드는 &lt;a href=&quot;https://octorbirth.tistory.com/274&quot;&gt;사이트&lt;/a&gt;에서 참고하고 내가 조금의 업그레이드를 시킨 정도이다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;java-comparator&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#java-comparator&quot; aria-label=&quot;java comparator permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JAVA Comparator&lt;/h3&gt;
&lt;p&gt;JAVA Comparator는 배열이나 객체 등을 sorting 하기 위해서 매우 유용한 인터페이스이다. 숫자가 아닌 무언가, 또는 조금 다른 기준을 통해서 정렬을 하기 원할 때, 이 comparator를 정의하여 사용하면 매우 유용하다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;기본적인 사용방법은 다음과 같다.&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comparator를 implement 한 class 정의&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Arrays.sort&lt;/code&gt;나, &lt;code class=&quot;language-text&quot;&gt;Collections.sort&lt;/code&gt;에서 내부 정렬 기준을 구현 하면됨.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;비슷한 기능을 하는 인터페이스로는 Comparable이 있다. 이것은 어떠한 클래스에서 implement 하여 내부에 있는 compareTo 함수를 통해 클래스 기본 정렬 기준을 설정하는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Comparable&lt;/th&gt;
&lt;th&gt;클래스의 기본 정렬 기준을 설정하는 인터페이스&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Comparator&lt;/td&gt;
&lt;td&gt;기본 정렬 기준과는 다르게 정렬하고 싶을 때 이용하는 클래스&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이번에 &lt;strong&gt;가장 가까운 두 점&lt;/strong&gt; 문제에서는 Comparator를 사용하여 sort 메소드를 통해서 사용할 예정이다. 우선 점들을 x좌표 기준으로 정렬하고, 이후에 y 기준으로 정렬하는 2가지 기준으로 정렬하는 클래스를 생성한다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; xComparator &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; yComparator &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;재귀-recursion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80-recursion&quot; aria-label=&quot;재귀 recursion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재귀 Recursion&lt;/h3&gt;
&lt;p&gt;거의 모든 알고리즘 문제의 일부분이 되는 재귀이지만 이번 문제에서 재귀를 활용하면서 재귀에 대해서 한층 더 이해할 수 있었다. 재귀에도 tail-recursion과 head-recursion이 나누어져 있고, 코드가 복잡해 질수록 더더욱 어느 타이밍에 재귀를 호출하는지가 매우 중요하다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이번 풀이에서는 앞서 소개한 문제해결 방식을 재귀적으로 반복하여 매번 왼쪽, 오른쪽, 중간 가로지르는 부분으로 분할해 최소 거리를 찾도록 하였다. 이렇게 head-recursion으로 호출한 후에 return 된 최소 거리를 저장하고 이후에 처리해야 할 코드를 수행한다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;객체-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;객체 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 생성&lt;/h3&gt;
&lt;p&gt;매번 이런 두 점과 같은 문제가 나올 때, 2차원 배열을 생성해서 수행했었다. 물론 그래도 아무 문제가 없고 이런 경우가 메모리나 속도 측면에서 더욱 효율적인 경우가 많다. 하지만 객체를 생성해서 데이터를 저장해야만 할 때가 있는데, 객체 생성을 해서 저장하는게 익숙하지 못해서 하지 못하는 경우가 많기 때문에 이번 문제에서 점의 좌표를 클래스 객체에 한번 담에 보았다. 생각보다 매우 간단하지만 첫 걸음이 어려워서 자주 사용하지 못했다고 생각한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;전체-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;전체 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전체 코드&lt;/h2&gt;
&lt;p&gt;다음과 같은 구성을 가지고 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;점들 사이의 최소값을 분할정복으로 찾는 minDistance()&lt;/li&gt;
&lt;li&gt;특정 기준 이하의 점들 사이의 최소값을 brute-force로 찾는 searchMin()&lt;/li&gt;
&lt;li&gt;점들 사이의 거리를 계산하는 distance()&lt;/li&gt;
&lt;li&gt;xComparator와 yComparator&lt;/li&gt;
&lt;li&gt;Point 클래스 객체&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt; br &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;StringTokenizer&lt;/span&gt; st &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;br&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      st &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;br&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xComparator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    br&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; begin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; end&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;begin&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchMin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;begin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;begin&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; d1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;begin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; d2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; mid_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mid&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;begin&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; xDist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mid&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xDist&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;xDist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mid&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; xDist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mid&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xDist&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;xDist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token class-name&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid_list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;yComparator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; mlist_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;mlist_size&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;mlist_size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; yDist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yDist&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;yDist &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; dist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mid_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dist &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dist&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; xComparator &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; yComparator &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0&quot;&gt;문제 해결&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%86%94%EB%A3%A8%EC%85%98-%EA%B5%AC%ED%98%84&quot;&gt;솔루션 구현&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#java-comparator&quot;&gt;JAVA Comparator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%AC%EA%B7%80-recursion&quot;&gt;재귀 Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1&quot;&gt;객체 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C&quot;&gt;전체 코드&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[순열과 조합]]></title><description><![CDATA[Back-tracking 알고리즘을 공부할 때 제일 먼저 구현하는 것이 순열과 조합이다.  Back-tracking…]]></description><link>https://yjksw.github.io/permutation-n-combination/</link><guid isPermaLink="false">https://yjksw.github.io/permutation-n-combination/</guid><pubDate>Sat, 12 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Back-tracking 알고리즘을 공부할 때 제일 먼저 구현하는 것이 순열과 조합이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Back-tracking 알고리즘에 대해서 입문하고 감을 잡기 위해서 시작하기 좋은 코드이다. 따라서 순열과 조합을 구하는 코드를 보고 외워서 머릿속에 저장해두는 것을 추천한다. &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;순열과 조합의 차이점:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순열: 순열은 순서가 있는 조합이다.(A Permutation is an ordered Combination)&lt;/li&gt;
&lt;li&gt;조합: 조합은 순서를 생각하지 않고 선택만 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;순열-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%88%9C%EC%97%B4-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;순열 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;순열 코드&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Back-tracking 알고리즘&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; st &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; sc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnt&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      cnt&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      cnt&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;   
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;조합-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%ED%95%A9-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;조합 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조합 코드&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Back-tracking 알고리즘&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; st &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; sc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token function&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnt &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      cnt&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      cnt&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; st&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%88%9C%EC%97%B4-%EC%BD%94%EB%93%9C&quot;&gt;순열 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A1%B0%ED%95%A9-%EC%BD%94%EB%93%9C&quot;&gt;조합 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[재귀 vs. 반복]]></title><description><![CDATA[Binary Search 이분탐색을 구현하면서, 계속 런타임 에러가 났다. 처음에 재귀로 구현을 시작했는데, 재귀에 너무 큰 값이 들어오면서 stack overflow 에러가 났나 싶어서 다시 while 문으로 구현했다. 하지만 while…]]></description><link>https://yjksw.github.io/recursion/</link><guid isPermaLink="false">https://yjksw.github.io/recursion/</guid><pubDate>Fri, 11 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Binary Search&lt;/strong&gt; 이분탐색을 구현하면서, 계속 런타임 에러가 났다. 처음에 재귀로 구현을 시작했는데, 재귀에 너무 큰 값이 들어오면서 stack overflow 에러가 났나 싶어서 다시 while 문으로 구현했다. 하지만 while 문으로 구현한 이후에도 계속 런타임 에러가 떠서 확인해보니, n과 m을 헷갈려서 잘못 적었던 것이었다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이왕 while 문으로 구현해서 맞은 거, 재귀와 비교해 보자 해서 재귀를 돌려 보았더니, 재귀가 훨씬 빠르고 메모리 효율도 좋은 것이었다. 일반적으로 생각했을 때, 재귀는 매번 메모리를 할당하면서 새로운 함수를 call 해주어야 하고, 또 그만큼의 시간과 공간이 더 필요해서 반복문에 비해 성능이 다소 떨어진다고 알고 있었지만, 훨씬 빠르고 메모리 효율도 좋아서 그 이유에 대해서 찾아보게 되었다. 정딥은 &lt;strong&gt;Tail-recursion.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;tail-recursion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tail-recursion&quot; aria-label=&quot;tail recursion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tail-Recursion&lt;/h2&gt;
&lt;h3 id=&quot;tail-recursion이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tail-recursion%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;tail recursion이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tail-Recursion이란?&lt;/h3&gt;
&lt;p&gt;Tail-Recursion이란 recursion 함수에서 가장 나중에 실행되는 명령어를 뜻한다. 마지막 시행 명령이 재귀 호출이라면, 해당 함수는 tail-recursion의 형태를 가지고 있다고 할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;tail-recursion의-효능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tail-recursion%EC%9D%98-%ED%9A%A8%EB%8A%A5&quot; aria-label=&quot;tail recursion의 효능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tail-Recursion의 효능&lt;/h3&gt;
&lt;p&gt;Tail-recursion은 주로 non tail recursion에 비교해서 성능이 더 좋은 것으로 나타난다. 마지막 recursion을 call 하고, 해당 호출에 연산이 포함되어 있지 않는다면 컴파일러에 의해서 해당 tail-recursion 함수는 optimize 된다. 이 이유는, tail-recursion 함수의 경우, 함수의 가장 마지막으로 실행하는 것이 recursive call이기 때문에 현재 머물고 있는 함수에 더 이상 진행할 instruction이 없고 따라서 현재 함수를 stack에 저장하지 않아도 된다. 때문에 non tail recursion 보다 더 빠르고, stack 메모리를 사용하지 않는 장점을 지닌다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;주의할 것은 다음과 같이 마지막에 recursive 함수 호출은 한다고 하더라도, 연산이 끼어 있다면, optimize 될 수 없다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fac&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;결과-비교&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%B0%EA%B3%BC-%EB%B9%84%EA%B5%90&quot; aria-label=&quot;결과 비교 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;결과 비교&lt;/h3&gt;
&lt;p&gt;백준 이분 탐색을 풀었을 때 결과 화면이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;첫번째 실행이 tail recursion을 사용하여 구현했을 때이고, 두번째가 while 반복문을 사용하여서 구현한 것인데 tail recursion이 재귀를 사용했음에도 불구하고 그 시간이 현저히 빠르고 메모리 효율 또한 좋은 것을 확인할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111058336-470d0900-84d1-11eb-9272-ebb0632be6b4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#tail-recursion&quot;&gt;Tail-Recursion&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#tail-recursion%EC%9D%B4%EB%9E%80&quot;&gt;Tail-Recursion이란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tail-recursion%EC%9D%98-%ED%9A%A8%EB%8A%A5&quot;&gt;Tail-Recursion의 효능&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B2%B0%EA%B3%BC-%EB%B9%84%EA%B5%90&quot;&gt;결과 비교&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[세그먼트 트리를 활용한 히스토그램 문제 풀이_2]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/segment-tree-2/</link><guid isPermaLink="false">https://yjksw.github.io/segment-tree-2/</guid><pubDate>Thu, 10 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;앞서 &lt;a href=&quot;https://www.acmicpc.net/problem/6549&quot;&gt;히스토그램 문제&lt;/a&gt;에 대한 접근 방법을 간단하게 설명하고 세그먼트 트리를 히스토그램에 맞추어서 설명했다. 이번 글에서는 구체적으로 어떻게 세그먼트 트리를 구현하여 히스토그램 문제를 푸는데까지 이어지는지 다루어 보도록 하겠다.&lt;/p&gt;
&lt;p&gt;이 문제는 레벨이 높은 문제이긴 하지만 아이디어 자체가 굉장히 어렵거나 하진 않다. 다만 시간 복잡도 측면에서 효율적으로 접근하기 위해 세그먼트 트리를 활용하는게 좀 낯설어서 어려웠던 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;segment-tree-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#segment-tree-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;segment tree 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Segment Tree 구현&lt;/h3&gt;
&lt;p&gt;Segment Tree를 구현할 때 배열을 사용해서 구현하도록 할텐데 segment tree는 다음과 같은 성질을 가지고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;세그먼트 트리는 거의 Full Binary Tree(비슷한 형태를 지님)의 모습을 하고 있다.&lt;/li&gt;
&lt;li&gt;왼쪽 자식: 부모노트 * 2&lt;/li&gt;
&lt;li&gt;오른쪽 자식: 부모노드 * 2 + 1&lt;/li&gt;
&lt;li&gt;높이: lgN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;배열을 통해서 tree를 구현하려면 사전에 tree의 노드 갯수를 파악해서 배열의 크기를 지정해야한다. 위의 성질들을 이용하면 해당 tree의 크기를 계산할 수 있다. 예를 들어 기존 배열의 개수가 &lt;strong&gt;2의 제곱인 경우&lt;/strong&gt;에는 높기가 lgN 이므로 필요한 노드의 갯수는 &lt;code class=&quot;language-text&quot;&gt;2*N-1&lt;/code&gt; 이다. &lt;strong&gt;2의 제곱이 아닌 경우&lt;/strong&gt;에는 N보다 큰지만 가장 가까운 2의 제곱을 찾으면 된다. 따라서 그 경우 노드의 갯수는 &lt;code class=&quot;language-text&quot;&gt;2*2^(lgN+2)-1&lt;/code&gt;이 된다.&lt;/p&gt;
&lt;p&gt;이렇게 크기를 지정해서 배열을 생성한 이후에 재귀 함수를 사용해서 이전 포스트에서 이야기 했던 부분을 구현하면 된다. 재귀를 잘 이해했다면 segment tree 생성은 크게 어렵지 않다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;먼저 segment tree를 저장할 배열 공간을 할당한다.  다음은 구현할 때 유용한 몇가지 JAVA 함수를 소개해준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ceil: 올림 숫자&lt;/li&gt;
&lt;li&gt;Math.log10(n)/Math.log10(2) = log2n&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Segment Tree의 index는 1부터 시작해야 한다. 그래야지 &lt;code class=&quot;language-text&quot;&gt;2*i, 2*i+1&lt;/code&gt;로 왼쪽 자식노드와 오른쪽 자식노드를 구별할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; binTree &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 segment tree에 값을 할당하는 부분이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;segment-tree-탐색&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#segment-tree-%ED%83%90%EC%83%89&quot; aria-label=&quot;segment tree 탐색 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Segment Tree 탐색&lt;/h3&gt;
&lt;p&gt;Segment Tree를 생성했으면 이제 각 구간을 순회하며 해당 구간의 최소값을 구해야 한다. 일반적인 세그먼트 트리의 예시에서 구간합을 구할 경우 각 segment tree에 있는 값의 합을 구하면 되지만, 히스토그램 문제에서는 최소값을 찾아야 하니, 한번 더 참조해야 하는 부분이 있다.&lt;/p&gt;
&lt;p&gt;이 부분은 세그먼트 트리에 대해서 설명해놓은 &lt;a href=&quot;https://www.acmicpc.net/blog/view/9&quot;&gt;백준 블로그&lt;/a&gt;를 참조하면서 이해 했는데 매우 잘 설명이 되어 있다. 세그먼트의 해당 노드가 담당하고 있는 구간을 [start, end]로, 합을 구하는 목적 구간을 [left, right]로 놓았을 때 다음 4가지 경우가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;합을 구해야하는 [left, right]와 현재 노드가 담당하고 있는 [start, end]가 겹치지 않는 경우&lt;/li&gt;
&lt;li&gt;합을 구해야하는 [left, right]가 현재 노드가 담당하고 있는 [start, end]를 완전히 포함하는 경우&lt;/li&gt;
&lt;li&gt;현재 노드가 담당하고 있는 [start, end]가 [left, right]를 완전히 포함하는 경우&lt;/li&gt;
&lt;li&gt;[left, right]와 [start, end]가 겹쳐져 있는 경우 (1, 2, 3을 제외한 나머지)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위의 4가지 경우에 대해서 다음과 같이 처리한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1번 경우: if(left &gt; end || right &amp;lt; start) 
	- 겹치지 않으므로 탐색할 필요 없음
2번 경우: if(left &amp;lt;= start &amp;amp;&amp;amp; end &amp;lt;= right)
	- 해당 노드의 값을 리턴함
3,4번 경우:
	- 각각 왼쪽, 오른쪽 자식 노드에서 탐색함. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;히스토그램 문제에서는 최소값을 찾아야 하는 것이기 때문에 왼쪽과 오른쪽 자식 노드로 나누어서 들어갈 때, 배열을 한번 더 참조해서 구간에서 최종 최소값이 있는 위치를 찾아야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findMin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;last &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; right&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; right&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; binTree&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; temp1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findMin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; temp2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findMin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;last&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temp1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; temp2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temp2 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; temp1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;temp1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;temp2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; temp1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; temp2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;히스토그램-풀이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9E%88%EC%8A%A4%ED%86%A0%EA%B7%B8%EB%9E%A8-%ED%92%80%EC%9D%B4&quot; aria-label=&quot;히스토그램 풀이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;히스토그램 풀이&lt;/h3&gt;
&lt;p&gt;위의 세그먼트 트리 생성과 탐색 방법을 사용해서 최소값을 찾는 부분을 구현했다면 이제 답을 구현하도록 해보자. 앞의 포스트에서 언급했던 방법은 아래이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;먼저 &lt;a href=&quot;https://www.acmicpc.net/problem/6549&quot;&gt;문제&lt;/a&gt;의 해결 방법을 요약하면 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;히스토그램 중, 높이가 가장 낮은 min 값과 해당 너비값을 곱하여 넓이를 구함.&lt;/li&gt;
&lt;li&gt;해당 최소값을 기준으로 히스토램을 나누어서 1번을 반복함.&lt;/li&gt;
&lt;li&gt;더 이상 나눌 수 없을 때까지 반복하며 매번 넓이의 max 값을 업데이트 함.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;위의 방법이 분할정복인 이유는 반복적으로 나뉘어지는 구간에서의 직사각형을 계속 비교하면서 최대 크기를 찾기 때문이다. 세그먼트 트리에 저장된 최소값의 위치를 활용해서 해당 기준으로 나누고, 나눈 구간에서의 직사각형 넓이 구할 때 사용하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;area&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; minIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findMin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;minIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;area&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minIndex &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minIndex&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minIndex &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; minIndex&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; minIndex&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minIndex&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt;[참고 자료]: &lt;a href=&quot;https://www.acmicpc.net/blog/view/12&quot;&gt;https://www.acmicpc.net/blog/view/12&lt;/a&gt;, &lt;a href=&quot;https://www.crocus.co.kr/648&quot;&gt;https://www.crocus.co.kr/648&lt;/a&gt;, &lt;a href=&quot;https://www.acmicpc.net/blog/view/9%C2%A0&quot;&gt;https://www.acmicpc.net/blog/view/9 &lt;/a&gt;&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#segment-tree-%EA%B5%AC%ED%98%84&quot;&gt;Segment Tree 구현&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#segment-tree-%ED%83%90%EC%83%89&quot;&gt;Segment Tree 탐색&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%9E%88%EC%8A%A4%ED%86%A0%EA%B7%B8%EB%9E%A8-%ED%92%80%EC%9D%B4&quot;&gt;히스토그램 풀이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[세그먼트 트리를 활용한 히스토그램 문제 풀이_1]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/segment-tree-1/</link><guid isPermaLink="false">https://yjksw.github.io/segment-tree-1/</guid><pubDate>Wed, 09 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;히스토그램에서 가장 큰 직사각형의 크기를 찾는 알고리즘을 풀다가, 관련 문제의 풀이법을 간단히 찾아서 금방 해결할 줄 알았으니 구현에서 의도치 않은 오랜 시간이 걸렸다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;a href=&quot;https://www.acmicpc.net/problem/6549&quot;&gt;문제&lt;/a&gt;의 해결 방법을 요약하면 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;히스토그램 중, 높이가 가장 낮은 min 값과 해당 너비값을 곱하여 넓이를 구함.&lt;/li&gt;
&lt;li&gt;해당 최소값을 기준으로 히스토램을 나누어서 1번을 반복함.&lt;/li&gt;
&lt;li&gt;더 이상 나눌 수 없을 때까지 반복하며 매번 넓이의 max 값을 업데이트 함.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음은 &lt;a href=&quot;https://www.acmicpc.net/blog/view/12&quot;&gt;백준 블로그&lt;/a&gt;에 있는 문제 해설에서 가져온 그림이다. 위의 해결 방법을 이해하는데 도움이 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/109445062-10bb9c80-7a82-11eb-9887-9047f1485785.png&quot; alt=&quot;histogram&quot;&gt;{: width=“80%“}&lt;/p&gt;
&lt;p&gt;처음에 단순히 이 풀이방법을 배열과 재귀를 사용해서 구현하는 방법으로 시도를 했었다. 사이트에 나와있는 테스트 케이스가 통과하길래 바로 채점을 했더니 결과는 &lt;em&gt;시간초과&lt;/em&gt; 였다.. 개인적으로 알고리즘을 할 때 가장 어려운 부분이 답을 출력이 되지만 시간초과가 나올 때 인 것 같다. 문제설명 밑에 해당 문제를 세그먼트 트리를 사용한 분할정복으로 풀 수 있다고 하길래 세그먼트 트리에 대해서 공부하면서 정리한 내용과 처음에 접근했던 방식에 대해서 쓰려고 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;배열/재귀를 사용해서 풀었던 방법: &lt;mark&gt; 시간초과 &lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;세그먼트 트리/분할정복을 사용해서 푼 방법: &lt;mark&gt;통과&lt;/mark&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;배열과-재귀를-사용한-첫번째-접근-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%9E%AC%EA%B7%80%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;배열과 재귀를 사용한 첫번째 접근 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열과 재귀를 사용한 첫번째 접근 방법&lt;/h3&gt;
&lt;p&gt;배열과 재귀를 사용한 접근 방법은 간단하지만 번거롭다. 매번 나뉘어진 구간 사이에서의 &lt;strong&gt;최솟값&lt;/strong&gt;을 찾는 과정을 반복해야 하기 때문이다.&lt;/p&gt;
&lt;h4 id=&quot;접근-방법-1-arraylist&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95-1-arraylist&quot; aria-label=&quot;접근 방법 1 arraylist permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근 방법 1: ArrayList&lt;/h4&gt;
&lt;p&gt;ArrayList를 사용해서 탐색 API를 사용해서 최솟값 구하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. ArrayList의 일부 구간을 subList를 사용하여 List에 저장한다.
2. Collections.min() 메소드를 사용하여 최솟값을 추출하여 넓이를 구한다. 
3. indexOf() 메소드를 사용하여 최솟값의 index를 구한다. 
4. 다음과 같은 재귀로 반복한다.
	* 맨 첫번째 요소가 최소값일 경우: 두번째 요소부터 마지막 요소까지 재귀
	* 맨 마지막 요소가 최소값일 경우: 첫본째 요소부터 마지막 이전 요소까지 재귀
	* 중간의 어느 값이 최소값일 경우: (시작 요소, 최소값 위치 -1)과 (최소값 위치 +1, 마지막 요소)로 나누어서 재귀&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 방식은 조금만 큰 값이 들어가도 바로 &lt;em&gt;시간 초과&lt;/em&gt;가 결렸다. 이유는 ArrayList의 경우 일반 배열과 달리 초반에 메모리 할당이 되지 않기 때문에 추가/삭제 시 메모리 할당을 매번 해줘야 한다. 따라서 일반적으로 일반 배열이 더욱 빠르다. 그래서 두번째 접근 방식으로 일반 배열을 사용하는 것을 택했다. 일반 배열을 사용하면 최소값을 찾는 등의 메소드를 사용하기는 어렵지만 최소값을 찾는 구현은 어렵지 않고, 시간 복잡도도 비슷하기 때문에 시도해 보았다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;area&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    	max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; min&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lastIndex&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;startIndex&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; startIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;min&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;area &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;접근-방법-2-arrays&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95-2-arrays&quot; aria-label=&quot;접근 방법 2 arrays permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근 방법 2: Arrays&lt;/h4&gt;
&lt;p&gt;Array를 사용해서 최소값을 구하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. for-loop를 사용해서 최소값 구하기
2. 최소값 사용하여 넓이 구하기 
3. 접근 방법 1에서와 같이 재귀하기&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ArrayList를 사용했을 때보다는 빨랐기 때문에 더 많은 test case를 통과할 수 있었다. 하지만 여전히 시간초과에 걸렸다.&lt;/p&gt;
&lt;p&gt;문제에서 나온 직사각형의 갯수 제한은 100,000이고 재귀 초기함수가 &lt;code class=&quot;language-text&quot;&gt;(startIndex==lastIndex)&lt;/code&gt; 일 때이기 때문에 각각하나씩 모두 접근한다. 이때마다 해당 구간의 최소값을 찾기위해 O(n)만큼 탐색을 하니 시간 초과가 걸릴만 하다. 때문에 문제의 태그에서 나온 세그먼트 트리에 대해서 공부하고 활용해보기로 했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;area&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      max&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; temp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;temp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;temp&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;min&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;temp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;min&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;temp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; min&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lastIndex&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;startIndex&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;area&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;접근-방법-3-segment-tree&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95-3-segment-tree&quot; aria-label=&quot;접근 방법 3 segment tree permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근 방법 3: Segment Tree&lt;/h4&gt;
&lt;p&gt;세그먼트 트리는 &lt;mark&gt;주어진 쿼리에 빠르게 응답하기 위해 만들어진 자료구조&lt;/mark&gt;이고, 그 사용법은 쿼리마다 상이하다. 가장 대표적으로 세그먼트 트리를 사용할 때 내는 예시는 구간 합을 구하는 문제이다. 하지만 이 글에서는 &lt;em&gt;히스토그램에서 가장 큰 직사각형&lt;/em&gt; 푸는 문제에 적용된 세그먼트를 설명할 것이다.&lt;/p&gt;
&lt;p&gt;풀이에 세그먼트 트리를 활용할 수 있는 상황은 다음 두가지와 같다. &lt;strong&gt;1. 쿼리 형식으로 문제가 주어진 경우 2. 시간 복잡도를 log로 만들고 싶을 경우&lt;/strong&gt;. &lt;small&gt;개인적으로 구간에 관련한 문제가 나올 경우, 시간 복잡도를 줄이기 위해 세그먼트 트리 사용을 하는 것이 좋은 것 같다.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;세그먼트 트리는 주로 이진트리를 이용하며, 주로 완전 이진 트리 Full Binary Tree에 가깝다. 그렇기 대문에 세그먼트 트리를 사용하면 다음과 같은 성능을 지닌다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;쿼리의 결과값 구하기: O(lgN)&lt;/li&gt;
&lt;li&gt;값 업데이트 하기: O(lgN)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;히스토그램 문제에서는 쿼리의 결과값 구하는 과정의 시간 복잡도가 O(lgN)이 되면서 성능이 매우 좋아지게 된다.&lt;/p&gt;
&lt;h6 id=&quot;segment-tree-란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#segment-tree-%EB%9E%80&quot; aria-label=&quot;segment tree 란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Segment Tree 란?&lt;/h6&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/109445201-6e4fe900-7a82-11eb-8e6c-09edb7e236a4.png&quot; alt=&quot;histogram&quot; style=&quot;zoom:70%;&quot;&gt;
&lt;p&gt;히스토그램 문제에서는 위에서 말했듯 다음 두가지 풀이를 반복한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;최소값 기준으로 구간 나누기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나뉘어진 구간에서 재귀로 1) 반복하기&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;히스토그램에서 중요 요소는 최소값이기 때문에 각 구간의 최소값의 위치를 저장하도록 한다. 따라서 이후에 특정 구간의 최소값을 찾을 때 &lt;mark&gt;O(lgN)&lt;/mark&gt;만큼의 시간복잡도로 최소값을 찾을 수 있다. 위의 이진 세그먼트 트리는 10개의 원소가 있다고 가정했을 때 각 구간이 나뉜 것을 보여준다. &lt;strong&gt;세그먼트 트리에서 모든 leaf node는 원래 배열의 자기자신 element&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;요약하자면 segment tree의 구성요소는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaf node :  원래 배열의 그 수의 위치. &lt;small&gt;(이 값은 응용 문제에 따라서 달라진다.)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;다른 node:  왼쪽 자식과 오른쪽 자식 중 더 최소값의 위치.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;히스토그램 문제에서 Segment tree 구현을 요약하면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 초기화 함수: 구간이 자기 자신일 경우, leaf node이므로 해당 위치를 기록함. 
2. 재귀 함수: 구간을 반으로 나누어서 재귀함.
3. 일반 함수: 자신의 왼쪽 자식 노드와, 오른쪽 자식 노드 위치의 값을 비교하여 더 작은 값의 위치를 트리의 해당 노트에 입력함. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;전체 구간 &lt;code class=&quot;language-text&quot;&gt;0 ~ n-1&lt;/code&gt;까지부터 시작해 재귀를 하면 각 구간마다의 &lt;mark&gt;최솟값의 위치&lt;/mark&gt;를 기록한 &lt;em&gt;lgN&lt;/em&gt; 높이 만큼의 segment tree가 생성된다. 이 세그먼트 트리를 사용해서 더 빠른 방법으로 최소값을 탐색하고 제일 앞에서 설명한 방법을 통해서 정답을 도출하면 된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;다음 글에서 구체적으로 세그먼트 트리를 구현하는 방법과 히스토그램에서 응용된 방법에 대해서 다루도록 하겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt;[참고 자료]: &lt;a href=&quot;https://www.acmicpc.net/blog/view/12&quot;&gt;https://www.acmicpc.net/blog/view/12&lt;/a&gt;, &lt;a href=&quot;https://www.crocus.co.kr/648&quot;&gt;https://www.crocus.co.kr/648&lt;/a&gt;, &lt;a href=&quot;https://www.acmicpc.net/blog/view/9%C2%A0&quot;&gt;https://www.acmicpc.net/blog/view/9 &lt;/a&gt;&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%9E%AC%EA%B7%80%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95&quot;&gt;배열과 재귀를 사용한 첫번째 접근 방법&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95-1-arraylist&quot;&gt;접근 방법 1: ArrayList&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95-2-arrays&quot;&gt;접근 방법 2: Arrays&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95-3-segment-tree&quot;&gt;접근 방법 3: Segment Tree&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#segment-tree-%EB%9E%80&quot;&gt;Segment Tree 란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[번역] Lower and Upper Bound Theory]]></title><description><![CDATA[알고리즘에 대해서 배울 때 가장 먼저 다루는 부분이 바로 Time Complexity…]]></description><link>https://yjksw.github.io/low-upper-bound/</link><guid isPermaLink="false">https://yjksw.github.io/low-upper-bound/</guid><pubDate>Fri, 04 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;알고리즘에 대해서 배울 때 가장 먼저 다루는 부분이 바로 &lt;strong&gt;Time Complexity&lt;/strong&gt; 이다. 기술이 발전하면서 메모리에 대한 부분은 상당 부분 해결이 되고 걱정하지 않아도 되는 부분이 되었다. 하지만 시간 복잡도 측면에서는 아무리 발전해도 부족한 부분이다. 왜냐하면 짧으면 짧을수록 더 좋기 때문이다. 따라서 알고리즘 강의를 들을 때에는 항상 Time Complexity에 대한 강의를 시작으로 배운다. 어떠한 문제에 대해서 여러가지 알고리즘을 사용하여 해결할 수 있을 때 무엇이 최적의 알고리즘인지를 판단하는 잣대는 해당 알고리즘으로 문제를 해결하는데 걸리는 시간이기 때문이다. 거기서 핵심적인 역할을 하는 두 theory에 대해서 &lt;a href=&quot;https://www.geeksforgeeks.org/lower-and-upper-bound-theory/&quot;&gt;다음 글&lt;/a&gt;의 내용을 번역 및 정리하면서 알아보자. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Lower Bound와 upper Bound Theory는 어떠한 문제에 대한 가장 적은 복잡도를 가진 알고리즘을 선택하는데 핵심적인 역할을 한다. 구체적으로 이 이론들을 다루기 이전에 각각 Lower Bound와 Upper Bound가 무엇을 의미하는지 살펴보자. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower Bound&lt;/strong&gt; - &lt;br&gt;&lt;/p&gt;
&lt;p&gt;L(n)이 알고리즘 A에 대한 수행 시간일 때, $L(n) &gt;= C*g(n)$을 성립하는 $C$가 있는 경우 $g(n)$은 A의 lower bound이다. 어떠한 알고리즘의 lower bound는 Big Omega 로 나타낸다. &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upper Bound&lt;/strong&gt; - &lt;br&gt;&lt;/p&gt;
&lt;p&gt;U(n)이 알고리즘 A에 대한 수행 시간일 때, $L(n) &amp;#x3C;= C*g(n)$을 성립하는 $C$가 있는 경우 $g(n)$은 A의 lower bound이다. 어떠한 알고리즘의 lower bound는 Big Oh(O) 로 나타낸다. &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-lower-bound-theory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-lower-bound-theory&quot; aria-label=&quot;1 lower bound theory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Lower Bound Theory:&lt;/h2&gt;
&lt;p&gt;Lower Bound Theory에 의하면 어떠한 알고리즘의 lower bound에 대하여 다른 어떠한 알고리즘도 랜덤한 input에 대하여 L(n)보다 적은 시간 복잡도를 가질 수 없다. 또한 다르게 말하면 모든 알고리즘들이 &lt;strong&gt;적어도 L(n)&lt;/strong&gt; 만큼의 시간을 가질 수 밖에 없다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;주의할 점: L(n)은 모든 알고리즘 중 최소의 복잡도를 나타낸다.&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Lower Bound 는 그 어던 알고리즘에 있어서도 매우 중요하다. Lower Bound를 계산한 후에, 특정 알고리즘의 복잡도를 계산하여 L(n)과 같다면 해당 알고리즘이 최적의 알고리즘이라는 것을 알 수 있다. 이 글에서 우리는 어떠한 알고리즘의 lower bound를 찾는 방법들에 대해서 다루어 볼 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;명심해야 하는 것은 언제나 우리의 가장 중요한 목적이 &lt;strong&gt;최적의 알고리즘&lt;/strong&gt;을 구하는 것이라는 것이다. 여기서 최적의 알고리즘이라고 함은 해당 알고리즘의 Upper Bound 가 해당 문제의 Lower Bound와 같은(U(n)=L(n)) 경우이다. &lt;em&gt;Merge sort&lt;/em&gt;를 통해서 optimal algorithm을 살펴보자. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;trivial-lower-bound--&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#trivial-lower-bound--&quot; aria-label=&quot;trivial lower bound   permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Trivial Lower Bound -&lt;/h3&gt;
&lt;p&gt;Lower bound를 찾는 가장 쉬운 방법이다. 이 방법은 Lower bound가 문제의 input의 개수와 output의 개수로 쉽게 알 수 있다고 하는 Trivial Lower Bound 방법이다. &lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;예시-multiplication-of-nn-matrix&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C-multiplication-of-nn-matrix&quot; aria-label=&quot;예시 multiplication of nn matrix permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시: Multiplication of n*n matrix&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Input: 2개의 행렬에 대해 $2n^2$개&lt;/li&gt;
&lt;li&gt;Output: 1 개의 n*n 행렬, $n^2$ 개&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 input/output의 숫자를 보면 쉽게 lower bound가 $O(n^2)$라는 것을 알 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;computational-model--&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#computational-model--&quot; aria-label=&quot;computational model   permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Computational Model -&lt;/h3&gt;
&lt;p&gt;이 방법을 비교를 하는 모든 알고리즘에 대해서 사용할 수 있다. 예를 들어, sorting 문제의 경우 각 원소들을 비교하고 배열을 해야한다. 탐색하는 문제 또한 비슷하다. 예시를 통해서 해당 문제들의 lower bound를 구하는 법에 대해서 살펴보자. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;ordered-searching--&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ordered-searching--&quot; aria-label=&quot;ordered searching   permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ordered Searching -&lt;/h3&gt;
&lt;p&gt;이미 정렬이 되어 있는 리스트에 대해서 탐색을 하는 경우이다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;example-1-linear-search&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-1-linear-search&quot; aria-label=&quot;example 1 linear search permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example 1: Linear Search&lt;/h3&gt;
&lt;p&gt;처음부터 시작하여 차례로 각 element를 순회하며 해당 원소가 찾던 원소인지 확인한다.&lt;/p&gt;
&lt;h3 id=&quot;example-2-binary-search&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#example-2-binary-search&quot; aria-label=&quot;example 2 binary search permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example 2: Binary Search&lt;/h3&gt;
&lt;p&gt;중간에 있는 것과 비교하여 찾고자 하는 숫자가 클 경우, 반의 오른쪽 부분을, 작을 경우 반의 왼쪽 부분을 나누어서 탐색한다.&lt;/p&gt;
&lt;h3 id=&quot;calculation-the-lower-bound&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#calculation-the-lower-bound&quot; aria-label=&quot;calculation the lower bound permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Calculation the lower bound:&lt;/h3&gt;
&lt;p&gt;비교하는 최대 횟수는 n이고, 리스트의 tree에 총 k levels이 있다고 한다면..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node의 갯수는 $2^k-1$&lt;/li&gt;
&lt;li&gt;$2^k -1$에 대하여 worst case의 경우 upper bound 개수인 n&lt;/li&gt;
&lt;li&gt;각 레밸에서 1번 비교를 하니, 비교하는 횟수는 $k&gt;=|log2n|$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;따라서 비교 문제에 있어서 n개의 원소를 가질 경우 복잡도는 log(n) 보다 작을 수 없다. 따라서 시간복잡도를 (log n)을 가진 binary serach가 최적화된 알고리즘이라고 판단할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;2-upper-bound-theory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-upper-bound-theory&quot; aria-label=&quot;2 upper bound theory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Upper Bound Theory&lt;/h2&gt;
&lt;p&gt;Upper Bound Theory는 해당 문제를 푸는데 최대 U(n)만큼이 시간이 뜬다는 것이다. 주로 worst case input인 경우 Upper Bound를 알 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#1-lower-bound-theory&quot;&gt;1. Lower Bound Theory:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#trivial-lower-bound--&quot;&gt;Trivial Lower Bound -&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C-multiplication-of-nn-matrix&quot;&gt;예시: Multiplication of n*n matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#computational-model--&quot;&gt;Computational Model -&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#ordered-searching--&quot;&gt;Ordered Searching -&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#example-1-linear-search&quot;&gt;Example 1: Linear Search&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#example-2-binary-search&quot;&gt;Example 2: Binary Search&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#calculation-the-lower-bound&quot;&gt;Calculation the lower bound:&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#2-upper-bound-theory&quot;&gt;2. Upper Bound Theory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[알고리즘] 이진탐색 응용: UpperBound와 LowerBound]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/bin-search-bound/</link><guid isPermaLink="false">https://yjksw.github.io/bin-search-bound/</guid><pubDate>Fri, 04 Sep 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이진탐색의 응용 버전으로 상/하한선을 찾는 알고리즘이다. 이를 응용한 &lt;a href=&quot;https://www.acmicpc.net/problem/10816&quot;&gt;문제&lt;/a&gt;를 풀면서 배운 개념을 정리해둔다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이진탐색을 사용하면 모든 요소들을 다 방문하면서 탐색하는 것보다 훨씬 더 효율적으로 원하는 요소를 탐색할 수 있다. 하지만 이진탐색의 경우, &lt;u&gt;중복되지 않은 값이 주어진 경우&lt;/u&gt;이거나, &lt;u&gt;해당 요소의 존재 여부&lt;/u&gt;만을 가리기 위해서 일 경우에만 사용이 가능하다. 위의 문제의 경우, 중복되는 값들이 존재하며 그 값들이 총 몇개가 있는지도 확인할 수 있어야 하기 때문에 일반적인 이진탐색을 통해서는 답을 도출할 수 없다. 그래서 찾은 알고리즘 &lt;mark&gt;Upper Bound&lt;/mark&gt; 와 &lt;mark&gt;Lower Bound&lt;/mark&gt; 알고리즘 이다. &lt;strong&gt;이진탐색에서 살짝 변형되어서 중복된 자료가 있을 때 유용하게 탐색할 수 있는 알고리즘&lt;/strong&gt;이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;아래 그림을 보면 lower bound와 upper bound에 대해서 더 잘 이해할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111030306-c4d70300-8444-11eb-8b82-7ad2c3cc0ec1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;upper-bound-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#upper-bound-algorithm&quot; aria-label=&quot;upper bound algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upper Bound Algorithm&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; Upper Bound Theory:
	K 값보다 큰 값(&gt;)이 처음 나오는 위치를 리턴해주는 알고리즘. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;구현은 이진 탐색과 매우 유사하지만 약간의 변형이 있다. &lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;탐색의 범위를 크기가 n일 때:&lt;/strong&gt; index만큼인 n-1까지 탐색하는 것이 아니라, n까지 탐색해야 함.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;탐색하는 숫자 k를 찾았거나, mid 값보다 k가 작을 경우:&lt;/strong&gt;  해당 값이나 위치를 return하는 것이 아니라, 중간 값 이후부터 분할한 오른쪽 부분을 재 탐색함.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;탐색하는 숫자 k보다 mid에 있는 값이 클 경우:&lt;/strong&gt; 본래 mid를 제외한 start&lt;del&gt;mid-1까지를 탐색했으나, 여기서는 start&lt;/del&gt;mid 탐색해 mid값을 재포함 함.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서 1번을 시행하는 이유는 만약 배열에 있는 모든 요소, 혹은 마지막 요소보다 큰 값에 대해서 return 해야할 경우, 배열의 크기 만큼을 리턴해야 하므로 end 요소에 이진 탐색처럼 &lt;code class=&quot;language-text&quot;&gt;array.length-1&lt;/code&gt;이 아닌 &lt;code class=&quot;language-text&quot;&gt;array.length&lt;/code&gt;가 들어가야 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;2번의 경우에는 해당 값 k를 찾았을 때도, &lt;em&gt;&lt;u&gt;k보다 큰 값이 처음 등장하는 위치&lt;/u&gt;&lt;/em&gt; 를 찾아야 하기 때문에, 해당 다음 위치부터 end index에 대해서 마지막 하나 남을 때까지 재탐색 해야 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;3번의 경우 mid 인덱스를 재포함하는 이유는 해당 mid에 있는 값이 upper bound 일 수 있으나, 탐색 숫자 k보다 &lt;u&gt;큰 첫번째 숫자임을 보장할 수 없기 때문에&lt;/u&gt; 탐색을 이어서 진행하는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchUpper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mid&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchUpper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchUpper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;lower-bound-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lower-bound-algorithm&quot; aria-label=&quot;lower bound algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lower Bound Algorithm&lt;/h2&gt;
&lt;p&gt;Lower bound 또한 Upper bound와 매우 유사하게 진행되므로 위의 설명을 참고하면 된다. 다만 upper bound와 다르게 작용하는 부분은, 딱 한 부분이다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;탐색하고 있는 k가 등장했을 때, upper bound 알고리즘에서는 mid+1 값부터 오른쪽 반을 탐색하였는데, lower bound 알고리즘에서는 mid를 포함시켜 왼쪽 반을 탐색하도록 한다. &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분은 lower bound이 경우 숫자 k 가 처음 등장한 위치를 찾아야 하기 때문에 k 가 등장하더라도 그 이전에 k가 존재하지는 않는지 확인해야 하기 때문이다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;코드:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchLower&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mid&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchLower&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;searchLower&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt;[참고 자료]: &lt;a href=&quot;http://bajamircea.github.io/coding/cpp/2018/08/09/lower-bound.html&quot;&gt;http://bajamircea.github.io/coding/cpp/2018/08/09/lower-bound.html&lt;/a&gt;, [&lt;a href=&quot;https://jackpot53.tistory.com/33#:~:text=lower%20bound%EB%8A%94%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%82%B4,%EB%A5%BC%20%EB%A6%AC%ED%84%B4%ED%95%B4%EC%A3%BC%EB%8A%94%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%8B%A4.%5D(&quot;&gt;https://jackpot53.tistory.com/33#:~:text=lower%20bound%EB%8A%94%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%82%B4,%EB%A5%BC%20%EB%A6%AC%ED%84%B4%ED%95%B4%EC%A3%BC%EB%8A%94%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%8B%A4.](&lt;/a&gt;&lt;a href=&quot;https://jackpot53.tistory.com/33#:~:text=lower&quot;&gt;https://jackpot53.tistory.com/33#:~:text=lower&lt;/a&gt; bound는 데이터내,를 리턴해주는 알고리즘이다.) &lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#upper-bound-algorithm&quot;&gt;Upper Bound Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lower-bound-algorithm&quot;&gt;Lower Bound Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[머신러닝] 딥러닝 영화 개인화 추천 - Part.2]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/movie-dlrm-2/</link><guid isPermaLink="false">https://yjksw.github.io/movie-dlrm-2/</guid><pubDate>Sat, 22 Aug 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이어서 딥러닝 영화 개인화 추천 모델을 구현하면서 구축한 딥러닝 협업 필터링 모델 부분에 대한 코드를 살펴보면서 딥러닝 전체적인 흐름에 대해서 짚어보자. 앞에서 언급했듯이 코드는 다음 &lt;a href=&quot;https://jyoondev.tistory.com/65?category=823946&quot;&gt;링크&lt;/a&gt;에서 참고하여 모델과 전체적인 데이터 처리를 진행했고, 이후에 학습된 output에 대한 데이터 및 결과 후처리는 추가 구현했다. 해당 부분은 다음 파트에 다루도록 하겠다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;모델-전체-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;모델 전체 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델 전체 코드&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NNCollabFiltering&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Module&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num_users&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num_items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; emb_size&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n_hidden&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NNCollabFiltering&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__init__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_emb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Embedding&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_users&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; emb_size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;item_emb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Embedding&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; emb_size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lin1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Linear&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emb_size&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n_hidden&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lin2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Linear&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n_hidden&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;drop1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Dropout&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; u&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    U &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_emb&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;u&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    V &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;item_emb&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; F&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;relu&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;torch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;U&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; V&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dim&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;drop1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; F&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;relu&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lin1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lin2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;step1-임베딩---nnembedding&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step1-%EC%9E%84%EB%B2%A0%EB%94%A9---nnembedding&quot; aria-label=&quot;step1 임베딩   nnembedding permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step1. 임베딩 - nn.Embedding()&lt;/h2&gt;
&lt;p&gt;위 코드를 보면 먼저 User와 Item에 관한 임베딩으로 시작한다. 파이토치에서 임베딩 벡터를 사용하는 방법은 크게 두가지가 있는데 그 중 위의 &lt;code class=&quot;language-text&quot;&gt;nn.Embedding()&lt;/code&gt; 은 embedding layer를 만들어서 훈련 데이터로부터 처음부터 임베딩 벡터를 학습하는 방법이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;먼저 임베딩 층의 입력으로 사용하기 위해서는 정수 인코딩이 되어 있어야 한다. 즉 다음과 같은 단계를 따른다. &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어떤 단어 -&gt; 고유한 정수로 인코딩 -&gt; 임베딩 층을 통과 -&gt; 밀집 벡터&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;즉, 고유한 정수 인코딩 값에 대해서 밀집 벡터(dense vector)를 맵핑해주는 것이다. 이 밀집 베터가 흔히 알고 있는 임베딩 벡터이다. 임베딩을 시킨다는 것은 어떠한 단어에 대한 고유 인코딩 정수값을 인덱스로 가지고 있는 룩업 테이블에서 해당 임베딩 벡터 값을 가져오는 것이다. 또한 &lt;mark&gt;이 테이블은 단어 집합만큼의 행을 가지고 있으므로 모든 단어들은 고유한 임베딩 벡터를 보유하게 된다.&lt;/mark&gt; 이러한 벡터 값을 담고 있는 룩업 테이블을 생성하는 것이 &lt;code class=&quot;language-text&quot;&gt;nn.Embedding()&lt;/code&gt;의 역할이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110482824-6bad5d80-812c-11eb-9da2-750e1946c80b.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;위의 그림을 참고해보면 단어 ‘great’에 대한 임베딩 벡터가 4차원인 것을 확인할 수 있다. 해당 차원값은 parameter로 넘겨줄 수 있는 부분이다. 이렇게 생성된 임베딩 벡터는 모델의 입력이 되고, 역전파 과정을 거치면서 바로 이 임베딩 벡터값이 학습 되는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;-코드에서-임베딩&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%9E%84%EB%B2%A0%EB%94%A9&quot; aria-label=&quot; 코드에서 임베딩 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&gt; 코드에서 임베딩&lt;/h3&gt;
&lt;p&gt;위 코드에서 임베딩이 어떻게 이루어지고 있는지 살펴보자. 코드를 살펴보면 임베딩 관련한 부분에 다음과 같이 있다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#def __init__ 메소드 내: &lt;/span&gt;
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_emb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Embedding&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_users&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; emb_size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;item_emb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Embedding&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; emb_size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;nn.Embedding()&lt;/code&gt; 에 넘겨지는 parameter는 크게 &lt;strong&gt;2가지&lt;/strong&gt;가 있다. 1) 테이블 사이즈 (단어 및 데이터 갯수) 2) 임베딩 사이즈 (embedding vector  차원). &lt;br&gt;&lt;/p&gt;
&lt;p&gt;영화에서 모델에 넣어서 학습할 데이터는 사용자 user와 영화 item이다. 이 두개에 대한 임베딩 테이블을 생성하기 위해서 인코딩 하며 중복없이 뽑아낸 user 와 item 리스트의 크기와 임베딩 사이즈를 결정해서 &lt;code class=&quot;language-text&quot;&gt;nn.Embbeding()&lt;/code&gt;을 호출한다. 그럼 임베딩 테이블이 생성되어 각각 user_emb 와 item_emb에 저장된다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;step2-linear-layer-생성---nnlinear&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step2-linear-layer-%EC%83%9D%EC%84%B1---nnlinear&quot; aria-label=&quot;step2 linear layer 생성   nnlinear permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step2. Linear Layer 생성 - nn.Linear()&lt;/h2&gt;
&lt;p&gt;다음 코드에서는 Linear layer를 생성한다. 딥러닝의 핵심인 신경망(neural network) 층을 쌓아올려서 학습을 진행한다. 그때 필요한 신경망 층을 생성하는 역할을 한다. 딥러닝을 위한 신경망은 기본적으로 선형회귀분석을 기본으로 하기 때문에 선형변형 함수로 층을 쌓는다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110482886-7d8f0080-812c-11eb-9b12-6c65a734be69.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;파이토치에서 제공하는 &lt;a href=&quot;https://pytorch.org/docs/stable/nn.html#linear-layers&quot;&gt;document&lt;/a&gt;를 살펴보면 위와 같은 선형변형 함수를 사용하는 것을 확인할 수 있다. 선형결합은 보존하는 선형변형 함수를 생성하고 원하는 &lt;strong&gt;in_feature&lt;/strong&gt;와 &lt;strong&gt;out_feature&lt;/strong&gt;의 사이즈를 parameter로 넘긴다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;-코드에서-layer-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-layer-%EC%83%9D%EC%84%B1&quot; aria-label=&quot; 코드에서 layer 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&gt; 코드에서 layer 생성&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#def __init__ 메소드 내:&lt;/span&gt;
	self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lin1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Linear&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emb_size&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n_hidden&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lin2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Linear&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n_hidden&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 입력 차원이 emb_size의 두배인 input sample에 대해서 n_hidden 사이즈 만큼의 차원으로 선형변형을 하는 linear layer 하나와, n_hidden 사이즈의 input sample에 대해서 1로 선형변형을 하는 linear layer 두개를 생성한다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;step3-모델-일반화---nndropout&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step3-%EB%AA%A8%EB%8D%B8-%EC%9D%BC%EB%B0%98%ED%99%94---nndropout&quot; aria-label=&quot;step3 모델 일반화   nndropout permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step3. 모델 일반화 - nn.Dropout()&lt;/h2&gt;
&lt;p&gt;Dropout은 모델을 일반화 기법으로 일부 파라미터를 학습에 반영하지 않는 것이다. Validation과 test 시에는 적용하지 않고 train 시에 dropout을 적용하는데, 일종의 정규화 기법이라고 볼 수 있다. 모델을 학습할 때 과적합(overfitting)의 위험을 줄이고, 학습속도를 개선하는 문제를 해결하기 위한 방법이다. 모델을 학습할 때 지나치게 학습 데이터에 대한 높은 정확도를 보이기 보다, 범용적으로 사용될 수 있도록 overfitting 문제를 피하기 위해서 고안된 해결책 중 하나이다. 일반적으로 신경망의 층이 깊어지고, 학습률이 작을수록 overfitting이 될 가능성이 높다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이중 본 코드에서 사용하고 있는 모델 일반화의 방법은 드롭아웃 Dropout이다. 신경망 모델이 지나치게 복잡해질 때, 뉴런의 연결을 임의로 삭제하여 전달하지 않도록 떨어뜨리는 역할을 한다. 다만, 테스트를 할 때에는 모든 뉴런을 사용하기 때문에 반드시 학습시에만 드롭아웃을 적용해야 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110482706-47ea1780-812c-11eb-9908-5686512aae8c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;파이토치 &lt;a href=&quot;https://pytorch.org/docs/stable/generated/torch.nn.Dropout.html#torch.nn.Dropout&quot;&gt;document&lt;/a&gt;를 보면 &lt;code class=&quot;language-text&quot;&gt;nn.torch&lt;/code&gt; 모듈에서 드롭아웃 또한 지원을 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110482789-5fc19b80-812c-11eb-960c-8f7da3b2597f.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;파이토치에 제공하는 도큐멘트를 살펴보면 학습시 무작위로 몇개의 뉴런들에 대해서 &lt;em&gt;p&lt;/em&gt; 확률만큼  ‘zeros’ 시킨다고 나와있다. 이때 &lt;em&gt;p&lt;/em&gt;는 parameter로 주어지는 확률 변수이고, default는 0.5이다. &lt;code class=&quot;language-text&quot;&gt;forward&lt;/code&gt;함수가 호출될 때마다 적용되도록 되어 있다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;-코드에서-dropout&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-dropout&quot; aria-label=&quot; 코드에서 dropout permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&gt; 코드에서 Dropout&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#def __init__ 메소드 내:&lt;/span&gt;
	self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;drop1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Dropout&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;본 코드를 살펴보면 nn.torch 모둘에서 Dropout 함수를 호출하고 확률 변수를 0.1로 주었다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;step4-활성화함수---torchnnfunctionalrelu&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step4-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%A8%EC%88%98---torchnnfunctionalrelu&quot; aria-label=&quot;step4 활성화함수   torchnnfunctionalrelu permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step4. 활성화함수 - torch.nn.functional.relu()&lt;/h2&gt;
&lt;p&gt;다음 딥러닝 신경망 모델 구축에서 중요한 부분은 활성화 함수(Activation Function)이다. 활성화 함수는 최종출력 신호 후, 다음 뉴런으로 보낼지 말지를 결정하는 함수이다. 즉, 특정 뉴런이 다음 뉴런으로 신호를 보낼 때 입력신호의 어떠한 기준에 따라서 보내고 보내지 않는지를 결정하도록 하는 것이다. 딥러닝에서는 뉴런들을 다음 레이어로 전달할 때 비선형 함수를 통화시킨 후 전달하도록 하는데 이때 사용되는 함수가 활성화 함수이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;딥러닝 학습의 핵심은 이름에서 볼 수 있듯이 깊게 층을 쌓아서 그 층을 통과하면서 학습되는 것인데, 선형함수를 사용하게 되면 층을 깊게 하는 의미가 줄어들게 된다. 해당 설명은 [밑바닥부터 시작하는 딥러닝] 책의 한 부분을 인용하도록 하겠다. &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;선형합수인 h(x)=cx를 활성화함수로 사용한 3층 네트워크를 떠올려 보세요. 이를 식으로 나타내면 y(x) = h(h(h(x)))가 됩니다. 이는 실은 y(x)=ax와 똑같은 식 입니다. a=c3이라고 하면 끝이죠. 즉, 은닉층이 없는 네트워크로 표현할 수 있습니다. 뉴럴네트워크에서 층을 쌓는 혜택을 얻고 싶다면 활성화 함수로는 반드시 비선형 함수를 사용해야 한다.&lt;/p&gt;
&lt;p&gt;-밑바닥부터 시작하는 딥러닝-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이러한 역할을 하는 활성화 함수는 많은 종류가 있다. &lt;strong&gt;1) 시그모이드 함수 2) tanh 함수 3) ReLU 함수.&lt;/strong&gt;  본 코드에서는 가장 많이 사용되는 활성화 함수인 ReLU 함수를 사용했다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110482937-8b448600-812c-11eb-9672-04dc7c7e5928.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;ReLU 함수를 살펴보면 $x &gt; 0$ 이면 기울기가 1인 직선이고 $x &amp;#x3C; 0$이면 함수값이 0이 된다. 따라서 다른 활성화함수에 비해서 굉장히 간단하고 빠르다. 해당 함수는 양수에서는 Linear function 과 같은 모습을 보이지만 음수의 경우 0으로 버려지므로 non-linear 한 함수로 작동하여 layer를 깊게 쌓을 수 있는 장점을 가진다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;-코드에서-활성화함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%A8%EC%88%98&quot; aria-label=&quot; 코드에서 활성화함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&gt; 코드에서 활성화함수&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#def forward 내&lt;/span&gt;
	x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; F&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;relu&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;torch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;U&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; V&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dim&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;선형함수가 linear layer에 들어가기 전에 비선형 함수를 거친다. 위의 코드에서 F는 &lt;code class=&quot;language-text&quot;&gt;torch.nn.funtional&lt;/code&gt;모듈이며 모듈 내에 있는 &lt;code class=&quot;language-text&quot;&gt;relu()&lt;/code&gt;를 사용하고 있다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt; [참고 자료]: &lt;a href=&quot;https://wikidocs.net/64779,%C2%A0https://tutorials.pytorch.kr/beginner/blitz/neural_networks_tutorial.html,%C2%A0https://pytorch.org/docs/,%C2%A0https://yeomko.tistory.com/39,%C2%A0https://reniew.github.io/12/,%C2%A0https://eda-ai-lab.tistory.com/405,%C2%A0https://jyoondev.tistory.com/65?category=823946,%C2%A0https://sacko.tistory.com/45&quot;&gt;https://wikidocs.net/64779, https://tutorials.pytorch.kr/beginner/blitz/neural_networks_tutorial.html, https://pytorch.org/docs/, https://yeomko.tistory.com/39, https://reniew.github.io/12/, https://eda-ai-lab.tistory.com/405, https://jyoondev.tistory.com/65?category=823946, https://sacko.tistory.com/45&lt;/a&gt;&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C&quot;&gt;모델 전체 코드&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#step1-%EC%9E%84%EB%B2%A0%EB%94%A9---nnembedding&quot;&gt;Step1. 임베딩 - nn.Embedding()&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%9E%84%EB%B2%A0%EB%94%A9&quot;&gt;&gt; 코드에서 임베딩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#step2-linear-layer-%EC%83%9D%EC%84%B1---nnlinear&quot;&gt;Step2. Linear Layer 생성 - nn.Linear()&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-layer-%EC%83%9D%EC%84%B1&quot;&gt;&gt; 코드에서 layer 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#step3-%EB%AA%A8%EB%8D%B8-%EC%9D%BC%EB%B0%98%ED%99%94---nndropout&quot;&gt;Step3. 모델 일반화 - nn.Dropout()&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-dropout&quot;&gt;&gt; 코드에서 Dropout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#step4-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%A8%EC%88%98---torchnnfunctionalrelu&quot;&gt;Step4. 활성화함수 - torch.nn.functional.relu()&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%A8%EC%88%98&quot;&gt;&gt; 코드에서 활성화함수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[머신러닝] 딥러닝 영화 개인화 추천 - Part.1]]></title><description><![CDATA[인턴을 하는 중에 요즘에 중요한 머신러닝의 한 분야가 되고 있는 개인화 추천에 대한 개발을 맡게 되었다. 요즘 넷플릭스, 왓챠와 같은 OTT 서비스는 물론이고, SNS…]]></description><link>https://yjksw.github.io/movie-dlrm-1/</link><guid isPermaLink="false">https://yjksw.github.io/movie-dlrm-1/</guid><pubDate>Fri, 21 Aug 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;인턴을 하는 중에 요즘에 중요한 머신러닝의 한 분야가 되고 있는 개인화 추천에 대한 개발을 맡게 되었다. 요즘 넷플릭스, 왓챠와 같은 OTT 서비스는 물론이고, SNS에 표기되는 광고, 당근마켓 등등과 같은 중고거래 및 쇼핑 어플리케이션에서도 중요한 것이 사용자의 취향을 분석하여서 알맞은 아이템을 추천하는 기술이 핵심이다. 어쩌면 사용자가 의식적으로 파악하고 있는 이상의 취향을 파악해서 추천해야 할 때도 있다. 이전 포스트에서 다루었듯이 개인화 추천에는 여러 통계기반 머신러닝 기법들이 있다. 그리고 인공 신경망이라는 딥러닝 기법이 등장하게 되면서 더욱 세밀하고 정확한 개인화 추천이 가능해졌다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;처음 접했기 때문에 매우 생소하고 낯선 분야였지만 많은 자료들을 찾아보면서 현재 내 삶(&lt;small&gt;유튜브나 넷플릭스의 노예…&lt;/small&gt;)과 아주 밀접하게 연관이 되어 있는 많은 어플리케이션과 서비스등에 실제로 사용되고 있는 인공지능 기법이라는 것이 금방 흥미를 불러 일으켰다. 조금 어렵긴 하지만 facebook에서 공개한 DLRM(Deep Learning Recommendation Model) &lt;a href=&quot;https://ai.facebook.com/blog/dlrm-an-advanced-open-source-deep-learning-recommendation-model/&quot;&gt;자료&lt;/a&gt;나 구글에서 공개한 유튜브 개인화 추천 &lt;a href=&quot;https://research.google/pubs/pub45530/&quot;&gt;논문&lt;/a&gt;, 국내의 당근마켓에서 쓴 개인화 추천 관련 블로그 &lt;a href=&quot;%5Bhttps://medium.com/daangn/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EA%B0%9C%EC%9D%B8%ED%99%94-%EC%B6%94%EC%B2%9C-1eda682c2e8c%5D(https://medium.com/daangn/%EB%94%A5%EB%9F%AC%EB%8B%9D-%EA%B0%9C%EC%9D%B8%ED%99%94-%EC%B6%94%EC%B2%9C-1eda682c2e8c)&quot;&gt;포스트&lt;/a&gt; 등을 참고하면서 개인화 추천에 대한 대략적인 아이디어나 개념을 잡았다. &lt;small&gt;물론 매우 매우 어렵기 때문에 모든 것을 이해하는 것은 (나는) 힘들다. 가볍지만 꼼꼼하게 읽으면서 대략적인 맥락을 파악하는 것을 추천한다!&lt;/small&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이후에 구현되어 있었던 pytorch를 활용한 딥러닝 모델 예시를 보게 되었고 참고하여 응용하면서 아주 간단한 딥러닝 영화 개인화 추천 모델을 구현하였다. 이번 포스트는 해당 개발의 초반, 데이터 전처리에 관한 내용을 다룰 예정이다. 전체 코드를 보고 싶다면 다음 &lt;a href=&quot;https://github.com/yjksw/DeepLearning_Movie_Recommendation_System&quot;&gt;github repo&lt;/a&gt;를 참고하시길. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;데이터-모양새&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EC%96%91%EC%83%88&quot; aria-label=&quot;데이터 모양새 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 모양새&lt;/h2&gt;
&lt;p&gt;딥러닝 개인화 추천 모델 구현을 시작하면서 가장 먼저 한 일은 입력 데이터의 형식에 대해서 파악한 것이다. 본 모델을 사용자와 영화 아이템, 그리고 해당  영화에 대한 각 사용자의 ratings 데이터를 담고 있는 MovieLens 데이터를 사용하였다. 해당 사이트에 가서 원하는 파일을 다운받아서 열면 다음과 같은 형식으로 데이터가 담겨져 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110306953-c027de80-8041-11eb-838e-1ca3bf9957f2.png&quot; alt=&quot;image&quot;&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;해당 csv. 파일을 읽어서 validation 과 test 데이터를 나누어야 한다. 다음 명령어를 써서 읽은 csv 파일 data frame에 대한 마스크를 씌울 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;msk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; np&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나는 구현할 때 80% 정도의 데이터를 학습 데이터로, 나머지 20%의 데이터를 검증 데이터로 사용했다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;데이터-전처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;데이터 전처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 전처리&lt;/h2&gt;
&lt;p&gt;데이터 전처리에서 해야할 일들은 매우 간단하다. 기본적으로 학습 데이터와 검증 데이터는 모두 비슷한 과정의 데이터 전처리 과정을 거치지만 개인화 추천을 위한 영화 데이터에 대해서 구현할 때는 검증 데이터 전처리에 관해 조금 다른 부분이 필요하기도 하다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;학습에서 사용되는 데이터는 ratings.csv 파일에서도 특히 &lt;em&gt;userId&lt;/em&gt;와 &lt;em&gt;movieId&lt;/em&gt; 부분이다. 따라서 해당 column를 하나씩 끌어다가 전처리를 해주어야 한다. 여기서 필요한 전처리 과정은 다음과 같다. &lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;중복을 제거하여 순수한 유저와 아이템 리스트 갯수 및 리스트 생성&lt;/li&gt;
&lt;li&gt;학습 데이터가 아닌 검증 또는 테스트 데이터일 경우, 학습 데이터에 존재하지 않는 유저와 아이템에 대하여 -1 처리하여 제외&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1번&lt;/strong&gt; 과정이 필요한 이유는 이후에 신경망 layers를 쌓고 임베딩 할 때에 pytorch의 모듈을 사용하여서 임베딩 테이블을 생성해야하기 때문이다. &lt;strong&gt;2번&lt;/strong&gt; 과정이 필요한 이유는 검증 또는 테스트 데이터에 학습 데이터로 학습되지 않은 전혀 새로운 유저나 영화가 나왔을 경우, 제대로 예측할 수 없기 때문에 미리 제거해 주는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C&quot; aria-label=&quot;코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드&lt;/h2&gt;
&lt;p&gt;위의 데이터 전처리를 하기 위해서 유용한 몇가지 파이썬 코드를 소개한다. &lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터 columns의 중복제거&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;uni &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; train_col&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unique&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 메소드는 입력으로 들어온 column에 대해서 중복을 제거한 리스트를 uni 변수에 저장해준다.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;존재하지 않는 아이템에 대하여 -1 처리하기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;np&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name2idx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; col&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 name2idx는 중복이 없는 순수한 유저 또는 아이템 리스트와 해당 index이다. 위와 같은 코드를 실행하면 name2idx에서 해당 col에 있는 x 값이 있다면 해당 값을 가져오고, 그렇지 않다면 -1을 입력하도록 하는 간편한 파이썬 문법이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이후에 학습 데이터에 존재하지 않는 유저 또는 아이템이 음수로 들어와 있으니 해당 처리를 다음과 같이하면 제외하고 검증 및 테스트 할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;df &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; df&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;df&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;col_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결과-화면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%B0%EA%B3%BC-%ED%99%94%EB%A9%B4&quot; aria-label=&quot;결과 화면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;결과 화면&lt;/h2&gt;
&lt;p&gt;위와 같은 데이터 전처리를 끝내면 다음과 같은 전처리된 데이터가 생성된다. 물론 임베딩하는 전처리가 추가로 필요하지만 다음 포스트에서 학습과 함께 다루도록 하겠다. 결과 화면의 데이터는 csv의 데이터와 크게 차이가 없이 지저분한 데이터들을 제외하고 처리해 놓은 데이터라고 생각하면 된다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110306884-b00fff00-8041-11eb-91f0-51660920fbcf.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt; [참고 자료]: &lt;a href=&quot;https://jyoondev.tistory.com/65%C2%A0&quot;&gt;https://jyoondev.tistory.com/65 &lt;/a&gt;&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EC%96%91%EC%83%88&quot;&gt;데이터 모양새&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC&quot;&gt;데이터 전처리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C&quot;&gt;코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B2%B0%EA%B3%BC-%ED%99%94%EB%A9%B4&quot;&gt;결과 화면&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[머신러닝] 추천 시스템 기술]]></title><description><![CDATA[…]]></description><link>https://yjksw.github.io/ml-recommendation-system/</link><guid isPermaLink="false">https://yjksw.github.io/ml-recommendation-system/</guid><pubDate>Mon, 10 Aug 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;모 기업에서 인턴을 하면서 맡은 업무가 &lt;mark&gt;개인화 추천 모델 구현&lt;/mark&gt;이었다. 맡은 업무는 딥러닝 기반의 개인화 추천 모델을 제작하는 것이지만 기존에 회사에서 가지고 있는 추천 시스템의 경우 협업 필터링 등으로 이미 구현이 되어 있었기 때문에 간단히 개인화 추천 시스템에 대한 브리핑을 해주시면서 감을 잡을 수 있도록 해주셨다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;추천 시스템 기술을 처음 접해보면서 어떠한 것인지 공부하며 기록해보려고 한다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;추천이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B6%94%EC%B2%9C%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;추천이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;추천이란?&lt;/h2&gt;
&lt;p&gt;추천이란 간단히 말해서 사용자(user)에게 관심이 있을 것으로 예상이 되는 아이템(item)을 제안하는 것이다. 특정 아이템에 대한 특정 사용자의 선호도 또는 평가를 예측하는 것이 매우 중요하다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;우리가 흔히 생각해 낼 수 있는 추천 시스템은 페이스북과 같은 것에서의 광고 추천, 넷플릭스나 왓챠와 같은 OTT 서비스에서의 영화 추천 시스템이다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;접근-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;접근 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근 방식&lt;/h2&gt;
&lt;p&gt;추천 시스템 기술에서의 접근 방식은 크게 다음과 같은 3가지가 있다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내용 기반 필터링 (Content-based Filtering) &lt;br&gt;&lt;/li&gt;
&lt;li&gt;협업 필터링 (Collaborative Filtering) &lt;br&gt;&lt;/li&gt;
&lt;li&gt;하이브리드 (Hybrid) &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-내용-기반-필터링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%82%B4%EC%9A%A9-%EA%B8%B0%EB%B0%98-%ED%95%84%ED%84%B0%EB%A7%81&quot; aria-label=&quot;1 내용 기반 필터링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 내용 기반 필터링&lt;/h3&gt;
&lt;p&gt;사용자의 프로필이나 아이템의 content 정보를 이용하는 방법이다. 사용자의 선호도, 취향 등을 파악하는 방법이 핵심이다. 예를 들어, 회원가입 시 사용자에게 선호하는 아이템 또는 분야 등에 대해서 선택하도록 하여 선호도를 파악하여 해당 정보를 기반으로 추천을 한다. 또는 사용자의 과거에 평가한 아이템 분석을 통해서 선호도를 파악할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110242569-0590d100-7f9a-11eb-8799-e9fe186779e6.jpeg&quot; alt=&quot;contentbased&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-협업-필터링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%98%91%EC%97%85-%ED%95%84%ED%84%B0%EB%A7%81&quot; aria-label=&quot;2 협업 필터링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 협업 필터링&lt;/h3&gt;
&lt;p&gt;협업 필터링은 여러 사용자들의 활동, 기호 정보들을 분석하여, 각 사아요자에게 적합한 아이템을 추천하도록 한다. 예를 들어서 사용자 A와 유사하다고 판단되는 사용자 B가 최근 구매한 상품을 사용자 A에게도 추천하도록 하는 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110242548-f14cd400-7f99-11eb-927e-2e1000c04eba.jpeg&quot; alt=&quot;collaborative&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-내용-기반-필터링--협업-필터링의-장단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%82%B4%EC%9A%A9-%EA%B8%B0%EB%B0%98-%ED%95%84%ED%84%B0%EB%A7%81--%ED%98%91%EC%97%85-%ED%95%84%ED%84%B0%EB%A7%81%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;3 내용 기반 필터링  협업 필터링의 장단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 내용 기반 필터링 &amp;#x26; 협업 필터링의 장단점&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;내용 기반 필터링&lt;/th&gt;
&lt;th&gt;협업 필터링&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;장점&lt;/td&gt;
&lt;td&gt;사용자의 명시적인 기호 정보를 직접적으로 반영한다. &lt;br&gt;다른 사용자의 정보나 평가, 행동 등이 필요하지 않다.&lt;br&gt;새로 추가된 아이템에 대한 추천이 가능하다.&lt;/td&gt;
&lt;td&gt;대부분의 경우 추천 성과가 우수하다.&lt;br&gt;잠재적인 특징을 고려하여 다양한 범위의 추천이 가능하다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;단점&lt;/td&gt;
&lt;td&gt;사용자의 명시적인 프로필 얻기 어려움이 있다.&lt;br&gt;명시적으로 표현된 특징만 다룰 수 있고 잠재적인 것을 캐치하기 어렵다.&lt;br&gt;추천하는 항목이 비슷한 장르에 머무르는 한계가 있다.&lt;/td&gt;
&lt;td&gt;초기 사용자에 대한 믿을만한 추천이 어렵다. Cold start가 존재한다.&lt;br&gt;한번도 평가되지 않은 아이템은 추천 대상에서 제외된다. sparsity, coverage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;4-하이브리드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%95%98%EC%9D%B4%EB%B8%8C%EB%A6%AC%EB%93%9C&quot; aria-label=&quot;4 하이브리드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 하이브리드&lt;/h3&gt;
&lt;p&gt;위에서의 내용 기반 필터링과 협업 필터링을 결합하여 사용한다. 결합하는 방식을 다양하기 때문에 어떠한 하이브리드 방식을 택하는지는 매우 광범위 하다. 하지만 간단히 보아서 위의 두가지 방식을 같이 사용함으로 각자의 단점을 보완한다는 장점을 가지고 있다. 다만 시스템적으로 매우 복잡해질 수 있는 단점이 있다.&lt;/p&gt;
&lt;h3 id=&quot;5-협업-필터링-기술-분류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%98%91%EC%97%85-%ED%95%84%ED%84%B0%EB%A7%81-%EA%B8%B0%EC%88%A0-%EB%B6%84%EB%A5%98&quot; aria-label=&quot;5 협업 필터링 기술 분류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 협업 필터링 기술 분류&lt;/h3&gt;
&lt;p&gt;본 기업에서 중점적으로 사용하고 있는 협업 필터링 기술은 다음과 같이 분류된다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리 기반(Memory-based) 협업 필터링 &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;사용자 또는 아이템 간의 유사도를 계산하고 그것을 바탕을 추천 결과를 생성하는 방식으로 유사도를 계산하는 방식이 매우 중요함. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대표 알고리즘&lt;/strong&gt;: User-based CF / Item-based CF &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;: 구현이 간단하고 이해하기 쉬움. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;한계&lt;/strong&gt;: 1) 새로운 사용자와 아이템에 대한 cold start 문제 2) Rating matrix의 sparsity 문제 3) 큰 데이터 셋에 대해 제한된 scalability &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;모델 기반(Model-based) 협업 필터링 &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;데이터(rating matrix)에 내재되어 있는 패턴이나 속성을 학습한 모델을 만들고, 이것을 바탕으로 추천 결과를 생성하는 방식. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대표 알고리즘&lt;/strong&gt;: Slope-One EF / Matrix Facotrization &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점:&lt;/strong&gt; sparsity, scalability 문제에 상대적으로 더 잘 대처하는 것이 가능하고 예측 성능이 향상됨. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;한계:&lt;/strong&gt; 1) 모델 구축 비용이 큼 2) 예측 성능과 scalability 사이의 trade-off 3) 차원 감소로 인한 정보손실(SVD 실행 시 발생) &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하이브리드(Hybrid) 방식 협업 필터링 &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;메모리 기반 방식과 모델 기반 방식을 결합하여 사용하는 방식 &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대표 알고리즘&lt;/strong&gt;: 메모리 기반과 모델 기반의 조합 &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;: 각 방식의 단점을 보완하고 장점만을 취합할 수 있음 &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;한계:&lt;/strong&gt; 구현이 복잡해지고 비용이 증가함. &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt;[참고 자료]: &lt;a href=&quot;https://www.samsungsemiconstory.com/2265&quot;&gt;https://www.samsungsemiconstory.com/2265&lt;/a&gt;, &lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%B6%94%EC%B2%9C%EC%9D%B4%EB%9E%80&quot;&gt;추천이란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D&quot;&gt;접근 방식&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EB%82%B4%EC%9A%A9-%EA%B8%B0%EB%B0%98-%ED%95%84%ED%84%B0%EB%A7%81&quot;&gt;1) 내용 기반 필터링&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%ED%98%91%EC%97%85-%ED%95%84%ED%84%B0%EB%A7%81&quot;&gt;2) 협업 필터링&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EB%82%B4%EC%9A%A9-%EA%B8%B0%EB%B0%98-%ED%95%84%ED%84%B0%EB%A7%81--%ED%98%91%EC%97%85-%ED%95%84%ED%84%B0%EB%A7%81%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot;&gt;3) 내용 기반 필터링 &amp;#x26; 협업 필터링의 장단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%ED%95%98%EC%9D%B4%EB%B8%8C%EB%A6%AC%EB%93%9C&quot;&gt;4) 하이브리드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%ED%98%91%EC%97%85-%ED%95%84%ED%84%B0%EB%A7%81-%EA%B8%B0%EC%88%A0-%EB%B6%84%EB%A5%98&quot;&gt;5) 협업 필터링 기술 분류&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[JAVA] ArrayList와 LinkedList 차이점]]></title><description><![CDATA[자바에서 LIST 인터페이스를 구현한 Collection 구현체 중 가장 많이 쓰고 헷갈리는 것이 ArrayList와 LinkedList의 차이이다. 알고리즘 코딩을 공부하다가 특정 답을 배열 구조에 담을 일이 있어서 찾아보다 문득 ArrayList…]]></description><link>https://yjksw.github.io/java-list/</link><guid isPermaLink="false">https://yjksw.github.io/java-list/</guid><pubDate>Sun, 09 Aug 2020 14:00:00 GMT</pubDate><content:encoded>&lt;br&gt;
&lt;p&gt;자바에서 LIST 인터페이스를 구현한 Collection 구현체 중 가장 많이 쓰고 헷갈리는 것이 ArrayList와 LinkedList의 차이이다. 알고리즘 코딩을 공부하다가 특정 답을 배열 구조에 담을 일이 있어서 찾아보다 문득 ArrayList, LinkedList 중 무엇을 쓸까 고민하는 김에 정리하게 되었다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;인터페이스도 같고 사용하는 방식도 비슷한 부분이 많기 때문에 ArrayList를 써야할 때 LinkedList를 쓰거나 그 반대로 사용하더라도 큰 차이가 없이 느껴지기도 한다. 하지만 두 가지 자료구조가 구분되어 있는 만큼 더 적절한 부분이 있다. 간단히 한번 알아보자. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Java에서는 변수를 저장하기 위해서 배열을 사용한다. 하지만 배열의 단점은 초기에 길이를 저장해서 미리 메모리를 확보해 놓아야 한다는 것이다. 다라서 동적으로 메모리 할당이 어려울 뿐만 아니라, 예상하지 못하는 입력크기에 대해서는 애초에 크게 배열의 크기를 잡아놓는 비효율적인 방법을 택해야 한다. 이런 문제를 해결할 수 있도록 자바 Collection에서는 ArrayList와 LinkedList 자료구조를 제공한다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;arraylist&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#arraylist&quot; aria-label=&quot;arraylist permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ArrayList&lt;/h2&gt;
&lt;p&gt;ArrayList는 데이터를 배열로 관리하고 데이터를 추가, 삭제하기 위해서 임시 배열을 생성해서 데이터를 복사하여 하나씩 index를 모두 미룬다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;다르게 말하면 많은 양의 데이터를 추가/삭제하는 경우에는 복사가 매우 많이 일어나게 되며, 그만큼의 성능저하를 일으킨다. 하지만 ArrayList가 LinkedList에 비해서 유용하게 작동하는 부분은 바로 탐색이다. 각 데이터는 각자의 인덱스를 가지고 있기 때문에 참조를 할 때 한번에 참조가 가능하며 매우 유리하게 작동하는 구현체가 된다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;linkedlist&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#linkedlist&quot; aria-label=&quot;linkedlist permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LinkedList&lt;/h2&gt;
&lt;p&gt;LinkedList는 각 노드가 자기 이전의 노드와 다음 노드를 알고 있다. 따라서 데이터를 추가하고 삭제할 시, 위에서 보이는 것처럼 그 앞과 뒤의 연결만 신경쓰면 되기 때문에 매우 유용하다. 하지만 탐색의 경우 각 노드가 정해진 인덱스에 저장되어 있는 것은 아니기 때문에 처음부터 순차적으로 노드를 방문해서 검색해야 한다는 단점을 가지고 있다.&lt;/p&gt;
&lt;h2 id=&quot;데이터-검색삽입삭제-성능-비교&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%83%89%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90&quot; aria-label=&quot;데이터 검색삽입삭제 성능 비교 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 검색/삽입/삭제 성능 비교&lt;/h2&gt;
&lt;h3 id=&quot;검색&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%80%EC%83%89&quot; aria-label=&quot;검색 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;검색&lt;/h3&gt;
&lt;p&gt;검색은 ArrayList가 LinkedList에 비해 훨씬 빠르다. ArrayList는 인덱스 기반으로 바로 해당 인덱스를 참조할 수 있기 때문에 O(1)의 시간 복잡도를 가진다. 그에 비해 LinkedList는 검색 시 모든 요소 탐색을 하기 때문에 최악의 경우 O(n)의 시간 복잡도를 가진다. &lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;삽입삭제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C&quot; aria-label=&quot;삽입삭제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;삽입/삭제&lt;/h3&gt;
&lt;p&gt;LinkedList의 삽입, 삭제는 ArrayList에 비해서 빠른데 LinkedList는 앞뒤 노드의 참조 형태만 변경하면 되기 때문에 따라서 삽입과 삭제가 일어날 때 O(1)의 시간 복잡도를 가지는 반면 ArrayList는 O(n)의 시간복잡도를 가진다. &lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;코드-응용에서의-성능-비교&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C-%EC%9D%91%EC%9A%A9%EC%97%90%EC%84%9C%EC%9D%98-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90&quot; aria-label=&quot;코드 응용에서의 성능 비교 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드 응용에서의 성능 비교&lt;/h2&gt;
&lt;p&gt;알고리즘 문제를 풀 때, 각 문제에 대한 정답을 배열에 저장하여 한꺼번에 출력을 해야하는 문제가 있었다. 해당 문제에서는 각 문제에 대해서 매번 그 답을 삽입해야 하기 때문에 LinkedList가 훨씬 좋은 성능을 보였다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;예를 들어 다음과 같은 코드를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//어떠한 조건이 충족되었을 때, &lt;/span&gt;
arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;-&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;-&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//댜른 조건이 충족되었을 때,&lt;/span&gt;
arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;크게 중요하지 않기 때문에 전체 코드를 적지는 않았다. 대충 위와 같은 코드에서 각각 ArrayList와 LinkedList로 비교해보았을 때 다음과 같은 성능 차이를 보였다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/113716079-2d07c480-9725-11eb-99d8-f9696839f3d6.png&quot; alt=&quot;result&quot;&gt;{: width=80%}&lt;/p&gt;
&lt;p&gt;첫번째 나온 라인이 LinkedList을 사용했을 때 1700ms 의 시간 효율을 보였고, 동일한 코드에 ArrayList를 사용했을 때, 잦은 삽입으로 다소 낮은 2056ms의 시간 효율을 보인 것을 볼 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#arraylist&quot;&gt;ArrayList&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#linkedlist&quot;&gt;LinkedList&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%83%89%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90&quot;&gt;데이터 검색/삽입/삭제 성능 비교&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B2%80%EC%83%89&quot;&gt;검색&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C&quot;&gt;삽입/삭제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C-%EC%9D%91%EC%9A%A9%EC%97%90%EC%84%9C%EC%9D%98-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90&quot;&gt;코드 응용에서의 성능 비교&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[[Java] Wrapper Classes in Java]]></title><description><![CDATA[다음은 Java에 존재하는 아주 특이한 클래스인 Wrapper class에 대한 내용이다. JAVA wrapper class에 대해서 설명한 한 사이트를 번역하는 겸 공부한 내용을 정리해 작성해놓았다. 1. 개요 Wrapper class…]]></description><link>https://yjksw.github.io/java-wrapper-class/</link><guid isPermaLink="false">https://yjksw.github.io/java-wrapper-class/</guid><pubDate>Sat, 08 Aug 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;다음은 Java에 존재하는 아주 특이한 클래스인 Wrapper class에 대한 내용이다. JAVA wrapper class에 대해서 설명한 한 &lt;a href=https://www.baeldung.com/java-wrapper-classes&gt;사이트&lt;/a&gt;를 &lt;strong&gt;번역&lt;/strong&gt;하는 겸 공부한 내용을 정리해 작성해놓았다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;1 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 개요&lt;/h2&gt;
&lt;p&gt;Wrapper class(감싸는 클래스) 이름이 설명하듯이 wrapper class는 자바의 Primitive types들을 객체로 감싸는 역할을 하는 클래스이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;다음과 같은 자바의 primitive 타입들은 모두 각자의 wrapper 클래스가 있다. &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean, byte, short, char, int, long, float, double &lt;br&gt;&lt;/li&gt;
&lt;li&gt;Boolean, Byte, Short, Character, Integer, Long, Float, Double&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이것들은 모두 java.lang 패키지에 정의되어 있으므로 따로 import 하지 않아도 사용할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-wrapper-classes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-wrapper-classes&quot; aria-label=&quot;2 wrapper classes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Wrapper Classes&lt;/h2&gt;
&lt;p&gt;“Wrapper 클래스의 목적은 무엇입니까?”는 자바 관련 인터뷰에서 흔하게 물어보는 질문 중 하나이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;그 목적은 간단하게 말해서, generic classes는 객체와 호환되서 작동되지 primitive 타입과는 호환이 되지 않기 때문이다. 따라서, 우리가 generic classe들을 사용하고 싶다면 우리는 primitive type들을 객체로 만들 수 있도록 하는 방법이 필요한 것이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;예를 들어서, 많은 유용한 기능들을 제공하는 Java Collection Framwork는 객체와만 작동하도록 되어 있다. Java 버전 5 이하, 즉 거의 15년 전 자바를 사용할때는 나중에 소개할 autoboxing 기능이 없었기 때문에 현재 사용되는 것처럼 간단히 &lt;code class=&quot;language-text&quot;&gt;add(5)&lt;/code&gt; 와 같이 collection of Integers를 사용할 수 없었다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;당시에는 primitive 타입의 값들은 직접 각 wrapper classes로 변환되어 새롭게 저장되어야 사용될 수 있었다. 지금은 autoboxing이라는 기능이 추가되면서, &lt;code class=&quot;language-text&quot;&gt;ÀrrayList.add(101)&lt;/code&gt;와 같은 문법을 그대로 사용할 수 있다. 자바 내부적으로 primitive value들을 Integer등과 같은 wrapper class 객체로 변환해서 사용될 수 있도록 하기 때문이다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-primitive에서-wrapper-class로-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-primitive%EC%97%90%EC%84%9C-wrapper-class%EB%A1%9C-%EB%B3%80%ED%99%98&quot; aria-label=&quot;3 primitive에서 wrapper class로 변환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Primitive에서 Wrapper Class로 변환&lt;/h2&gt;
&lt;p&gt;그럼 이 시점에 나올 만한 질문은 “어떻게 primitive value를 해당 타입 wrapper class로 변환할 수 있는가? “이다. 예를 들어, int 를 Integer로 변환하고, char를 Character로 변환하는 방법은 무엇인가 이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;간단히 2가지 방법이 있다. 생성자 constructor를 사용하던지, static factory method를 사용해서 primitive value를 wrapper class로 변환할 수 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;하지만 Java 9에 들어서는 Integer나 Long에 대한 생성자는 중요도가 떨어지면 지원되지 않는 경우가 많기 때문에 factory method를 사용하는 것을 높이 권장한다. 다음 코드를 참고해보자. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//생성자 사용&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; another &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//factory method 사용&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드에 &lt;code class=&quot;language-text&quot;&gt;valueOf()&lt;/code&gt;메소드는 int를 Integer 객체로 변환해여 반환한다. 캐싱된 값을 반환하기 때문에 매우 효율적이고, -128 에서 127까지의 값은 항상 캐싱하며 이 범위 박의 값들도 캐싱할 수 있는 장점을 가지고 있다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;위의 방법관 같이 boolean을 Boolean으로, byte 를 Byte, chat를 Character로, long을 Long으로, float을 Float로, double을 Double로 변환할 수 있다. 이와 다르게 String을 Integer로 변환하고 싶을 때는 String이 wrapper class가 아니기 때문에 &lt;code class=&quot;language-text&quot;&gt;parseInt()&lt;/code&gt; 를 사용해야 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;반대로 wrapper 객체를 다시 Primitive type으로 변환하고 싶을 때는 각자에 맞는 &lt;code class=&quot;language-text&quot;&gt;intValue()&lt;/code&gt; 나 &lt;code class=&quot;language-text&quot;&gt;doubleValue()&lt;/code&gt; 와 같은 메소드를 사용해야 한다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-autoboxing-과-unboxing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-autoboxing-%EA%B3%BC-unboxing&quot; aria-label=&quot;4 autoboxing 과 unboxing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Autoboxing 과 Unboxing&lt;/h2&gt;
&lt;p&gt;이전 파트에서는 어떻게 primitive 값을 객체로 매뉴얼하게 바꿀 수 있는지에 대해서 다뤘었다. 하지만 이전에 언급했듯이 Java 5 이후에는 자동으로 변환해주는 autoboxing, unboxing이라는 속성이 등장했다.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;“Boxing”이라는 뜻이 primitive value를 해당 Wrapper class로 변환해준다는 의미이다. 자동적으로 변환되기 때문에 다음 단어에 auto를 덧붙여서 autoboxing이라고 불린다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;비슷한 경우로 wrapper 객체가 unwrapped 되어 다시 primitive value가 되는 개념이 unboxing이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;즉, autoboxing과 unboxing은 실전에서 사용될 때 사용자가 primitive value를 특정 메소드에서 사용할 때 wrapper object이나 해당 primitive을 기대한 객체의 타입으로 바꾸어 준다는 뜻이다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//autoboxing&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//autoboxing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 예시에서는 자바가 자동적으로 primitive value인 int를 wrapper로 변환해주었다. 사실, 내부적으로는 valueOf() 메소드를 사용해서 변환한 것이다. 예를 들어, 다음 두 코드는 동일하게 동작하는 것이라고 여겨진다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;autoboxing은 코드를 한결 간결하게 만들어주고, 가독성을 높여주지만 때로는 &lt;strong&gt;사용하지 말아야 할 때&lt;/strong&gt;가 있다. 예를 들어 &lt;strong&gt;반복문 안&lt;/strong&gt;에서는 사용하지 않도록 한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Autoboxing과 비슷하게 unboxing 또한 객체를 어떤 메소드에 전달했을 때 자동으로 기대되는 primitive로 변화해주는 역할을 한다. &lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; val1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSquareValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//unboxing&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; val2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//unboxing&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSquareValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, 어떠한 메소드가 primitive value나 wrapper object을 기대할 때 두 가지 경우 모두를 전달할 수 있다는 것이다. 자바가 내부적으로 전달받은 변수에 대해서 맞는 primitive나 wrapper 클래스로 변환해 줄 것이기 때문이다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;&lt;small&gt;[참고 자료]: &lt;a href=&quot;https://www.baeldung.com/java-wrapper-classes&quot;&gt;https://www.baeldung.com/java-wrapper-classes&lt;/a&gt;, &lt;a href=&quot;https://www.geeksforgeeks.org/wrapper-classes-java/&quot;&gt;https://www.geeksforgeeks.org/wrapper-classes-java/&lt;/a&gt;&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EA%B0%9C%EC%9A%94&quot;&gt;1. 개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-wrapper-classes&quot;&gt;2. Wrapper Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-primitive%EC%97%90%EC%84%9C-wrapper-class%EB%A1%9C-%EB%B3%80%ED%99%98&quot;&gt;3. Primitive에서 Wrapper Class로 변환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-autoboxing-%EA%B3%BC-unboxing&quot;&gt;4. Autoboxing 과 Unboxing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[나이브 베이즈 분류기 - Naive Bayes Classifier]]></title><description><![CDATA[강남의 어느 검색 솔루션 기업에서 인턴한지 어연 4주차가 지나간다. 중간 지점을 지나가면서 한 것을 정리할 겸 나이브베이즈 문서 분류기 구현과 이론에 대해서 정리해 보려고 한다. 최대한 쉽게!! 나이브 베이즈 분류기는 베이즈 정리(Bayes…]]></description><link>https://yjksw.github.io/naivebayes/</link><guid isPermaLink="false">https://yjksw.github.io/naivebayes/</guid><pubDate>Fri, 24 Jul 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;강남의 어느 검색 솔루션 기업에서 인턴한지 어연 4주차가 지나간다. 중간 지점을 지나가면서 한 것을 정리할 겸 나이브베이즈 문서 분류기 구현과 이론에 대해서 정리해 보려고 한다. &lt;small&gt;최대한 쉽게!!&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;나이브 베이즈 분류기는 베이즈 정리(Bayes’ theorem)을 사용한 분류 알고리즘이다. 이것은 전통적으로 텍스트 분류를 하는 분류기로 인공지능의 기능을 기학적으로 올려준 인공 신경망 알고리즘은 아니지만 머신 러닝의 중요한 알고리즘 중 하나로 꽤 좋은 성능을 보인다. 나이브 베이즈 분류기에서 사용하는 베이즈 정리는 무엇일까?&lt;/p&gt;
&lt;h3 id=&quot;베이즈의-정리bayes-theorem를-사용한-분류-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%A0%EC%9D%B4%EC%A6%88%EC%9D%98-%EC%A0%95%EB%A6%ACbayes-theorem%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B6%84%EB%A5%98-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;베이즈의 정리bayes theorem를 사용한 분류 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;베이즈의 정리(Bayes’ theorem)를 사용한 분류 기법&lt;/h3&gt;
&lt;p&gt;베이즈 정리는 조건부 확률을 계산하는 방법 중 하나이다. 다음과 같이 표현할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;P(A)&lt;/strong&gt;&lt;/em&gt;: 사전확률(Prior). 사건 B가 발생하기 전 A가 가지고 있던 확률&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;P(B)&lt;/strong&gt;&lt;/em&gt;: 정규화 상수(normalizing constant). B가 일어날 확률&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;P(B | A)&lt;/strong&gt;&lt;/em&gt;: 가능도(likelihood). A가 발생한 경우 B가 일어날 확률&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;P(A | B)&lt;/strong&gt;&lt;/em&gt;: 사후확률(Posterior). B가 발생한 후 A가 일어날 확률&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 때 P(A | B)를 구하려면, 다음과 같은 수식을 사용한다.&lt;/p&gt;
&lt;p&gt;$$
P(A|B) = \frac {P(B|A)P(A)} {P(B)}
$$&lt;/p&gt;
&lt;p&gt;주로 나이브 베이즈 분류기법을 설명할 때 스팸 메일 분류기를 예를 들어서 설명한다.&lt;/p&gt;
&lt;h3 id=&quot;나이브-베이즈를-활용한-스팸-분류기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%98%EC%9D%B4%EB%B8%8C-%EB%B2%A0%EC%9D%B4%EC%A6%88%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%8A%A4%ED%8C%B8-%EB%B6%84%EB%A5%98%EA%B8%B0&quot; aria-label=&quot;나이브 베이즈를 활용한 스팸 분류기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;나이브 베이즈를 활용한 스팸 분류기&lt;/h3&gt;
&lt;p&gt;어떤 문서 D에 대하여 해당 문서가 스팸(S)클래스에 속하는지 일반(!S)클래스에 속하는지 분류할 때 나이브 베이즈 분류 알고리즘을 사용한다고 하자. 그리고 이미 각기 다른 단어들에 대해서 해당 단어가 스팸일 확률과 일반일 확률에 대한 데이터가 이미 확보되어 있다고 가정한다. 한번 기호로 살펴보자. 우리가 가지고 있는 데이터는 다음 두개와 같다. 다음은 각각 “Sale이라는 단어는 60%의 확률로 스팸메일에서 발견되고, 30%의 확률로 일반메일에 발견된다.”라는 정보를 가지고 있는 것이다.&lt;/p&gt;
&lt;p&gt;$$
P(‘Sale’|S), P(‘Sale’|!S)
$$&lt;/p&gt;
&lt;p&gt;데이터를 수 만개의 단어들에 대한 위의 데이터를 활용해서 결국 풀고 싶은 문제는 $P(S|D)$와 $P(!S|D)$이다. 다음 두 확률을 구한 다음 확률이 더 큰 클래스에 해당 문서가 속한다고 결론을 내린다. $P(S|D)$는 문서 $D$가 주어졌다는 가정하에 해당 문서가 스팸일 조건부 확률을 나타낸다. 반대로 $P(!S|D)$는 문서 $D$가 주어졌다는 가정하에 해당 문서가 스팸이 아닐 조건부 확률을 나타낸다. 해당 문서를 어떤 클래스에 속하는지 분류하려면 먼저 문서에서 feature를 추출해야 한다. 추출된 feature들이 어떤 규칙에 의한 키워드 단어들이라고 할 때, 베이즈 정리는 특징벡터$x=(x1, x2, …, xn)$의 요소들이 모두 &lt;strong&gt;조건부 독립&lt;/strong&gt;이라는 가정을 한다. 즉, 각 단어들이 서로 미치는 확률에 있어서 연관이 없다고 가정하는 것이다. &lt;small&gt;(이 부분에서 ‘Naive(순진한) ‘라는 이름이 붙는다. 실제로는 모두 독립적이지 않고 동등하지 않은데 이렇게 간주해버리는 순진함을 가지고 있다.)&lt;/small&gt; 이때 해당 특징벡터 $x$에 대한 클래스 $S$에 속할 확률은 다음과 같다.&lt;/p&gt;
&lt;p&gt;$$
P(S|x1,x2,…,xn)=\frac {P(x1,x2,…,xn)P(S)}{P(x1,x2,…,xn)}
$$&lt;/p&gt;
&lt;p&gt;앞에서 언급했듯이 각 feature의 요소들은 조건부 독립이기 때문에 다음과 같이 바꿔 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;$$
P(S|x1,x2,…,xn)=\frac {P(x1|S)P(x2|S)…P(xn|S)P(S)}{P(x1)P(x2)…P(xn)}
$$&lt;/p&gt;
&lt;p&gt;위와 같이 수식을 사용하면 문서를 특정 클래스들로 분류하기 위해서는 다음만 알면 된다. &lt;strong&gt;1) 문서로부터 특징벡터를 추출하는 방법 2)기존에 확보된 데이터로부터 $P(S|x)$와 $P(!S|x)$를 계산하는 방법 3)각 클래스의 비율인 사전확률 $P(S),P(!S)$.&lt;/strong&gt; 해당 문제를 해결하기 위해 주어진 문서로 부터 판단에 사용할 특징feature를 추출해야 하는데 이때 어떤 확률분포를 사용하는지에 따라 특징벡터가 달라지게 된다.&lt;/p&gt;
&lt;h3 id=&quot;나이브-베이즈-분류기-3종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%98%EC%9D%B4%EB%B8%8C-%EB%B2%A0%EC%9D%B4%EC%A6%88-%EB%B6%84%EB%A5%98%EA%B8%B0-3%EC%A2%85%EB%A5%98&quot; aria-label=&quot;나이브 베이즈 분류기 3종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;나이브 베이즈 분류기 3종류&lt;/h3&gt;
&lt;p&gt;나이브 베이즈 분류기에는 다음과 같이 3 종류가 있다. 세가지를 모두 다루지는 않고 인턴 기간동안 구현한 Bernoulli naive bayes classifier에 대해서 주로 다룰 것이다. 다만 3종류는 어떠한 것이 있고 각각의 특징과 다른점들에 대해서 간단히 설명하고 넘어가보자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gaussian naive bayes classifier: 설명변수가 연속형인 경우
&lt;ul&gt;
&lt;li&gt;연속적인 데이터에 적용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multinomial naive bayes classifier: 설명변수가 범주형인 경우
&lt;ul&gt;
&lt;li&gt;카운트 데이터(횟수)에 적용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bernoulli naive bayes classifier: 설명변수가 이분형인 경우
&lt;ul&gt;
&lt;li&gt;이진 데이터에 적용 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gaussian naive bayes는 주로 매우 고차원적인 데이터 세트를 다룰 때 사용된다. 나머지 두 베이즈 모델인 다항분포(Multinomial)과 베르누이(Bernoulli)는 보다 텍스트와 같은 데이터에 사용된다. 인턴하는 회사에서 요구한 업무는 문서에 대한 분류기이니 후자가 더 적합하다. 그 중, 내가 맡은 업무는 베르누이를 사용한 나이브 베이즈 문서 분류기이다.&lt;/p&gt;
&lt;h3 id=&quot;bernoulli-naive-bayes-분류기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#bernoulli-naive-bayes-%EB%B6%84%EB%A5%98%EA%B8%B0&quot; aria-label=&quot;bernoulli naive bayes 분류기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bernoulli Naive Bayes 분류기&lt;/h3&gt;
&lt;p&gt;일부 코드를 제시하면서 구현 로직 설명을 하겠지만 인턴 회사의 코드이므로 모든 공개가 어렵다. 또한 여기서 참고할 점은 구현 언어가 회사 내에서 개발한 새로운 언어라는 것이다. 머신러닝을 사용한 인공지능 회사인 만큼 자체적으로 로직을 짜고 데이터를 처리하기에 더 적합한 언어를 포팅하여 사용하고 있다. 따라서 큰 로직만 참고하는 것을 추천한다.&lt;/p&gt;
&lt;p&gt;먼저 텍스트 분류에 크게 사용되는 베르누이 확률 분포 모형과 다항분포 모형을 비교하며 간단히 어떤 차이가 있는지 살펴보자.&lt;/p&gt;
&lt;p&gt;먼저 다항분포는 표본벡터 $x$가 있다고 가정했을 때, 이것을 $D$면을 가진 주사위를 $y$번 던진 결과라고 본다. 즉, $x=[1, 4, 0, 5]$가 있을 때, 다음 표본벡터는 4면체 주사위를 10번 던져서 1인 면이 1번, 2인 면이 4번, 4인 면이 5번 나온 결과이다. $K$개의 class가 있다면 $D$개 면을 가진 주사위 $K$개가 있다고 보고, 주사위를 던진 결과로부터 $1, … ,K$중 어떤 주사위를 던졌는지 찾아내는 것이라고 이해한다. &lt;u&gt;문서 내에 특정 단어가 몇번 등장하는지에 대한 횟수를 모형화 할 수 있다.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;베르누이분포는 $x$의 원소가 0 또는 1 값만을 가질 수 있다. 위와 다르게 독립변수는 $D$개의 독립적인 확률변수를 가지고 있는, 동전으로 구성된 동전 세트로 표현할 수 있다. 각각의 값은 0 또는 1이다. $K$개의 클래스를 가지고 있다고 할 때, 전체 $D * K$의 조합의 동전이 존재하며 같은 class에 속하는 D개의 동전이 하나의 동전 세트를 구성하고 이런 동전 세트가 $K$개 있다고 볼 수 있다. 즉 베르누이를 사용한 나이브 베이즈 모형은 동전 세트를 N번 던진 결과로부터 1, …, $K$ 중 어느 동전 세트를 던졌는지 찾아내는 것이다. &lt;u&gt;문서 내에 특정한 단어가 포함되어 있는지의 여부로 확률을 판단할 때 주로 사용한다.&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feature_count: 각 class k에 대해 d번째 동전이 앞면이 나온 횟수 $N_d,_k$&lt;/li&gt;
&lt;li&gt;feature_log_prob: 베르누이분포 모수의 로그값&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
log\mu_k = (log\mu_1,_k,…,log\mu_D,_k) = (log\frac{N_1,_k}{N_k},…,log\frac{N_D,_k}{N_k})
$$&lt;/p&gt;
&lt;p&gt;$N_k$는 class k에 대해서 동전을 던진 횟수이다.&lt;/p&gt;
&lt;p&gt;다음 파이썬 코드를 잠깐 훑으며 베르누이 확률분포를 사용해 나이브베이즈 분류 확률을 구하는 과적을 살펴보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pseudocode&quot;&gt;&lt;pre class=&quot;language-pseudocode&quot;&gt;&lt;code class=&quot;language-pseudocode&quot;&gt;x = np.array([
[0, 1, 1, 0],
[1, 1, 1, 1],
[1, 1, 1, 0],
[0, 1, 0, 0],
[0, 0, 0, 1],
[0, 1, 1, 0],
[0, 1, 1, 1],
[1, 0, 1, 0],
[1, 0, 1, 1],
[0, 1, 1, 0]])

y = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1]) //class 분류&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클래스는 0과 1로 총 2개라고 본다. $x$는 확률변수를 가지고 있는 동전 세트로 볼 수 있고, $y$는 각 세트에 대한 클래스를 정의해 놓은 것이다. 처음 4개 세트는 class 0, 다음 6개 세트는 class 1이다.&lt;/p&gt;
&lt;p&gt;각 클래스 $k$별, 독립변수 $d$별로 총 8개의 베르누이 확률변수의 모수를 구하면 다음과 같다. (각 클래스 별로 합치는 것)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pseudocode&quot;&gt;&lt;pre class=&quot;language-pseudocode&quot;&gt;&lt;code class=&quot;language-pseudocode&quot;&gt;array([[2, 4, 3, 1],
	   [2, 3, 5, 3]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$[2, 4, 3, 1]$이 어떻게 나왔는지 간단하게 설명해보겠다. $x$의 첫번 째 4 세트가 class 0이므로 각각 첫번째 요소가 1인 횟수를 더하여서 2, 두번째 요소가 1인 횟수를 더하여서 4, … 이렇게 합친다.&lt;/p&gt;
&lt;p&gt;이렇게 합쳐진 요소들에 대해서 각 클래스의 전체 개수로 나누어 주어야 한다. 위 예시의 경우 class 0의 전체 개수는 4이고 1의 전체 개수는 6이다. 결과는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pseudocode&quot;&gt;&lt;pre class=&quot;language-pseudocode&quot;&gt;&lt;code class=&quot;language-pseudocode&quot;&gt;array([[0.5,   1,   0.75,    0.25],
	   [0.333, 0.5, 0.83333, 0.5]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 이제 **스무딩(Smoothing)**을 해야한다. 표본 데이터의 수가 그렇지 않음에도 불구하고 0 또는 1이라는 극단적인 값이 나오게 된다. &lt;small&gt;(현실에서 그런 확률은 거의 없다)&lt;/small&gt; 따라서 이런 현상을 방지하기 위해서 베르누이는 모수가 0.5인 가장 일반적인 경를 가정하여서 0이 나오는 경우와 1이 나오는 경우의 가장 표본 데이터를 추가하여 스무딩한다. 주로 smoothing은 가중치 $\alpha$의 값으로 스무딩을 조절한다. 이것을 &lt;em&gt;==라플라스 스무딩(Laplace smooting)==&lt;/em&gt; 또는 *==애드원(Add-One) 스무딩==*이라고 한다.&lt;/p&gt;
&lt;p&gt;$$
\mu_d,_k = \frac {N_d,_k + \alpha} {N_k + 2\alpha}
$$&lt;/p&gt;
&lt;p&gt;위에서 스무딩 가중치 $\alpha$를 1.0을 주었을 때 결과 값은 다음과 같다. 확인해보면 1과 같은 극단적인 값이 없어졌음을 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pseudocode&quot;&gt;&lt;pre class=&quot;language-pseudocode&quot;&gt;&lt;code class=&quot;language-pseudocode&quot;&gt;array([[0.5,   0.833333, 0.66667, 0.33333],
	   [0.375, 0.5,      0.75,    0.5]])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예측을 하기 위해 $[0, 0, 1, 1]$ 을 입력하면 $array([0.0953 , 0.9046])$ 값이 나온다. 즉 3, 4번 키워드가 포함되어 있다면 class 1 일 확률이 90%라는 의미이다.&lt;/p&gt;
&lt;h3 id=&quot;implementation---문서-분류기-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#implementation---%EB%AC%B8%EC%84%9C-%EB%B6%84%EB%A5%98%EA%B8%B0-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;implementation   문서 분류기 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Implementation - 문서 분류기 구현&lt;/h3&gt;
&lt;p&gt;원리를 이해했다면 구현은 생각보다 간단하다. 물론 파이썬의 sklearn등의 모듈을 사용하면 나이브 베이즈와 각 확률분포에 대한 기능이 모두 구현되어 있다. 따라서 가져가 쓰기면 하면 된다. 여기서는 문서분류기에 해당 알고리즘을 모듈을 사용하지 않고 어떻게 구현해야 하는지를 다룰 것이다. 앞서 말했든 사내에서 쓰는 언어를 사용한 것이 때문에 코드구현은 플로우만 참고하는 것을 추천한다.&lt;/p&gt;
&lt;h4 id=&quot;학습-learn&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%99%EC%8A%B5-learn&quot; aria-label=&quot;학습 learn permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;학습 Learn&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Input: 텍스트, 분류 클래스&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;문서 키워드를 추출한다. 키워드 추출은 사용자마다 다른 기능이나 모듈을 가져와서 기준에 따라 추출할 수 있다.&lt;/li&gt;
&lt;li&gt;중복 제거를 위해 추출된 키워드를 Set에 입력시킨다.&lt;/li&gt;
&lt;li&gt;클래스 횟수가 저장되어 있는 자료구조에 해당 클래수 횟수를 1 증가시킨다.&lt;/li&gt;
&lt;li&gt;해당 클래스의 해당 단어의 여부를 기록하기 위해 해당 자료구조에 1을 더한다.&lt;/li&gt;
&lt;li&gt;전체 단어를 저장하는 자료구조에 단어를 추가한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위에서 설명한 베르누이 확률분포를 계산하기 위한 $N_d,_k$와 $N_k$를 계산하는 과정으로 이해하면된다. 다음은 해당을 특정 언어로 코딩한 일부분이다. 여기서 m_n_cls와 m_n_cls_word등의 자료구조는 hash이고 m_words는 set이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c++&quot;&gt;&lt;pre class=&quot;language-c++&quot;&gt;&lt;code class=&quot;language-c++&quot;&gt;void BernoulliModel::learn(string text, string cls){
    list&amp;lt;string&amp;gt; tok;
    tok = extract_words(text.trim(), m_lang, m_charset;
    m_n_cls[cls] +=1;
                        
    set&amp;lt;string&amp;gt; word_set;
    string word;
    for word in tok {
        word_set.add(word);
    }                    
    
    for word in word_set {
        m_n_cls_word[cls+&amp;quot;_&amp;quot;+word] += 1;
        m_words.add(word);
    }                    
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;예측-predict&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%B8%A1-predict&quot; aria-label=&quot;예측 predict permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예측 Predict&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Input: 예측할 테스트, Smoothing을 위한 $\alpha$&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;입력 텍스트에 대해서 키워드를 추출함&lt;/li&gt;
&lt;li&gt;클래쓰 목록을 가져와서 각 클래스마다 다음을 반복함(해당 클래스의 Score를 구함)&lt;/li&gt;
&lt;li&gt;분모에 총 클래스 횟수와 smoothing값을 더함.&lt;/li&gt;
&lt;li&gt;추출된 각 키워드에 대해서 확률분포값과 smoothing 값을 더하여서 위의 분모로 나눈 log를 계산함(위에 베르누이 확률 계산 공식을 참고)&lt;/li&gt;
&lt;li&gt;각 클래스의 점수를 누적하여 예측함.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pseudocode&quot;&gt;&lt;pre class=&quot;language-pseudocode&quot;&gt;&lt;code class=&quot;language-pseudocode&quot;&gt;BernoulliModel::predict(string fe, string lang, string charset, hash&amp;lt;string,double&amp;gt;&amp;amp; score_hash, double alpha){
	list&amp;lt;string&amp;gt; tok;
	list&amp;lt;string&amp;gt; cls_list;
	double denom;
	double score;
	string cls;
	string t;
	
	tok = extract_word(fe.trim(), lang, charset);
	cls_list = m_n_cls.key();
	
	for cls in cls_list {
		socre = 0.0;
		denom = double(m_n_cls[cls]) + 2*alpha;
		for t in tok{
			score += log(m_n_cls_wor[cls+&amp;quot;_&amp;quot;+t]+alpha) / denom);
		}
		score_hash[cls] += score;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음을 예측해서 Score가 가장 높은 cls 소속임을 예측한다. 다항분포 모델이랑 비교하여 새로 구현한 베르누이 나이브 베이즈 문서 분류기의 성능을 테스트 해 보았을 때 81&lt;del&gt;82% 정도의 정확성을 보이는 것을 확인했다. 다항분포는 84&lt;/del&gt;85%정도의 성능이었던 것을 고려해보면 확실히 정확한 횟수보다 여부만을 가지고 계산하는 베르누이 분류기의 성능이 다소 떨어지는 것을 확인할 수 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결과:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/110242446-88655c00-7f99-11eb-9da7-5484473f3160.png&quot; alt=&quot;Bernoulli&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;strong&gt;[참고 자료]:&lt;/strong&gt;  &lt;a href=&quot;https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/naive/naive.ipynb&quot;&gt;https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/naive/naive.ipynb&lt;/a&gt;, &lt;a href=&quot;https://wikidocs.net/22892,%C2%A0https://heung-bae-lee.github.io/2020/04/14/machine_learning_07/&quot;&gt;https://wikidocs.net/22892, https://heung-bae-lee.github.io/2020/04/14/machine_learning_07/&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B2%A0%EC%9D%B4%EC%A6%88%EC%9D%98-%EC%A0%95%EB%A6%ACbayes-theorem%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B6%84%EB%A5%98-%EA%B8%B0%EB%B2%95&quot;&gt;베이즈의 정리(Bayes’ theorem)를 사용한 분류 기법&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%82%98%EC%9D%B4%EB%B8%8C-%EB%B2%A0%EC%9D%B4%EC%A6%88%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%8A%A4%ED%8C%B8-%EB%B6%84%EB%A5%98%EA%B8%B0&quot;&gt;나이브 베이즈를 활용한 스팸 분류기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%82%98%EC%9D%B4%EB%B8%8C-%EB%B2%A0%EC%9D%B4%EC%A6%88-%EB%B6%84%EB%A5%98%EA%B8%B0-3%EC%A2%85%EB%A5%98&quot;&gt;나이브 베이즈 분류기 3종류&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#bernoulli-naive-bayes-%EB%B6%84%EB%A5%98%EA%B8%B0&quot;&gt;Bernoulli Naive Bayes 분류기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#implementation---%EB%AC%B8%EC%84%9C-%EB%B6%84%EB%A5%98%EA%B8%B0-%EA%B5%AC%ED%98%84&quot;&gt;Implementation - 문서 분류기 구현&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%99%EC%8A%B5-learn&quot;&gt;학습 Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%88%EC%B8%A1-predict&quot;&gt;예측 Predict&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[분할정복 기본 알아보기]]></title><description><![CDATA[다음은 분할정복 Divide and Conquer Algorithm에 대한 지식 블로그 번역 및 요약+추가정리 내용이다.  원문: https://www.geeksforgeeks.org/divide-and-conquer-algorithm…]]></description><link>https://yjksw.github.io/dac/</link><guid isPermaLink="false">https://yjksw.github.io/dac/</guid><pubDate>Tue, 21 Jul 2020 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;다음은 분할정복 Divide and Conquer Algorithm에 대한 지식 블로그 &lt;strong&gt;번역 및 요약+추가정리&lt;/strong&gt; 내용이다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;원문: &lt;a href=&quot;https://www.geeksforgeeks.org/divide-and-conquer-algorithm-introduction/&quot;&gt;https://www.geeksforgeeks.org/divide-and-conquer-algorithm-introduction/&lt;/a&gt;&lt;/small&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이 글에서는 &lt;strong&gt;분할정복&lt;/strong&gt;이 유용한 경우와 분할정복으로 해결할 수 있는 문제의 접근방식에 대해서 다룰 것이다. 다음이 이 글에서 다룰 내용들이다. &lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DAC(분할정복) 소개 및 정리&lt;/li&gt;
&lt;li&gt;DAC을 사용하는 알고리즘&lt;/li&gt;
&lt;li&gt;DAC 알고리즘을 사용한 재귀&lt;/li&gt;
&lt;li&gt;&lt;del&gt;DAC를 사용한 문제 예시&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;divide-and-conquer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#divide-and-conquer&quot; aria-label=&quot;divide and conquer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Divide and Conquer:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Divide&lt;/strong&gt;: 문제를 분할이 가능한 경우까지 분할한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conquer&lt;/strong&gt;: 분할된 sub problem을 재귀로 호출해 정복한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Combine&lt;/strong&gt;: 해결된 sub problem들을 합쳐 문제의 해결책을 찾는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;dac가-응용된-알고리즘-기법들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dac%EA%B0%80-%EC%9D%91%EC%9A%A9%EB%90%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B8%B0%EB%B2%95%EB%93%A4&quot; aria-label=&quot;dac가 응용된 알고리즘 기법들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DAC가 응용된 알고리즘 기법들:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Binary Search(이진탐색): 검색하고자 하는 value를 주어진 배열의 중간 인덱스((start+end)/2)와 비교한다. &lt;small&gt;이때 배열은 오름차순으로 정렬된 상태이다.&lt;/small&gt; value가 중간 인덱스의 값과 일치하면 해당 index를 반환한다. 작다면 중간 인덱스를 기준으로 왼쪽 배열에 재귀호출하여 앞의 탐색을 반복한다. 만일 크다면, 중간 인덱스를 기준으로 오른쪽 배열을 재귀적으로 탐색한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;Divide&lt;/mark&gt;: 중간 인덱스를 기준으로 재귀호출을 통해 분할함. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;Conquere&lt;/mark&gt;: 분할된 배열 내에서 value를 탐색하여 정복함. &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111792910-14677400-8908-11eb-8cb1-9bdbffc79340.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Quick Sort(퀵 정렬): 정렬의 한 기법으로 pivot element를 기준으로 pivot보다 더 작은 요소들은 pivot 기준 왼쪽에, 큰 요소들은 pivot 기준 오른쪽으로 분할한다. 각각 분할된 부분배열에서도 각각 pivot을 정해 동일하게 정렬하고 더 이상 분할할 수 없을 때(부분배열의 크기가 0또는 1이 됨)까지 반복하여 정렬한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;Divide&lt;/mark&gt;:  배열을 pivot element의 기준으로 비균등한 크기로 나눈다. 재귀호출을 통해 더 나누어질 수 없을 때까지 나눈다. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;Conquer&lt;/mark&gt;: 부분 배열을 pivot element 기준으로 크기 정렬을 하여 정복한다. 이때 순환 호출을 통해서 분할 정복을 반복 실행한다. &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111793059-395be700-8908-11eb-9a9a-8b690b3012f4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Merge Sort(합병정렬): 정렬의 한 기법으로 순훈호출로 배열을 반으로 분할하여 정렬하고 합병하여 정렬하는 기법이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;Divide&lt;/mark&gt;: 배열을 반으로 분할한다. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;Conquer&lt;/mark&gt;: 분할된 부분배열을 정렬하고 부분 배열이 충분히 작지 않으면 순환 호출로 다시 분할 정복을 적용한다. &lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/63405904/111793003-2a753480-8908-11eb-8183-c3fe1f88e15c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Closest Pair of Points: 여러 포인트들의 집합 속에서 가장 서로 가까운 포인트 쌍을 찾는 문제이다. 해당 문제는 모든 포인트 쌍의 거리를 비교하여 min 값을 찾을 때에는 O(n^2) 만큼의 시간 복잡도를 가지지만 DAC 알고리즘을 사용하면 O(nLogn) 의 시간 복잡도로 해결이 가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;small&gt;이미지 출처: &lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=horajjan&amp;#x26;logNo=220310806806&amp;#x26;proxyReferer=https:%2F%2Fwww.google.com%2F&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=horajjan&amp;#x26;logNo=220310806806&amp;#x26;proxyReferer=https:%2F%2Fwww.google.com%2F&lt;/a&gt;, &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/10/algorithm-quick-sort.html&quot;&gt;https://gmlwjd9405.github.io/2018/05/10/algorithm-quick-sort.html&lt;/a&gt;, &lt;a href=&quot;https://www.geeksforgeeks.org/divide-and-conquer-algorithm-introduction/%C2%A0&quot;&gt;https://www.geeksforgeeks.org/divide-and-conquer-algorithm-introduction/ &lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#divide-and-conquer&quot;&gt;Divide and Conquer:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dac%EA%B0%80-%EC%9D%91%EC%9A%A9%EB%90%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B8%B0%EB%B2%95%EB%93%A4&quot;&gt;DAC가 응용된 알고리즘 기법들:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>