{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/springboot-controller-advice/",
    "result": {"data":{"cur":{"id":"aa4dffec-9907-5cba-91ed-6988835a5453","html":"<ul>\n<li><code class=\"language-text\">@ControllerAdvice</code>를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면 <code class=\"language-text\">@RequestMapping</code> 메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller classes)</li>\n<li>주로 <code class=\"language-text\">@ControllerAdvice</code>에서 전역적으로 처리하고 싶은 어노테이션은 <code class=\"language-text\">@ExceptionHandler</code>, <code class=\"language-text\">@InitBinder</code>, <code class=\"language-text\">@ModelAttribute</code> 등이 있다.</li>\n<li><code class=\"language-text\">ResponseEntityExceptionHandler</code> 클래스가 <code class=\"language-text\">@ControllerAdvice</code> 어노테이션에서 전역적인 exception handling 을 구현할 수 있도록 하는 base class이다. 해당 클래스에서 Spring MVC 내부에서 발생한 예외들을 처리할 수 있는 메서드들을 제공한다. (<code class=\"language-text\">DefaultHandlerExceptionResolver</code>는 <code class=\"language-text\">ModelAndView</code>를 반환하는 반면 <code class=\"language-text\">ResponseEntityExceptionHandler</code>는 <code class=\"language-text\">ResponseEntity</code>를 반환한다)</li>\n</ul>\n<h2 id=\"여러-controlleradvice-간의-우선순위\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"여러 controlleradvice 간의 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 @ControllerAdvice 간의 우선순위</h2>\n<p>@ControllerAdvice 클래스들은 Bean으로 등록이 되도록 하는데, 해당 빈들은 <code class=\"language-text\">Ordered</code> 인터페이스를 구현하여 orderable 한 속성을 부여하거나, <code class=\"language-text\">@Order</code>/ <code class=\"language-text\">@Priority</code>를 사용해서 우선순위를 부여할 수 있다. (여기서 <code class=\"language-text\">Ordered</code> semantic이 <code class=\"language-text\">@Order</code>/ <code class=\"language-text\">@Priority</code> 에 우선순위를 가진다)</p>\n<ul>\n<li>\n<p>예외를 처리하는 경우</p>\n<p>매칭이 되는 exception handler method가 있는 가장 처음 매칭되는 advice의 <code class=\"language-text\">@ExceptionHandler</code>가 실행된다.</p>\n</li>\n<li>\n<p>model attribute와 data binding 초기화 경우</p>\n<p><code class=\"language-text\">@ModelAttribute</code>와 <code class=\"language-text\">@InitBinder</code> 메소드가 <code class=\"language-text\">ControllerAdvice</code>의 우선순위 순서에 따라서 실행된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">@ControlerAdvice</code>의 우선순위에 따른 ExceptionHandler 선언 팁</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/135494123-1441631a-7277-4b6f-b82e-30610bcf4b5e.png\"></p>\n</li>\n</ul>\n<p>기본적으로 <code class=\"language-text\">@ControllerAdvice</code>는 모든 controller에 전역적으로 적용이 되기 때문에, 더 구체적인 controller에 적용하기 위해서는 selectors를 사용해야한다. (<code class=\"language-text\">annotations()</code> , <code class=\"language-text\">basePackageClasses()</code> , <code class=\"language-text\">basePackages()</code>)만일 여러 selectors가 있으면 OR 로 적용이되면 이 selectors 체크는 runtime에 실행이 되므로, 만일 너무 많은 selectors를 사용하면 런타임 퍼포먼스 효율이 떨어지게 된다.</p>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://zetcode.com/springboot/controlleradvice/\">https://zetcode.com/springboot/controlleradvice/</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html\">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">여러 @ControllerAdvice 간의 우선순위</a></li>\n</ul>\n</div>","excerpt":"를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면  메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller classes) 주로 에서 전역적으로 처리하고 싶은 어노테이션은 , ,  등이 있다.  클래스가  어노테이션에서 전역적인 exception handling 을 구현할 수 있도록 하는 base class이다. 해당 클래스에서 Spring MVC 내부에서 발생한 예외들을 처리할 수 있는 메서드들을 제공한다. (는 를 반환하는 반면 는 를 반환한다) 여러 @ControllerAdvice 간의 우선순위 @ControllerAdvice 클래스들은 Bean으로 등록이 되도록 하는데, 해당 빈들은  인터페이스를 구현하여 orderable 한 속성을 부여하거나, / 를 사용해서 우선순위를 부여할 수 있다. (여기서  semantic이 /  에 우선순위를 가진다…","frontmatter":{"date":"June 19, 2021","title":"@ControllerAdvice 알아보기","categories":"스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/springboot-controller-advice/"}},"next":{"id":"2696e70c-e746-5fb0-96cc-3b651a5c3483","html":"<h2 id=\"requestbody\" style=\"position:relative;\"><a href=\"#requestbody\" aria-label=\"requestbody permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@RequestBody</h2>\n<p>request body를 method argument로 바꿀 때 <code class=\"language-text\">HttpMessageConverter</code>를 사용한다.</p>\n<ul>\n<li><code class=\"language-text\">HttpMessageConverter</code> 는 두가지를 담당한다. 첫번째는 Http request message를 객체로 변환하는 것, 두번째는 객체를 Http response body로 변환하는 작업이다.</li>\n</ul>\n<h3 id=\"동작원리\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작원리</h3>\n<p><code class=\"language-text\">DispatcherServlet</code>에 의해서 호출되는 handler의 method parameters은 스프링의 <code class=\"language-text\">HandlerMethodArgumentResolver</code>에 의해 생성이 되고, handler의 return value는 <code class=\"language-text\">HandlerMethodReturnValueHandler</code>에 의해서 처리된다. <code class=\"language-text\">@ResponseBody</code>와 <code class=\"language-text\">@RequestBody</code>를 다루는 구현체는 <code class=\"language-text\">RequestResponseBodyMethodProcess</code>이다.</p>\n<ul>\n<li>\n<p>DispatcherServlet의 handle에서부터 Argument resolve 하는 과정</p>\n<p><code class=\"language-text\">DispatcherServlet#handle()</code> → <code class=\"language-text\">AbstractHandlerMethodAdapter#handle()</code> → <code class=\"language-text\">RequestMappingHandlerAdapter#handleInternal()</code> → <code class=\"language-text\">RequestMappingHandlerAdapter#invokeHandlerMethod()</code> → <code class=\"language-text\">ServletInvocableHandlerMethod#invokeAndHandle()</code> → <code class=\"language-text\">InvocableHandlerMethod#invokeForRequest()</code> → <code class=\"language-text\">InvocableHandlerMethod #getMethodArgumentValues()</code> → <em>(Interface)</em><code class=\"language-text\">HandlerMethodArgumentResolver#resolveArgument()</code> → <em>(Imp)</em><code class=\"language-text\">RequestResponseBodyMethodProcessor#resolveArgument()</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">RequestResponseBodyMethodProcessor#resolveArgument()</code> 내부에서 HttpMessageConverter를 사용해서 변환시키는 과정</p>\n<p><code class=\"language-text\">RequestResponseBodyMethodProcessor#resolveArgument()</code> → (e<em>xtends  AbstractMessageConverterMethodArgumentResolver</em>)<code class=\"language-text\">RequestResponseBodyMethodProcessor#readWithMessageConverters()</code> → (<em>Imp HandlerMethodArgumentResolver</em>)<code class=\"language-text\">AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters()</code> 에서 변환 로직을 시행한다.</p>\n</li>\n</ul>\n<p>이때 HttpMessageConverter default 인스턴스들은 <code class=\"language-text\">WebMvcConfigurationSupport#addDefaultHttpMessageConverters()</code> 를 통해 등록된다.</p>\n<h3 id=\"httpmessageconverter-로직\" style=\"position:relative;\"><a href=\"#httpmessageconverter-%EB%A1%9C%EC%A7%81\" aria-label=\"httpmessageconverter 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HttpMessageConverter 로직</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@RequestBody</code> 일때</p>\n<p><code class=\"language-text\">HttpMessageConverter#canRead()</code> 로 converter가 해당 content의 인스턴스를 읽고 생성할 수 있는지 확인한다. 이후에 argument를 생성하여 반환한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">@ResponseBody</code> 일때</p>\n<p><code class=\"language-text\">HttpMessageConverter#canWrite()</code> 를 통해서 <code class=\"language-text\">HttpMessageConverter</code>가 해당 반환값을 serialize 할 수 있는지 확인하고 response content를 생성하고, <code class=\"language-text\">Accept</code> 헤더가 있다면 해당 content-type에 매칭되는지도 확인한다.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">MessagConverter</code>를 사용하는 <code class=\"language-text\">@RequestBody</code>는 값을 바인딩하는 것이 아니라, 해당 내용을 Java Object로 변환한다. 그렇기 때문에 Body가 존재하지 않은 <code class=\"language-text\">GET</code> 메서드에 <code class=\"language-text\">@RequestBody</code>를 적용하려고 하면 예외가 발생한다.</p>\n<h3 id=\"4가지-default-messageconverters\" style=\"position:relative;\"><a href=\"#4%EA%B0%80%EC%A7%80-default-messageconverters\" aria-label=\"4가지 default messageconverters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4가지 Default MessageConverters</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">ByteArrayHttpMessageConverter</code></p>\n<p><code class=\"language-text\">byte[]</code> 오브젝트 타입을 지원하여 들어오는 요청을 모두 바이트 배열로 받을 수 있다. 또한 리턴 타입이 <code class=\"language-text\">byte[]</code> 일 경우 <code class=\"language-text\">Content-type</code>이 <code class=\"language-text\">applcation/octet-stream</code>으로 설정된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">StringHttpMessageConverter</code></p>\n<p><code class=\"language-text\">String</code> 오브젝트 타입을 지원하여 HTTP 본문을 그대로 <code class=\"language-text\">String</code>으로 가져오고, 그대로 리턴할 경우 <code class=\"language-text\">Content-type</code>은 <code class=\"language-text\">text/plain</code>으로 전달된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">FormHttpMessageConverter</code></p>\n<p>MultiValueMap&#x3C;String, String>을 지원하는데, 지원하는 미디어 타입은 <code class=\"language-text\">application/x-www-form-urlencoded</code>이다. 하지만 form 데이터의 경우 <code class=\"language-text\">@ModelAttribute</code>가 더 유용하다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">SourceHttpMessageConverter</code></p>\n<p>XML 문서를 Source 타입 객체로 변환하고 싶을 때 사용하지만 요즘에는 잘 쓰이지 않는다.</p>\n</li>\n</ol>\n<h3 id=\"자주-쓰이는-messageconverters-3가지\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-messageconverters-3%EA%B0%80%EC%A7%80\" aria-label=\"자주 쓰이는 messageconverters 3가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자주 쓰이는 MessageConverters 3가지</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">Jaxb2RootElementHttpMessageConverter</code></p>\n<p>JAXB의 @XmlRootElement와 @XmlType이 붙은 클래스로 XML과 오브젝트 사이의 변환을 해준다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">MashallingHttpMessageConverter</code></p>\n<p>스프링 OXM 추상화 <code class=\"language-text\">Mashaller</code>와 <code class=\"language-text\">Unmarshaller</code>를 이용해서 <code class=\"language-text\">XML</code>과 오브젝트 사이의 변환을 해준다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">MappingJacksonHttpMessageConverter</code></p>\n<p><code class=\"language-text\">Jackson</code>의 <code class=\"language-text\">ObjectMapper</code>를 사용해서 <code class=\"language-text\">JSON</code>과 오브젝트 사이의 변환을 해주고 지원하는 미디어타입은 <code class=\"language-text\">application/json</code>이다.</p>\n</li>\n</ol>\n<ul>\n<li>참고링크: <a href=\"https://joont92.github.io/spring/MessageConverter/\">https://joont92.github.io/spring/MessageConverter/</a></li>\n</ul>\n<br>\n<h2 id=\"modelattribute\" style=\"position:relative;\"><a href=\"#modelattribute\" aria-label=\"modelattribute permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@ModelAttribute</h2>\n<p>흔히 <code class=\"language-text\">@ModelAttribute</code>를 들어온 요청에 대해서 method parameter를 매핑시키는 용도로만 알고 있는데, 이외에 return value를 지정된 model attribute로 바인딩하고 웹 뷰에 표현하는 작업도 담당한다. <br></p>\n<p>따라서 <code class=\"language-text\">@ModelAttribute</code>는 두 가지 level에서 사용되는데 <strong>1) method parameter</strong>와 <strong>2) method level</strong>이다. <br></p>\n<p>일반적으로 <code class=\"language-text\">@ModelAttribute</code>는 form data에 사용이 되는데, 이때 value 속성의 값을 함께 넘겨준다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/spring-mvc-basics/addEmployee<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">modelAttribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>employee<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>하지만 만일 <code class=\"language-text\">value</code> 속성이 함께 제공되지 않았다면 default로 Method level에 적용되는 <code class=\"language-text\">@ModelAttribute</code>에게는 반환 타입이, Method-argument에는 parameter 타입이  지정된다.</p>\n<h3 id=\"at-method-level\" style=\"position:relative;\"><a href=\"#at-method-level\" aria-label=\"at method level permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>At Method Level</h3>\n<p>Method level에서 <code class=\"language-text\">@ModelAttribute</code>이 추가되어 있다면 해당 메서드는 Model에 하나 또는 여러개의 속성(attribute)을 추가한다는 것을 의미한다. <code class=\"language-text\">@RequestMapping</code> 어노테이션이 붙어있는 메서드와 마찬가지로 같은 argument(Model mode)을 제공하는것은 동일하지만, 들어오는 request에 직접적으로 매핑되지는 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//하나의 model attribute를 추가할 때</span>\n<span class=\"token annotation punctuation\">@ModelAttribute</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAccount</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> accountManager<span class=\"token punctuation\">.</span><span class=\"token function\">findAccount</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//하나 이상의 model attributes를 추가할 때 </span>\n<span class=\"token annotation punctuation\">@ModelAttribute</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Welcome to the Netherlands\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반적으로 Spring MVC는 위 메서드를 request handler를 호출하기 이전에 우선적으로 호출한다.  <br></p>\n<p><strong>!!! <code class=\"language-text\">@ModelAttribute</code> 메서드들이 controller에서 <code class=\"language-text\">@RequestMapping</code>으로 지정된 메서드들 보다 먼저 실행된다는 것이다. (같은 controller에 있는 경우)</strong> <br></p>\n<p>만일 global하게 들어오는 모든 요청에 대해서 특정 model attribute을 추가하고 싶다면, 해당 controller를 <code class=\"language-text\">@ControllerAdvice</code>을 지정하는 것이 좋다. <br></p>\n<p>일반적으로 method level의 <code class=\"language-text\">@ModelAttribute</code>의 목적은 하나 또는 하나 이상의 model attributes를 추가하기 위해서이다. Controller는 여러개의 <code class=\"language-text\">@MethodAttribute</code> 메소드들을 가지고 있을 수 있는데, 그 어떤 요청이 들어오면 같은 controller 안에 있는 그 모든 메소드들이 실행된다. 전역적으로 실행하고 싶다면 <code class=\"language-text\">@ControllerAdvice</code> 어노테이션을 추가하면 된다. <br></p>\n<h3 id=\"at-method-argument\" style=\"position:relative;\"><a href=\"#at-method-argument\" aria-label=\"at method argument permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>At Method Argument</h3>\n<p>만일 method argument 레벨에서 <code class=\"language-text\">@ModelAttribute</code>가 사용된다면 model 에서 인자가 추출되어야 한다는 것을 의미한다.</p>\n<blockquote>\n<p>“An @ModelAttribute on a method argument indicates the argument should be retrieved from the model. If not present in the model, the argument should be instantiated first and then added to the model.”</p>\n</blockquote>\n<p>즉, Method Argument 레벨에서 <code class=\"language-text\">@ModelAttribute</code>를 사용하면, 우선 model에 해당 attribute가 있는지 확인하여 반환하고, 없다면 <strong>1) arguments를 초기화</strong> <strong>2)model에 추가</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"/owners/{ownerId}/pets/{petId}/edit\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">processSubmit</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span> <span class=\"token class-name\">Pet</span> pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 Method Argument에서 <code class=\"language-text\">@ModelAttribute</code>가 사용되었을 경우 인자인 Pet instance의 출처는 다음 4가지 중 하나일 수 있다.</p>\n<ol>\n<li><code class=\"language-text\">@SessionAttributes</code> 에 의해 이미 존재하는 model attribute</li>\n<li><code class=\"language-text\">@ModelAttribute</code> 메소드에 의해 이미 존재하는 model attribute</li>\n<li>URI template와 type converter에 의해 추출된 instance</li>\n<li>default constructor에 의해 초기화된 instance</li>\n</ol>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/remoting.html#rest-message-conversion\">https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/remoting.html#rest-message-conversion</a></li>\n<li><a href=\"https://mangkyu.tistory.com/72\">https://mangkyu.tistory.com/72</a></li>\n<li><a href=\"https://stackoverflow.com/questions/29517613/how-exactly-works-requestbody-annotation-and-how-it-is-related-to-the-httpmessa\">https://stackoverflow.com/questions/29517613/how-exactly-works-requestbody-annotation-and-how-it-is-related-to-the-httpmessa</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17362177/how-does-the-modelattribute-annotation-work-why-cant-i-got-the-value\">https://stackoverflow.com/questions/17362177/how-does-the-modelattribute-annotation-work-why-cant-i-got-the-value</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-methods\">https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-methods</a></li>\n</ul>\n<br>\n<br>\n<p><strong>[MORE]</strong></p>\n<ul>\n<li>\n<p>HttpMessageConverters 내부동작원리</p>\n<p><a href=\"https://www.baeldung.com/spring-httpmessageconverter-rest\">https://www.baeldung.com/spring-httpmessageconverter-rest</a></p>\n</li>\n<li>\n<p>언제 무엇? 장단점</p>\n</li>\n<li>\n<p>URI template와 type converter에 의해 추출된 instance 동작원리</p>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#requestbody\">@RequestBody</a></p>\n<ul>\n<li><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">동작원리</a></li>\n<li><a href=\"#httpmessageconverter-%EB%A1%9C%EC%A7%81\">HttpMessageConverter 로직</a></li>\n<li><a href=\"#4%EA%B0%80%EC%A7%80-default-messageconverters\">4가지 Default MessageConverters</a></li>\n<li><a href=\"#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-messageconverters-3%EA%B0%80%EC%A7%80\">자주 쓰이는 MessageConverters 3가지</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#modelattribute\">@ModelAttribute</a></p>\n<ul>\n<li><a href=\"#at-method-level\">At Method Level</a></li>\n<li><a href=\"#at-method-argument\">At Method Argument</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 19, 2021","title":"@ModelAttribute vs. @RequestBody 더 깊이 파헤치기","categories":"스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/request-body-model-attribute-advanced/"}},"prev":{"id":"89cc4854-91bf-5d0c-abe5-c82fe6e01006","html":"<h2 id=\"들어가기-전에\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90\" aria-label=\"들어가기 전에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 전에</h2>\n<p>암호화(Encryption)과 해싱은 다른 개념</p>\n<ul>\n<li>암호화 - 양방향이므로 복호화가 가능</li>\n<li>해싱 - 단방향이므로 복호화가 불가능</li>\n</ul>\n<br>\n<h2 id=\"단방향-해시-함수-one-way-hash-function\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-one-way-hash-function\" aria-label=\"단방향 해시 함수 one way hash function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 해시 함수 (One-Way Hash Function)</h2>\n<p>기본적으로 패스워드 등의 보안의 문제가 걸린 정보를 DB에 저장할 때 평문으로 저장하지 않고 해싱한 값을 저장한다. (평문으로 저장할 경우 DB가 해킹되었을 때 심각한 문제가 발생한다) <br></p>\n<p>단방향 해시 함수를 사용해서 원본 내용을 완전히 새로운 내용으로 <strong>다이제스트</strong>(<strong>digest</strong>)로 매핑한다. 이때 매핑하는 것을 <strong>해시</strong>라고 한다. 이것은 단방향이므로 복호화할 수 없다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135313771-acb38bc5-e482-41a0-a0b8-2a7415bd2903.png\"></p>\n<ul>\n<li>해시 함수 종류\n<ol>\n<li>SHA</li>\n<li>MD</li>\n<li>HAS</li>\n<li>WHIRLPOOL</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"한계점\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EA%B3%84%EC%A0%90\" aria-label=\"한계점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한계점</h3>\n<ul>\n<li>\n<p>Rainbow Table</p>\n<p>동일한 데이터를 동일한 해시 함수로 연산한 <strong>다이제스트</strong>는 동일한 값을 가진다. 따라서 여러 값들에 대한 다이제스트를 모아놓은 <strong>Rainbow Table</strong>이라는 것이 존재하고 이것을 통해서 원본 데이터를 유추할 수 있다.</p>\n</li>\n<li>\n<p>Brute-force</p>\n<p>해싱 자체가 빠른 검색을 하기 때문에 반대로 다이제스트를 얻는 과정도 빠르게 실행된다. 무작위 데이터를 대입하여 다이제스트를 비교(해싱이므로 더 빠르게 수행됨)하여 원본 데이터를 유추할 수 있다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"단방향-해시-함수-보완\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EB%B3%B4%EC%99%84\" aria-label=\"단방향 해시 함수 보완 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 해시 함수 보완</h2>\n<h3 id=\"key-stretching\" style=\"position:relative;\"><a href=\"#key-stretching\" aria-label=\"key stretching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Stretching</h3>\n<p>n번의 해시를 통해서 다이제스트의 다이제스트를 얻어내어 해커 입장에서 원문 데이터를 얻는데 시간을 더 오래 소요하게 한다. (Brute-force 무력화) <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135314064-923f6f7a-d9bf-4987-9996-05c371b77aa9.png\"></p>\n<h3 id=\"salt\" style=\"position:relative;\"><a href=\"#salt\" aria-label=\"salt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Salt</h3>\n<p>원본 데이터에 임의의 문자열을 덧붙여서 해싱을 해서 다이제스트를 얻어내는 방법이다. 따라서 다이제스트의 원문을 알아낸다고 하더라도 사용자가 입력한 원본 password를 알아내는 것은 어려워진다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135314140-e59783ad-2587-4ba2-98d0-32763bb66f49.png\"></p>\n<p>위 두가지 방법을 모두 사용하여 다이제스트에 대한 보안성을 더 높인다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135314236-2f313ce8-33aa-4c3a-9c39-2ec9fb18ea45.png\"></p>\n<br>\n<h2 id=\"간단하게-구현해보기\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"간단하게 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단하게 구현해보기</h2>\n<ol>\n<li>\n<p>SALT 크기를 지정</p>\n<p>너무 짧으면 안전하지 않다. <br></p>\n<p>랜덤 함수를 하용해 SALT를 생성하는 것이 좋으나, <code class=\"language-text\">java.util.Random</code> 은 암호학적으로 안전하지 않아서<code class=\"language-text\">java.security.SecureRandom</code>을 사용한다.</p>\n</li>\n<li>\n<p>해시 함수를 쓰기 위해서 <code class=\"language-text\">java.security.MessageDigest</code> 외부 라이브러리를 Import 한다. (이외의 다른 라이브러리도 존재한다)</p>\n</li>\n<li>\n<p>랜덤 함수를 통해서 SALT를 얻어 사용자 입력 password에 덧붙인다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">MessageDigest</code> 라이브러리의 <code class=\"language-text\">update()</code>를 통해서 문자열을 해싱하여 해당 라이브러리에 저장한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">MessageDigest</code> 라이브러리의 <code class=\"language-text\">digest()</code> 를 통해서 다이제스트를 얻는다.</p>\n</li>\n</ol>\n<br>\n<br>\n<p><strong>[참고링크]</strong></p>\n<ul>\n<li><a href=\"https://st-lab.tistory.com/100\">https://st-lab.tistory.com/100</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90\">들어가기 전에</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-one-way-hash-function\">단방향 해시 함수 (One-Way Hash Function)</a></p>\n<ul>\n<li><a href=\"#%ED%95%9C%EA%B3%84%EC%A0%90\">한계점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EB%B3%B4%EC%99%84\">단방향 해시 함수 보완</a></p>\n<ul>\n<li><a href=\"#key-stretching\">Key Stretching</a></li>\n<li><a href=\"#salt\">Salt</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">간단하게 구현해보기</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 21, 2021","title":"Hash와 Salt","categories":"웹 자바","author":"코다","emoji":"🖥"},"fields":{"slug":"/hash-salt/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/springboot-controller-advice/","nextSlug":"/request-body-model-attribute-advanced/","prevSlug":"/hash-salt/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}