{"componentChunkName":"component---src-templates-blog-template-js","path":"/springboot-controller-advice/","result":{"data":{"cur":{"id":"aa4dffec-9907-5cba-91ed-6988835a5453","html":"<ul>\n<li><code class=\"language-text\">@ControllerAdvice</code>를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면 <code class=\"language-text\">@RequestMapping</code> 메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller classes)</li>\n<li>주로 <code class=\"language-text\">@ControllerAdvice</code>에서 전역적으로 처리하고 싶은 어노테이션은 <code class=\"language-text\">@ExceptionHandler</code>, <code class=\"language-text\">@InitBinder</code>, <code class=\"language-text\">@ModelAttribute</code> 등이 있다.</li>\n<li><code class=\"language-text\">ResponseEntityExceptionHandler</code> 클래스가 <code class=\"language-text\">@ControllerAdvice</code> 어노테이션에서 전역적인 exception handling 을 구현할 수 있도록 하는 base class이다. 해당 클래스에서 Spring MVC 내부에서 발생한 예외들을 처리할 수 있는 메서드들을 제공한다. (<code class=\"language-text\">DefaultHandlerExceptionResolver</code>는 <code class=\"language-text\">ModelAndView</code>를 반환하는 반면 <code class=\"language-text\">ResponseEntityExceptionHandler</code>는 <code class=\"language-text\">ResponseEntity</code>를 반환한다)</li>\n</ul>\n<h2 id=\"여러-controlleradvice-간의-우선순위\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"여러 controlleradvice 간의 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 @ControllerAdvice 간의 우선순위</h2>\n<p>@ControllerAdvice 클래스들은 Bean으로 등록이 되도록 하는데, 해당 빈들은 <code class=\"language-text\">Ordered</code> 인터페이스를 구현하여 orderable 한 속성을 부여하거나, <code class=\"language-text\">@Order</code>/ <code class=\"language-text\">@Priority</code>를 사용해서 우선순위를 부여할 수 있다. (여기서 <code class=\"language-text\">Ordered</code> semantic이 <code class=\"language-text\">@Order</code>/ <code class=\"language-text\">@Priority</code> 에 우선순위를 가진다) </p>\n<ul>\n<li>\n<p>예외를 처리하는 경우</p>\n<p>매칭이 되는 exception handler method가 있는 가장 처음 매칭되는 advice의 <code class=\"language-text\">@ExceptionHandler</code>가 실행된다. </p>\n</li>\n<li>\n<p>model attribute와 data binding 초기화 경우</p>\n<p><code class=\"language-text\">@ModelAttribute</code>와 <code class=\"language-text\">@InitBinder</code> 메소드가 <code class=\"language-text\">ControllerAdvice</code>의 우선순위 순서에 따라서 실행된다.  </p>\n</li>\n<li>\n<p><code class=\"language-text\">@ControlerAdvice</code>의 우선순위에 따른 ExceptionHandler 선언 팁</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/135494123-1441631a-7277-4b6f-b82e-30610bcf4b5e.png\"></p>\n</li>\n</ul>\n<p>기본적으로 <code class=\"language-text\">@ControllerAdvice</code>는 모든 controller에 전역적으로 적용이 되기 때문에, 더 구체적인 controller에 적용하기 위해서는 selectors를 사용해야한다. (<code class=\"language-text\">annotations()</code> , <code class=\"language-text\">basePackageClasses()</code> , <code class=\"language-text\">basePackages()</code>)만일 여러 selectors가 있으면 OR 로 적용이되면 이 selectors 체크는 runtime에 실행이 되므로, 만일 너무 많은 selectors를 사용하면 런타임 퍼포먼스 효율이 떨어지게 된다.  </p>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://zetcode.com/springboot/controlleradvice/\">https://zetcode.com/springboot/controlleradvice/</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html\">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">여러 @ControllerAdvice 간의 우선순위</a></li>\n</ul>\n</div>","excerpt":"를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면  메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller classes) 주로 에서 전역적으로 처리하고 싶은 어노테이션은 , ,  등이 있다.  클래스가  어노테이션에서 전역적인 exception handling 을 구현할 수 있도록 하는 base class이다. 해당 클래스에서 Spring MVC 내부에서 발생한 예외들을 처리할 수 있는 메서드들을 제공한다. (는 를 반환하는 반면 는 를 반환한다) 여러 @ControllerAdvice 간의 우선순위 @ControllerAdvice 클래스들은 Bean으로 등록이 되도록 하는데, 해당 빈들은  인터페이스를 구현하여 orderable 한 속성을 부여하거나, / 를 사용해서 우선순위를 부여할 수 있다. (여기서  semantic이 /  에 우선순위를 가진다…","frontmatter":{"date":"June 19, 2021","title":"@ControllerAdvice 알아보기","categories":"스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/springboot-controller-advice/"}},"next":{"id":"debf7ec4-ca5a-5118-ab72-01b5b73f51e7","html":"<h2 id=\"spring-boot\" style=\"position:relative;\"><a href=\"#spring-boot\" aria-label=\"spring boot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot</h2>\n<p>Spring boot 자체에서 핸들링 되지 않은 error 에 대한 대비책을 마련해 두었다. </p>\n<ul>\n<li>먼저, Spring boot 자체에서 <code class=\"language-text\">/error</code> 에 대한 매핑을 찾아서 해당 URL에 대해서 동일한 이름을 가진 <code class=\"language-text\">error</code> 뷰를 매핑 한다. 해당 뷰는 <code class=\"language-text\">error.html</code> 을 반환한다. (해당 뷰는  Thymeleaf template인데, 만일 JSP를 사용한다면 <code class=\"language-text\">error.jsp</code>를 반환하도록 <code class=\"language-text\">InternalResourceViewResolver</code>에서 변경할 수 있다) 실질적인 매핑은 ViewResolver에서 담당한다.</li>\n<li>\n<p>만일 <code class=\"language-text\">/error</code>에 대해 그 어떠한 view-resolver도 매핑이 되어 있지 않다면 spring boot는 내부적으로 가지고 있는 대체 에러 페이지인 “Whitelabel Error Page”를 가지고 있다.</p>\n<p>이때 만일 RESTful request에 대한 응답이라면 Spring boot는 자체적인 JSON 형태로 “Whitelabel Error Page”의 응답을 받은 error 정보를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"timestamp\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2018-04-11T05:56:03.845+0000\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No message available\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/no-such-page\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Spring boot는 컨테이너에 대한 디폴트 error-page 또한 구축해놓았다. 만일 예외가 Spring MVC 밖에서 발생했더라도(ex. servlet Filter) 여전히 Spring Boot에 대비되어 있는 error page에 리포트 되어 반환된다.</li>\n</ul>\n<br>\n<h2 id=\"exception-handling-동작원리\" style=\"position:relative;\"><a href=\"#exception-handling-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"exception handling 동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception Handling 동작원리</h2>\n<br>\n<h3 id=\"handlerexceptionresolverinterface\" style=\"position:relative;\"><a href=\"#handlerexceptionresolverinterface\" aria-label=\"handlerexceptionresolverinterface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HandlerExceptionResolver(interface)</h3>\n<p><code class=\"language-text\">DispatcherServlet</code>의 application context에 선언되어 있는 Spring bean의 예외들은(Spring MVC system 내에서 발생한 경우들) <code class=\"language-text\">HandlerExceptionResolver</code>을 구현하여 intercept를 통해 핸들링 된다. 즉, Controller에서 에외를 핸들링하지 않는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HandlerExceptionResolver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">resolveException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">handler</code> 는 해당 예외가 발생한 controller를 말한다. </p>\n<p>MVC는 기본적은 3가지 resolvers를 생성한다. </p>\n<ol>\n<li>\n<p><code class=\"language-text\">ExceptionHandlerExceptionResolver</code> </p>\n<p>예외들을 적합한 <code class=\"language-text\">@ExceptionHander</code> 어노테이션이 붙은 메소드에 매칭한다. handler(controller)와 controller-advice 두가지 모두 고려한다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">ResponseStatusExceptionResolver</code></p>\n<p>처리되지 않은 예외들 중 <code class=\"language-text\">@ResponseStatus</code>가 붙은 것들을 확인한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">DefaultHandlerExceptionResolver</code> </p>\n<p>기본 Spring Exceptions를 Http Status Codes로 변경하는 작업을 한다.(MVC 내부적인 부분) </p>\n</li>\n</ol>\n<p>위 3가지 resolvers들은 체이닝 되어 위 순서대로 처리되는데 Spring이 내부적으로 해당 일을 처리하는 <code class=\"language-text\">HandlerExceptionResolverComposite</code> 빈을 생성하여 처리하도록 한다. </p>\n<br>\n<h3 id=\"simplemappingexceptionresolver\" style=\"position:relative;\"><a href=\"#simplemappingexceptionresolver\" aria-label=\"simplemappingexceptionresolver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SimpleMappingExceptionResolver</h3>\n<p>Spring은 자체적으로 위 <code class=\"language-text\">HandlerExceptionResolver</code> 구현체인 <code class=\"language-text\">SimpleMappingExceptionResolver</code>를 제공하고 대부분의 어플리케이션에서 사용되고 있다. 해당 리졸버에서는 다음과 같은 것들을 결정하여 처리할 수 있다. </p>\n<ul>\n<li>Exception 클래스를 뷰에 매핑</li>\n<li>아무 곳에서도 처리되지 않은 예외에 대한 기본(default) error page를 설정</li>\n<li>Model에 추가되는 <code class=\"language-text\">exception</code> 속성의 이름을 설정한다.(View에서 추후 사용할 수 있도록) 기본값은 “exception” 이다. <code class=\"language-text\">@ExceptionHandler</code>에서 반환되는 뷰는 exception 자체에 대한 접근 권한이 없지만 <code class=\"language-text\">SimpleMappingExceptionResolver</code>에 정의되어 있는 뷰는 접근 권한이 있으므로 여기서 설정하도록 되어있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebMvc</span>  <span class=\"token comment\">// Optionally setup Spring MVC defaults (if you aren't using</span>\n               <span class=\"token comment\">// Spring Boot &amp; haven't specified @EnableWebMvc elsewhere)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfiguration</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"simpleMappingExceptionResolver\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span>\n                  <span class=\"token function\">createSimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SimpleMappingExceptionResolver</span> r <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Properties</span> mappings <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mappings<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DatabaseException\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"databaseError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mappings<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvalidCreditCardException\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"creditCardError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionMappings</span><span class=\"token punctuation\">(</span>mappings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// None by default</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultErrorView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// No default</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Default is \"exception\"</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setWarnLogCategory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example.MvcLogger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// No default</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 <code class=\"language-text\">defaultErrorView</code> 속성으로 처리되지 않은 예외들에 대한 적합한 error 페이지를 설정할 수 있으므로 유용하다. 현재 대부분의 어플리케이션에 기본값은 java stack-trace를 노출하는 것인데 유저들은 stack-trace에 관심이 없다. 따라서 Spring boot는 해당 부분을 “white-label” 에러 페이지로 처리한다. </p>\n<br>\n<h3 id=\"extending-simplemappingexceptionresolver\" style=\"position:relative;\"><a href=\"#extending-simplemappingexceptionresolver\" aria-label=\"extending simplemappingexceptionresolver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending SimpleMappingExceptionResolver</h3>\n<p>다음과 같은 이유로 <code class=\"language-text\">SimpleMappingExceptionResolver</code>를 확장하여 사용한다.</p>\n<ul>\n<li>\n<p>Constructor를 사용하여 속성들 직접 지정하는 경우</p>\n<p>예를 들어서 exception 관련 로깅 및 로거를 설정</p>\n</li>\n<li>\n<p>default log message를 오버라이딩하여 변경하는 경우 (<code class=\"language-text\">buildLogMessage</code>를 변경)</p>\n<p>현재 기본 메세지는 <em>Handler execution resulted in exception</em> 이다. </p>\n</li>\n<li>\n<p>에러 view에 추가 정보를 설정하고 싶은 경우</p>\n<p><code class=\"language-text\">doResolverException</code>을 오버라이딩 하여 설정 </p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMappingExceptionResolver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable logging by providing the name of the logger to use</span>\n    <span class=\"token function\">setWarnLogCategory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMappingExceptionResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">buildLogMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"MVC exception: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalizedMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n    \n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">doResolveException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Call super method to get the ModelAndView</span>\n    <span class=\"token class-name\">ModelAndView</span> mav <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">doResolveException</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token comment\">// Make the full URL available to the view - note ModelAndView uses</span>\n    <span class=\"token comment\">// addObject() but Model uses addAttribute(). They work the same. </span>\n    mav<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mav<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest\">https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#spring-boot\">Spring Boot</a></li>\n<li>\n<p><a href=\"#exception-handling-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">Exception Handling 동작원리</a></p>\n<ul>\n<li><a href=\"#handlerexceptionresolverinterface\">HandlerExceptionResolver(interface)</a></li>\n<li><a href=\"#simplemappingexceptionresolver\">SimpleMappingExceptionResolver</a></li>\n<li><a href=\"#extending-simplemappingexceptionresolver\">Extending SimpleMappingExceptionResolver</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 19, 2021","title":"스프링부트의 Exception handling","categories":"스프링부트 스프링 웹","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-exception-handling/"}},"prev":{"id":"89cc4854-91bf-5d0c-abe5-c82fe6e01006","html":"<h2 id=\"들어가기-전에\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90\" aria-label=\"들어가기 전에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 전에</h2>\n<p>암호화(Encryption)과 해싱은 다른 개념</p>\n<ul>\n<li>암호화 - 양방향이므로 복호화가 가능</li>\n<li>해싱 - 단방향이므로 복호화가 불가능</li>\n</ul>\n<br>\n<h2 id=\"단방향-해시-함수-one-way-hash-function\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-one-way-hash-function\" aria-label=\"단방향 해시 함수 one way hash function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 해시 함수 (One-Way Hash Function)</h2>\n<p>기본적으로 패스워드 등의 보안의 문제가 걸린 정보를 DB에 저장할 때 평문으로 저장하지 않고 해싱한 값을 저장한다. (평문으로 저장할 경우 DB가 해킹되었을 때 심각한 문제가 발생한다) <br></p>\n<p>단방향 해시 함수를 사용해서 원본 내용을 완전히 새로운 내용으로 <strong>다이제스트</strong>(<strong>digest</strong>)로 매핑한다. 이때 매핑하는 것을 <strong>해시</strong>라고 한다. 이것은 단방향이므로 복호화할 수 없다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135313771-acb38bc5-e482-41a0-a0b8-2a7415bd2903.png\"></p>\n<ul>\n<li>\n<p>해시 함수 종류</p>\n<ol>\n<li>SHA</li>\n<li>MD</li>\n<li>HAS</li>\n<li>WHIRLPOOL</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"한계점\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EA%B3%84%EC%A0%90\" aria-label=\"한계점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한계점</h3>\n<ul>\n<li>\n<p>Rainbow Table</p>\n<p>동일한 데이터를 동일한 해시 함수로 연산한 <strong>다이제스트</strong>는 동일한 값을 가진다. 따라서 여러 값들에 대한 다이제스트를 모아놓은 <strong>Rainbow Table</strong>이라는 것이 존재하고 이것을 통해서 원본 데이터를 유추할 수 있다. </p>\n</li>\n<li>\n<p>Brute-force</p>\n<p>해싱 자체가 빠른 검색을 하기 때문에 반대로 다이제스트를 얻는 과정도 빠르게 실행된다. 무작위 데이터를 대입하여 다이제스트를 비교(해싱이므로 더 빠르게 수행됨)하여 원본 데이터를 유추할 수 있다. </p>\n</li>\n</ul>\n<br>\n<h2 id=\"단방향-해시-함수-보완\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EB%B3%B4%EC%99%84\" aria-label=\"단방향 해시 함수 보완 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 해시 함수 보완</h2>\n<h3 id=\"key-stretching\" style=\"position:relative;\"><a href=\"#key-stretching\" aria-label=\"key stretching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Stretching</h3>\n<p>n번의 해시를 통해서 다이제스트의 다이제스트를 얻어내어 해커 입장에서 원문 데이터를 얻는데 시간을 더 오래 소요하게 한다. (Brute-force 무력화) <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135314064-923f6f7a-d9bf-4987-9996-05c371b77aa9.png\"></p>\n<h3 id=\"salt\" style=\"position:relative;\"><a href=\"#salt\" aria-label=\"salt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Salt</h3>\n<p>원본 데이터에 임의의 문자열을 덧붙여서 해싱을 해서 다이제스트를 얻어내는 방법이다. 따라서 다이제스트의 원문을 알아낸다고 하더라도 사용자가 입력한 원본 password를 알아내는 것은 어려워진다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135314140-e59783ad-2587-4ba2-98d0-32763bb66f49.png\"></p>\n<p>위 두가지 방법을 모두 사용하여 다이제스트에 대한 보안성을 더 높인다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/135314236-2f313ce8-33aa-4c3a-9c39-2ec9fb18ea45.png\"></p>\n<br>\n<h2 id=\"간단하게-구현해보기\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"간단하게 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단하게 구현해보기</h2>\n<ol>\n<li>\n<p>SALT 크기를 지정</p>\n<p>너무 짧으면 안전하지 않다. <br></p>\n<p>랜덤 함수를 하용해 SALT를 생성하는 것이 좋으나, <code class=\"language-text\">java.util.Random</code> 은 암호학적으로 안전하지 않아서<code class=\"language-text\">java.security.SecureRandom</code>을 사용한다.</p>\n</li>\n<li>해시 함수를 쓰기 위해서 <code class=\"language-text\">java.security.MessageDigest</code> 외부 라이브러리를 Import 한다. (이외의 다른 라이브러리도 존재한다)</li>\n<li>랜덤 함수를 통해서 SALT를 얻어 사용자 입력 password에 덧붙인다.</li>\n<li><code class=\"language-text\">MessageDigest</code> 라이브러리의 <code class=\"language-text\">update()</code>를 통해서 문자열을 해싱하여 해당 라이브러리에 저장한다. </li>\n<li><code class=\"language-text\">MessageDigest</code> 라이브러리의 <code class=\"language-text\">digest()</code> 를 통해서 다이제스트를 얻는다. </li>\n</ol>\n<br>\n<br>\n<p><strong>[참고링크]</strong></p>\n<ul>\n<li><a href=\"https://st-lab.tistory.com/100\">https://st-lab.tistory.com/100</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90\">들어가기 전에</a></li>\n<li>\n<p><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-one-way-hash-function\">단방향 해시 함수 (One-Way Hash Function)</a></p>\n<ul>\n<li><a href=\"#%ED%95%9C%EA%B3%84%EC%A0%90\">한계점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EB%B3%B4%EC%99%84\">단방향 해시 함수 보완</a></p>\n<ul>\n<li><a href=\"#key-stretching\">Key Stretching</a></li>\n<li><a href=\"#salt\">Salt</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">간단하게 구현해보기</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 21, 2021","title":"Hash와 Salt","categories":"웹 자바","author":"코다","emoji":"🖥"},"fields":{"slug":"/hash-salt/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/springboot-controller-advice/","nextSlug":"/spring-exception-handling/","prevSlug":"/hash-salt/"}},"staticQueryHashes":["1073350324","2938748437"]}