{"componentChunkName":"component---src-templates-blog-template-js","path":"/dip/","result":{"data":{"cur":{"id":"21e10a37-af41-506b-8eda-5a0ffa60b567","html":"<p>스프링 강의 중 DAO vs. Repository의 차이점에 대해서 논의하다가 다음과 같은 표현이 나왔다. </p>\n<ul>\n<li>Repository의 추상 인터페이스는 Domain Layer에 속하며 Domain 객체들을 관리하고 생애주기를 같이한다. 그 구현체인 SimpleJpaRepository는 Infrastructure에 속한다. 추상화된 repository 인터페이스를 사용하면서 추상에 의존하고 구체에 의존하지 않도록 구성(DIP) 하여 유연성 있는 시스템을 구성한다.</li>\n</ul>\n<p>여기서 나오는 DIP는 무엇이고 위와 같은 구성이 어떻게 우연성을 제공하는 걸까? </p>\n<h3 id=\"dip-요약\" style=\"position:relative;\"><a href=\"#dip-%EC%9A%94%EC%95%BD\" aria-label=\"dip 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DIP 요약</h3>\n<ul>\n<li><strong>Dependency Inversion Principle</strong>의 약자이다.</li>\n</ul>\n<p>본래 객체는 상위 계층이 하위 계층에 의존한다. DIP는 그 관계를 역전시켜서 상위 계층이 하위 계층의 구현에서 독립하도록 한다. 그러기 위한 원칙 두가지는 다음과 같다. </p>\n<ol>\n<li>상위 모듈과 하위 모듈이 서로 의존하는 것이 아니라 모두 추상화에 의존한다. </li>\n<li>추상화가 구현에 의존하는 것이 아니라 구현이 추상화에 의존해야 한다. </li>\n</ol>\n<p>한마디로 요약하면 다음이다. <br></p>\n<p><strong>“The DIP is about inverting the classic dependency between high-level and low-level components by abstracting away the interacting between them.”</strong></p>\n<p>출처 : <a href=\"https://www.baeldung.com/java-dependency-inversion-principle\">https://www.baeldung.com/java-dependency-inversion-principle</a> <br></p>\n<p>즉 상위 모듈과 하위 모듈 사이에 추상화를 껴서 서로를 의존하는 것이 아니라 인터페이스를 통해서 협력하도록 하는 것이다. </p>\n<h3 id=\"dip-구현\" style=\"position:relative;\"><a href=\"#dip-%EA%B5%AC%ED%98%84\" aria-label=\"dip 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DIP 구현</h3>\n<p>다음과 같은 구현이 있을 때 어떤 것이 DIP 일까?</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">public</span> class StringProcessor {\n    \n    private final StringReader stringReader<span class=\"token punctuation\">;</span>\n    private final StringWriter stringWriter<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> StringProcessor<span class=\"token punctuation\">(</span>StringReader stringReader<span class=\"token punctuation\">,</span> StringWriter stringWriter<span class=\"token punctuation\">)</span> {\n        this<span class=\"token punctuation\">.</span>stringReader <span class=\"token operator\">=</span> stringReader<span class=\"token punctuation\">;</span>\n        this<span class=\"token punctuation\">.</span>stringWriter <span class=\"token operator\">=</span> stringWriter<span class=\"token punctuation\">;</span>\n    }\n\n    <span class=\"token keyword\">public</span> void printString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> {\n        stringWriter<span class=\"token punctuation\">.</span><span class=\"token keyword\">write</span><span class=\"token punctuation\">(</span>stringReader<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    }\n}</code></pre></div>\n<ol>\n<li><code class=\"language-text\">StringReader</code>, <code class=\"language-text\">StringWriter</code> 가 인터페이스이고 <code class=\"language-text\">StringProcessor</code>와 같은 패키지에 존재한다. (구현체는 함께 있지 않다)</li>\n<li><code class=\"language-text\">StringReader</code>, <code class=\"language-text\">StringWriter</code>가 인터페이스이면서 <code class=\"language-text\">StringProcessor</code>와 다른 패키지에 존재한다. </li>\n</ol>\n<p>즉 구현체와 따로 분리되어 있어서 StringProcessor는 인터페이스에 의존하고 인터페이스는 언제나 변경이 가능하여 구현체에 존재하지 않도록 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#dip-%EC%9A%94%EC%95%BD\">DIP 요약</a></li>\n<li><a href=\"#dip-%EA%B5%AC%ED%98%84\">DIP 구현</a></li>\n</ul>\n</div>","excerpt":"스프링 강의 중 DAO vs. Repository의 차이점에 대해서 논의하다가 다음과 같은 표현이 나왔다.  Repository의 추상 인터페이스는 Domain Layer에 속하며 Domain 객체들을 관리하고 생애주기를 같이한다. 그 구현체인 SimpleJpaRepository는 Infrastructure에 속한다. 추상화된 repository 인터페이스를 사용하면서 추상에 의존하고 구체에 의존하지 않도록 구성(DIP) 하여 유연성 있는 시스템을 구성한다. 여기서 나오는 DIP는 무엇이고 위와 같은 구성이 어떻게 우연성을 제공하는 걸까?  DIP 요약 Dependency Inversion Principle의 약자이다. 본래 객체는 상위 계층이 하위 계층에 의존한다. DIP는 그 관계를 역전시켜서 상위 계층이 하위 계층의 구현에서 독립하도록 한다. 그러기 위한 원칙 두가지는 다음과 같다.  상위 모듈과 하위 모듈이 서로 의존하는 것이 아니라 모두 추상화에 의존한다.  추상화가 구현…","frontmatter":{"date":"March 13, 2021","title":"DIP 의존관계 역전의 원칙","categories":"스프링 웹","author":"코다","emoji":"🍀"},"fields":{"slug":"/dip/"}},"next":{"id":"88e09de5-4062-57a5-9ae6-1b90ae07ab3a","html":"<h2 id=\"transaction-이란\" style=\"position:relative;\"><a href=\"#transaction-%EC%9D%B4%EB%9E%80\" aria-label=\"transaction 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transaction 이란?</h2>\n<ul>\n<li>개인이 설정할 수 있는 작업의 최소 단위이다.</li>\n<li>Transaction을 기준으로 <code class=\"language-text\">commit</code>을 할 수도, <code class=\"language-text\">rollback</code>을 할 수도 있다.</li>\n<li>\n<p>Transaction을 사용할 때 DBMS에서 ACID를 제공받을 수 있다.</p>\n<ul>\n<li><strong>Atomic(원자성)</strong> : 한꺼번에 모두 처리가 되거나, 한꺼번에 모두 처리가 되지 않도록 원자성을 부여한다. 데이터 관련 일부만 처리되었을 때 생길 복잡한 상황과 부작용을 막을 수 있다.</li>\n<li><strong>Consistency(일치성)</strong> : 하나의 데이터가 처리되었을 때 관련된 다른 테이블 혹은 상황에서 일관된 논리가 수행 되도록 하는 것을 보장한다 (ex. A 에서 1000원이 차감되면 B에서 1000원이 증감되어야 하는 상황 등등.)</li>\n<li><strong>Isolation(독립성)</strong> : 데이터가 처리되는 도중 다른 일이 중간에 일어나지 않도록 해당 데이터를 보호하도록 보장. 중간에 다른 일이 끼어들어 부작용이 생기는 것을 방지한다.</li>\n<li><strong>Durability(영구보존성)</strong> : 데이터를 DB에 저장하여 보존하도록 한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jdbc에서-transaction-설정-및-응용하기\" style=\"position:relative;\"><a href=\"#jdbc%EC%97%90%EC%84%9C-transaction-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%9D%91%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"jdbc에서 transaction 설정 및 응용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JDBC에서 Transaction 설정 및 응용하기</h2>\n<ul>\n<li>\n<p>JDBC에서 <code class=\"language-text\">Connection</code>을 생성할 때 해당 <code class=\"language-text\">Connection</code>은 default로 <code class=\"language-text\">setAutoCommit(true)</code> 로 설정이 되어 있다.</p>\n<ul>\n<li>이 말은 각 SQL statements가 모두 기본 transaction으로 래핑되어 있다는 뜻이다.</li>\n</ul>\n</li>\n<li>\n<p>개인적으로 작업 단위를 설정해서 ACID를 보장받으며 처리하고 싶을 경우 다음과 같이 설정해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Connection con <span class=\"token operator\">=</span> DriverManager<span class=\"token punctuation\">.</span>getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncon<span class=\"token punctuation\">.</span>setAutoCommit<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">//sql 실행</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>결과 정상 처리<span class=\"token punctuation\">)</span> {\n con<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n} <span class=\"token keyword\">else</span> {\n\tcon<span class=\"token punctuation\">.</span><span class=\"token keyword\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n}</code></pre></div>\n</li>\n</ul>\n<h2 id=\"jdbc-savepoint-설정하기\" style=\"position:relative;\"><a href=\"#jdbc-savepoint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"jdbc savepoint 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JDBC Savepoint 설정하기</h2>\n<ul>\n<li>\n<p>Transaction을 통해서 commit 과 rollback 작업단위를 설정할 수 있지만, 하나의 작업 단위 내에서도 rollback 하고 싶은 지점을 직접 설정할 수도 있다.</p>\n<ul>\n<li>이때는 <code class=\"language-text\">setAutoCommit(false)</code>로 설정해야지 아니면 자동으로 각 sql 문이 하나의 transaction으로 묶인다.</li>\n</ul>\n</li>\n<li>\n<p>Savepoint를 설정해서 원하는 작업 포인트로 rollback 할 수 있다.</p>\n<ul>\n<li>setSavepoint(String savepointName) : 새로운 savePoint를 설정하고 해당 객체를 리턴</li>\n<li>releaseSavepoint(Savepoint savepoint) : 해당 savepoint 지점을 해제한다.</li>\n</ul>\n</li>\n<li>\n<p>사용 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">try {\n\tcon<span class=\"token punctuation\">.</span>setAutoCommit<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tStatement stmt <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span>createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">SavePoint</span> savePoint1 <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span>setSavepoint<span class=\"token punctuation\">(</span><span class=\"token string\">\"savepoint1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//sql 쿼리 실행</span>\n\tcon<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n} catch <span class=\"token punctuation\">(</span>SQLException<span class=\"token punctuation\">)</span> {\n\tcon<span class=\"token punctuation\">.</span><span class=\"token keyword\">rollback</span><span class=\"token punctuation\">(</span>savepoint1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n}</code></pre></div>\n</li>\n</ul>\n<p><strong>[참고자료]</strong> : <a href=\"http://yimoyimo.tk/transaction_DI/\">http://yimoyimo.tk/transaction_DI/</a>, <a href=\"https://hamait.tistory.com/345\">https://hamait.tistory.com/345</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#transaction-%EC%9D%B4%EB%9E%80\">Transaction 이란?</a></li>\n<li><a href=\"#jdbc%EC%97%90%EC%84%9C-transaction-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%9D%91%EC%9A%A9%ED%95%98%EA%B8%B0\">JDBC에서 Transaction 설정 및 응용하기</a></li>\n<li><a href=\"#jdbc-savepoint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">JDBC Savepoint 설정하기</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 09, 2021","title":"Transaction의 동작제어","categories":"데이터베이스","author":"코다","emoji":"🚊"},"fields":{"slug":"/transaction/"}},"prev":{"id":"20c3cda7-77dd-5c04-b4a8-7982cb496eaa","html":"<ul>\n<li>이것은 정답이 아니라 한 블로그에 기술된 하나의 의견이다. 읽어보고 신선한 접근이라고 생각해서 정리해둔다. <a href=\"%5Bhttps://changelog.com/posts/you-might-as-well-timestamp-it%5D(https://changelog.com/posts/you-might-as-well-timestamp-it)\">링크</a></li>\n</ul>\n<p>데이터베이스에서 boolean 값을 지정해서 저장해야하는 경우들이 있다. <code class=\"language-text\">is_published</code>, <code class=\"language-text\">is_signed</code>, <code class=\"language-text\">is_finished</code> 등등을 기록해야하는 경우들이다. 이 경우에 boolean으로 저장하지 말고 timestamp로 저장하도록 해보자! 글쓴이의 말을 인용하자면 “단 한번도 후회한적이 없다”. <br></p>\n<p>Boolean 값으로 저장할만한 데이터는 언제 해당 데이터가 set 되었는지에 대한 timestamp를 제공함으로 잃는 것이 없다. 아무리 해당 시간 데이터가 필요하지 않더라도 말이다. 이렇게 구현을 하게 된다면 <code class=\"language-text\">null</code> 은 <code class=\"language-text\">false</code>로 <code class=\"language-text\">non-null</code>은 <code class=\"language-text\">true</code>로 간주되어 처리하면 될 것이다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//boolean 사용</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_finished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//timestamp 사용</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>finished_at<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 자연스럽게 <code class=\"language-text\">deleted_at</code>, <code class=\"language-text\">hidden_at</code>, <code class=\"language-text\">signed_in_at</code> 등등으로 변환될 것이다. </p>\n<h3 id=\"의견\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EA%B2%AC\" aria-label=\"의견 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의견</h3>\n<p>글쓴이의 말이 일리가 있다. 큰 구현의 차이나 처리의 차이 없이 동일한 연산을 수행할 수 있고, 더 많은 정보를 제공하는 이점이 있다. <br></p>\n<p>하지만 해당 데이터가 <code class=\"language-text\">null</code>로 지정이 되어 있는 시점이 있다는 것이 해당 코드를 취약하게 만들 수도 있을 것 같다. <br></p>\n<p> 이 부분에 대한 다른 크루들의 생각을 첨부! <br></p>\n<p align=\"center\"><img width=\"90%\" alt=\"_2021-04-25__7 01 27\" src=\"https://user-images.githubusercontent.com/63405904/134771368-791c2734-8e0e-49e4-9b58-b9608036c69f.png\"></p>","frontmatter":{"date":"March 17, 2021","title":"Boolean 대신 timestamp","categories":"설계","author":"코다","emoji":"🛠"},"fields":{"slug":"/boolean-timestamp/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/dip/","nextSlug":"/transaction/","prevSlug":"/boolean-timestamp/"}},"staticQueryHashes":["1073350324","2938748437"]}