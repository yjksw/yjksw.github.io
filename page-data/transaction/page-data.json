{"componentChunkName":"component---src-templates-blog-template-js","path":"/transaction/","result":{"data":{"cur":{"id":"88e09de5-4062-57a5-9ae6-1b90ae07ab3a","html":"<h2 id=\"transaction-이란\" style=\"position:relative;\"><a href=\"#transaction-%EC%9D%B4%EB%9E%80\" aria-label=\"transaction 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transaction 이란?</h2>\n<ul>\n<li>개인이 설정할 수 있는 작업의 최소 단위이다.</li>\n<li>Transaction을 기준으로 <code class=\"language-text\">commit</code>을 할 수도, <code class=\"language-text\">rollback</code>을 할 수도 있다.</li>\n<li>\n<p>Transaction을 사용할 때 DBMS에서 ACID를 제공받을 수 있다.</p>\n<ul>\n<li><strong>Atomic(원자성)</strong> : 한꺼번에 모두 처리가 되거나, 한꺼번에 모두 처리가 되지 않도록 원자성을 부여한다. 데이터 관련 일부만 처리되었을 때 생길 복잡한 상황과 부작용을 막을 수 있다.</li>\n<li><strong>Consistency(일치성)</strong> : 하나의 데이터가 처리되었을 때 관련된 다른 테이블 혹은 상황에서 일관된 논리가 수행 되도록 하는 것을 보장한다 (ex. A 에서 1000원이 차감되면 B에서 1000원이 증감되어야 하는 상황 등등.)</li>\n<li><strong>Isolation(독립성)</strong> : 데이터가 처리되는 도중 다른 일이 중간에 일어나지 않도록 해당 데이터를 보호하도록 보장. 중간에 다른 일이 끼어들어 부작용이 생기는 것을 방지한다.</li>\n<li><strong>Durability(영구보존성)</strong> : 데이터를 DB에 저장하여 보존하도록 한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jdbc에서-transaction-설정-및-응용하기\" style=\"position:relative;\"><a href=\"#jdbc%EC%97%90%EC%84%9C-transaction-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%9D%91%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"jdbc에서 transaction 설정 및 응용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JDBC에서 Transaction 설정 및 응용하기</h2>\n<ul>\n<li>\n<p>JDBC에서 <code class=\"language-text\">Connection</code>을 생성할 때 해당 <code class=\"language-text\">Connection</code>은 default로 <code class=\"language-text\">setAutoCommit(true)</code> 로 설정이 되어 있다.</p>\n<ul>\n<li>이 말은 각 SQL statements가 모두 기본 transaction으로 래핑되어 있다는 뜻이다.</li>\n</ul>\n</li>\n<li>\n<p>개인적으로 작업 단위를 설정해서 ACID를 보장받으며 처리하고 싶을 경우 다음과 같이 설정해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Connection con <span class=\"token operator\">=</span> DriverManager<span class=\"token punctuation\">.</span>getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncon<span class=\"token punctuation\">.</span>setAutoCommit<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">//sql 실행</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>결과 정상 처리<span class=\"token punctuation\">)</span> {\n con<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n} <span class=\"token keyword\">else</span> {\n\tcon<span class=\"token punctuation\">.</span><span class=\"token keyword\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n}</code></pre></div>\n</li>\n</ul>\n<h2 id=\"jdbc-savepoint-설정하기\" style=\"position:relative;\"><a href=\"#jdbc-savepoint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"jdbc savepoint 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JDBC Savepoint 설정하기</h2>\n<ul>\n<li>\n<p>Transaction을 통해서 commit 과 rollback 작업단위를 설정할 수 있지만, 하나의 작업 단위 내에서도 rollback 하고 싶은 지점을 직접 설정할 수도 있다.</p>\n<ul>\n<li>이때는 <code class=\"language-text\">setAutoCommit(false)</code>로 설정해야지 아니면 자동으로 각 sql 문이 하나의 transaction으로 묶인다.</li>\n</ul>\n</li>\n<li>\n<p>Savepoint를 설정해서 원하는 작업 포인트로 rollback 할 수 있다.</p>\n<ul>\n<li>setSavepoint(String savepointName) : 새로운 savePoint를 설정하고 해당 객체를 리턴</li>\n<li>releaseSavepoint(Savepoint savepoint) : 해당 savepoint 지점을 해제한다.</li>\n</ul>\n</li>\n<li>\n<p>사용 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">try {\n\tcon<span class=\"token punctuation\">.</span>setAutoCommit<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\tStatement stmt <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span>createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">SavePoint</span> savePoint1 <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span>setSavepoint<span class=\"token punctuation\">(</span><span class=\"token string\">\"savepoint1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//sql 쿼리 실행</span>\n\tcon<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n} catch <span class=\"token punctuation\">(</span>SQLException<span class=\"token punctuation\">)</span> {\n\tcon<span class=\"token punctuation\">.</span><span class=\"token keyword\">rollback</span><span class=\"token punctuation\">(</span>savepoint1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n}</code></pre></div>\n</li>\n</ul>\n<p><strong>[참고자료]</strong> : <a href=\"http://yimoyimo.tk/transaction_DI/\">http://yimoyimo.tk/transaction_DI/</a>, <a href=\"https://hamait.tistory.com/345\">https://hamait.tistory.com/345</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#transaction-%EC%9D%B4%EB%9E%80\">Transaction 이란?</a></li>\n<li><a href=\"#jdbc%EC%97%90%EC%84%9C-transaction-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%9D%91%EC%9A%A9%ED%95%98%EA%B8%B0\">JDBC에서 Transaction 설정 및 응용하기</a></li>\n<li><a href=\"#jdbc-savepoint-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">JDBC Savepoint 설정하기</a></li>\n</ul>\n</div>","excerpt":"Transaction 이란? 개인이 설정할 수 있는 작업의 최소 단위이다. Transaction을 기준으로 을 할 수도, 을 할 수도 있다. Transaction을 사용할 때 DBMS에서 ACID를 제공받을 수 있다. Atomic(원자성) : 한꺼번에 모두 처리가 되거나, 한꺼번에 모두 처리가 되지 않도록 원자성을 부여한다. 데이터 관련 일부만 처리되었을 때 생길 복잡한 상황과 부작용을 막을 수 있다. Consistency(일치성) : 하나의 데이터가 처리되었을 때 관련된 다른 테이블 혹은 상황에서 일관된 논리가 수행 되도록 하는 것을 보장한다 (ex. A 에서 1000원이 차감되면 B에서 1000원이 증감되어야 하는 상황 등등.) Isolation(독립성) : 데이터가 처리되는 도중 다른 일이 중간에 일어나지 않도록 해당 데이터를 보호하도록 보장. 중간에 다른 일이 끼어들어 부작용이 생기는 것을 방지한다. Durability(영구보존성) : 데이터를 DB에 저장하여 보존하도록 한…","frontmatter":{"date":"March 09, 2021","title":"Transaction의 동작제어","categories":"데이터베이스","author":"코다","emoji":"🚊"},"fields":{"slug":"/transaction/"}},"next":{"id":"93c8960d-fd12-539f-93d8-ad36d2740d7c","html":"<p>데이터의 흐름 또는 코드가 책임지는 부분의 유사도에 따라서 계층별로 나누어서 대규모 웹 어플리케이션을 구현한다. 이때의 이점은 각 계층이 담당하고 있는 책임을 알 수 있기 때문에 대량의 코드에서도 필요한 부분을 찾아서 수정하기 다소 쉽다. 또한 구조적으로 정리되어 있는 이점이 있다. <br></p>\n<p>웹 어플리케이션을 구현할 때 이러한 계층들에 대한 제대로 된 정의를 가지고 각자가 담당하는 기능을 구현하는 것이 좋다. 함께 일하는 동료 개발자나 이후에 레거시 코드로 받을 다른 개발자들과의 의사소통 비용을 크게 감소하고 쉽게 코드와 구조를 이해할 수 있기 때문이다. <br></p>\n<ul>\n<li>총 5개의 계층이 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">1.</span> 프레젠테이션 계층 <span class=\"token punctuation\">(</span>Presentation Layer<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span> 제어 계층 <span class=\"token punctuation\">(</span>Control Layer<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3.</span> 비지니스 로직 계층 <span class=\"token punctuation\">(</span>Business Logic Layer<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4.</span> 퍼시스턴스 계층 <span class=\"token punctuation\">(</span>Persistence Layer<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5.</span> 도메인 모델 계층 <span class=\"token punctuation\">(</span>Domain Model Layer<span class=\"token punctuation\">)</span> </code></pre></div>\n<h2 id=\"presentation-layer\" style=\"position:relative;\"><a href=\"#presentation-layer\" aria-label=\"presentation layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Presentation Layer</h2>\n<ul>\n<li>식당에서 <code class=\"language-text\">메뉴판</code> 역할</li>\n<li>\n<p>UI를 담당하는 계층이다.</p>\n<ul>\n<li>User에게 보여지는 화면 담당</li>\n<li>User의 입력을 받는 담당</li>\n<li>입력에 따른 결과를 서버로부터 받아서 다시 화면에 띄우는 담당</li>\n</ul>\n</li>\n<li>다른 계층과의 접촉이 없고 Control layer를 통해서 다른 계층과 협업한다. 따라서 presentation layer의 모든 요청과 응답은 control layer를 통해서 이루어진다.</li>\n<li>UI에서 직접적인 비지니스 로직을 수행해서 일을 처리하지 않는다!</li>\n</ul>\n<h2 id=\"control-layer\" style=\"position:relative;\"><a href=\"#control-layer\" aria-label=\"control layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Layer</h2>\n<ul>\n<li>식당에서 <code class=\"language-text\">지배원</code> 역할</li>\n<li>Presentation layer와 비지니스 로직을 담당하는 계층 분리하는 연결 계층이다. UI에서 직접적으로 핵심 비지니스 로직에 접근하지 않도록 UI에서 온 요청에 대해 한차례 필터링 한다.</li>\n<li>\n<p>즉, 사용자 화면에서 온 요청을 분석해서 비지니스 로직에 해당 요청에 대한 처리(핵심적인 일 수행)을 결정하고 그에 따른 결과를 다시 사용자 화면으로 응답한다.</p>\n<ul>\n<li>다르게 이해하면, 핵심 비지니스 로직을 처리하는 계층은 어떠한 요청인지, 누구로부터의 요청인지를 알지 못한다.</li>\n</ul>\n</li>\n<li>UI 입력 검증, 요청/응답 전달, 예외 핸들링, Domain에서 처리된 로직 뷰와 연결 등의 기능을 담당한다.</li>\n</ul>\n<h2 id=\"business-layer\" style=\"position:relative;\"><a href=\"#business-layer\" aria-label=\"business layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Business Layer</h2>\n<ul>\n<li>식당에서 <code class=\"language-text\">요리사</code> 역할</li>\n<li>핵심 업무를 처리하는 로직을 담당하는 계층이다.</li>\n<li>즉, 어플리케이션의 핵심 기능이 어떻게 처리될 것인지에 대한 코드 구현이 모두 포함되어 있다.</li>\n<li>웹 어플리케이션의 핵심 부분이기 때문에 다른 요소들(사용자 화면, 연결하는 컨트롤러 등)은 변경이 잦을 수 있지만 비지니스 계층은 핵심 기능의 변경 요청이 있지 않은 이상 대체로 변경되지 않는다.</li>\n<li>서버의 주를 이루기 때문에 재사용 가능성이 높고 따라서 잘 설계되어야 한다.</li>\n<li>Business layer 로직은 다른 계층들과 특별히 더 분리되어 있는 것이 좋다. 그래야 유지보수가 쉽고 응집성이 높아진다.</li>\n<li>추가로 Business layer 의 코드는 뷰와 persitence layer(다음 설명 계층) 의 연결고리 역할도 한다.</li>\n</ul>\n<h2 id=\"persistence-layer\" style=\"position:relative;\"><a href=\"#persistence-layer\" aria-label=\"persistence layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Persistence Layer</h2>\n<ul>\n<li>식당에서 <code class=\"language-text\">재료</code> 역할</li>\n<li>데이터 처리를 담당하는 계층으로 CRUD를 담당한다.</li>\n<li>관계형 정보를 저장 및 업데이트, 삭제 등등의 역할을 수행하는데, 서버에서 생성되는 정보에 <code class=\"language-text\">영속성</code>을 부여한다는 측면에서 persistence layer라고 부른다.</li>\n<li>반대로 DB에서 가져온 정보를 객체화 하는 역할도 수행한다.</li>\n</ul>\n<h2 id=\"domain-model-layer\" style=\"position:relative;\"><a href=\"#domain-model-layer\" aria-label=\"domain model layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Domain Model Layer</h2>\n<ul>\n<li>식당에서 <code class=\"language-text\">그릇</code> 역할</li>\n<li>계층 사이에 전달되는 <strong>비지니스 객체</strong>이다.</li>\n<li>DTO의 형태로 계층간 전달이 되며 핵심 데이터를 보관하여 전달된다.</li>\n</ul>\n<p><strong>[참고자료]</strong> : <a href=\"https://postitforhooney.tistory.com/entry/Spring-MVC-%ED%8C%A8%ED%84%B4%EC%97%90%EC%84%9C%EC%9D%98-5%EA%B0%80%EC%A7%80-%EA%B3%84%EC%B8%B5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%B3%B4-%ED%8D%BC%EC%98%B4\">https://postitforhooney.tistory.com/entry/Spring-MVC-패턴에서의-5가지-계층에-대한-정보-퍼옴</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#presentation-layer\">Presentation Layer</a></li>\n<li><a href=\"#control-layer\">Control Layer</a></li>\n<li><a href=\"#business-layer\">Business Layer</a></li>\n<li><a href=\"#persistence-layer\">Persistence Layer</a></li>\n<li><a href=\"#domain-model-layer\">Domain Model Layer</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 05, 2021","title":"웹 Layers에 대해","categories":"웹","author":"코다","emoji":"🖥"},"fields":{"slug":"/web-layer/"}},"prev":{"id":"21e10a37-af41-506b-8eda-5a0ffa60b567","html":"<p>스프링 강의 중 DAO vs. Repository의 차이점에 대해서 논의하다가 다음과 같은 표현이 나왔다. </p>\n<ul>\n<li>Repository의 추상 인터페이스는 Domain Layer에 속하며 Domain 객체들을 관리하고 생애주기를 같이한다. 그 구현체인 SimpleJpaRepository는 Infrastructure에 속한다. 추상화된 repository 인터페이스를 사용하면서 추상에 의존하고 구체에 의존하지 않도록 구성(DIP) 하여 유연성 있는 시스템을 구성한다.</li>\n</ul>\n<p>여기서 나오는 DIP는 무엇이고 위와 같은 구성이 어떻게 우연성을 제공하는 걸까? </p>\n<h3 id=\"dip-요약\" style=\"position:relative;\"><a href=\"#dip-%EC%9A%94%EC%95%BD\" aria-label=\"dip 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DIP 요약</h3>\n<ul>\n<li><strong>Dependency Inversion Principle</strong>의 약자이다.</li>\n</ul>\n<p>본래 객체는 상위 계층이 하위 계층에 의존한다. DIP는 그 관계를 역전시켜서 상위 계층이 하위 계층의 구현에서 독립하도록 한다. 그러기 위한 원칙 두가지는 다음과 같다. </p>\n<ol>\n<li>상위 모듈과 하위 모듈이 서로 의존하는 것이 아니라 모두 추상화에 의존한다. </li>\n<li>추상화가 구현에 의존하는 것이 아니라 구현이 추상화에 의존해야 한다. </li>\n</ol>\n<p>한마디로 요약하면 다음이다. <br></p>\n<p><strong>“The DIP is about inverting the classic dependency between high-level and low-level components by abstracting away the interacting between them.”</strong></p>\n<p>출처 : <a href=\"https://www.baeldung.com/java-dependency-inversion-principle\">https://www.baeldung.com/java-dependency-inversion-principle</a> <br></p>\n<p>즉 상위 모듈과 하위 모듈 사이에 추상화를 껴서 서로를 의존하는 것이 아니라 인터페이스를 통해서 협력하도록 하는 것이다. </p>\n<h3 id=\"dip-구현\" style=\"position:relative;\"><a href=\"#dip-%EA%B5%AC%ED%98%84\" aria-label=\"dip 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DIP 구현</h3>\n<p>다음과 같은 구현이 있을 때 어떤 것이 DIP 일까?</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">public</span> class StringProcessor {\n    \n    private final StringReader stringReader<span class=\"token punctuation\">;</span>\n    private final StringWriter stringWriter<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> StringProcessor<span class=\"token punctuation\">(</span>StringReader stringReader<span class=\"token punctuation\">,</span> StringWriter stringWriter<span class=\"token punctuation\">)</span> {\n        this<span class=\"token punctuation\">.</span>stringReader <span class=\"token operator\">=</span> stringReader<span class=\"token punctuation\">;</span>\n        this<span class=\"token punctuation\">.</span>stringWriter <span class=\"token operator\">=</span> stringWriter<span class=\"token punctuation\">;</span>\n    }\n\n    <span class=\"token keyword\">public</span> void printString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> {\n        stringWriter<span class=\"token punctuation\">.</span><span class=\"token keyword\">write</span><span class=\"token punctuation\">(</span>stringReader<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    }\n}</code></pre></div>\n<ol>\n<li><code class=\"language-text\">StringReader</code>, <code class=\"language-text\">StringWriter</code> 가 인터페이스이고 <code class=\"language-text\">StringProcessor</code>와 같은 패키지에 존재한다. (구현체는 함께 있지 않다)</li>\n<li><code class=\"language-text\">StringReader</code>, <code class=\"language-text\">StringWriter</code>가 인터페이스이면서 <code class=\"language-text\">StringProcessor</code>와 다른 패키지에 존재한다. </li>\n</ol>\n<p>즉 구현체와 따로 분리되어 있어서 StringProcessor는 인터페이스에 의존하고 인터페이스는 언제나 변경이 가능하여 구현체에 존재하지 않도록 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#dip-%EC%9A%94%EC%95%BD\">DIP 요약</a></li>\n<li><a href=\"#dip-%EA%B5%AC%ED%98%84\">DIP 구현</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 13, 2021","title":"DIP 의존관계 역전의 원칙","categories":"스프링 웹","author":"코다","emoji":"🍀"},"fields":{"slug":"/dip/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/transaction/","nextSlug":"/web-layer/","prevSlug":"/dip/"}},"staticQueryHashes":["1073350324","2938748437"]}