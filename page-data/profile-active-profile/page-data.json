{"componentChunkName":"component---src-templates-blog-template-js","path":"/profile-active-profile/","result":{"data":{"cur":{"id":"d5d76813-7bae-5b9a-b7c6-1a21a2637ac2","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>프로젝트를 진행하다 보면 상황에 따라 각기 다른 운영환경을 설정해야할때가 있다. 그때마다 properties 설정 파일에 가서 설정되어있는 운영 환경을 바꾸고 돌리기는 어렵다. </li>\n<li>이때 각기 다른 <code class=\"language-text\">Profile</code>를 적용해서 상황에 따라 적합한 <code class=\"language-text\">Profile</code> 설정을 따르도록 할 수 있다. </li>\n</ul>\n<br>\n<h2 id=\"yml-파일로-설정-나누기---간단하게\" style=\"position:relative;\"><a href=\"#yml-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%82%98%EB%88%84%EA%B8%B0---%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C\" aria-label=\"yml 파일로 설정 나누기   간단하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yml 파일로 설정 나누기 - 간단하게</h2>\n<ul>\n<li><code class=\"language-text\">yml</code> 또는 <code class=\"language-text\">properties</code>를 통해서 profile 설정을 나눌 수 있다. </li>\n<li>\n<p>각각 원하는 환경에 대한 설정정보를 <code class=\"language-text\">yml</code>, <code class=\"language-text\">properties</code>에 기재한 후 <code class=\"language-text\">application-{profile-name}.yml</code> 또는 <code class=\"language-text\">application-{profile-name}.properties</code>로 지정한다. </p>\n<p align=\"center\"><img width=\"317\" alt=\"스크린샷 2021-08-17 오후 8 42 39\" src=\"https://user-images.githubusercontent.com/63405904/129719783-aeb9d93e-4c22-473e-9221-0b553393287d.png\"><br>resources 하위에 나누어진 profiles 설정들</p>\n</li>\n<li>\n<p>여러 profile 환경으로 나눠져 있을 경우 어떤 profile을 기본적으로 실행할 것인지 <code class=\"language-text\">application.properties</code>에 지정해 주어야 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"properties\"><pre class=\"language-properties\"><code class=\"language-properties\">    spring.\n        profiles.\n<span class=\"token attr-name\">            active</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">local</span></code></pre></div>\n</li>\n<li>나누어진 profile을 적용하기 위해서는 <code class=\"language-text\">$ java -jar -Dspring.profiles.active={profile-name} [jar파일명]</code>로 적용하고자하는 프로필을 지정하여 실행하거나 <code class=\"language-text\">@ActiveProfile</code> 어노테이션을 활용할 수 있다. </li>\n</ul>\n<br>\n<h3 id=\"사용-예시\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 예시</h3>\n<ul>\n<li>본인은 프로젝트 진행 시 다음과 같이 local, prod, test로 환경을 나누었다. </li>\n<li>\n<p>application-local.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mariadb<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/pickgit<span class=\"token punctuation\">?</span>serverTimezone=UTC<span class=\"token important\">&amp;characterEncoding=UTF-</span><span class=\"token number\">8</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token important\">***</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token important\">***</span>\n<span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">dialects</span><span class=\"token punctuation\">:</span> org.hibernate.dialect.MySQL57Dialect\n        <span class=\"token key atrule\">format_sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">default_batch_fetch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span>\n    <span class=\"token key atrule\">generate-ddl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> none</code></pre></div>\n</li>\n<li>\n<p>application-prod.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mariadb<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>13306/pickgit<span class=\"token punctuation\">?</span>serverTimezone=UTC<span class=\"token important\">&amp;characterEncoding=UTF-</span><span class=\"token number\">8</span>\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token important\">***</span>\n        <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token important\">***</span>\n        <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> org.mariadb.jdbc.Driver\n<span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">dialects</span><span class=\"token punctuation\">:</span> org.hibernate.dialect.MySQL57InnoDBDialect\n        <span class=\"token key atrule\">format_sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">default_batch_fetch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span>\n    <span class=\"token key atrule\">generate-ddl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> validate</code></pre></div>\n</li>\n<li>\n<p>application-test.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>h2<span class=\"token punctuation\">:</span>mem<span class=\"token punctuation\">:</span>~/test;MODE=MySQL;DB_CLOSE_DELAY=<span class=\"token punctuation\">-</span>1;DB_CLOSE_ON_EXIT=FALSE\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token important\">**</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token important\">**</span>\n<span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">dialects</span><span class=\"token punctuation\">:</span> org.hibernate.dialect.MySQL57Dialect\n        <span class=\"token key atrule\">format_sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">default_batch_fetch_size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span>\n    <span class=\"token key atrule\">generate-ddl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> create<span class=\"token punctuation\">-</span>drop</code></pre></div>\n</li>\n<li>\n<p>application.yml</p>\n<ul>\n<li><code class=\"language-text\">spring.profiles.active:</code> 로 기본 profile 환경을 세팅할 수 있다. <br></li>\n<li><code class=\"language-text\">spring.profiles.include:</code> 로 포함할 다른 profile 설정을 지정할 수 있다. (주로 공통으로 적용될만한 보안 관련 profile, aws 관련 설정 등을 include로 포함한다.)</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"profile-어노테이션으로-환경별-설정-다르게-하기\" style=\"position:relative;\"><a href=\"#profile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-%ED%99%98%EA%B2%BD%EB%B3%84-%EC%84%A4%EC%A0%95-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%ED%95%98%EA%B8%B0\" aria-label=\"profile 어노테이션으로 환경별 설정 다르게 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Profile 어노테이션으로 환경별 설정 다르게 하기</h2>\n<ul>\n<li><code class=\"language-text\">@Profile</code>을 사용하면 해당 어노테이션에서 지정한 환경으로 어플리케이션 실행 시 configuration을 설정할 수 있다. </li>\n<li>\n<p><code class=\"language-text\">@Profile</code> 어노테이션은 다음과 같이 3가지 방법으로 (더 있을 수도 있다) 사용할 수 있다. </p>\n<ol>\n<li>\n<p>@Configuration 클래스 안에 method 위에 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InfrastructureConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">OAuthClient</span> <span class=\"token function\">mockGithubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockGithubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">OAuthClient</span> <span class=\"token function\">githubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GithubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>OAuthClient 주입할 때 “test” profile 환경이면 <code class=\"language-text\">MockGithubOAuthClient</code>가 주입되고 “prod” profile 환경이면 <code class=\"language-text\">GithubOAuthClient</code>가 주입된다. </li>\n</ul>\n</li>\n<li>\n<p>@Configuration 클래스 안에 static class 위에</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InfrastructureConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Configuration</span>\n    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MockOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token class-name\">OAuthClient</span> <span class=\"token function\">mockGithubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockGithubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Configuration</span>\n    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MockOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token class-name\">OAuthClient</span> <span class=\"token function\">githubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GithubOAuthClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>중첩 클래스로도 설정할 수 있다. 보기에 가독성이 좋은 것으로 선택하면 된다. </li>\n</ul>\n</li>\n<li>\n<p>인터페이스를 구현하는 구현체 class 위에 설정 </p>\n<ul>\n<li>Bean으로 등록되어 있는 클래스에 적용할 수 있다. (<code class=\"language-text\">@Configuration</code>, <code class=\"language-text\">@Component</code>)</li>\n<li>OAuthClient 라는 인터페이스가 있을 때, 해당 인터페이스를 구현하는 구현체를 Profile에 따라 나누어서 적용할 수 있다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!test\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//profile이 테스트가 아닐 경우 적용된다. </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GithubOAuthClient</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OAuthClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//... 프로퍼티 생략</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLoginUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://github.com/login/oauth/authorize\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"?client_id=%s\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;redirect_uri=%s\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;scope=%s\"</span><span class=\"token punctuation\">,</span>\n            clientId<span class=\"token punctuation\">,</span> redirectUrl<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//... 세부 로직 생략 </span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//... 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 로직은 Github OAuth관련 로직이므로 사용자 로그인 행위가 없는 테스트에서 실행하기 어렵기 때문에 아래와 같이 Profile이 “test”로 설정 되었을 경우 MockOAuthClient가 주입되도록 설정한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//profile이 테스트가 아닐 경우 적용된다. </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MockGithubOAuthClient</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OAuthClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//... 프로퍼티 생략</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLoginUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://github.com/login/oauth/authorize\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"?client_id=%s\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;redirect_uri=%s\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;scope=%s\"</span><span class=\"token punctuation\">,</span>\n            clientId<span class=\"token punctuation\">,</span> redirectUrl<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//... 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"activeprofile-어노테이션으로-profile-설정-적용하기\" style=\"position:relative;\"><a href=\"#activeprofile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-profile-%EC%84%A4%EC%A0%95-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"activeprofile 어노테이션으로 profile 설정 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@ActiveProfile 어노테이션으로 profile 설정 적용하기</h2>\n<ul>\n<li>이전에 말한대로 <code class=\"language-text\">yml</code> 또는 <code class=\"language-text\">properties</code> 파일에 profile 설정을 나누고 <code class=\"language-text\">application.properties</code> 등의 파일에 profile 을 지정하거나 jar를 실행하면서 환경을 지정할 수 있다. </li>\n<li>하지만 어떤 profile 환경에서도 항상 특정 profile 환경으로 실행되어야 할 때가 있다. 예를 들어서 test 코드 같은 경우는 항상 test profile 환경으로 돌아가야한다. </li>\n<li>이때 해당 클래스 상단에 @ActiveProfile(“test”) 등으로 설정하면 해당 profile이 적용되어 실행된다. </li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataJpaTest</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthServiceIntegrationTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...테스트 코드 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<p><strong>[출처]</strong></p>\n<ul>\n<li><a href=\"http://wonwoo.ml/index.php/post/1933\">http://wonwoo.ml/index.php/post/1933</a></li>\n<li><a href=\"https://www.baeldung.com/spring-profiles\">https://www.baeldung.com/spring-profiles</a></li>\n<li><a href=\"https://umanking.github.io/2019/04/13/spring-profile/\">https://umanking.github.io/2019/04/13/spring-profile/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li>\n<p><a href=\"#yml-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%84%A4%EC%A0%95-%EB%82%98%EB%88%84%EA%B8%B0---%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C\">yml 파일로 설정 나누기 - 간단하게</a></p>\n<ul>\n<li><a href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">사용 예시</a></li>\n</ul>\n</li>\n<li><a href=\"#profile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-%ED%99%98%EA%B2%BD%EB%B3%84-%EC%84%A4%EC%A0%95-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%ED%95%98%EA%B8%B0\">@Profile 어노테이션으로 환경별 설정 다르게 하기</a></li>\n<li><a href=\"#activeprofile-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-profile-%EC%84%A4%EC%A0%95-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">@ActiveProfile 어노테이션으로 profile 설정 적용하기</a></li>\n</ul>\n</div>","excerpt":"Intro 프로젝트를 진행하다 보면 상황에 따라 각기 다른 운영환경을 설정해야할때가 있다. 그때마다 properties 설정 파일에 가서 설정되어있는 운영 환경을 바꾸고 돌리기는 어렵다.  이때 각기 다른 를 적용해서 상황에 따라 적합한  설정을 따르도록 할 수 있다.  yml 파일로 설정 나누기 - 간단하게  또는 를 통해서 profile 설정을 나눌 수 있다.  각각 원하는 환경에 대한 설정정보를 , 에 기재한 후  또는 로 지정한다.  여러 profile 환경으로 나눠져 있을 경우 어떤 profile을 기본적으로 실행할 것인지 에 지정해 주어야 한다.  나누어진 profile을 적용하기 위해서는 로 적용하고자하는 프로필을 지정하여 실행하거나  어노테이션을 활용할 수 있다.  사용 예시 본인은 프로젝트 진행 시 다음과 같이 local, prod, test로 환경을 나누었다.  application-local.yml application-prod.yml application-te…","frontmatter":{"date":"August 19, 2021","title":"웹 개발 시 Profile 전략 - @Profile & @ActiveProfile","categories":"스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/profile-active-profile/"}},"next":{"id":"24937c05-73a7-52fc-9328-64c422c66fb2","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>스프링부트 프로젝트를 진행하다보면 웹 mvc에 대한 테스트를 진행해야할 때가 있다. </li>\n<li>때로는 각 layer에 대한 슬라이스 테스트를 작성하거나, 일부분에 대한 통합 테스트만을 진행할 때 Mock 테스트를 해야할 때도 있다. </li>\n<li>테스트 관련 annotation에 대해서 정리하고 각 annotation의 차이 및 언제 무엇을 사용하면 좋을지 정리해본다. </li>\n</ul>\n<br>\n<h2 id=\"code-classlanguage-textspringboottestcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textspringboottestcode\" aria-label=\"code classlanguage textspringboottestcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@SpringBootTest</code></h2>\n<ul>\n<li><code class=\"language-text\">@SpringBootTest</code> 어노테이션은 <code class=\"language-text\">@SpringBootApplication</code> 을 찾아 해당 configuration에 맞추어 실제 Spring web context를 실행햔다. </li>\n<li>Spring context의 설정으로 그대로 적용해서 테스트를 진행해야 할 경우에 해당 어노테이션을 붙여서 테스트를 하는 것이 좋다. </li>\n<li>하지만 전체 컨텍스트를 로드하는 만큼 굉장히 오랜 시간이 걸린다. </li>\n<li>실제로 <code class=\"language-text\">@SpringBootTest</code> 어노테이션이 붙은 테스트를 돌려본다면 다음과 같은 스프링 컨텍스트르 로딩하는 긴 로그가 찍히는 것을 확인할 수 있다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//... 일부 생략\n20:37:26.255 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.2)\n\n//... 일부 생략 \n > Running with Spring Boot v2.5.2, Spring v5.3.8\n2021-08-16 20:37:26.559 DEBUG 4487 --- [           main] c.w.p.a.user.UserAcceptanceTest          : Running with Spring Boot v2.5.2, Spring v5.3.8\n2021-08-16 20:37:26.560 INFO  main o.s.boot.SpringApplication.logStartupProfileInfo L:663 \n > The following profiles are active: security,test\n2021-08-16 20:37:26.560  INFO 4487 --- [           main] c.w.p.a.user.UserAcceptanceTest          : The following profiles are active: security,test\n2021-08-16 20:37:27.252  INFO 4487 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.\n2021-08-16 20:37:27.328  INFO 4487 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 70 ms. Found 4 JPA repository interfaces.\n2021-08-16 20:37:28.062  INFO 4487 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 0 (http)\n2021-08-16 20:37:28.068  INFO 4487 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2021-08-16 20:37:28.068  INFO 4487 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]\n2021-08-16 20:37:28.115  INFO 4487 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2021-08-16 20:37:28.116  INFO 4487 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1379 ms</code></pre></div>\n<br>\n<h2 id=\"code-classlanguage-textautoconfiguremockmvccode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textautoconfiguremockmvccode\" aria-label=\"code classlanguage textautoconfiguremockmvccode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@AutoConfigureMockMvc</code></h2>\n<ul>\n<li>위 어노테이션은 다음과 같이 <code class=\"language-text\">MockMvc</code>를 주입받아서 톰캣 서버를 띄우지 않은 상태로 API 요청 부분을 Mocking 해서 사용할 수 있다. 하지만 스프링 컨텍스트의 빈을 모두 로드하는 것은 <code class=\"language-text\">@SpringBootTest</code> 와 동일하다. </li>\n<li><code class=\"language-text\">@SpringBootTest</code> 와 <code class=\"language-text\">@AutoConfigureMockMvc</code>를 사용해서 테스트 코드를 실행해보면 위 <code class=\"language-text\">@SpringBootTest</code>를 사용했을때와 다르게 Tomcat을 시작하는 로그가 찍히지 않는 것을 확인할 수 있다. </li>\n</ul>\n<blockquote>\n<p>테스트 코드 </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@AutoConfigureMockMvc</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자는 내 프로필을 조회할 수 있다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getAuthenticatedUserProfile_LoginUser_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">UserProfileResponseDto</span> responseDto <span class=\"token operator\">=</span> <span class=\"token class-name\">UserFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockLoginUserProfileResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> perform <span class=\"token operator\">=</span> mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles/me\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>AUTHORIZATION<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer testToken\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//...뒤 코드 생략</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>실행 시 로그 </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//...일부 생략 \n21:41:00.201 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.2)\n\n//...일부 생략 \n2021-08-16 21:41:03.332  INFO 4963 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''\n2021-08-16 21:41:03.333  INFO 4963 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''\n2021-08-16 21:41:03.334  INFO 4963 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms\n2021-08-16 21:41:03.349  INFO 4963 --- [           main] c.w.p.u.u.p.UserControllerTest           : Started UserControllerTest in 3.144 seconds (JVM running for 3.765)\n2021-08-16 21:41:03.524  INFO 4963 --- [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'\n2021-08-16 21:41:03.525  INFO 4963 --- [ionShutdownHook] .SchemaDropperImpl$DelayedDropActionImpl : HHH000477: Starting delayed evictData of schema as part of SessionFactory shut-down'\n2021-08-16 21:41:03.532  INFO 4963 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...\n2021-08-16 21:41:03.537  INFO 4963 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</code></pre></div>\n<h2 id=\"code-classlanguage-textwebmvctestcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textwebmvctestcode\" aria-label=\"code classlanguage textwebmvctestcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@WebMvcTest</code></h2>\n<ul>\n<li><code class=\"language-text\">@WebMvcTest</code>의 경우 <code class=\"language-text\">@AutoConfigureMockMvc</code>와 비슷하게 서버가 모킹이 되지만 MVC와 관련된 빈들만 로드한다. 그렇기 때문에 MVC 관련 빈들만 사용한다면 위 어노테이션을 사용하는 것이 더 부화가 적다. </li>\n<li>해당 어노테이션 안에 특정 클래스를 지정하면 해당 클래스와 관련한 mvc 빈들이 올라가므로 더 효율적으로 사용할 수 있다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigureRestDocs</span>\n<span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자는 내 프로필을 조회할 수 있다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getAuthenticatedUserProfile_LoginUser_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">UserProfileResponseDto</span> responseDto <span class=\"token operator\">=</span> <span class=\"token class-name\">UserFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockLoginUserProfileResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> perform <span class=\"token operator\">=</span> mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles/me\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>AUTHORIZATION<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer testToken\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//...뒤 코드 생략</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위와 동일하게 Tomcat 관련 로그는 찍히지 않는다. 대신 <code class=\"language-text\">SpringBootMockServletContext</code>이 모킹된 서블릿을 초기화 하는 로그를 확인할 수 있다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2021-08-16 23:46:28.495  INFO 5504 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''\n2021-08-16 23:46:28.495  INFO 5504 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''\n2021-08-16 23:46:28.496  INFO 5504 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms</code></pre></div>\n<ul>\n<li>컨트롤러 슬라이스 테스트 8개에 대한 각 MockMvc 테스트를 비교했을 때, 미세하지만 <code class=\"language-text\">@WebMvcTest</code>가 더 빠른 것을 확인할 수 있다. 더 많은 숫자의 테스트 일 때 그 차이는 더 커진다. </li>\n</ul>\n<p align=\"center\"><img width=\"600\" alt=\"스크린샷 2021-08-16 오후 11 48 46\" src=\"https://user-images.githubusercontent.com/63405904/129583308-1e306f3c-0b51-4c97-8606-ee810a739289.png\"><br>@WebMvcTest 사용</p>\n<p align=\"center\"><img width=\"600\" alt=\"스크린샷 2021-08-16 오후 11 50 11\" src=\"https://user-images.githubusercontent.com/63405904/129583673-8bd736da-f88d-407f-a894-40f1e29a94fa.png\"><br>@AutoConfigureMockMvc 사용</p>\n<br>\n<h2 id=\"code-classlanguage-textextendwithmockitoextensionclasscode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textextendwithmockitoextensionclasscode\" aria-label=\"code classlanguage textextendwithmockitoextensionclasscode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code></h2>\n<ul>\n<li><code class=\"language-text\">@ExtendWith</code>는 JUnit에서 제공하는 기능이다. (위 테스트 어노테이션은 SpringBoot에서 제공한다.)</li>\n<li>흔히 코드에서 <code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code>으로 많이 사용하고 위의 모킹과 어떠한 부분이 다른지에 대해서 많이 헷갈려한다. </li>\n<li>위 모킹은 서블릿 컨테이너에 대한 모킹을 스프링 부트 에서 제공하는 것이다. </li>\n<li><code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code> 은 Mock이라는 가짜 객체를 지원하는 Mockito 테스트 프레임워크를 JUnit5와 연동하여 사용하도록 하는 것이다. (두 개의 테스트 프레임워크의 결합)</li>\n<li>주로 하나의 Layer의 단위테스트를 할 때 나머지 객체들을 모킹하도록 지원한다. </li>\n<li>즉, 서블릿 컨테이너와 상관없이 어느 한 객체에 대한 단위 테스트를 진행하면서 의존하고 있는 다른 객체의 행동을 stub하여 제어할 때 사용된다. </li>\n</ul>\n<br>\n<br>\n<p><strong>[출처]</strong></p>\n<ul>\n<li><a href=\"https://spring.io/guides/gs/testing-web/\">https://spring.io/guides/gs/testing-web/</a></li>\n<li><a href=\"https://elevatingcodingclub.tistory.com/61\">https://elevatingcodingclub.tistory.com/61</a></li>\n<li><a href=\"https://meetup.toast.com/posts/124\">https://meetup.toast.com/posts/124</a></li>\n<li><a href=\"https://www.baeldung.com/spring-boot-testing\">https://www.baeldung.com/spring-boot-testing</a></li>\n<li><a href=\"https://junit.org/junit5/docs/current/user-guide/#extensions\">https://junit.org/junit5/docs/current/user-guide/#extensions</a></li>\n<li><a href=\"https://pinokio0702.tistory.com/143\">https://pinokio0702.tistory.com/143</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#springboottest\"><code class=\"language-text\">@SpringBootTest</code></a></li>\n<li><a href=\"#autoconfiguremockmvc\"><code class=\"language-text\">@AutoConfigureMockMvc</code></a></li>\n<li><a href=\"#webmvctest\"><code class=\"language-text\">@WebMvcTest</code></a></li>\n<li><a href=\"#extendwithmockitoextensionclass\"><code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code></a></li>\n</ul>\n</div>","frontmatter":{"date":"August 17, 2021","title":"Springboot 언제 어떤 테스트를 사용할까","categories":"스프링부트 테스트","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-boot-test/"}},"prev":{"id":"7df6549b-317d-5023-9260-e4d9249565d0","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h2>\n<ul>\n<li>JPA 에서는 데이터베이스에서 연관객체 탐색을 효율적으로 하기 위해서 지연로딩 전략을 사용한다. </li>\n<li>지연로딩의 핵심은 연관관계에 있는 Entity가 실제로 사용되기 이전까지 DB에 실제로 참조하지 않고 프록시 객체로 대체하는 것이다. </li>\n<li>JPA의 프록시 객체는 유용하지만 내부 동작방식에 대해서 제대로 알고있지 않으면 찾기 어려운 버그를 만날 수도 있다. </li>\n<li>다음은 JPA proxy 관련해서 프로젝트 진행시 만난 버그에 대한 내용이다. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"문제-상황\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9\" aria-label=\"문제 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 상황</h2>\n<h3 id=\"entity-구조\" style=\"position:relative;\"><a href=\"#entity-%EA%B5%AC%EC%A1%B0\" aria-label=\"entity 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 구조</h3>\n<ul>\n<li><strong>참고</strong>: 설명과 관련된 부분만 남기고 다른 로직 및 어노테이션은 대부분 생략했다. </li>\n<li>\n<p><code class=\"language-text\">Post</code> - 게시물 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Images</span> images<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PostContent</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Likes</span> likes<span class=\"token punctuation\">;</span> <span class=\"token comment\">//설명과 관련된 프로퍼티!! </span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Comments</span> comments<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PostTags</span> postTags<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> githubRepoUrl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...부생성자 생략 </span>\n\n    <span class=\"token comment\">//...불필요한 비지니스 로직 생략 </span>\n    <span class=\"token comment\">//...getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n<li>\n<p><code class=\"language-text\">Likes</code>와 <code class=\"language-text\">Like</code> - Post 엔티티 하위의 Embedded 게시물 Like collection 포장객체</p>\n<ul>\n<li><strong>참고</strong>: 설명하고자 하는 부분과 깊게 연관된 핵심 Entity는 아니지만  상황 설명을 위해 간단히 프로퍼티만 소개한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Embeddable</span> <span class=\"token comment\">// Post 엔티티 안에 Embedded 되어 있음 </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Likes</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Like</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Likes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Likes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Like</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>likes <span class=\"token operator\">=</span> likes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...getter 및 불필요한 비지니스 로직 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Like</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"post_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Post</span> post<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Like</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...getter 및 불필요한 비지니스 로직 생략</span>\n<span class=\"token punctuation\">}</span>    </code></pre></div>\n<br>\n</li>\n<li>\n<p><code class=\"language-text\">User</code> - 어플리케이션 사용자 (게시물 좋아요, 유저간 팔로우 팔로잉 등의 행위를 함)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Followers</span> followers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Followings</span> followings<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//...일부 프로퍼티 생략 </span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...부 생성자 생략 </span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> targetUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//문제를 발생시킨 핵심 메소드!!! </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>followings<span class=\"token punctuation\">.</span><span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...getter 및 불필요한 비지니스 로직 생략 </span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//User는 Entity 이므로 Id로 동일성 및 동등성 확인 </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//중요한 포인트!!!! </span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n<li>\n<p><code class=\"language-text\">Followings</code>와 <code class=\"language-text\">Follow</code></p>\n<ul>\n<li><code class=\"language-text\">Followings</code> - 해당 <code class=\"language-text\">User</code>의 팔로워리스트를 저장하는 포장객체 (<code class=\"language-text\">Followers</code>도 동일한 형태로 되어 있다.)</li>\n<li><code class=\"language-text\">Follow</code> - Followers, Followings 리스트에 담겨 있는 VO 엔티티로 source, target 유저간의 팔로우 관계를 나타내는 엔티티</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Embeddable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Followings</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"source\"</span><span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Follow</span><span class=\"token punctuation\">></span></span> followings<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Followings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...생성자 생략 </span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> targetUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//문제를 발생시킨 핵심 메소드!!! </span>\n        <span class=\"token keyword\">return</span> followings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>follow <span class=\"token operator\">-></span> follow<span class=\"token punctuation\">.</span><span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...일부 비지니스 로직 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>\n    uniqueConstraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@UniqueConstraint</span><span class=\"token punctuation\">(</span>columnNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"source_id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target_id\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Follow</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"source_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> source<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"target_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> target<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Follow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...생성자 및 유효성 검사 로직 생략 </span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> targetUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//문제를 발생시킨 핵심 메소드!!! </span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...getter 생략 </span>\n    <span class=\"token comment\">//equals &amp; hashcode는 VO로 취급되어 필드가 같은지 확인 (즉, 유저가 같은 유저인지 확인)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n<li>\n<p><code class=\"language-text\">PostRepository</code> 게시물 좋아요 리스트 조회 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct p from Post p left join fetch p.likes where p.id = :postId\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findPostWithLikeUsers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 포스트를 조회할 때 좋아요 리스트를 fetch join 해서 즉시로딩 한다. </span></code></pre></div>\n<br>\n</li>\n</ul>\n<h3 id=\"버그-발생\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EA%B7%B8-%EB%B0%9C%EC%83%9D\" aria-label=\"버그 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버그 발생</h3>\n<ul>\n<li>\n<p>현재 흐름은 다음과 같다.  </p>\n<ol>\n<li><code class=\"language-text\">Post</code>를 좋아요 한 유저 리스트를 반환하려함. (<code class=\"language-text\">Post</code>내부의 <code class=\"language-text\">Likes</code>를 반환)</li>\n<li>\n<p>좋아요 한 유저 리스트를 조회할 때, 조회하는 source 유저가 팔로잉 하고 있는 target 유저는 팔로잉 중이라고 나타냄.\n<br></p>\n<p align=\"center\"><img width=\"220\" src=\"https://user-images.githubusercontent.com/63405904/130729021-67475c69-7b74-46bf-ac55-2902ddded2f9.png\"></p>\n</li>\n<li>\n<p>source 유저가 target user를 following 하고 있는 여부를 <code class=\"language-text\">User</code>의 <code class=\"language-text\">isFollowing</code> 메소드를 통해서 확인함.</p>\n<ul>\n<li>이때 source와 target이 같은 경우(자기 자신인 경우) - <code class=\"language-text\">null</code> 반환</li>\n<li>source가 target을 팔로잉 중인 경우 - <code class=\"language-text\">true</code> 반환</li>\n<li>source가 target을 필로우 하지 않는 경우 - <code class=\"language-text\">false</code> 반환 </li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>문제는, 로그인 한 source 유저와 즉시로딩 해 가져온 좋아요 리스트의 User 간의 팔로잉 여부가 모두 <code class=\"language-text\">false</code>로 출력이 된 것이다.</strong> </li>\n</ul>\n<br>\n<br>\n<h2 id=\"발생-원인\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8\" aria-label=\"발생 원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발생 원인</h2>\n<ul>\n<li><code class=\"language-text\">PostRepository</code>에서 <code class=\"language-text\">findPostWithLikeUsers()</code>를 사용해 포스트와 좋아요 리스트를 즉시로딩(<code class=\"language-text\">@OneToMany</code> 관계) 할 때 <code class=\"language-text\">Like</code> 엔티티 내부의 <code class=\"language-text\">User</code>는 즉시로딩 하지 않으므로 proxy 객체이다. </li>\n<li>\n<p>좋아요한 target 유저 리스트를 가져와서 로그인 유저인 source 유저의 <code class=\"language-text\">isFollowing()</code> 메소드로 두 유저간의 팔로잉 여부를 확인한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// User.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> targetUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//자기 자신일 경우 null 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>followings<span class=\"token punctuation\">.</span><span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Followings.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> targetUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> followings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>follow <span class=\"token operator\">-></span> follow<span class=\"token punctuation\">.</span><span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Follow.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFollowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> targetUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>targetUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//User.java 의 equals &amp; hashCode를 사용 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><strong>아무리 디버깅을 해봐도 비교하는 source 유저와 target 유저의 식별자(Id)가 같음에도 불구하고 <code class=\"language-text\">Follow.java</code>의 <code class=\"language-text\">isFollowing()</code>에서 false가 반환 되었다.</strong></li>\n<li>\n<p>그 원인은 <code class=\"language-text\">User.java</code>에서 오버라이드한 equals hashcode에 있었다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//(1) 중요한 포인트!!!! </span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>위 <strong>(1)</strong> 에서 <code class=\"language-text\">User</code>객체의 Id로 비교하기 이전에 두 객체가 같은 클래스인지 <code class=\"language-text\">o.getClass()</code>로 비교하고 있었다. 하지만 proxy 객체는 <code class=\"language-text\">getClass()</code> 로 비교하면 실제 entity와 같지 않기 때문에 <code class=\"language-text\">false</code>를 반환한다. </li>\n<li>따라서 프록시 객체와 실제 entity를 비교할때는 <code class=\"language-text\">instance of</code>를 사용해야한다. <br><a href=\"https://prolog.techcourse.co.kr/posts/1334\">JPA Proxy 참고링크</a></li>\n</ul>\n<br>\n<br>\n<h2 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h2>\n<ul>\n<li>생각한 해결방법은 2가지 이다. </li>\n<li>\n<p><code class=\"language-text\">Post</code>와 <code class=\"language-text\">Like</code>의 <code class=\"language-text\">fetch join</code> 시 <code class=\"language-text\">Like</code>의 <code class=\"language-text\">User</code> 까지 모두 <code class=\"language-text\">fetch join</code>으로 즉시로딩</p>\n<ul>\n<li>Post와 Like -> <code class=\"language-text\">@OneToMany</code> 관계</li>\n<li>Like와 User -> <code class=\"language-text\">@ManyToOne</code> 관계</li>\n<li>\n<p>위와 같은 연관관계는 두 번 fetch join 하여 Like의 User까지 즉시로딩 할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct p from Post p left join fetch p.likes.likes l left join fetch l.user where p.id = :postId\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findPostWithLikeUsers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>위와 같이 <code class=\"language-text\">User</code>까지 즉시로딩 한다면, <code class=\"language-text\">User</code>가 더 이상 proxy 객체가 아니기 때문에 <code class=\"language-text\">getClass()</code>를 해도 문제가 발생하지 않는다. </li>\n<li>하지만 지나치게 복잡한 연관관계를 즉시로딩 하는 것이며 JPQL에서 fetch join 시 별칭을 쓰는 것은 JPA 표준 스펙에 맞지 않기 때문에 추천하는 방법이 아니다. (Hibernate 구현상 가능하므로 할 수 있긴 하다.) <br>\n<a href=\"https://www.inflearn.com/questions/15876\">JPA fetch join 시 별칭 참고링크</a></li>\n</ul>\n<br>\n</li>\n<li>\n<p><code class=\"language-text\">User</code>의 <code class=\"language-text\">equals()</code> 메소드의 <code class=\"language-text\">getClass()</code> 비교 부분을 <code class=\"language-text\">instance of</code> 로 수정 </p>\n<ul>\n<li>\n<p><code class=\"language-text\">User.java</code>의 equals 메소드를 다음과 같이 수정하면 올바른 값을 반환한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 이 부분!!  </span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<ul>\n<li>JPA Proxy 객체에 대해서 학습했으나, 이론으로 알고 있던 부분을 직접 버그로 경험하며 학습할 수 있었다.</li>\n<li>디버깅 시 User 객체의 주소값이 ID가 같을 경우 같은 해시값으로 찍혔기 때문에 원인을 알기 더 어려웠다. </li>\n<li>또한 디버깅 포인트를 override 하여 IDE에서 자동으로 추가한 <code class=\"language-text\">equals()</code>에 걸 생각을 하지 못한 것도 디버깅을 어렵게 했던 포인트였다. </li>\n<li>개인적으로 <code class=\"language-text\">equals()</code>를 수정하는 두번째 해결방법을 추천하지만, override 한 메소드를 수정하는 것이 다른 팀원에게 충분히 공유되지 않으면 또다른 버그 포인트가 될 수 있다고 생각한다. (당연하게 생각하여 자세히 들여다보지 않는 부분이므로)</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">INTRO</a></li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9\">문제 상황</a></p>\n<ul>\n<li><a href=\"#entity-%EA%B5%AC%EC%A1%B0\">Entity 구조</a></li>\n<li><a href=\"#%EB%B2%84%EA%B7%B8-%EB%B0%9C%EC%83%9D\">버그 발생</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8\">발생 원인</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">해결 방법</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2021","title":"JPA 프록시 관련 버그 경험기","categories":"JPA 프로젝트","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-proxy-equals-bug/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/profile-active-profile/","nextSlug":"/spring-boot-test/","prevSlug":"/jpa-proxy-equals-bug/"}},"staticQueryHashes":["1073350324","2938748437"]}