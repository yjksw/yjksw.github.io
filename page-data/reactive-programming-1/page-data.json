{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/reactive-programming-1/",
    "result": {"data":{"cur":{"id":"1e4220f2-86cf-52b5-8dbe-703f6fa05f0d","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>트래픽이 증가하고 사용자가 기대하는 요청시간은 더 빠른 응답을 원하게 되면서 리액티브 프로그래밍이라는 개념이 대두가 되기 시작했다.</li>\n<li>Java 진영에서는 물론이고 현재 공부하고 있는 스프링 어플리케이션에서도 리액티브 개념을 구현한 모듈이 추가되고 활용되고 있다.</li>\n<li>리액티브 프로그래밍을 키워드 중심으로 알아본다. (선언형, 리액티브 스트림, pub-sub 구조, 비동기, 옵저버 패턴 등등)</li>\n<li>리액티브 프로그래밍이 주요 개념이 된 이유에 대해서 고민해본다.</li>\n</ul>\n<br>\n<h2 id=\"리액티브-프로그래밍이란\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"리액티브 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 리액티브 프로그래밍이란?</h2>\n<h3 id=\"reativex\" style=\"position:relative;\"><a href=\"#reativex\" aria-label=\"reativex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ReativeX</h3>\n<p><a href=\"https://reactivex.io/\">ReativeX</a>는 옵저버 스트림을 활용한 비동기 프로그래밍을 위한 API이다. 그리고 이것을 구현한 여러 구현체들이 있다.</p>\n<p>나 같은 경우는 자바 언어를 주로 사용하는데 자바 진영에서도 리액티브 API를 구현한 RxJava가 있고, 자바9 부터 리액티브 프로그래밍을 구현할 수 있는 Flow 클래스를 제공한다.</p>\n<br>\n<h3 id=\"reactive---무엇에-반응한다는-것인가\" style=\"position:relative;\"><a href=\"#reactive---%EB%AC%B4%EC%97%87%EC%97%90-%EB%B0%98%EC%9D%91%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"reactive   무엇에 반응한다는 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactive - 무엇에 반응한다는 것인가?</h3>\n<p>Reactive는 반응하다 라는 뜻이다. 리액티브 프로그래밍은 Publisher가 발행한 데이터(요청)에 대해서 반응을 하기 때문에 리액티브 프로그래밍이라고 한다.</p>\n<ul>\n<li>\n<p>데이터가 즉각 반응을 한다는 것은 무슨 뜻일까 ?</p>\n<p>기존 명령형 프로그램과 비교해보자. 기존 명령형 프로그래밍은 어떠한 기능을 어떻게 할 것인지에 대한 코드가 있고 이것을 하드웨어가 차례로 실행한다.</p>\n<p>리액티브 프로그래밍은 “데이터의 흐름”을 정의하고 데이터 스트림을 그 흐름에서 선언한대로 데이터를 처리하고 구독한 subscriber가 처리된 데이터에 대한 마지막 행위를 한다. (예, 콘솔에 출력한다 등등)</p>\n</li>\n</ul>\n<p>조금 이해하기 어렵다면 다음 그림을 보자.</p>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/63405904/144062234-b2c15364-5290-4f49-b7c0-fe7af972d5da.png\"></p>\n<ul>\n<li>\n<p>위 그림에서 Publisher는 Click Stream이다.</p>\n<p>Click Stream에서 발생된 데이터의 흐름에 반응하여 마지막 subscriber가 filter된 데이터를 처리한다.</p>\n<p>(위 그림에서 Subscriber까지 표시되지는 않았다)</p>\n</li>\n<li>\n<p>데이터 스트림은  map → filter 파이프라인을 거치며 정제되며 마지막 데이터 스트림을 구독자가 처리하는 것이 반응형 프로그래밍이다.</p>\n</li>\n<li>\n<p>데이터의 흐름에 따라서 데이터가 변한다면 즉각적으로 반응하여 다른 결과를 출력하게 되기 때문에 반응형 프로그래밍이라고 한다.</p>\n</li>\n</ul>\n<br>\n<h3 id=\"어떻게-반응할까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%98%EC%9D%91%ED%95%A0%EA%B9%8C\" aria-label=\"어떻게 반응할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 반응할까?</h3>\n<p>반응형 프로그래밍에서 등장하는 키워드를 살펴보자. 가장 대표적인 반응형 비동기 프로그래밍 API인 ReactiveX 홈페이지를 참고했다.</p>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/63405904/144062576-d4d01ae9-71d6-4feb-bb53-8f675a1938e6.png\"></p>\n<ol>\n<li>\n<p><strong>옵저버 패턴</strong></p>\n<p>첫번째 키워드는 옵저버 패턴이다.</p>\n<p>옵저버 패턴이란 특정 객체의 상태를 관찰하는 관찰자(observer)들을 등록하고 해당 객체에 상태변화가 있을 때마다 메서드를 통해서 객체가 자신에게 등록된 관찰자들에게 통지하는 디자인 패턴이다.</p>\n<p>(Pub/sub 모델로도 알려져있지만 완전히 동일한 것은 아니다. 차이점은 다음 [링크](<a href=\"https://jistol.github.io/software\">https://jistol.github.io/software</a> engineering/2018/04/11/observer-pubsub-pattern/)를 참고해보자.</p>\n<p>내가 자주 사용하는 언어인 자바에서도 멀티 스레드 환경에서 안정적으로 옵저버 패턴을 활용할 수 있는 인터페이스와 클래스를 제공한다.</p>\n<p>관찰 당하는 객체는 Observable이라는 클래스를 상속하여 사용할 수 있고, 관찰하는 객체들은 Observer 인터페이스를 구현할 수 있다. synchronized 키워드를 통해서 필요시 동시성을 제어한다. (백터를 조작하는 과정 등등)</p>\n</li>\n<li>\n<p><strong>Iterator 패턴</strong></p>\n<p>두번째 키워드는 이터레이터 패턴이다.</p>\n<p>이터레이터 패턴이란 컬렉션의 생김새나 구현방법을 노출시키지 않으면서 컬렉션 내부에 접근할 수 있는 패턴이다. <code class=\"language-text\">next()</code> 와 같은 것을 호출하는 것만으로 컬렉션의 다음 element에 접근할 수 있다. 즉, 일종의 pull 방식이다.</p>\n<p>리액티브 프로그래밍에 대해서 설명할 때 이터레이터 패턴이 등장하는 이유는 BackPressure 때문이다. Publisher가 Subscriber가 감당하기 어려운 만큼의 양을 push 할 수 있으니, Subscriber가 오버플로우 되지 않도록 하는 것이 backpressure이다.</p>\n<p>여기서 이터레이터 패턴을 사용하여 감당 가능한 만큼의 데이터를 요청(pull)하여 처리한다.</p>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/63405904/144062711-c1892c27-6b65-43a3-ba9d-59ae7526c50c.png\"></p>\n</li>\n<li>\n<p><strong>함수형 프로그래밍</strong></p>\n<p>세번째 키워드는 함수형 프로그래밍이다.</p>\n<p>함수형 프로그래밍의 핵심은 선언형 프로그래밍이라는 것이다. 즉, 어떻게 할 것인지에 대한 구구절절한 구현이 있으면 발생 가능한 사이드 이펙트가 많으니 선언형으로 무엇을 할지를 선언하고 해당 함수를 조합하여 구현하는 것이다.</p>\n<p>마틴 파울러는 함수형 프로그래밍을 “Functional Programming is programming without assignment statements”라고 말했다. 변수를 선언하고 대입하여 구현하는 기존 프로그래밍과 다르게 함수형 프로그래밍은 작은 문제를 해결하기 위한 여러 함수들을 조합하여 결과를 낸다.</p>\n<p>리액티브 스트림에서는 함수형 프로그래밍을 활용하여 데이터를 가공한다. 상단의 사진에 COMBINE 부분을 보면 어떤 느낌으로 사용하는지 알 수 있을 것이다.</p>\n</li>\n</ol>\n<br>\n<h2 id=\"왜-이렇게-뜨는-개념일까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%9C%A8%EB%8A%94-%EA%B0%9C%EB%85%90%EC%9D%BC%EA%B9%8C\" aria-label=\"왜 이렇게 뜨는 개념일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 왜 이렇게 뜨는 개념일까?</h2>\n<p>인터넷과 모바일이 보급되면서 사용자 관련 데이터와 트래픽은 점점 더 늘어나고 있다. 그렇기 때문에 기존에 전통적인 블록킹 동기 방식의 요청 처리는 사용자가 원하는 만큼이 속도를 내지도 못하고 처리량이 현저히 낮은 문제가 있다.</p>\n<ol>\n<li>\n<p><strong>기존의 요청 처리 방식</strong></p>\n<p>1개의 요청 당 1개의 스레드를 할당하여 처리한다.</p>\n<p>하지만 요청마다 스레드를 생성하는 것은 비용이 큰 작업이기 때문에 대부분 Thread pool을 사용하여 요청을 처리한다.</p>\n<p>특정 스레드가 할당된 요청이 블로킹 상태에 오래 머무르게 되고, thread pool에 있는 스레드를 모두 사용하면 결국 timeout이 발생하게 된다. 즉, 사용되지 않지만 점유되어 있는 스레드에 의한 비효율로 여러 요청을 빠르게 처리할 수 없다.(CPU는 일할 수 있음에도 불구하고 말이다!)</p>\n<ul>\n<li>\n<p>그렇다면 스레드 개수를 늘릴 수 없을까?</p>\n<p>스레드 개수를 늘리면 과도한 context switching이 발생하여 오히려 CPU utilization을 떨어뜨릴 수 있다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>리액티브 스트림의 요청 처리 방식</strong></p>\n<p>많은 요청을 처리하기 위해서 많은 스레드를 사용하지 않는다. (주로 CPU 코어 * 2 만큼만 만들어서 사용)</p>\n<p>이벤트 루프 기반의 비동기 논블로킹 방식을 사용하기 때문에 적은 수의 스레드로 많은 요청을 처리할 수 있으며 블로킹 상태에 스레드가 점유되어 낭비되는 일이 거의 없어진다.</p>\n<p>비동기/논블로킹이라면 호출되는 함수의 작업 완료 여부를 책임지지 않아도 되는 비동기와 호출된 함수로 넘어간 제어권이 바로 리턴되어 다른 일을 처리할 수 있도록 하는 논블로킹의 조합이다. 따라서 스트림을 블록하지 않고 비동기로 처리하면 CPU utilization을 극대화 할 수 있다.</p>\n</li>\n</ol>\n<br>\n<h2 id=\"헷갈리는-개념들-잡고가기\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%AC%EB%8A%94-%EA%B0%9C%EB%85%90%EB%93%A4-%EC%9E%A1%EA%B3%A0%EA%B0%80%EA%B8%B0\" aria-label=\"헷갈리는 개념들 잡고가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 헷갈리는 개념들 잡고가기</h2>\n<h3 id=\"reactive-stream-vs-reactive-programming-vs-reactive-system\" style=\"position:relative;\"><a href=\"#reactive-stream-vs-reactive-programming-vs-reactive-system\" aria-label=\"reactive stream vs reactive programming vs reactive system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactive Stream vs. Reactive Programming vs. Reactive System</h3>\n<ul>\n<li>위에 말한 특징들 대부분이 Reactive Stream이다.</li>\n<li>이런 Reactive Stream을 사용한 프로그램이 Reactive Programming이다.</li>\n<li>Reactive Programming은 연관 키워드로 Event-driven, Reactive System은 Message-driven 이 많이 등장한다. 즉 전자는 한 어플리케이션 관점이고 후자는 전체 시스템 아키텍쳐의 관점으로 바라보아야한다.</li>\n<li>여러 Reactive Programming 컴포넌트들을 모아놓았다고 Reactive System인 것은 아니다. Reactive Manifesto에 나온 리액티브 특징을 살린 시스템 아키텍쳐여야 Reactive System이라고 할 수 있을 것이다.</li>\n</ul>\n<br>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li>완전 새로운 개념이다 !! 마치 객체지향을 처음 공부했을 때처럼 실체가 있는 기술이 아니라 어떠한 형태의 프로그래밍 기법이니 더 개념 잡기가 어렵고 낯설었던 것 같다.</li>\n<li>면접을 보거나 프로젝트를 진행할 때 사용자를 고려하면 대량의 트래픽 처리와 동시성 문제는 빠지지 않는 주제인 것 같다.</li>\n<li>거의 모든 사람의 손에 모바일과 PC가 들려있으므로 리액티브 프로그래밍이 효율적인 요청처리와 동시성 측면에서도 좋은 해결책인 듯 싶다.</li>\n<li>이제 리액티브 프로그래밍의 기본 개념을 잡았으니 스프링 webflux에서 어떻게 이 개념을 활용하고 적용했는지 알아볼 수 있겠다!!</li>\n<li>모던 자바 인 액션과 자바의 정석에서도 자바의 리액티브 프로그래밍에 대해서 다루었다. 해당 부분을 읽고 정리해보는 것도 다음 목표이다. 관련 키워드는 Rx Java, Java Flow 등등이다. (모두 읽어보았으나 아직은 너무 어려웠다😭  추후 다시 도전)</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://sightstudio.tistory.com/14\">https://sightstudio.tistory.com/14</a></li>\n<li><a href=\"https://reactivex.io/\">https://reactivex.io/</a></li>\n<li>리액티브 매니페스토: <a href=\"https://reactivemanifesto.org/ko\">https://reactivemanifesto.org/ko</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">🌩 리액티브 프로그래밍이란?</a></p>\n<ul>\n<li><a href=\"#reativex\">ReativeX</a></li>\n<li><a href=\"#reactive---%EB%AC%B4%EC%97%87%EC%97%90-%EB%B0%98%EC%9D%91%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80\">Reactive - 무엇에 반응한다는 것인가?</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%98%EC%9D%91%ED%95%A0%EA%B9%8C\">어떻게 반응할까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%9C%A8%EB%8A%94-%EA%B0%9C%EB%85%90%EC%9D%BC%EA%B9%8C\">🌩 왜 이렇게 뜨는 개념일까?</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%AC%EB%8A%94-%EA%B0%9C%EB%85%90%EB%93%A4-%EC%9E%A1%EA%B3%A0%EA%B0%80%EA%B8%B0\">🌩 헷갈리는 개념들 잡고가기</a></p>\n<ul>\n<li><a href=\"#reactive-stream-vs-reactive-programming-vs-reactive-system\">Reactive Stream vs. Reactive Programming vs. Reactive System</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></p>\n</li>\n</ul>\n</div>","excerpt":"💡 Intro 트래픽이 증가하고 사용자가 기대하는 요청시간은 더 빠른 응답을 원하게 되면서 리액티브 프로그래밍이라는 개념이 대두가 되기 시작했다. Java 진영에서는 물론이고 현재 공부하고 있는 스프링 어플리케이션에서도 리액티브 개념을 구현한 모듈이 추가되고 활용되고 있다. 리액티브 프로그래밍을 키워드 중심으로 알아본다. (선언형, 리액티브 스트림, pub-sub 구조, 비동기, 옵저버 패턴 등등) 리액티브 프로그래밍이 주요 개념이 된 이유에 대해서 고민해본다. 🌩 리액티브 프로그래밍이란? ReativeX ReativeX는 옵저버 스트림을 활용한 비동기 프로그래밍을 위한 API이다. 그리고 이것을 구현한 여러 구현체들이 있다. 나 같은 경우는 자바 언어를 주로 사용하는데 자바 진영에서도 리액티브 API를 구현한 RxJava가 있고, 자바9 부터 리액티브 프로그래밍을 구현할 수 있는 Flow 클래스를 제공한다. Reactive - 무엇에 반응한다는 것인가? Reactive는 반응하다…","frontmatter":{"date":"November 30, 2021","title":"리액티브 시리즈 - 1. 리액티브 프로그래밍 기본","categories":"스프링 웹","author":"코다","emoji":"🍀"},"fields":{"slug":"/reactive-programming-1/"}},"next":{"id":"00e80243-2a3a-528a-8625-03c3c7bfbedb","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>JVM은 자바의 큰 장점 중 하나로 이 가상머신이 깔려있는 운영체제에서는 모두 동일하게 자바 클래스 파일이 실행될 수 있다.</li>\n<li>JVM의 기본 구조를 알아보자 🙌</li>\n</ul>\n<br>\n<h2 id=\"-jvm-메모리-구조\" style=\"position:relative;\"><a href=\"#-jvm-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\" jvm 메모리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 JVM 메모리 구조</h2>\n<p><strong>1) Class Loader 2) Execution Engine 3) Garbage Collector 4) Runtime Data Area</strong> 4가지로 나뉘어져 있다.</p>\n<h3 id=\"class-loader\" style=\"position:relative;\"><a href=\"#class-loader\" aria-label=\"class loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Loader</h3>\n<ul>\n<li>JVM 내로 클래스 파일을 로드하고 링크를 통해 배치하는 작업을 수행한다.</li>\n<li>런타임 시에 동적으로 클래스를 로드한다.</li>\n</ul>\n<h3 id=\"execution-engine\" style=\"position:relative;\"><a href=\"#execution-engine\" aria-label=\"execution engine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Execution Engine</h3>\n<ul>\n<li>클래스 로더가 Runtime Data Area에 배치한 바이트 코드들을 명령어 단위로 읽어서 실행하는 작업을 수행한다.</li>\n<li>최초 JVM에서는 인터프리터 방식이어서 느렸지만 JIT 컴파일러로 변경되면서 실행이 빠르다는 장점이 있다.</li>\n<li>모든 코드 JIT으로 하지 않고 인터프리터로 하다가 일정한 기준이 넘어가면 JIT 컴파일러 방식으로 실행한다.\n<ul>\n<li>한번 읽어서 기계어로 변경한 소스코드는 변역하지 않는다.</li>\n<li>저장소에 저장하여 반복되는 코드는 한꺼번에 컴파일하여서 사용한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"garbage-collector\" style=\"position:relative;\"><a href=\"#garbage-collector\" aria-label=\"garbage collector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Garbage Collector</h3>\n<ul>\n<li>힙 메모리 영역에 객체 중 더이상 참조되지 않는 객체들을 제거하는 역할을 한다.\n<ul>\n<li>Reference Counting 혹은 Mark-and-sweep 방식을 사용</li>\n<li>Minor GC(eden, survivor1, survivor2)와 Major GC(old)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"runtime-data-area\" style=\"position:relative;\"><a href=\"#runtime-data-area\" aria-label=\"runtime data area permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Runtime Data Area</h3>\n<ul>\n<li>애플리케이션이 실행할 때 사용되는 데이터를 적재하는 영역\n<ul>\n<li><strong>Method Area</strong> → 모든 스레드가 공유하는 메모리 영역으로 클래스, 인터페이스, 메소드, 필드, static 변수 등의 바이트 코드를 보관</li>\n<li><strong>Heap Area</strong> → 모든 스레드가 공유하며 new 키워드로 생성된 객체와 배열이 생성되는 영역</li>\n<li><strong>Stack Area</strong> → 메서드 호출시마다 스택 프레임을 생성하여 매개변수, 지역변수, 리턴 값, 연산 시 값들을 임시로 저장하며 메서드 수행이 끝나면 프레임을 삭제</li>\n<li><strong>PC Register</strong> → 쓰레드 시작 시 생성되며 스레드마다 하나씩 존재하고 무슨 명령어를 실행할지 명령의 주소 보관</li>\n<li><strong>Native Method Stack</strong> → 자바 외 언어로 작성된 네이티브 코드를 저장하는 메모리</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-느낀-점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\" 느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li>JVM의 구조를 알고 있어야지 자바 코드가 실행되는 부분이 일종의 ‘매직’처럼 남아있지 않고 구체화 되어서 그려질 것 같다.</li>\n<li>공부를 할수록 그냥 되는줄 알았던 부분들이 차츰차츰 명료해지는 것 같다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#-jvm-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\">🌩 JVM 메모리 구조</a></p>\n<ul>\n<li><a href=\"#class-loader\">Class Loader</a></li>\n<li><a href=\"#execution-engine\">Execution Engine</a></li>\n<li><a href=\"#garbage-collector\">Garbage Collector</a></li>\n<li><a href=\"#runtime-data-area\">Runtime Data Area</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 17, 2021","title":"JVM 구조 알아보기","categories":"자바","author":"코다","emoji":"✊"},"fields":{"slug":"/java-jvm/"}},"prev":{"id":"4d729ffe-1a2d-5cf0-8549-e13c85bfc72a","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>개발바닥의 김영한님 편을 보다가 꼭 추천하실 책이 김창준님의 <em>함께 자라기</em>라고 하셔서 바로 주문했다.</li>\n<li>이 책을 읽으면서 얻고 싶은 것은 3가지였다.\n<ul>\n<li>내가 지금 성장하고 있는 방법이 잘 하고 있는 방법인가</li>\n<li>요즘 그렇게도 강조하는 ‘함께’라는 것이 개발자에게는 어떤 의미인가</li>\n<li>최근 진행한 7명 팀 프로젝트를 더 잘 할 수 있는 부분은 무엇이 있었을까</li>\n</ul>\n</li>\n<li>이 글은 첫번째 파트인 <strong>자라기</strong> 파트이다.</li>\n</ul>\n<br>\n<h2 id=\"자라기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%9D%BC%EA%B8%B0\" aria-label=\"자라기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 자라기</h2>\n<p>시간에 비례하여 실력이 상승하지 않는다. 중요한 것은 얼마나 오랜 기간 학습했느냐보다 얼마나 많은 <strong>의도적 수련</strong>을 했는지다. <strong>업무를 하면서 의도적 수련을 할 수 있는 방법은 애자일 철학을 활용하는 것이다.</strong></p>\n<p>애자일에서 학습은 소프트웨어 개발에 큰 병목 중 하나이다. 그 이유는 일반 프로젝트에서 피드백의 주기가 느려서 결정을 내리고 학습을 한 후 다시 피드백을 받응ㄹ 시기에 이전에 내린 결정에 대한 이유를 기억하기 어렵다.</p>\n<p>하지만 애자일 프로젝트에서는 당장 한 행동에 대한 피드백을 10분, 한시간, 하루 주기로 빠르고 지속적으로 받아 다음 주기에 교정할 수 있다.</p>\n<p><strong>1) 피드백을 짧은 주기로 얻는 것 2) 실수를 교정할 기회가 있는 것</strong>이 학습에 중요한 요소이다.</p>\n<p>실력이 좋은 사람은 당시에 어떤 결정을 어떠한 이유로 내렸는지 자세히 기록하고 나중에 다시 확인하여 피드백을 반드시 얻는다.</p>\n<br>\n<h3 id=\"자기계발은-복리로-돌아온다\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C%EC%9D%80-%EB%B3%B5%EB%A6%AC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4\" aria-label=\"자기계발은 복리로 돌아온다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자기계발은 복리로 돌아온다</h3>\n<p>꾸준히 자기계발에 시간을 쏟으면 그것이 1년, 2년 뒤에 성장해서 돌아온다. 지식이나 능력은 복리로 이자가 붙는다.</p>\n<p>이러한 복리의 원칙은 개인 뿐 아니라 조직에도 연관이 있다. 복리 조직은 첫 주기 만든 결과물로 다음 주기에 더 좋은 위치에서 다음 결과물을 만들어낸다. 결과물이 다음 단계의 도구가 된다.</p>\n<p>A, B, C 작업으로 진행해라. A는 첫 작업, B는 개선하는 작업, C는 개선 작업을 개선하는 것이다.</p>\n<p>그러기 위해서는 개인이나 조직에서 더하기보다 곱하기를 해야한다.</p>\n<ol>\n<li>자신이 이미 가지고 있는 것들을 잘 활용하라\n<ul>\n<li>새로운 것을 유입하기보다 이미 가지고 있는 것을 연결하여 시너지 효과가 나게 한다.</li>\n<li>새로운 것은 이미 가지고 있는 것과 연결하도록 해라</li>\n</ul>\n</li>\n<li>외부 물질을 체화하라\n<ul>\n<li>하지만 내부 순환만 하면 수렴할 위험이 있기 때문에 외부 자극을 받으면 좋다.</li>\n<li>하지만 외부 자극을 빨리 자기화 해야 한다.</li>\n</ul>\n</li>\n<li>자신을 개선하는 프로세스에 대해 생각해 보라\n<ul>\n<li>A를 돌아보는 회고/반성 활동을 주기적으로 해라.</li>\n<li>나를 개선하는 과정을 어떻게 개선할지 고민해라.</li>\n</ul>\n</li>\n<li>피드백을 자주 받아라\n<ul>\n<li>사이클 주기를 짧게 두어서 작은 실험을 해 순환율을 높여라.</li>\n<li>일찍, 자주 실패해라. 실패에서 학습하라</li>\n</ul>\n</li>\n<li>자신의 능력을 높여주는 도구와 환경을 점진적으로 만들어라.\n<ul>\n<li>완벽한 환경에서 시작하기 보다 점진적으로 자신의 환경을 개선시켜라.</li>\n<li>완벽한 환경은 어느날 갖추어지기는 어렵다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"학습-프레임-vs-실행-프레임\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%ED%94%84%EB%A0%88%EC%9E%84-vs-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A0%88%EC%9E%84\" aria-label=\"학습 프레임 vs 실행 프레임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 프레임 vs. 실행 프레임</h3>\n<p>학습 프레임은 학습을 하고 성장하기 위한 것에 초점이 맞추어져 있고, 실행 프레임은 잘하고자 하는 것에 초점이 맞추어져 있다. 실행 프레임은 목표를 달성하고 나면 더이상 이야기하지 않고, 학습 프레임은 지속적으로 관심을 가지고 하는 경향이 있다.</p>\n<p>업무를 하거난 학습하기 어려운 조건이라고 하더라도 학습과 성장의 기회를 찾고 그 조건에서 자신에게 유리한 조건을 찾는 사람이 있다.</p>\n<p>“업무적으로 꼭 해야하는 건 아니지만 당신이 도와주는 사람은 누구이고, 또 당신이 도움을 요청하는 사람은 누구입니까?”라고 했을 때 업무 성과가 좋은 사람들이 더 좋은 대답을 한다.</p>\n<p><strong>똑같은 1년차도, 1년차 밖에 되지 않아서 혼자 코드와 책을 보며 공부하는 사람이 있고, 1년차 밖에 되지 않아서 많은 사람들에게 물어보고 많은 스터디를 하고 부딪히며 도움을 주려고 하는 사람이 있다. 후자가 더 많은 잠재력이 있다.</strong></p>\n<br>\n<h3 id=\"달인이-되는-비결\" style=\"position:relative;\"><a href=\"#%EB%8B%AC%EC%9D%B8%EC%9D%B4-%EB%90%98%EB%8A%94-%EB%B9%84%EA%B2%B0\" aria-label=\"달인이 되는 비결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>달인이 되는 비결</h3>\n<ul>\n<li>명확한 동기</li>\n<li>피드백 제때 받기</li>\n</ul>\n<br>\n<h3 id=\"전문성을-높이는-방법\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%AC%B8%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"전문성을 높이는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전문성을 높이는 방법</h3>\n<ul>\n<li>타당성(어떠한 일을 하는데 규칙이나 인과관계)과 피드백이 있어야 한다.</li>\n<li>일하는 방식과 개발하는 방식을 바꿔서 타당성과 피드백을 높여야 한다.\n<ul>\n<li>타당성을 높이기 위해 변수를 제한하고 실험을 하면서 규칙성과 인과관계를 찾으려고 노력해야한다.</li>\n<li>상사, 고객 등에게 적극적으로 피드백을 요청한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"당신이-제자리걸음인-이유\" style=\"position:relative;\"><a href=\"#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%9D%B8-%EC%9D%B4%EC%9C%A0\" aria-label=\"당신이 제자리걸음인 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>당신이 제자리걸음인 이유</h3>\n<ul>\n<li>실력을 높이기 위해서는 <strong>의도적 수련</strong>이 중요하다.\n<ul>\n<li>의도적 수련이 되려면 현재 나의 실력과 작업의 난이도가 비슷해야한다.</li>\n<li>난이도와 실력이 엇비슷해야 <strong>몰입</strong>을 경험할 수 있다.</li>\n<li>i + 1 처럼 딱 한단계 높은 수준으로 학습해야 유의미하게 진전한다.</li>\n</ul>\n</li>\n<li>실력이 늘지 않는 이유는 너무 난이도가 낮아 지루한 환경에 있거나 너무 어려워 의욕을 잃는 환경에 있기 때문이다. 뛰어난 사람들은 자신의 실력보다 조금 더 어려운 것에 끝임없이 도전한다.</li>\n</ul>\n<br>\n<h3 id=\"제자리걸음에서-벗어나기\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0\" aria-label=\"제자리걸음에서 벗어나기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제자리걸음에서 벗어나기</h3>\n<p>현재 난이도가 낮아서 지루함을 느끼는 경우</p>\n<ol>\n<li>실력 낮추기: 평소에 쓰는 보조도구 없애거나 실력을 발휘하기 어려운 환경 만들어서 도전하기</li>\n<li>난이도 높이기: 남들보다 일을 더 효율적으로 하기 위해 직접 나만의 도구 만들어서 활용하기 등등</li>\n</ol>\n<p>현재 난이도가 높아서 불안함을 느끼는 경우</p>\n<ol>\n<li>실력 높이기:\n<ol>\n<li>사회적 접근: 나보다 뛰어난 전문가의 도움을 받기 (인터넷, 책, 상사 등등)</li>\n<li>도구적 접근: 좋은 도구의 도움 받기. 디버거, 코드 분석툴, 라이브러리 등등</li>\n<li>내관적 접근: 비슷한 일을 했던 경험을 되살려 비유적으로 문제를 해결</li>\n</ol>\n</li>\n<li>난이도 낮추기:\n<ol>\n<li>먼저 자신이 맡은 일의 가장 간단한 아기 버전을 첫번째 목표로 삼기. 낮은 난이도에 먼저 도전한 그룹이 더 정확도가 높다.</li>\n</ol>\n</li>\n</ol>\n<br>\n<h3 id=\"동적인-균형\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EC%9D%B8-%EA%B7%A0%ED%98%95\" aria-label=\"동적인 균형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적인 균형</h3>\n<p>메타인지 전략: 난이도와 실력은 계속 바뀐다. 중요한 것은 자신의 상태(지루한지 불안한지)를 지속적으로 체크하고 알아차리는 것이 꼭 필요하다.</p>\n<br>\n<h3 id=\"프로그래밍-언어-배우기의-달인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%9D%98-%EB%8B%AC%EC%9D%B8\" aria-label=\"프로그래밍 언어 배우기의 달인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 언어 배우기의 달인</h3>\n<p><strong>인지적 작업 분석을 한다.</strong> 프로그래밍 언어를 배울 때 어떻게 효과적으로 배울 수 있을까?</p>\n<ol>\n<li><strong>튜토리얼을 읽을 때 뭘 만들지 생각하고 읽는다.</strong>\n<ul>\n<li>적극적 읽기를 한다 - 작성할 프로그램을 염두에 두고 읽다가 프로그램을 만들 수 있으면 멈추고 만든 후에 다음에 만들 것을 생각하고 돌아온다. 무언가를 읽을 때 구체적인 질문이나 목적을 가지고 있는 방법이다.</li>\n</ul>\n</li>\n<li>공부할 때 표준 라이브러리 소스코드를 읽는다.\n<ul>\n<li>실제 해당 언어의 스타일을 따르는 사용례이므로 해당 언어의 표준 라이브러리 코드를 읽는 것이 좋다.</li>\n</ul>\n</li>\n<li>공부 중 다른 사람의 코드에 내가 필요한 기능을 추가한다.\n<ul>\n<li>자신이 필요한 기능을 직접 추가하여 사용해보는 것이다.</li>\n<li>이때 중요한 것은 초기 단계에 내가 추가할 수 있는 작고 간단한 추가 기능을 생각해내는 것이다.</li>\n</ul>\n</li>\n</ol>\n<p>이렇듯 이미 잘하고 있는 사람에게서 많은 것을 배울 수 있다. 하지만 전문가에게 단순히 잘하는 방법에 대해서 물어보면 유의미한 대답을 얻기는 힘들다. <strong>구체적인 사건에 대해서 말하도록 유도</strong>하고 그 안에서 잘하는 방법을 파악할 수 있도록 이끌어내는 것도 중요하다. (예를들어 제일 최근에 배운 언어는 무엇이고 어떻게 학습했는지 물어보는 것.)</p>\n<br>\n<h3 id=\"실수는-예방하는-것이-아니라-관리하는-것이다\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%EB%8A%94-%EC%98%88%EB%B0%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"실수는 예방하는 것이 아니라 관리하는 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수는 예방하는 것이 아니라 관리하는 것이다</h3>\n<p><strong>실수 예방</strong>은 실수가 생기지 않도록 계속 주의하는 것이다.</p>\n<p><strong>실수 관리</strong>는 실수를 했을 때 그것이 나쁜 결과가 되기 전에 얼른 발견하여 고치고 그것에 대해서 학습하는 것이다.</p>\n<p>실수 예방 문화에서는 실수가 일어나면 당사자를 비난하고 처벌하여 협력하거나 실수에 대해서 논의하기를 꺼리게 된다. 실수 관리는 나쁜 결과 이전에 회복하도록 돕고, 실수를 공개하고, 그것에 대해서 이야기하며 고치도록 하는 분위기가 형성된다.</p>\n<p>다양한 실수를 경험하고 그 사례를 배워서 어떻게 대처해야하는지 배우는 것이 더 중요하다. 예방법보다 대처법을 배우자.</p>\n<br>\n<h3 id=\"나홀로-전문가에-대한-미신\" style=\"position:relative;\"><a href=\"#%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AF%B8%EC%8B%A0\" aria-label=\"나홀로 전문가에 대한 미신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나홀로 전문가에 대한 미신</h3>\n<ul>\n<li>좋은 기술에 대한 전문가가 가서 그것을 적용하면 성공적으로 변화가 이루어질 것이라고 생각하는 것은 미신이다.</li>\n<li>성공적으로 좋은 기술이 한 사람에 의해서 어떤 팀에 전파가 되기 위해서는 <strong>사회적 자본과 기술</strong>이 필요하다.\n<ul>\n<li>팀원들을 설득하고 주변에 물어봐서 도움을 받을 수 있어야 한다.</li>\n<li>주변에서 그것이 왜 필요하고 좋은지 인지하지 못한다면 아무리 좋은 것이라도 적용하게 되기 힘들다.</li>\n</ul>\n</li>\n<li>사람 사이에는 신뢰가 있어야 하며 그것으로 인해 변화를 일으킬 수 있다. 그 신뢰가 사회적 자본이다.\n<ul>\n<li><strong>사회적 기술이 뛰어나서 사람 사이에 신뢰를 잘 구축하며 커뮤니케이션한다.</strong></li>\n</ul>\n</li>\n<li><strong>따라서 전문가는 기술에 더해서 사회적 자본과 사회적 기술이 뛰어난 사람이다 ‼️</strong>\n<ul>\n<li>뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓴다.</li>\n<li>전문가는 고독한 천재가 아니다.</li>\n</ul>\n</li>\n<li>어떤 기술적 지식을 전달할 때 사회적 맥락 속에서 가르치고 경험하게 하도록 노력해야한다.\n<ul>\n<li>도움받기, 피드백 주고받기, 영향력 미치기, 가르치고 배우기, 위임하기 등등.</li>\n</ul>\n</li>\n<li>그 조직에 신뢰를 받아야지 필요한 기술을 전파하고 적용할 수 있다. 프로그래밍 능력 중 커뮤니케이션은 필수 부분이다.</li>\n</ul>\n<br>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li><strong>잦은 피드백과 실수를 교정하는 것!!</strong> 자라기 파트를 관통하는 두 키워드이다 <strong>.</strong></li>\n<li>스스로에 대한 회고, 다른사람이 주는 피드백, 실수를 했을 때 자책보다 문제에 집중하여 실수를 관리하는 것이 매우 중요하다.</li>\n<li>나는 내 스스로를 좀 몰아세우면서 학습하는 스타일인데, 개발은 그렇게 학습했을 때 프로그래밍에 대한 흥미만 떨어지고 추진력을 얻지 못했다. 이 책에서 말한 것처럼 적절한 난이도에 메타인지와 점진적인 개선을 통해서 멘탈도 관리하며 성장하는 것이 중요한 것 같다는 것이 절실히 느껴졌다.</li>\n<li>마지막에 책에서 “뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓴다”, “이제는 프로그래밍을 잘한다는 정의 안에 의사소통 능력을 그 일부로 보게 된 겁니다” 라는 문장이 굉장히 임팩트 있었다.\n<ul>\n<li>기술에는 사회적 자본(신뢰)이 뒷받침 되어야 한다. 그렇지 않으면 해당 기술이 얼마나 좋은지는 소용이 없어질 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%9D%BC%EA%B8%B0\">🌱 자라기</a></p>\n<ul>\n<li><a href=\"#%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C%EC%9D%80-%EB%B3%B5%EB%A6%AC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4\">자기계발은 복리로 돌아온다</a></li>\n<li><a href=\"#%ED%95%99%EC%8A%B5-%ED%94%84%EB%A0%88%EC%9E%84-vs-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A0%88%EC%9E%84\">학습 프레임 vs. 실행 프레임</a></li>\n<li><a href=\"#%EB%8B%AC%EC%9D%B8%EC%9D%B4-%EB%90%98%EB%8A%94-%EB%B9%84%EA%B2%B0\">달인이 되는 비결</a></li>\n<li><a href=\"#%EC%A0%84%EB%AC%B8%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\">전문성을 높이는 방법</a></li>\n<li><a href=\"#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%9D%B8-%EC%9D%B4%EC%9C%A0\">당신이 제자리걸음인 이유</a></li>\n<li><a href=\"#%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0\">제자리걸음에서 벗어나기</a></li>\n<li><a href=\"#%EB%8F%99%EC%A0%81%EC%9D%B8-%EA%B7%A0%ED%98%95\">동적인 균형</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%9D%98-%EB%8B%AC%EC%9D%B8\">프로그래밍 언어 배우기의 달인</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%EB%8A%94-%EC%98%88%EB%B0%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\">실수는 예방하는 것이 아니라 관리하는 것이다</a></li>\n<li><a href=\"#%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AF%B8%EC%8B%A0\">나홀로 전문가에 대한 미신</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 03, 2021","title":"함께 자라기 🌱 읽자 - Part 1. 자라기","categories":"책","author":"코다","emoji":"🧸"},"fields":{"slug":"/growing-together-1/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/reactive-programming-1/","nextSlug":"/java-jvm/","prevSlug":"/growing-together-1/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}