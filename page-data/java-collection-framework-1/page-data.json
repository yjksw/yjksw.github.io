{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/java-collection-framework-1/",
    "result": {"data":{"cur":{"id":"39669800-a8a1-59fe-b30a-a447fd689c46","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li><strong>데이터의 그룹을 저장하는 클래스들을 표준화한 프로그래밍 방식</strong></li>\n<li>컬렉션 프레임워크는 다수의 데이터를 다루는 여러 클래스를 제공하여 개발자의 부담을 덜어준다.</li>\n<li>인터페이스와 다형성을 이용해서 객체지향적으로 설계가 되어 있기 때문에 추상적이고 재사용성이 높은 좋은 프레임워크이다.</li>\n</ul>\n<br>\n<h2 id=\"핵심-인터페이스\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"핵심 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 핵심 인터페이스</h2>\n<p>컬렉션에 담기는 데이터를 크게 3가지로 나누어 각각을 인터페이스로 정의해두었다. 그리고 3가지 중 List, Set의 공통점을 뽑아 따로 인터페이스로 추상화 되어 있다.</p>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/63405904/144552104-6d0d4ba5-92c9-464a-8e14-3580a0972f6c.png\"></p>\n<p>각 인터페이스와 특징은 다음과 같다.</p>\n<ol>\n<li>List: 순서가 있으며 중복이 허용된 데이터의 집합\n<ul>\n<li>ArrayList, LinkedList, Stack, Vector, etc.</li>\n</ul>\n</li>\n<li>Set: 순서가 없으며 중복을 허용하지 않는 데이터의 집합\n<ul>\n<li>HashSet, TreeSet, etc.</li>\n</ul>\n</li>\n<li>Map: 키와 값의 쌍으로 이루어진 데이터의 집합이며 순서를 유지하지 않으며 키는 중복을 허용하지 않음\n<ul>\n<li>HashMap, TreeMap, Hashtable, etc.</li>\n</ul>\n</li>\n</ol>\n<p>모든 컬렉션 클래스는 위 3개의 인터페이스 중 하나를 구현하고 있으며 해당 인터페이스의 이름이 클래스명에 포함되어 있다. (예외로 Vector, Hashtable, Stack 같이 이전에 이미 존재하던 것들은 이름에 인터페이스명을 포함하고 있지 않기도 하다. 기존 호환을 위해 남겨져 있기는 하나 되도록 새로 정의된 컬렉션 클래스를 쓰는 것을 추천한다.)</p>\n<h3 id=\"collection-인터페이스\" style=\"position:relative;\"><a href=\"#collection-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"collection 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection 인터페이스</h3>\n<p>컬렉션 클래스에 저장된 데이터를 읽고, 추가하고 삭제하는 등 컬렉션을 다루는 기본적인 메서드들을 정의</p>\n<p>예시)</p>\n<ul>\n<li>add, addAll, clear, contains, equals, isEmpty, remove, etc.</li>\n</ul>\n<h3 id=\"list-인터페이스\" style=\"position:relative;\"><a href=\"#list-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"list 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List 인터페이스</h3>\n<ul>\n<li>상속계층도</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/144552206-76fe42b0-368c-4c8c-a4b3-2907d8c1ac14.png\"></p>\n<h3 id=\"set-인터페이스\" style=\"position:relative;\"><a href=\"#set-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"set 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set 인터페이스</h3>\n<ul>\n<li>상속계층도</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/144552215-20cedfd3-3a44-4d56-ab5a-0f69b24fa62d.png\"></p>\n<h3 id=\"map-인터페이스\" style=\"position:relative;\"><a href=\"#map-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"map 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map 인터페이스</h3>\n<ul>\n<li>상속계층도</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/144552224-6c84a3c4-28cf-4608-8d19-aad933cfa988.png\"></p>\n<ul>\n<li>값을 반환하는 <code class=\"language-text\">values()</code> 의 반환 타입은 Collection이고, <code class=\"language-text\">keySet()</code>의 반환 타입은 Set이다. 전자는 중복을 허용하고 후자는 중복을 허용하지 않는다.</li>\n</ul>\n<h3 id=\"mapentry-인터페이스\" style=\"position:relative;\"><a href=\"#mapentry-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"mapentry 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map.Entry 인터페이스</h3>\n<ul>\n<li>Map 인터페이스 내부에는 Map.Entry 라는 인터페이스가 하나 더 있다.</li>\n<li>Map에 저장되는 <strong>key-value 쌍을 다루기 위해 내부적으로 정의한 인터페이스</strong>이다.</li>\n<li>객체지향적으로 설계하도록 유도한 인터페이스이며, Map 인터페이스를 구현하면 Map.Entry 인터페이스도 함께 구현해야한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token class-name\">K</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">V</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">V</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"arraylist\" style=\"position:relative;\"><a href=\"#arraylist\" aria-label=\"arraylist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 ArrayList</h2>\n<ul>\n<li>\n<p>Object 배열을 이용하여 순차적으로 데이터를 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractList</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomAccess</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">transient</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elementData<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"왜-code-classlanguage-textelementdatacode-는-code-classlanguage-texttrasientcode-설정이-되어-있을까-\" style=\"position:relative;\"><a href=\"#%EC%99%9C-code-classlanguage-textelementdatacode-%EB%8A%94-code-classlanguage-texttrasientcode-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%90%98%EC%96%B4-%EC%9E%88%EC%9D%84%EA%B9%8C-\" aria-label=\"왜 code classlanguage textelementdatacode 는 code classlanguage texttrasientcode 설정이 되어 있을까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 <code class=\"language-text\">elementData</code> 는 <code class=\"language-text\">trasient</code> 설정이 되어 있을까? 🤔</h3>\n<p>우선 <code class=\"language-text\">transient</code>는 해당 클래스를 직렬화 할 때 직렬화 대상이 되지 않도록 하는 키워드이다. 그럼 핵심 데이터를 담는 <code class=\"language-text\">elementData</code>가 <code class=\"language-text\">transient</code> 설정이 되어 있다면 직렬화 대상에서 제외가 될 텐데 왜 이런 설정이 되어 있을까?</p>\n<p>우선 짚고 넘어가고 싶은 것은 직렬화는 좋은 기술이지만 고려해야할 부분들이 매우 많은 까다로운 기술이라는 것이다. 자세한 것은 다음 <a href=\"https://www.youtube.com/watch?v=3iypR-1Glm0\">링크</a>를 참고해보자.</p>\n<p>따라서 ArrayList 클래스를 보면 <code class=\"language-text\">serialize</code>, <code class=\"language-text\">deserialize</code> 하는 메소드인 <code class=\"language-text\">writeObject()</code>, <code class=\"language-text\">readObject()</code>를 직접 구현하고 있다.</p>\n<h3 id=\"배열의-초기-크기는-어떻게-산정이-될까-\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B4%88%EA%B8%B0-%ED%81%AC%EA%B8%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%B0%EC%A0%95%EC%9D%B4-%EB%90%A0%EA%B9%8C-\" aria-label=\"배열의 초기 크기는 어떻게 산정이 될까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 초기 크기는 어떻게 산정이 될까? 🤔</h3>\n<p><strong>초기 크기를 지정한 경우의 내부 구현을 살펴보자.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>initialCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData <span class=\"token operator\">=</span> EMPTY_ELEMENTDATA<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal Capacity: \"</span><span class=\"token operator\">+</span> initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>초기 값이 0 이라면 <code class=\"language-text\">EMTPY_ELEMENTDATA</code> 라는 것을 지정하고 아니라면 입력 값 크기 만큼의 배열을 선언한다.</li>\n</ul>\n<p><strong>초기 크기를 지정하지 않은 경우의 내부 구현을 살펴보자.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData <span class=\"token operator\">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>빈 Object 배열을 선언하여 할당한다.</li>\n<li>하지만 주로 ArrayList를 활용할 때 초기 크기 뿐 아니라 이후에도 크기를 정해주지 않았으며 그냥 element를 추가만 하는 경우가 많았다.</li>\n<li>그러면 언제 배열의 크기를 재할당 하는 것일까? 다음 코드를 살펴보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elementData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n        elementData <span class=\"token operator\">=</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elementData<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// element를 add 하는 로직</span>\n    modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> elementData<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> elementData <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> <span class=\"token function\">newCapacity</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//추가 공간이 필요한 경우 capacity를 늘리는 로직 </span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ArrayList는 내부적으로 size라는 인스턴스 변수를 두고 몇개의 요소들이 있는지 트랙킹한다. 새로운 요소를 추가할 때 이 추가 공간이 있는지 확인하고 없다면 <code class=\"language-text\">grow()</code> 메소드를 호출한다.</li>\n<li><code class=\"language-text\">grow()</code>는 <code class=\"language-text\">Arrays.copyOf()</code>를 사용하여 새로운 크기 만큼의 배열을 생성하고 기존 데이터를 옮긴다.</li>\n<li>시스템 적으로 오버헤드가 많고 처리시간이 많이 소요되는 작업이므로 ArrayList를 사용할때는 저장할 개수보다 조금 더 여유있기 기본 사이즈를 할당하는 것이 좋다.</li>\n</ul>\n<br>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li>내용 추가 예정 ‼️ 안 끝남 주의 ‼️</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li>자바의 정석</li>\n<li>Java 내부구현 코드</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B5%EC%8B%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">🌩 핵심 인터페이스</a></p>\n<ul>\n<li><a href=\"#collection-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">Collection 인터페이스</a></li>\n<li><a href=\"#list-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">List 인터페이스</a></li>\n<li><a href=\"#set-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">Set 인터페이스</a></li>\n<li><a href=\"#map-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">Map 인터페이스</a></li>\n<li><a href=\"#mapentry-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">Map.Entry 인터페이스</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#arraylist\">🌩 ArrayList</a></p>\n<ul>\n<li><a href=\"#%EC%99%9C-elementdata-%EB%8A%94-trasient-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%90%98%EC%96%B4-%EC%9E%88%EC%9D%84%EA%B9%8C-\">왜 <code class=\"language-text\">elementData</code> 는 <code class=\"language-text\">trasient</code> 설정이 되어 있을까? 🤔</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B4%88%EA%B8%B0-%ED%81%AC%EA%B8%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%B0%EC%A0%95%EC%9D%B4-%EB%90%A0%EA%B9%8C-\">배열의 초기 크기는 어떻게 산정이 될까? 🤔</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></p>\n</li>\n</ul>\n</div>","excerpt":"💡 Intro 데이터의 그룹을 저장하는 클래스들을 표준화한 프로그래밍 방식 컬렉션 프레임워크는 다수의 데이터를 다루는 여러 클래스를 제공하여 개발자의 부담을 덜어준다. 인터페이스와 다형성을 이용해서 객체지향적으로 설계가 되어 있기 때문에 추상적이고 재사용성이 높은 좋은 프레임워크이다. 🌩 핵심 인터페이스 컬렉션에 담기는 데이터를 크게 3가지로 나누어 각각을 인터페이스로 정의해두었다. 그리고 3가지 중 List, Set의 공통점을 뽑아 따로 인터페이스로 추상화 되어 있다. 각 인터페이스와 특징은 다음과 같다. List: 순서가 있으며 중복이 허용된 데이터의 집합 ArrayList, LinkedList, Stack, Vector, etc. Set: 순서가 없으며 중복을 허용하지 않는 데이터의 집합 HashSet, TreeSet, etc. Map: 키와 값의 쌍으로 이루어진 데이터의 집합이며 순서를 유지하지 않으며 키는 중복을 허용하지 않음 HashMap, TreeMap, Hashtab…","frontmatter":{"date":"December 03, 2021","title":"JCF 파헤치기 1 - 기본 & ArrayList","categories":"자바","author":"코다","emoji":"✊"},"fields":{"slug":"/java-collection-framework-1/"}},"next":{"id":"4d729ffe-1a2d-5cf0-8549-e13c85bfc72a","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>개발바닥의 김영한님 편을 보다가 꼭 추천하실 책이 김창준님의 <em>함께 자라기</em>라고 하셔서 바로 주문했다.</li>\n<li>이 책을 읽으면서 얻고 싶은 것은 3가지였다.\n<ul>\n<li>내가 지금 성장하고 있는 방법이 잘 하고 있는 방법인가</li>\n<li>요즘 그렇게도 강조하는 ‘함께’라는 것이 개발자에게는 어떤 의미인가</li>\n<li>최근 진행한 7명 팀 프로젝트를 더 잘 할 수 있는 부분은 무엇이 있었을까</li>\n</ul>\n</li>\n<li>이 글은 첫번째 파트인 <strong>자라기</strong> 파트이다.</li>\n</ul>\n<br>\n<h2 id=\"자라기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%9D%BC%EA%B8%B0\" aria-label=\"자라기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 자라기</h2>\n<p>시간에 비례하여 실력이 상승하지 않는다. 중요한 것은 얼마나 오랜 기간 학습했느냐보다 얼마나 많은 <strong>의도적 수련</strong>을 했는지다. <strong>업무를 하면서 의도적 수련을 할 수 있는 방법은 애자일 철학을 활용하는 것이다.</strong></p>\n<p>애자일에서 학습은 소프트웨어 개발에 큰 병목 중 하나이다. 그 이유는 일반 프로젝트에서 피드백의 주기가 느려서 결정을 내리고 학습을 한 후 다시 피드백을 받응ㄹ 시기에 이전에 내린 결정에 대한 이유를 기억하기 어렵다.</p>\n<p>하지만 애자일 프로젝트에서는 당장 한 행동에 대한 피드백을 10분, 한시간, 하루 주기로 빠르고 지속적으로 받아 다음 주기에 교정할 수 있다.</p>\n<p><strong>1) 피드백을 짧은 주기로 얻는 것 2) 실수를 교정할 기회가 있는 것</strong>이 학습에 중요한 요소이다.</p>\n<p>실력이 좋은 사람은 당시에 어떤 결정을 어떠한 이유로 내렸는지 자세히 기록하고 나중에 다시 확인하여 피드백을 반드시 얻는다.</p>\n<br>\n<h3 id=\"자기계발은-복리로-돌아온다\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C%EC%9D%80-%EB%B3%B5%EB%A6%AC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4\" aria-label=\"자기계발은 복리로 돌아온다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자기계발은 복리로 돌아온다</h3>\n<p>꾸준히 자기계발에 시간을 쏟으면 그것이 1년, 2년 뒤에 성장해서 돌아온다. 지식이나 능력은 복리로 이자가 붙는다.</p>\n<p>이러한 복리의 원칙은 개인 뿐 아니라 조직에도 연관이 있다. 복리 조직은 첫 주기 만든 결과물로 다음 주기에 더 좋은 위치에서 다음 결과물을 만들어낸다. 결과물이 다음 단계의 도구가 된다.</p>\n<p>A, B, C 작업으로 진행해라. A는 첫 작업, B는 개선하는 작업, C는 개선 작업을 개선하는 것이다.</p>\n<p>그러기 위해서는 개인이나 조직에서 더하기보다 곱하기를 해야한다.</p>\n<ol>\n<li>자신이 이미 가지고 있는 것들을 잘 활용하라\n<ul>\n<li>새로운 것을 유입하기보다 이미 가지고 있는 것을 연결하여 시너지 효과가 나게 한다.</li>\n<li>새로운 것은 이미 가지고 있는 것과 연결하도록 해라</li>\n</ul>\n</li>\n<li>외부 물질을 체화하라\n<ul>\n<li>하지만 내부 순환만 하면 수렴할 위험이 있기 때문에 외부 자극을 받으면 좋다.</li>\n<li>하지만 외부 자극을 빨리 자기화 해야 한다.</li>\n</ul>\n</li>\n<li>자신을 개선하는 프로세스에 대해 생각해 보라\n<ul>\n<li>A를 돌아보는 회고/반성 활동을 주기적으로 해라.</li>\n<li>나를 개선하는 과정을 어떻게 개선할지 고민해라.</li>\n</ul>\n</li>\n<li>피드백을 자주 받아라\n<ul>\n<li>사이클 주기를 짧게 두어서 작은 실험을 해 순환율을 높여라.</li>\n<li>일찍, 자주 실패해라. 실패에서 학습하라</li>\n</ul>\n</li>\n<li>자신의 능력을 높여주는 도구와 환경을 점진적으로 만들어라.\n<ul>\n<li>완벽한 환경에서 시작하기 보다 점진적으로 자신의 환경을 개선시켜라.</li>\n<li>완벽한 환경은 어느날 갖추어지기는 어렵다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"학습-프레임-vs-실행-프레임\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%ED%94%84%EB%A0%88%EC%9E%84-vs-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A0%88%EC%9E%84\" aria-label=\"학습 프레임 vs 실행 프레임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 프레임 vs. 실행 프레임</h3>\n<p>학습 프레임은 학습을 하고 성장하기 위한 것에 초점이 맞추어져 있고, 실행 프레임은 잘하고자 하는 것에 초점이 맞추어져 있다. 실행 프레임은 목표를 달성하고 나면 더이상 이야기하지 않고, 학습 프레임은 지속적으로 관심을 가지고 하는 경향이 있다.</p>\n<p>업무를 하거난 학습하기 어려운 조건이라고 하더라도 학습과 성장의 기회를 찾고 그 조건에서 자신에게 유리한 조건을 찾는 사람이 있다.</p>\n<p>“업무적으로 꼭 해야하는 건 아니지만 당신이 도와주는 사람은 누구이고, 또 당신이 도움을 요청하는 사람은 누구입니까?”라고 했을 때 업무 성과가 좋은 사람들이 더 좋은 대답을 한다.</p>\n<p><strong>똑같은 1년차도, 1년차 밖에 되지 않아서 혼자 코드와 책을 보며 공부하는 사람이 있고, 1년차 밖에 되지 않아서 많은 사람들에게 물어보고 많은 스터디를 하고 부딪히며 도움을 주려고 하는 사람이 있다. 후자가 더 많은 잠재력이 있다.</strong></p>\n<br>\n<h3 id=\"달인이-되는-비결\" style=\"position:relative;\"><a href=\"#%EB%8B%AC%EC%9D%B8%EC%9D%B4-%EB%90%98%EB%8A%94-%EB%B9%84%EA%B2%B0\" aria-label=\"달인이 되는 비결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>달인이 되는 비결</h3>\n<ul>\n<li>명확한 동기</li>\n<li>피드백 제때 받기</li>\n</ul>\n<br>\n<h3 id=\"전문성을-높이는-방법\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%AC%B8%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"전문성을 높이는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전문성을 높이는 방법</h3>\n<ul>\n<li>타당성(어떠한 일을 하는데 규칙이나 인과관계)과 피드백이 있어야 한다.</li>\n<li>일하는 방식과 개발하는 방식을 바꿔서 타당성과 피드백을 높여야 한다.\n<ul>\n<li>타당성을 높이기 위해 변수를 제한하고 실험을 하면서 규칙성과 인과관계를 찾으려고 노력해야한다.</li>\n<li>상사, 고객 등에게 적극적으로 피드백을 요청한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"당신이-제자리걸음인-이유\" style=\"position:relative;\"><a href=\"#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%9D%B8-%EC%9D%B4%EC%9C%A0\" aria-label=\"당신이 제자리걸음인 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>당신이 제자리걸음인 이유</h3>\n<ul>\n<li>실력을 높이기 위해서는 <strong>의도적 수련</strong>이 중요하다.\n<ul>\n<li>의도적 수련이 되려면 현재 나의 실력과 작업의 난이도가 비슷해야한다.</li>\n<li>난이도와 실력이 엇비슷해야 <strong>몰입</strong>을 경험할 수 있다.</li>\n<li>i + 1 처럼 딱 한단계 높은 수준으로 학습해야 유의미하게 진전한다.</li>\n</ul>\n</li>\n<li>실력이 늘지 않는 이유는 너무 난이도가 낮아 지루한 환경에 있거나 너무 어려워 의욕을 잃는 환경에 있기 때문이다. 뛰어난 사람들은 자신의 실력보다 조금 더 어려운 것에 끝임없이 도전한다.</li>\n</ul>\n<br>\n<h3 id=\"제자리걸음에서-벗어나기\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0\" aria-label=\"제자리걸음에서 벗어나기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제자리걸음에서 벗어나기</h3>\n<p>현재 난이도가 낮아서 지루함을 느끼는 경우</p>\n<ol>\n<li>실력 낮추기: 평소에 쓰는 보조도구 없애거나 실력을 발휘하기 어려운 환경 만들어서 도전하기</li>\n<li>난이도 높이기: 남들보다 일을 더 효율적으로 하기 위해 직접 나만의 도구 만들어서 활용하기 등등</li>\n</ol>\n<p>현재 난이도가 높아서 불안함을 느끼는 경우</p>\n<ol>\n<li>실력 높이기:\n<ol>\n<li>사회적 접근: 나보다 뛰어난 전문가의 도움을 받기 (인터넷, 책, 상사 등등)</li>\n<li>도구적 접근: 좋은 도구의 도움 받기. 디버거, 코드 분석툴, 라이브러리 등등</li>\n<li>내관적 접근: 비슷한 일을 했던 경험을 되살려 비유적으로 문제를 해결</li>\n</ol>\n</li>\n<li>난이도 낮추기:\n<ol>\n<li>먼저 자신이 맡은 일의 가장 간단한 아기 버전을 첫번째 목표로 삼기. 낮은 난이도에 먼저 도전한 그룹이 더 정확도가 높다.</li>\n</ol>\n</li>\n</ol>\n<br>\n<h3 id=\"동적인-균형\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EC%9D%B8-%EA%B7%A0%ED%98%95\" aria-label=\"동적인 균형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적인 균형</h3>\n<p>메타인지 전략: 난이도와 실력은 계속 바뀐다. 중요한 것은 자신의 상태(지루한지 불안한지)를 지속적으로 체크하고 알아차리는 것이 꼭 필요하다.</p>\n<br>\n<h3 id=\"프로그래밍-언어-배우기의-달인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%9D%98-%EB%8B%AC%EC%9D%B8\" aria-label=\"프로그래밍 언어 배우기의 달인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 언어 배우기의 달인</h3>\n<p><strong>인지적 작업 분석을 한다.</strong> 프로그래밍 언어를 배울 때 어떻게 효과적으로 배울 수 있을까?</p>\n<ol>\n<li><strong>튜토리얼을 읽을 때 뭘 만들지 생각하고 읽는다.</strong>\n<ul>\n<li>적극적 읽기를 한다 - 작성할 프로그램을 염두에 두고 읽다가 프로그램을 만들 수 있으면 멈추고 만든 후에 다음에 만들 것을 생각하고 돌아온다. 무언가를 읽을 때 구체적인 질문이나 목적을 가지고 있는 방법이다.</li>\n</ul>\n</li>\n<li>공부할 때 표준 라이브러리 소스코드를 읽는다.\n<ul>\n<li>실제 해당 언어의 스타일을 따르는 사용례이므로 해당 언어의 표준 라이브러리 코드를 읽는 것이 좋다.</li>\n</ul>\n</li>\n<li>공부 중 다른 사람의 코드에 내가 필요한 기능을 추가한다.\n<ul>\n<li>자신이 필요한 기능을 직접 추가하여 사용해보는 것이다.</li>\n<li>이때 중요한 것은 초기 단계에 내가 추가할 수 있는 작고 간단한 추가 기능을 생각해내는 것이다.</li>\n</ul>\n</li>\n</ol>\n<p>이렇듯 이미 잘하고 있는 사람에게서 많은 것을 배울 수 있다. 하지만 전문가에게 단순히 잘하는 방법에 대해서 물어보면 유의미한 대답을 얻기는 힘들다. <strong>구체적인 사건에 대해서 말하도록 유도</strong>하고 그 안에서 잘하는 방법을 파악할 수 있도록 이끌어내는 것도 중요하다. (예를들어 제일 최근에 배운 언어는 무엇이고 어떻게 학습했는지 물어보는 것.)</p>\n<br>\n<h3 id=\"실수는-예방하는-것이-아니라-관리하는-것이다\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%EB%8A%94-%EC%98%88%EB%B0%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"실수는 예방하는 것이 아니라 관리하는 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수는 예방하는 것이 아니라 관리하는 것이다</h3>\n<p><strong>실수 예방</strong>은 실수가 생기지 않도록 계속 주의하는 것이다.</p>\n<p><strong>실수 관리</strong>는 실수를 했을 때 그것이 나쁜 결과가 되기 전에 얼른 발견하여 고치고 그것에 대해서 학습하는 것이다.</p>\n<p>실수 예방 문화에서는 실수가 일어나면 당사자를 비난하고 처벌하여 협력하거나 실수에 대해서 논의하기를 꺼리게 된다. 실수 관리는 나쁜 결과 이전에 회복하도록 돕고, 실수를 공개하고, 그것에 대해서 이야기하며 고치도록 하는 분위기가 형성된다.</p>\n<p>다양한 실수를 경험하고 그 사례를 배워서 어떻게 대처해야하는지 배우는 것이 더 중요하다. 예방법보다 대처법을 배우자.</p>\n<br>\n<h3 id=\"나홀로-전문가에-대한-미신\" style=\"position:relative;\"><a href=\"#%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AF%B8%EC%8B%A0\" aria-label=\"나홀로 전문가에 대한 미신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나홀로 전문가에 대한 미신</h3>\n<ul>\n<li>좋은 기술에 대한 전문가가 가서 그것을 적용하면 성공적으로 변화가 이루어질 것이라고 생각하는 것은 미신이다.</li>\n<li>성공적으로 좋은 기술이 한 사람에 의해서 어떤 팀에 전파가 되기 위해서는 <strong>사회적 자본과 기술</strong>이 필요하다.\n<ul>\n<li>팀원들을 설득하고 주변에 물어봐서 도움을 받을 수 있어야 한다.</li>\n<li>주변에서 그것이 왜 필요하고 좋은지 인지하지 못한다면 아무리 좋은 것이라도 적용하게 되기 힘들다.</li>\n</ul>\n</li>\n<li>사람 사이에는 신뢰가 있어야 하며 그것으로 인해 변화를 일으킬 수 있다. 그 신뢰가 사회적 자본이다.\n<ul>\n<li><strong>사회적 기술이 뛰어나서 사람 사이에 신뢰를 잘 구축하며 커뮤니케이션한다.</strong></li>\n</ul>\n</li>\n<li><strong>따라서 전문가는 기술에 더해서 사회적 자본과 사회적 기술이 뛰어난 사람이다 ‼️</strong>\n<ul>\n<li>뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓴다.</li>\n<li>전문가는 고독한 천재가 아니다.</li>\n</ul>\n</li>\n<li>어떤 기술적 지식을 전달할 때 사회적 맥락 속에서 가르치고 경험하게 하도록 노력해야한다.\n<ul>\n<li>도움받기, 피드백 주고받기, 영향력 미치기, 가르치고 배우기, 위임하기 등등.</li>\n</ul>\n</li>\n<li>그 조직에 신뢰를 받아야지 필요한 기술을 전파하고 적용할 수 있다. 프로그래밍 능력 중 커뮤니케이션은 필수 부분이다.</li>\n</ul>\n<br>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li><strong>잦은 피드백과 실수를 교정하는 것!!</strong> 자라기 파트를 관통하는 두 키워드이다 <strong>.</strong></li>\n<li>스스로에 대한 회고, 다른사람이 주는 피드백, 실수를 했을 때 자책보다 문제에 집중하여 실수를 관리하는 것이 매우 중요하다.</li>\n<li>나는 내 스스로를 좀 몰아세우면서 학습하는 스타일인데, 개발은 그렇게 학습했을 때 프로그래밍에 대한 흥미만 떨어지고 추진력을 얻지 못했다. 이 책에서 말한 것처럼 적절한 난이도에 메타인지와 점진적인 개선을 통해서 멘탈도 관리하며 성장하는 것이 중요한 것 같다는 것이 절실히 느껴졌다.</li>\n<li>마지막에 책에서 “뛰어난 소프트웨어 개발자일수록 타인과 인터랙션에 더 많은 시간을 쓴다”, “이제는 프로그래밍을 잘한다는 정의 안에 의사소통 능력을 그 일부로 보게 된 겁니다” 라는 문장이 굉장히 임팩트 있었다.\n<ul>\n<li>기술에는 사회적 자본(신뢰)이 뒷받침 되어야 한다. 그렇지 않으면 해당 기술이 얼마나 좋은지는 소용이 없어질 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%9D%BC%EA%B8%B0\">🌱 자라기</a></p>\n<ul>\n<li><a href=\"#%EC%9E%90%EA%B8%B0%EA%B3%84%EB%B0%9C%EC%9D%80-%EB%B3%B5%EB%A6%AC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%98%A8%EB%8B%A4\">자기계발은 복리로 돌아온다</a></li>\n<li><a href=\"#%ED%95%99%EC%8A%B5-%ED%94%84%EB%A0%88%EC%9E%84-vs-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A0%88%EC%9E%84\">학습 프레임 vs. 실행 프레임</a></li>\n<li><a href=\"#%EB%8B%AC%EC%9D%B8%EC%9D%B4-%EB%90%98%EB%8A%94-%EB%B9%84%EA%B2%B0\">달인이 되는 비결</a></li>\n<li><a href=\"#%EC%A0%84%EB%AC%B8%EC%84%B1%EC%9D%84-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\">전문성을 높이는 방법</a></li>\n<li><a href=\"#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%9D%B8-%EC%9D%B4%EC%9C%A0\">당신이 제자리걸음인 이유</a></li>\n<li><a href=\"#%EC%A0%9C%EC%9E%90%EB%A6%AC%EA%B1%B8%EC%9D%8C%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0\">제자리걸음에서 벗어나기</a></li>\n<li><a href=\"#%EB%8F%99%EC%A0%81%EC%9D%B8-%EA%B7%A0%ED%98%95\">동적인 균형</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%9D%98-%EB%8B%AC%EC%9D%B8\">프로그래밍 언어 배우기의 달인</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%EB%8A%94-%EC%98%88%EB%B0%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4\">실수는 예방하는 것이 아니라 관리하는 것이다</a></li>\n<li><a href=\"#%EB%82%98%ED%99%80%EB%A1%9C-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AF%B8%EC%8B%A0\">나홀로 전문가에 대한 미신</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 03, 2021","title":"함께 자라기 🌱 읽자 - Part 1. 자라기","categories":"책","author":"코다","emoji":"🧸"},"fields":{"slug":"/growing-together-1/"}},"prev":{"id":"6b0ec85a-51f4-542d-8096-ff0d0e0e9096","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>앞에서 리액티브 프로그래밍에 대해서 다뤘었다.</li>\n<li>한마디로 리액티브 프로그래밍에 대해서 정의하자면 <strong>비동기/논블로킹 이벤트 드리븐 개발과 배압을 통해 적은 수의 쓰레드로 생상자가 소비자를 압도하지 못하며 확장성있는 개발이 가능하게 하는 프로그래밍 기법</strong>이라고 할 수 있다.</li>\n<li>리액티브 프로그래밍은 가용성(CPU utilization이라고 볼 수 있는 영역)과 응답성(오류가 생겨도 빠르게 응답 가능)을 향상시키므로 프로그램의 효율성과 성능을 높인다.</li>\n<li>함수형 프로그래밍도 관련 중요 키워드이다. 리액티브 프로그래밍은 함수형 프로그래밍(선언형, 함수 조합, 등등)을 활용한다.</li>\n<li>Spring WebFlux는 Spring Framework5에서 추가된 모듈이다. 스프링이 리액티브 스택 웹 어플리케이션을 구축할 수 있도록 리액티브 스트림 API를 지원해 <strong>논블로킹/비동기식</strong>으로 동작할 수 있도록 한다.</li>\n</ul>\n<br> \n<h2 id=\"spring-webflux-란\" style=\"position:relative;\"><a href=\"#spring-webflux-%EB%9E%80\" aria-label=\"spring webflux 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Spring WebFlux 란?</h2>\n<ul>\n<li>기존의 Spring Web MVC는 Servlet API, Servlet Container에서 동작하도록 되어 있으므로 전통적인 동기/블로킹 방식만 지원했다.</li>\n<li>리액티브 스택 프레임워크인 Spring WebFlux는 <strong>fully non-blocking backpressure</strong>로 동작하는 <strong>리액티브 스트림</strong>을 지원한다.</li>\n<li>스프링 프레임워크에서 spring-webmvc와 spring-webflux는 <strong>공존</strong>할 수 있으며 각 모듈은 optional이다. 즉, 둘다 사용할 수도 있고 하나의 모듈만 사용할 수도 있다.</li>\n</ul>\n<br> \n<h2 id=\"spring-webflux-탄생이유\" style=\"position:relative;\"><a href=\"#spring-webflux-%ED%83%84%EC%83%9D%EC%9D%B4%EC%9C%A0\" aria-label=\"spring webflux 탄생이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Spring WebFlux 탄생이유</h2>\n<p>한 문장으로 말하면 <strong>1) 적은 수의 스레드</strong>로 <strong>2) 최대한의 동시성</strong>을 핸들링하여 <strong>3)적은 하드웨어 리소스</strong>를 사용하기 위한 <strong>4) 비동기 웹 스택</strong>이 필요했기 때문이라고 할 수 있다.</p>\n<p>기존의 Servlet API에도 논블로킹 I/O를 할 수 있지만 해당 API를 사용하면 기본적으로 동기적(<code class=\"language-text\">Filter</code>, <code class=\"language-text\">Servlet</code>)이며 블로킹(<code class=\"language-text\">getParameter</code>, <code class=\"language-text\">getPart</code>)한 나머지 Servlet API를 사용하기 어려워진다. 따라서 완전히 논블로킹한 환경에서 동작할 수 있는 공통 API가 생겨나게 되었다.</p>\n<p><strong>또 다른 이유는 함수형 프로그래밍 때문이다.</strong> 자바8에 람다 및 스트림 등의 문법이 추가되면서 자바로 함수형 API를 구현할 수 있는 환경이 갖추어지기 시작했다. 이는 비동기 로직을 지원하고 논블로킹 어플리케이션을 구현할 수 있는 통로가 되며 Spring에서도 그러한 특성을 지원하는 WebFlux를 탄생시키게 되었다.</p>\n<h3 id=\"웹에서-비동기논블로킹의-필요성\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%97%90%EC%84%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"웹에서 비동기논블로킹의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹에서 비동기/논블로킹의 필요성</h3>\n<p>스프링은 웹 프레임워크이니 근본적인 개념보다 웹에 국한한여 생각해보자.</p>\n<ul>\n<li>\n<p>웹에서 병목을 유발하는 것은 외부 장치에 대한 I/O 작업인 경우가 많다. 즉, 요청당 하나의 스레드가 할당되어야 하지만 해당 스레드가 블로킹 되어 있는 상태인 경우가 훨씬 많다.</p>\n</li>\n<li>\n<p>이때 수많은 요청이 들어오게 되어 thread pool에 있는 스레드 개수 이상의 요청이 들어오게 되면 스레드에 대한 대기로 인해 latency가 급격히 느려지는 Thread Pool Hell이 발생하게 된다.</p>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/144712827-31460842-a91c-4d90-a53d-91eb797c6421.png\"></p>\n</li>\n<li>\n<p>그렇다고 스레드를 추가로 생성하는 것은 오버헤드가 큰 작업이며 잦은 context switching으로 오히려 CPU utilization이 떨어져 비효율이 발생한다.</p>\n</li>\n<li>\n<p>따라서 적은 수의 스레드로 동시성을 높이기 위해서는 스레드가 블로킹 되어 있지 않고 외부 I/O 작업이 일어날 때 필요한 다른 작업을 수행하도록 해야한다.</p>\n</li>\n<li>\n<p>점점 더 MSA가 대두되면서 다수의 마이크로서비스로 분리되어 서비스간 메시지 통신을 하는 경우가 잦아졌다. 이런 외부 통신이 많아진 만큼 이 모든 요청을 동기/블로킹 방식으로 처리하면 동시성이 떨어지게 된다.</p>\n</li>\n<li>\n<p>따라서 비동기/논블로킹 형식의 프로그래밍의 필요성이 더욱 강조되기 시작한다.</p>\n</li>\n</ul>\n<br> \n<h2 id=\"spring-mvc-vs-spring-webflux\" style=\"position:relative;\"><a href=\"#spring-mvc-vs-spring-webflux\" aria-label=\"spring mvc vs spring webflux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Spring MVC vs. Spring WebFlux</h2>\n<h3 id=\"구체적으로-어떻게-더-좋은-걸까\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EA%B1%B8%EA%B9%8C\" aria-label=\"구체적으로 어떻게 더 좋은 걸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구체적으로 어떻게 더 좋은 걸까?</h3>\n<p>우선 동기/비동기, 블록/논블록에 대한 기본적인 이해가 있다는 것을 전제하에 설명한다. 비동기/논블록 방식이 적용되면 여러 외부 I/O 작업이나 API 호출이 필요할 때 각 경과시간의 합 만큼의 시간이 소요된다. 하지만 비동기/논블록 방식이 적용되는 리액티브라면 각 경과시간 중 최대시간 만큼의 시간이 소요된다.</p>\n<p>어떻게 이런 효과를 (적은 스레드를 가지고!!) 내는지 이해하기 위해서는 리액티브에 빠질 수 없는 키워드인 <strong>event-driven</strong>을 잘 이해해야한다. 일반적으로 event-driven이라고 한다면 다음 그림을 떠올리면 된다.</p>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/144712817-0bea67a0-5be8-4f10-b403-19e09721a383.png\"></p>\n<p>주 업무를 하는 주체는 Event loop, Events, Event Handlers이다. 사용자나 외부 요인에 의해 이벤트가 발생하면 이벤트 루프는 해당 이벤트를 받아서 관리하고 알맞은 핸들러에 넘기는 역할을 한다. 핸들러는 해당 이벤트를 처리한다.</p>\n<p>여기서 Event loop는 적은 스레드를 가지고 운용할 수 있다. 따라서 이전에는 각 이벤트에 대한 스레드가 각각 필요했다면 event-driven 형태에선 아무리 이벤트가 많이 발생하더라도 스레드 풀에 있는 적정량의 스레드(주로 CPU 코어 개수거나 두배)로 관리 및 처리할 수 있다.</p>\n<p>번외로 event-driven의 탄생이유에 대해서 말해보자면, 이전에는 예상 가능하게 순차적으로 프로그래밍 진행되곤 했다. 하지만 최근이 GUI가 발전하고 점점 더 사용자와의 인터랙션이 많아지면서 제어할 수 없는 유저 이벤트가 많아지면서 이런 방식이 생겨나고 많이 사용되게 되었다.</p>\n<h3 id=\"spring-webflux-구조\" style=\"position:relative;\"><a href=\"#spring-webflux-%EA%B5%AC%EC%A1%B0\" aria-label=\"spring webflux 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring WebFlux 구조</h3>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/144713050-4d280534-1b6c-43c6-8bd1-fa37d4f7fa31.png\"></p>\n<p>전반적인 Spring WebFlux의 구조를 보면서 리액티브 프로그래밍이 어떻게 적용되었는지 살펴보자.</p>\n<p>사용자 요청이 들어오면 Event loop를 통해서 event가 되어 관리가 된다. 이때 하나의 요청에 하나의 스레드가 배정되는 것이 아니라 적은 스레드로 이벤트 루프에서 관리할 수 있다. 이후 이벤트는 비동기/논블록으로 연산을 처리한다. 연산이 끝나면 콜백 함수로 처리하고 응답한다.</p>\n<p>이렇게 Spring WebFlux는 더 효율적으로 I/O를 제어하여 좋은 성능을 낸다. 앞서 언급했던 점점 더 MSA 추세로 여러 서비스가 네트워크 호출을 해야하는 시기에는 더욱 효율적일 수 있다.</p>\n<p>주의해야할 점은 한 곳이라도 동기/블로킹이 되는 곳이 있다면 아무런 효용이 없다는 것이다. 결국 동기/블로킹 호출하는 API에서 병목이 일어나기 때문이다.</p>\n<p>현재 Spring WebFlux의 WebClient로 외부 API를 리액티브 방식으로 처리할 수 있지만 여전히 DB connection과 관련해서는 논블로킹 라이브러리가 많이 사용되고 있지 않다. (R2DBC, jasync sql 등등이 개발중이라고 한다.)</p>\n<br> \n<h2 id=\"spring-webflux-무조건-좋을까\" style=\"position:relative;\"><a href=\"#spring-webflux-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"spring webflux 무조건 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Spring WebFlux 무조건 좋을까?</h2>\n<p>당연한 이야기겠지만 Spring WebFlux가 무조건 좋지는 않다. (개발에 트레이드 오프는 항상 있으므로!) 그럼 언제 무엇을 쓰는 것이 좋을까? 정답은 없지만 스프링 공식문서에 Spring MVC와 WebFlux를 비교하고 설명한 포인트들을 짚어보자.</p>\n<p>아래 그림은 두개의 공통점과 차이점을 표현한 다이어그램이다.</p>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/144713072-84bc054d-8073-4090-b2c9-3433ad45db2b.png\"></p>\n<p>스프링 공식문서에서는 몇가지 상황에 어떠한 것을 제안하는지 적혀있다.</p>\n<ul>\n<li>\n<p>우선 Spring MVC로 어플리케이션이 정상동작하면 굳이 바꿀필요는 없다. 명령형 프로그래밍은 개발하기도, 이해하기도, 디버깅하기도 더 좋다. 즉, 생산성이 더 좋다는 것이다. 리액티브 개념은 이제 막 발전중이기 때문에 기존의 명령형에 비해 라이브러리도 부족하다.</p>\n</li>\n<li>\n<p>만일 자바8의 람다나 코틀린을 사용하는 가벼운 함수형 웹 프레임워크에 관심이 있다면 WebFlux는 좋은 선택이다. WebFlux는 작은 어플리케이션이나 복잡하지 않은 요구사항을 구현한 마이크로서비스에 적합하다.</p>\n</li>\n<li>\n<p>MSA에서는 각 어플리케이션이 Spring MVC나 Spring WebFlux를 혼합해서 사용하고 있을 수 있다. 어노테이션 기반의 프로그래밍 모델은 위 두 프레임워크를 재사용하기도 편하게 해준다.</p>\n</li>\n<li>\n<p>어느 어플리케이션에 무엇을 쓸지 헷갈린다면 가장 간단한 방법은 의존성을 체크해보는 것이다. 만일 플로킹 persistence API의 일종인 JPA, JDBC 등을 사용하거나 블로킹 네트워크 API를 사용하고 있다면 Spring MVC가 더 적합하다. 물론 Reactor나 RxJava등을 통해 블로킹 작업을 별도의 스레드에서 처리하도록 하는 것이 가능하지만 여전히 논블로킹 웹 스택의 장점을 온전히 활용하지 못하는 경우다.</p>\n</li>\n<li>\n<p>만일 지금 Spring MVC 어플리케이션을 쓰고 있고 외부 API를 호출해야 한다면 리액티브 <code class=\"language-text\">webClient</code>를 활용해보는 것을 추천한다. 각 요청에 대한 latency가 향상되며 그 장점이 극대화된다.</p>\n</li>\n<li>\n<p>스프링 공식 문서에 이런 내용도 있어서 놀랐다. 공식문서에 따르면 만일 팀에서 적용하고자 한다면 논블로킹이나 선언형 프로그래밍으로 전환하기 위해서는 매우 가파른 러닝커브가 존재한다는 것을 염두해두라고 한다.</p>\n<p>우선 가상 효율적으로 전환하는 방식은 현재 구조에서 reactive한 <code class=\"language-text\">webClient</code> 부터 적용해보는 것이다. 그리고 나서 점진적으로 적용을 시작하고 변화로부터 얻는 효용을 계산해보기를 추천한다. 공식문서에서 말하기를 “예상하건데 어플리케이션 전반적인 측면에서 논블로킹 선언형으로의 전환은 불필요할 것이다” 라고 언급한다. 따라서 만일 전환으로 인한 분명한 효용이 눈에 보이지 않거든 우선 논블로킹 I/O가 어떻게 동작하는지부터 공부하기를 추천한다.</p>\n</li>\n</ul>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/144713083-097806d8-8c1a-4a39-a480-9704274c4bc4.png\"></p>\n<p>다음 <a href=\"https://dzone.com/articles/raw-performance-numbers-spring-boot-2-webflux-vs-s\">링크</a>에서는 Springboot와 webFlux의 성능을 측정해 보았다. 초반에 성능이 비슷한 구간이 분명히 있다. 만일 지금 환경이 그 구간이라면 전환은 불필요하다. 오히려 단점이 될 수 있는 것이 기존의 방식은 매우 직관적으고 코드를 작성하고, 디버깅하고, 이해하기 쉽기 때문에 생상성 측면에서 훨씬 뛰어나다.</p>\n<br> \n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li>먼저, 스프링 공식문서는 매우 친절하다!!</li>\n<li>리액티브에 대해서 나름 깊이(힘들게) 공부하고 난 뒤에 WebFlux에 대해서 다시보니 좀 이해가 되는 것 같다.</li>\n<li>그래서 여기서 러닝커브가 높으므로 이것이 생산성을 떨어뜨릴 수 있으므로 반드시 꼭 필요한 효용성이 눈에 보일 때 적용하라고 한 것이 무엇보다 많이 와닿았다.</li>\n<li>점점 더 요청이 많아지고 Thread pool의 스레드가 부족하니 나온 해결책이라는 배경을 알게되니 굉장히 흥미로웠다. 불편함을 찾고 문제를 해결하는 것이 멋있다고 느껴졌다.</li>\n<li>나는 기술로 불편을 해결한 적이 있나 하는 고민을 요즘 많이 하게 된다. 비생산적이고 비효율적인 환경이나 루틴을 문제의식 없이 받아드리기 보다 적극적으로 해결해보자는 생각이 든다.</li>\n<li>번외로 <a href=\"https://www.reactivemanifesto.org/\">Reactive Manifesto</a> 내용과 내장되어 있는 용어집도 정리해보고 싶다 🙌</li>\n<li>처음에 정말 이해가 안갔는데… 일단 계속 또 보고 또 보고 또 보면 결국 이해가 되는구나 …💦</li>\n</ul>\n<br> \n<br> \n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://heeyeah.github.io/spring/2020-02-29-web-flux/\">https://heeyeah.github.io/spring/2020-02-29-web-flux/</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html\">https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html</a></li>\n<li><a href=\"https://www.baeldung.com/spring-webflux\">https://www.baeldung.com/spring-webflux</a></li>\n<li><a href=\"https://alwayspr.tistory.com/44\">https://alwayspr.tistory.com/44</a></li>\n<li><a href=\"https://deepakpol.wordpress.com/2015/09/29/event-driven-and-reactive-architecture/\">https://deepakpol.wordpress.com/2015/09/29/event-driven-and-reactive-architecture/</a></li>\n<li><a href=\"https://dzone.com/articles/raw-performance-numbers-spring-boot-2-webflux-vs-s\">https://dzone.com/articles/raw-performance-numbers-spring-boot-2-webflux-vs-s</a></li>\n<li><a href=\"https://juneyr.dev/reactive-programming\">https://juneyr.dev/reactive-programming</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#spring-webflux-%EB%9E%80\">🌩 Spring WebFlux 란?</a></p>\n</li>\n<li>\n<p><a href=\"#spring-webflux-%ED%83%84%EC%83%9D%EC%9D%B4%EC%9C%A0\">🌩 Spring WebFlux 탄생이유</a></p>\n<ul>\n<li><a href=\"#%EC%9B%B9%EC%97%90%EC%84%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\">웹에서 비동기/논블로킹의 필요성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-mvc-vs-spring-webflux\">🌩 Spring MVC vs. Spring WebFlux</a></p>\n<ul>\n<li><a href=\"#%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EA%B1%B8%EA%B9%8C\">구체적으로 어떻게 더 좋은 걸까?</a></li>\n<li><a href=\"#spring-webflux-%EA%B5%AC%EC%A1%B0\">Spring WebFlux 구조</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-webflux-%EB%AC%B4%EC%A1%B0%EA%B1%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\">🌩 Spring WebFlux 무조건 좋을까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 04, 2021","title":"리액티브 시리즈 - 2. Spring WebFlux","categories":"스프링 웹","author":"코다","emoji":"🍀"},"fields":{"slug":"/reactive-programming-2/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/java-collection-framework-1/","nextSlug":"/growing-together-1/","prevSlug":"/reactive-programming-2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}