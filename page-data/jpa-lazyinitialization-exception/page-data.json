{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/jpa-lazyinitialization-exception/",
    "result": {"data":{"cur":{"id":"21638d95-ab20-5ddc-8832-ed946e1a5c04","html":"<h2 id=\"lazyinitialization-에러-발생-이유\" style=\"position:relative;\"><a href=\"#lazyinitialization-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\" aria-label=\"lazyinitialization 에러 발생 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LazyInitialization 에러 발생 이유</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token class-name\">LazyInitializationException</span><span class=\"token operator\">:</span> could not initialize proxy <span class=\"token operator\">-</span> no session</code></pre></div>\n<ul>\n<li>Lazy Loading을 하려고 하는데 세션이 사라져서 프록시 초기화가 불가능해 지연로딩을 못하는 경우에 발생하는 에러</li>\n<li>가장 단순한 방법으로는 <code class=\"language-text\">FetchType</code> 을 <code class=\"language-text\">EAGER</code>로 설정해서 일괄적으로 부모 호출시 자식이 모두 즉시로딩으로 초기화되도록 하면 되지만, 비니지스적인 이유가 아닌 <code class=\"language-text\">LazyInitialization</code>을 피하기 위해 <code class=\"language-text\">EAGER</code>로 설정하는 것은 좋지 않다.</li>\n<li>위 에러는 Lazy Loading을 하는 시점까지 session을 유지시켜주는 것이 핵심이며 주로 <code class=\"language-text\">@Transactional</code> 추가로 해당 문제는 해결된다.</li>\n</ul>\n<br>\n<h2 id=\"서비스-외부에서-lazyloading-collection-호출-시\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-lazyloading-collection-%ED%98%B8%EC%B6%9C-%EC%8B%9C\" aria-label=\"서비스 외부에서 lazyloading collection 호출 시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서비스 외부에서 LazyLoading Collection 호출 시</h2>\n<p>서비스에서 LazyLoading을 하고 싶다면 <code class=\"language-text\">@Transactional</code> 을 붙여서 해결할 수 있지만 간혹 서비스 클래스 밖에서 지연로딩 지정되어 있는 컬렉션을 조회해야할 때가 있다. 그럴 때 <code class=\"language-text\">LazyInitialization</code> 에러를 피할 수 있는 방법은 두가지이다.</p>\n<h3 id=\"1-code-classlanguage-texthibernateinitializecode를-사용해-서비스-내에서-조회\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-texthibernateinitializecode%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A1%B0%ED%9A%8C\" aria-label=\"1 code classlanguage texthibernateinitializecode를 사용해 서비스 내에서 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">Hibernate.initialize()</code>를 사용해 서비스 내에서 조회</h3>\n<p>만일 서비스가 아닌 다른 클래스 내에서 JPA 조회를 하고 싶다면 세션이 유지되지 않는다. (<code class=\"language-text\">@Transactional</code> 어노테이션을 붙이는 것이나, <code class=\"language-text\">FetchType.EAGER</code> 을 붙이는 것이 모두 부적합하거나 비효율적이다) <br></p>\n<p>이때는 해당 컬렉션을 조회하는 메서드를 서비스 내에 만들어 호출하여 사용하고, 해당 메서드 내에서 <code class=\"language-text\">Hibernate.initialize(Entity)</code> 를 사용해서 프록시가 즉시 초기화 되도록 하면 된다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTaskListEager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> taskId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> taskList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasksRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>taskId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTaskList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Hibernate</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>taskList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> taskList<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>주의할 점:</strong> <code class=\"language-text\">Hibernate.initialize()</code> 는 그 안에 중첩되어 있는 LazyCollection에 대해서는 가지고오지 못하므로 그것에 대한 <code class=\"language-text\">Hibernate.initialize()</code>는 따로 해줘야한다.</li>\n</ul>\n<h3 id=\"2-transactionmanager-사용\" style=\"position:relative;\"><a href=\"#2-transactionmanager-%EC%82%AC%EC%9A%A9\" aria-label=\"2 transactionmanager 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. TransactionManager 사용</h3>\n<p>어노테이션이 아니라 Spring에서 제공해주는 TransactionManager를 직접 사용해서 session을 직접 지정하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactioinManager</span> transactionManager<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTaskListEager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> tasksId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">TransactionStatus</span> transactionStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> taskList <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\ttaskList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasksRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>tasksId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTaskList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>transactionStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>transactionStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> taskList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://thorben-janssen.com/lazyinitializationexception/\">https://thorben-janssen.com/lazyinitializationexception/</a></li>\n<li><a href=\"https://github.com/HomoEfficio/dev-tips/blob/master/Spring%20Data%20JPA%20-%20LazyInitialization%20%EC%97%90%EB%9F%AC%20-%20getOne().md\">https://github.com/HomoEfficio/dev-tips/blob/master/Spring Data JPA - LazyInitialization 에러 - getOne().md</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#lazyinitialization-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\">LazyInitialization 에러 발생 이유</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-lazyloading-collection-%ED%98%B8%EC%B6%9C-%EC%8B%9C\">서비스 외부에서 LazyLoading Collection 호출 시</a></p>\n<ul>\n<li><a href=\"#1-hibernateinitialize%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%82%B4%EC%97%90%EC%84%9C-%EC%A1%B0%ED%9A%8C\">1. <code class=\"language-text\">Hibernate.initialize()</code>를 사용해 서비스 내에서 조회</a></li>\n<li><a href=\"#2-transactionmanager-%EC%82%AC%EC%9A%A9\">2. TransactionManager 사용</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"LazyInitialization 에러 발생 이유 Lazy Loading을 하려고 하는데 세션이 사라져서 프록시 초기화가 불가능해 지연로딩을 못하는 경우에 발생하는 에러 가장 단순한 방법으로는  을 로 설정해서 일괄적으로 부모 호출시 자식이 모두 즉시로딩으로 초기화되도록 하면 되지만, 비니지스적인 이유가 아닌 을 피하기 위해 로 설정하는 것은 좋지 않다. 위 에러는 Lazy Loading을 하는 시점까지 session을 유지시켜주는 것이 핵심이며 주로  추가로 해당 문제는 해결된다. 서비스 외부에서 LazyLoading Collection 호출 시 서비스에서 LazyLoading을 하고 싶다면  을 붙여서 해결할 수 있지만 간혹 서비스 클래스 밖에서 지연로딩 지정되어 있는 컬렉션을 조회해야할 때가 있다. 그럴 때  에러를 피할 수 있는 방법은 두가지이다. 1. 를 사용해 서비스 내에서 조회 만일 서비스가 아닌 다른 클래스 내에서 JPA 조회를 하고 싶다면 세션이 유지되지 않는다. …","frontmatter":{"date":"August 04, 2021","title":"LazyInitializationException 란?","categories":"JPA","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-lazyinitialization-exception/"}},"next":{"id":"8316d4d6-553f-5d70-b995-11dc98735d16","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>함수는 <strong>시스템의 상태를 바꾸는지</strong>에 따라서 크게 두 가지로 나뉜다. 1) Command 2) Query. 이 두 가지 분류법에 대해서 하나의 함수가 두 가지 경우를 모두 담당하는 것은 좋지 않다.</p>\n<br>\n<h2 id=\"command-vs-query\" style=\"position:relative;\"><a href=\"#command-vs-query\" aria-label=\"command vs query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command vs. Query</h2>\n<ul>\n<li>\n<p><strong>Query</strong></p>\n<p>주어진 쿼리에 대한 결과값을 반환하고 시스템의 상태를 변화시키지는 않는다.</p>\n<p>다른 값을 바꾸지 않고 오직 질문에만 대답한다.</p>\n<p>부작용에서 자유롭다. (read-only)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">5</span></code></pre></div>\n</li>\n<li>\n<p><strong>Command</strong></p>\n<p>값을 반환하지 않아도 시스템의 상태를 변화시킨다. (영구적)</p>\n<p>부작용이 생길 여기자 있다. (mutator, modifier)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<p>이렇게 함수를 두 가지로 나누는 것은 유용하다. 현재 사용하는 함수가 상태를 바꾸지 않는 query 라면 신뢰를 가지고 사용할 수 있다. 하지만 상태를 바꾸는 command라면 함수간 순서에 주의를 기울이고 부작용이 생길 여지를 인지하고 있어야 한다.</p>\n<br>\n<h2 id=\"cqs---command-query-separation\" style=\"position:relative;\"><a href=\"#cqs---command-query-separation\" aria-label=\"cqs   command query separation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CQS - Command Query Separation</h2>\n<p><em><strong>Betrand Meyer</strong></em>라는 프랑스 학자는 하나의 함수가 command 이거나 query 이어야 한다고 주장한다. 이러한 프로그램 원칙을 CQS라고 하며 한 함수에서는 둘은 분명히 구분해야 한다고 말했다. <br></p>\n<p>하지만 스택의 pop() 연산 같은 경우는 위 두가지를 모두 담당하기도 한다. 이러한 예외 상황은 융통성 있게 허용하는 것이 전반적으로 더 효율적일 수 있다. <br></p>\n<p>위 개념은 현재 진행중인 프로젝트에서 다음과 같은 코드에 대한 크루의 코드리뷰로 접하게 되었다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Post</span> newPost <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>updatedContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 경우 CQS를 준수하지 않은 것이므로 둘 중 하나를 담당하도록 구현로직을 바꾸고 필요하면 재조회하는 방향으로 리팩토링 했다. <br></p>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://shoark7.github.io/programming/knowledge/command-and-query-method\">https://shoark7.github.io/programming/knowledge/command-and-query-method</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#command-vs-query\">Command vs. Query</a></li>\n<li><a href=\"#cqs---command-query-separation\">CQS - Command Query Separation</a></li>\n</ul>\n</div>","frontmatter":{"date":"July 17, 2021","title":"CQS(Command Query Separation) 간단히 알아보기","categories":"자바","author":"코다","emoji":"✊"},"fields":{"slug":"/java-cqs/"}},"prev":{"id":"24937c05-73a7-52fc-9328-64c422c66fb2","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>스프링부트 프로젝트를 진행하다보면 웹 mvc에 대한 테스트를 진행해야할 때가 있다.</li>\n<li>때로는 각 layer에 대한 슬라이스 테스트를 작성하거나, 일부분에 대한 통합 테스트만을 진행할 때 Mock 테스트를 해야할 때도 있다.</li>\n<li>테스트 관련 annotation에 대해서 정리하고 각 annotation의 차이 및 언제 무엇을 사용하면 좋을지 정리해본다.</li>\n</ul>\n<br>\n<h2 id=\"code-classlanguage-textspringboottestcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textspringboottestcode\" aria-label=\"code classlanguage textspringboottestcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@SpringBootTest</code></h2>\n<ul>\n<li><code class=\"language-text\">@SpringBootTest</code> 어노테이션은 <code class=\"language-text\">@SpringBootApplication</code> 을 찾아 해당 configuration에 맞추어 실제 Spring web context를 실행햔다.</li>\n<li>Spring context의 설정으로 그대로 적용해서 테스트를 진행해야 할 경우에 해당 어노테이션을 붙여서 테스트를 하는 것이 좋다.</li>\n<li>하지만 전체 컨텍스트를 로드하는 만큼 굉장히 오랜 시간이 걸린다.</li>\n<li>실제로 <code class=\"language-text\">@SpringBootTest</code> 어노테이션이 붙은 테스트를 돌려본다면 다음과 같은 스프링 컨텍스트르 로딩하는 긴 로그가 찍히는 것을 확인할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//... 일부 생략\n20:37:26.255 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.2)\n\n//... 일부 생략 \n > Running with Spring Boot v2.5.2, Spring v5.3.8\n2021-08-16 20:37:26.559 DEBUG 4487 --- [           main] c.w.p.a.user.UserAcceptanceTest          : Running with Spring Boot v2.5.2, Spring v5.3.8\n2021-08-16 20:37:26.560 INFO  main o.s.boot.SpringApplication.logStartupProfileInfo L:663 \n > The following profiles are active: security,test\n2021-08-16 20:37:26.560  INFO 4487 --- [           main] c.w.p.a.user.UserAcceptanceTest          : The following profiles are active: security,test\n2021-08-16 20:37:27.252  INFO 4487 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.\n2021-08-16 20:37:27.328  INFO 4487 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 70 ms. Found 4 JPA repository interfaces.\n2021-08-16 20:37:28.062  INFO 4487 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 0 (http)\n2021-08-16 20:37:28.068  INFO 4487 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2021-08-16 20:37:28.068  INFO 4487 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]\n2021-08-16 20:37:28.115  INFO 4487 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2021-08-16 20:37:28.116  INFO 4487 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1379 ms</code></pre></div>\n<br>\n<h2 id=\"code-classlanguage-textautoconfiguremockmvccode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textautoconfiguremockmvccode\" aria-label=\"code classlanguage textautoconfiguremockmvccode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@AutoConfigureMockMvc</code></h2>\n<ul>\n<li>위 어노테이션은 다음과 같이 <code class=\"language-text\">MockMvc</code>를 주입받아서 톰캣 서버를 띄우지 않은 상태로 API 요청 부분을 Mocking 해서 사용할 수 있다. 하지만 스프링 컨텍스트의 빈을 모두 로드하는 것은 <code class=\"language-text\">@SpringBootTest</code> 와 동일하다.</li>\n<li><code class=\"language-text\">@SpringBootTest</code> 와 <code class=\"language-text\">@AutoConfigureMockMvc</code>를 사용해서 테스트 코드를 실행해보면 위 <code class=\"language-text\">@SpringBootTest</code>를 사용했을때와 다르게 Tomcat을 시작하는 로그가 찍히지 않는 것을 확인할 수 있다.</li>\n</ul>\n<blockquote>\n<p>테스트 코드</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@AutoConfigureMockMvc</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자는 내 프로필을 조회할 수 있다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getAuthenticatedUserProfile_LoginUser_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">UserProfileResponseDto</span> responseDto <span class=\"token operator\">=</span> <span class=\"token class-name\">UserFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockLoginUserProfileResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> perform <span class=\"token operator\">=</span> mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles/me\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>AUTHORIZATION<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer testToken\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//...뒤 코드 생략</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>실행 시 로그</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//...일부 생략 \n21:41:00.201 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.2)\n\n//...일부 생략 \n2021-08-16 21:41:03.332  INFO 4963 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''\n2021-08-16 21:41:03.333  INFO 4963 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''\n2021-08-16 21:41:03.334  INFO 4963 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms\n2021-08-16 21:41:03.349  INFO 4963 --- [           main] c.w.p.u.u.p.UserControllerTest           : Started UserControllerTest in 3.144 seconds (JVM running for 3.765)\n2021-08-16 21:41:03.524  INFO 4963 --- [ionShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'\n2021-08-16 21:41:03.525  INFO 4963 --- [ionShutdownHook] .SchemaDropperImpl$DelayedDropActionImpl : HHH000477: Starting delayed evictData of schema as part of SessionFactory shut-down'\n2021-08-16 21:41:03.532  INFO 4963 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...\n2021-08-16 21:41:03.537  INFO 4963 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</code></pre></div>\n<h2 id=\"code-classlanguage-textwebmvctestcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textwebmvctestcode\" aria-label=\"code classlanguage textwebmvctestcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@WebMvcTest</code></h2>\n<ul>\n<li><code class=\"language-text\">@WebMvcTest</code>의 경우 <code class=\"language-text\">@AutoConfigureMockMvc</code>와 비슷하게 서버가 모킹이 되지만 MVC와 관련된 빈들만 로드한다. 그렇기 때문에 MVC 관련 빈들만 사용한다면 위 어노테이션을 사용하는 것이 더 부화가 적다.</li>\n<li>해당 어노테이션 안에 특정 클래스를 지정하면 해당 클래스와 관련한 mvc 빈들이 올라가므로 더 효율적으로 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigureRestDocs</span>\n<span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자는 내 프로필을 조회할 수 있다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getAuthenticatedUserProfile_LoginUser_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">UserProfileResponseDto</span> responseDto <span class=\"token operator\">=</span> <span class=\"token class-name\">UserFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockLoginUserProfileResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> perform <span class=\"token operator\">=</span> mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/profiles/me\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>AUTHORIZATION<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer testToken\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//...뒤 코드 생략</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위와 동일하게 Tomcat 관련 로그는 찍히지 않는다. 대신 <code class=\"language-text\">SpringBootMockServletContext</code>이 모킹된 서블릿을 초기화 하는 로그를 확인할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2021-08-16 23:46:28.495  INFO 5504 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''\n2021-08-16 23:46:28.495  INFO 5504 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''\n2021-08-16 23:46:28.496  INFO 5504 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms</code></pre></div>\n<ul>\n<li>컨트롤러 슬라이스 테스트 8개에 대한 각 MockMvc 테스트를 비교했을 때, 미세하지만 <code class=\"language-text\">@WebMvcTest</code>가 더 빠른 것을 확인할 수 있다. 더 많은 숫자의 테스트 일 때 그 차이는 더 커진다.</li>\n</ul>\n<p align=\"center\"><img width=\"600\" alt=\"스크린샷 2021-08-16 오후 11 48 46\" src=\"https://user-images.githubusercontent.com/63405904/129583308-1e306f3c-0b51-4c97-8606-ee810a739289.png\"><br>@WebMvcTest 사용</p>\n<p align=\"center\"><img width=\"600\" alt=\"스크린샷 2021-08-16 오후 11 50 11\" src=\"https://user-images.githubusercontent.com/63405904/129583673-8bd736da-f88d-407f-a894-40f1e29a94fa.png\"><br>@AutoConfigureMockMvc 사용</p>\n<br>\n<h2 id=\"code-classlanguage-textextendwithmockitoextensionclasscode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textextendwithmockitoextensionclasscode\" aria-label=\"code classlanguage textextendwithmockitoextensionclasscode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code></h2>\n<ul>\n<li><code class=\"language-text\">@ExtendWith</code>는 JUnit에서 제공하는 기능이다. (위 테스트 어노테이션은 SpringBoot에서 제공한다.)</li>\n<li>흔히 코드에서 <code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code>으로 많이 사용하고 위의 모킹과 어떠한 부분이 다른지에 대해서 많이 헷갈려한다.</li>\n<li>위 모킹은 서블릿 컨테이너에 대한 모킹을 스프링 부트 에서 제공하는 것이다.</li>\n<li><code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code> 은 Mock이라는 가짜 객체를 지원하는 Mockito 테스트 프레임워크를 JUnit5와 연동하여 사용하도록 하는 것이다. (두 개의 테스트 프레임워크의 결합)</li>\n<li>주로 하나의 Layer의 단위테스트를 할 때 나머지 객체들을 모킹하도록 지원한다.</li>\n<li>즉, 서블릿 컨테이너와 상관없이 어느 한 객체에 대한 단위 테스트를 진행하면서 의존하고 있는 다른 객체의 행동을 stub하여 제어할 때 사용된다.</li>\n</ul>\n<br>\n<br>\n<p><strong>[출처]</strong></p>\n<ul>\n<li><a href=\"https://spring.io/guides/gs/testing-web/\">https://spring.io/guides/gs/testing-web/</a></li>\n<li><a href=\"https://elevatingcodingclub.tistory.com/61\">https://elevatingcodingclub.tistory.com/61</a></li>\n<li><a href=\"https://meetup.toast.com/posts/124\">https://meetup.toast.com/posts/124</a></li>\n<li><a href=\"https://www.baeldung.com/spring-boot-testing\">https://www.baeldung.com/spring-boot-testing</a></li>\n<li><a href=\"https://junit.org/junit5/docs/current/user-guide/#extensions\">https://junit.org/junit5/docs/current/user-guide/#extensions</a></li>\n<li><a href=\"https://pinokio0702.tistory.com/143\">https://pinokio0702.tistory.com/143</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#springboottest\"><code class=\"language-text\">@SpringBootTest</code></a></li>\n<li><a href=\"#autoconfiguremockmvc\"><code class=\"language-text\">@AutoConfigureMockMvc</code></a></li>\n<li><a href=\"#webmvctest\"><code class=\"language-text\">@WebMvcTest</code></a></li>\n<li><a href=\"#extendwithmockitoextensionclass\"><code class=\"language-text\">@ExtendWith(MockitoExtension.class)</code></a></li>\n</ul>\n</div>","frontmatter":{"date":"August 17, 2021","title":"Springboot 언제 어떤 테스트를 사용할까","categories":"스프링부트 테스트","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-boot-test/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/jpa-lazyinitialization-exception/","nextSlug":"/java-cqs/","prevSlug":"/spring-boot-test/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}