{"componentChunkName":"component---src-templates-blog-template-js","path":"/one-percent-network-10/","result":{"data":{"cur":{"id":"b1d694e9-dd29-553b-90c6-4f7d6293c7a6","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"🛺-story3-웹-서버-소프트웨어가-리퀘스트-메시지의-의미를-해석하여-요구에-응한다\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story3-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%EC%9D%98%EB%AF%B8%EB%A5%BC-%ED%95%B4%EC%84%9D%ED%95%98%EC%97%AC-%EC%9A%94%EA%B5%AC%EC%97%90-%EC%9D%91%ED%95%9C%EB%8B%A4\" aria-label=\"🛺 story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story3] 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다.</h2>\n<h3 id=\"1-조회의-uri를-실제-파일명으로-변환한다\" style=\"position:relative;\"><a href=\"#1-%EC%A1%B0%ED%9A%8C%EC%9D%98-uri%EB%A5%BC-%EC%8B%A4%EC%A0%9C-%ED%8C%8C%EC%9D%BC%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\" aria-label=\"1 조회의 uri를 실제 파일명으로 변환한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 조회의 URI를 실제 파일명으로 변환한다</h3>\n<ul>\n<li>http 요청 메세지의 메소드와 URI에 따라서 웹 서버 내부의 동작이 달라진다.</li>\n<li>\n<p>URI에 적힌 경로에 따라서 데이터를 얻어 응답하는 것이다.</p>\n<ul>\n<li>하지만 이 데이터를 반드시 디스크에서 읽는 것은 아니다.</li>\n<li>URI에 기록된 경로명의 파일을 읽어오면 디스크의 파일이 전부 노출되기 때문에 무방비해진다.</li>\n</ul>\n</li>\n<li>\n<p>해결 방법으로 웹 서버에 공개하는 디렉토리를 디스크의 실제 디렉토리가 아니라 가상으로 만든 디렉토리 구조를 사용하도록 한다.</p>\n<ul>\n<li>웹 어플리케이션 내부에서 가상으로 설정한 디렉토리와 실제 데이터를 대응하여 해당 데이터를 반송하도록 한다.</li>\n</ul>\n</li>\n<li>\n<p>만일 브라우저에서 보낸 URI에 마지막 파일명이 생략되면 default로 설정된 파일명이 추가되어서 화명에 표시된다.</p>\n<ul>\n<li>ex. index.html</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-cgi-common-gateway-interface-프로그램을-작동하는-경우\" style=\"position:relative;\"><a href=\"#2-cgi-common-gateway-interface-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"2 cgi common gateway interface 프로그램을 작동하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. CGI (Common Gateway Interface) 프로그램을 작동하는 경우</h3>\n<ul>\n<li>만일 파일 내용에 HTML 문서나 화상데이터면 해당 데이터를 그대로 응답하면 된다.</li>\n<li>\n<p>하지만 만일 문서 등이 아니라 프로그램 파일의 이름을 쓸 수도 있다.</p>\n<ul>\n<li>파일의 내용을 그대로 반송하는 것이 아니라 해당 프로램을 작동시켜 출력하는 데이터를 반송해야 한다.</li>\n<li>여러 프로그램 유형이 있고 각 유형에 따라서 동작 방식은 상이하다.</li>\n</ul>\n</li>\n<li>\n<p>단순 문서를 요청하는 경우와 위에서 말한 프로그램을 동작시켜서 데이터를 얻는 요청 메세지의 형태가 다르다.</p>\n<ul>\n<li>요청 메세지 안에 처리하고자 하는 데이터를 넣어서 보낸다.</li>\n<li>예를 들어서 GET 요청일 경우 query params를 POST 요청일 경우 request body에 데이터가 추가되서 요청 메세지가 온다.</li>\n</ul>\n</li>\n<li>\n<p>해당 요청 메세지가 온다면 웹 서버는 다음과 같이 동작한다.</p>\n<ul>\n<li>\n<p>먼저 URI에 적힌 파일명을 보고 프로그램인지 확인한다.</p>\n<ul>\n<li>ex. .cgi, php 등등</li>\n</ul>\n</li>\n<li>프로그램이라면 해당 프로그램을 작동시키도록 OS에 의뢰한다.</li>\n<li>데이터를 처리한 후 출력 데이터를 웹 서버에 돌려준다. 해당 데이터는 Html 태그를 내장한 문서이므로 이것을 응답 메세지로 클라이언트에 반송한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-웹-서버로-수행하는-액세스-제어\" style=\"position:relative;\"><a href=\"#3-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%88%98%ED%96%89%ED%95%98%EB%8A%94-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4\" aria-label=\"3 웹 서버로 수행하는 액세스 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 웹 서버로 수행하는 액세스 제어</h3>\n<ul>\n<li>\n<p>웹 서버에서는 데이터를 특정 조건에 따라서 액세스를 제어할 수 있다.</p>\n<ul>\n<li>예를 들어 회원 정보에서 특정 조건으로 동작을 금지시킬 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>이때 사용되는 정보는 다음 3가지 이다.</p>\n<ol>\n<li>클라이언트 주소</li>\n<li>클라이언트 도메인명</li>\n<li>사용자명과 패쓰워드</li>\n</ol>\n</li>\n<li>이 조건을 판단하여 액세스가 허가된 경우에만 파일을 읽거나 프로그램을 실행하도록 할 수 있다.</li>\n<li>\n<p>예시</p>\n<ul>\n<li>클라이언트 IP 주소가 조건이라면 accept로 접속했을 때 점검한다.</li>\n<li>\n<p>클라이언트 도메인명이면 클라이언트 IP주소로 DNS 서버를 이용해 조사한다.</p>\n<ul>\n<li>요청을 받은 웹 서버는 DNS 서버로 요청을 보내 도메인명을 조사한다.</li>\n<li>도메인명을 응답 받으면 해당 도메인 명의 IP가 클라이언트의 송신처 IP와 동일한지 이중으로 확인한다.</li>\n</ul>\n</li>\n<li>사용자명과 패쓰워드를 입력하여 액세스를 제어하기도 한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-응답-메세지를-되돌려-보낸다\" style=\"position:relative;\"><a href=\"#4-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%90%98%EB%8F%8C%EB%A0%A4-%EB%B3%B4%EB%82%B8%EB%8B%A4\" aria-label=\"4 응답 메세지를 되돌려 보낸다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 응답 메세지를 되돌려 보낸다.</h3>\n<ul>\n<li>최초 클라이언트가 요청 메세지를 웹 서버에 응답하는 동작과 동일하다.</li>\n<li>웹 서버가 소켓 라이브러리의 <code class=\"language-text\">write</code> 함수를 호출하여 응답 메세지를 프로토콜 스택에 건내준다.</li>\n<li>어느 소켓을 사용하여 통지할 지 디스크립터를 통지하여 상대를 지정한다.</li>\n<li>해당 패킷이 프로토콜 스택에 의뢰되어 응답된다.</li>\n</ul>\n<br>\n<h2 id=\"🛺-story4-웹-브라우저가-응답-메시지를-받아-화면에-표시한다\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story4-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%95%84-%ED%99%94%EB%A9%B4%EC%97%90-%ED%91%9C%EC%8B%9C%ED%95%9C%EB%8B%A4\" aria-label=\"🛺 story4 웹 브라우저가 응답 메시지를 받아 화면에 표시한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story4] 웹 브라우저가 응답 메시지를 받아 화면에 표시한다</h2>\n<h3 id=\"1-응답-데이터의-형식을-보고-타입을-판단한다\" style=\"position:relative;\"><a href=\"#1-%EC%9D%91%EB%8B%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4\" aria-label=\"1 응답 데이터의 형식을 보고 타입을 판단한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 응답 데이터의 형식을 보고 타입을 판단한다</h3>\n<ul>\n<li>\n<p>응답 메시지에 저장된 데이터가 어떤 종류인지 조사한다.</p>\n<ul>\n<li>문장, 화상, 음성, 영상 등등</li>\n</ul>\n</li>\n<li>\n<p>응답 메시지의 헤더에 <code class=\"language-text\">Content-Type</code>을 통해 데이터의 종류를 쓰도록 한다.</p>\n<ul>\n<li>MIME 사양으로 그 종류가 규정되어 있다.</li>\n</ul>\n</li>\n<li>데이터의 종류가 text라면 어떤 문자 코드를 사용해야하는지 <code class=\"language-text\">charset</code>을 통해서 판단한다.</li>\n<li>\n<p><code class=\"language-text\">Content-Encoding</code> 을 통해 헤더의 필드 값을 조사한다.</p>\n<ul>\n<li>압축 기술이나 부호화 기술에 따라서 변환 여부를 알아야 한다.</li>\n</ul>\n</li>\n<li>요청 파일의 확장자를 통해서 데이터를 판단하기도 한다.</li>\n</ul>\n<h3 id=\"2-브라우저-화면에-웹-페이지를-표시하여-액세스를-완료한다\" style=\"position:relative;\"><a href=\"#2-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%ED%99%94%EB%A9%B4%EC%97%90-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%ED%91%9C%EC%8B%9C%ED%95%98%EC%97%AC-%EC%95%A1%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%9C%EB%8B%A4\" aria-label=\"2 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다</h3>\n<ul>\n<li>HTML의 경우 그 태그의 의미를 해석하여 OS가 어느 위치에 어떻게 표시할지 지시한다.</li>\n<li>JPEG나 GIF 형식은 압축을 풀고 건네준다.</li>\n<li>\n<p>관련된 응답 데이터 중 소프트웨어 어플리케이션 데이터는 해당 데이터를 호출하여 화면에 표시될 수도 있다.</p>\n<ul>\n<li>워드프로세서나 프레젠테이션 등등.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story3-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%EC%9D%98%EB%AF%B8%EB%A5%BC-%ED%95%B4%EC%84%9D%ED%95%98%EC%97%AC-%EC%9A%94%EA%B5%AC%EC%97%90-%EC%9D%91%ED%95%9C%EB%8B%A4\">🛺 Story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다.</a></p>\n<ul>\n<li><a href=\"#1-%EC%A1%B0%ED%9A%8C%EC%9D%98-uri%EB%A5%BC-%EC%8B%A4%EC%A0%9C-%ED%8C%8C%EC%9D%BC%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\">1. 조회의 URI를 실제 파일명으로 변환한다</a></li>\n<li><a href=\"#2-cgi-common-gateway-interface-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">2. CGI (Common Gateway Interface) 프로그램을 작동하는 경우</a></li>\n<li><a href=\"#3-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%88%98%ED%96%89%ED%95%98%EB%8A%94-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4\">3. 웹 서버로 수행하는 액세스 제어</a></li>\n<li><a href=\"#4-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%90%98%EB%8F%8C%EB%A0%A4-%EB%B3%B4%EB%82%B8%EB%8B%A4\">4. 응답 메세지를 되돌려 보낸다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story4-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%95%84-%ED%99%94%EB%A9%B4%EC%97%90-%ED%91%9C%EC%8B%9C%ED%95%9C%EB%8B%A4\">🛺 Story4 웹 브라우저가 응답 메시지를 받아 화면에 표시한다</a></p>\n<ul>\n<li><a href=\"#1-%EC%9D%91%EB%8B%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4\">1. 응답 데이터의 형식을 보고 타입을 판단한다</a></li>\n<li><a href=\"#2-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%ED%99%94%EB%A9%B4%EC%97%90-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%ED%91%9C%EC%8B%9C%ED%95%98%EC%97%AC-%EC%95%A1%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%9C%EB%8B%A4\">2. 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌 🛺 Story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다. 1. 조회의 URI를 실제 파일명으로 변환한다 http 요청 메세지의 메소드와 URI에 따라서 웹 서버 내부의 동작이 달라진다. URI에 적힌 경로에 따라서 데이터를 얻어 응답하는 것이다. 하지만 이 데이터를 반드시 디스크에서 읽는 것은 아니다. URI에 기록된 경로명의 파일을 읽어오면 디스크의 파일이 전부 노출되기 때문에 무방비해진다. 해결 방법으로 웹 서버에 공개하는 디렉토리를 디스크의 실제 디렉토리가 아니라 가상으로 만든 디렉토리 구조를 사용하도록 한다. 웹 어플리케이션 내부에서 가상으로 설정한 디렉토리와 실제 데이터를 대응하여 해당 데이터를 반송하도록 한다. 만일 브라우저에서 보낸 URI에 마지막 파일명이 생략되면 defau…","frontmatter":{"date":"October 07, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_10","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-10/"}},"next":{"id":"6e17ee34-1cf3-539f-a77c-ab519e24df3c","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"🛺-story1-서버의-개요\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story1-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EC%9A%94\" aria-label=\"🛺 story1 서버의 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story1] 서버의 개요</h2>\n<h3 id=\"1-클라이언트와-서버의-차이점\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"1 클라이언트와 서버의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클라이언트와 서버의 차이점</h3>\n<ul>\n<li>서버도 클라이언트로부터 전송된 패킷을 받기 위해서 준비 단계를 거쳐야한다.</li>\n</ul>\n<h4 id=\"서버와-클라이언트의-차이점\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"서버와 클라이언트의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버와 클라이언트의 차이점</h4>\n<ul>\n<li>네트워크와 관련된 전체적인 구조는 비슷한 형태를 지니고 있다.</li>\n<li>하지만 서버는 소켓을 미리 열고 클라이언트의 연결을 기다린다는 점, 여러 클라이언트와 소통해야 한다는 점에서 클라이언트와 차이점을 가지고 있다.</li>\n</ul>\n<h3 id=\"2-서버-어플리케이션의-구조\" style=\"position:relative;\"><a href=\"#2-%EC%84%9C%EB%B2%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 서버 어플리케이션의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 서버 어플리케이션의 구조</h3>\n<p>서버 프로그램에서 다수의 클라이언트와 소켓 통신을 하기 위해서 다음과 같은 구조로 진행한다. </p>\n<ul>\n<li>서버 프로그램에서 클라이언트의 접속을 기다리는 부분과</li>\n<li>클라이언트와 대화를 하는 부분을 나눈다.</li>\n</ul>\n<p>클라이언트와 대화를 하는 부분은 각 클라이언트와 1대1로 대화를 한다. 따라서 대화가 섞이지 않는다. </p>\n<ul>\n<li>서버 OS의 멀티태스크, 멀티스레드 기능을 사용한 기법이다.</li>\n<li>이때 접속할 때마다 새로운 연결을 맺는것이 부담이 되면 클라이언트와의 연결 동작을 미리 해놓고 비어있는 소켓에 연결하기도 한다.</li>\n</ul>\n<h3 id=\"3-서버측의-소켓과-포트-번호\" style=\"position:relative;\"><a href=\"#3-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%9D%98-%EC%86%8C%EC%BC%93%EA%B3%BC-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8\" aria-label=\"3 서버측의 소켓과 포트 번호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 서버측의 소켓과 포트 번호</h3>\n<ul>\n<li>서버와 클라이언트의 역할이 고정되어 있는 것이 아니라 여러 형태로 변경되면서 데이터를 송수신 할 수 있기 때문에 좌우대칭으로 실행될 수 있도록 하는 것이 중요하다.</li>\n<li>\n<p>하지만 TCP 접속 동작은 좌우 대칭으로 만들기 어렵다. 한쪽이 소켓을 열고 기다리며 다른 한쪽이 연결을 해야하기 때문이다.</p>\n<ul>\n<li>여기서 접속하는 측이 클라이언트, 접속을 기다리는 측이 서버라고 할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>클라이언트의 데이터 송수신 동작</p>\n<ol>\n<li>소켓 작성 - 소켓 생성</li>\n<li>서버측의 소켓과 파이프로 연결 - 소켓 접속</li>\n<li>데이터 송수신</li>\n<li>파이프 분리 후 소켓 말소</li>\n</ol>\n</li>\n<li>\n<p>서버의 데이터 송수신 동작</p>\n<ol>\n<li>소켓 작성 - 소켓 생성</li>\n<li>소켓을 접속 대기 생태로 만듬</li>\n<li>접속을 접수</li>\n<li>데이터 송수신</li>\n<li>파이프 분리 후 소켓 말소 </li>\n<li>서버의 접속 준비 단계에서는 서버 어플리케이션의 포트 번호를 소켓에 기록한다. (웹 서버의 경우에는 80)</li>\n</ol>\n</li>\n<li>서버에서 <code class=\"language-text\">accept</code> 를 통해서 클라이언트로부터 소켓을 접수한다.</li>\n<li>\n<p>클라이언트와의 접속이 되면 접속 대기 소켓을 복사하여 새로운 소켓을 생성한다.</p>\n<ul>\n<li>접속 상대에 대한 제어 정보를 새로운 소켓에 기록한다.</li>\n</ul>\n</li>\n<li>기존의 접속 대기 소켓은 계속 접속 대기인 상태로 존재하여 다른 클라이언트와의 접속을 기다린다.</li>\n</ul>\n<h4 id=\"웹-소켓의-포트번호\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%86%8C%EC%BC%93%EC%9D%98-%ED%8F%AC%ED%8A%B8%EB%B2%88%ED%98%B8\" aria-label=\"웹 소켓의 포트번호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 소켓의 포트번호</h4>\n<ul>\n<li>\n<p>본래 클라이언트는 80이라는 포트의 소켓과 통신을 시작한다. 하지만 접속 한 후 응답에 다른 포트 번호가 들어올 수 없으므로 그대로 80 포트를 사용해야 한다.</p>\n<ul>\n<li>이때 같은 포트 번호를 지닌 여러 소켓이 있게되는 문제가 발생한다.</li>\n<li>다음 패킷이 왔을 때 헤더의 포트번호로 통신 중인 소켓을 식별할 수 없기 때문이다.</li>\n</ul>\n</li>\n<li>\n<p>해결방법</p>\n<ul>\n<li>\n<p>소켓을 지정할 때 다음 4가지 정보를 모두 조합하여 소켓을 식별한다.</p>\n<ol>\n<li>클라이언트 IP주소</li>\n<li>클라이언트 포트 번호</li>\n<li>서버 IP주소</li>\n<li>서버 포트 번호 </li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>그렇다면 왜 디스크립터가 필요할까 ? (위 4가지 정보로 소켓을 식별할 수 있는데)</p>\n<ul>\n<li>접속을 대기할 때는 아직 클라이언트 소켓이 지정되지 않았으므로 정보가 없다.</li>\n<li>또한 디스크립터 하나로 소켓을 식별하는 것이 더 간단하다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"🛺-story2-서버의-수신동작\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story2-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91\" aria-label=\"🛺 story2 서버의 수신동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story2] 서버의 수신동작</h2>\n<h3 id=\"1-lan-어댑터에서-수신-신호를-디지털-데이터로-변환한다\" style=\"position:relative;\"><a href=\"#1-lan-%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%8B%A0-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%94%94%EC%A7%80%ED%84%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\" aria-label=\"1 lan 어댑터에서 수신 신호를 디지털 데이터로 변환한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. LAN 어댑터에서 수신 신호를 디지털 데이터로 변환한다</h3>\n<ul>\n<li>LAN 어댑터에서 수신하여 디지털 데이터로 바꾼다. (클록 신호를 추출하여 데이터를 0101의 형태로 바꾼다)</li>\n<li>FCS를 통해 패킷의 오류 유무를 검사한다. 오류가 있다면 패킷을 폐기한다.</li>\n<li>\n<p>MAC헤더의 수신처가 본인인지 확인한다.</p>\n<ul>\n<li>이더넷은 LAN 전체에 신호를 흘리고 상대를 찾는 형태이기 때문에 올바른 패킷이 아니더라도 도착할 수 있기 때문이다.</li>\n</ul>\n</li>\n<li>변환된 디지털 데이터를 LAN 어댑터 내부의 버퍼 메모리에 저장한다. (여기까지 LAN의 MAC 부분이 담당한다)</li>\n<li>LAN 어댑터에서 CPU에게 인터럽트로 패킷이 도착했다는 사실을 알린다.</li>\n<li>LAN 드라이버는 LAN 어댑터의 버퍼 메모리에서 수신한 패킷을 추출하여 프로토콜을 판별하고 적합한 프로토콜 처리 소프트웨어를 호출한다. (TCP/IP 면 해당 프로토콜을 호출하여 패킷을 건낸다)</li>\n</ul>\n<h3 id=\"2-ip-담당-부분의-수신-동작\" style=\"position:relative;\"><a href=\"#2-ip-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91\" aria-label=\"2 ip 담당 부분의 수신 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. IP 담당 부분의 수신 동작</h3>\n<ul>\n<li>\n<p>IP 담당은 IP 헤더를 점검하고 수신처가 본인 IP인지 확인한다.</p>\n<ul>\n<li>서버가 라우터와 같이 패킷을 중개하는 역할일 수 있으므로 본인에게 온 패킷이 아닐수도 있다. 이 경우에는 패킷에 쓰인 수신처 IP 주소로 패킷을 중개해야한다.</li>\n</ul>\n</li>\n<li>IP 담당에서는 fragmentation을 통해서 패킷이 분할되었는지 조사하고 그렇다면 패킷을 일시적으로 메모리에 저장하고 패킷이 모두 모이면 복원한다.</li>\n<li>\n<p>IP 헤더의 프로토콜 번호를 조사하여 해당 부분에 패킷을 건내준다.</p>\n<ul>\n<li>06이면 TCP 담당, 11이면 UDP 담당 등등</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-tcp-담당-부분이-접속-패킷을-수신했을-때의-동작\" style=\"position:relative;\"><a href=\"#3-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%A0%91%EC%86%8D-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"3 tcp 담당 부분이 접속 패킷을 수신했을 때의 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. TCP 담당 부분이 접속 패킷을 수신했을 때의 동작</h3>\n<ul>\n<li>\n<p>만일 도착한 패킷의 SYN 컨트롤비트가 1이라면 접속 동작의 패킷이다.</p>\n<ul>\n<li>접속을 접수하는 동작을 실행한다.</li>\n<li>\n<p>포트 번호를 조사하여 해당 포트 번호와 일치하는 접속 대기 소켓이 있는지 확인한다.</p>\n<ul>\n<li>만일 없다면 오류이므로 오류 패킷을 클라이언트에게 반환한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>접속 대기 소켓을 찾으면 소켓을 복사하여 새로운 소켓을 만들고 송신처IP주소, 포트번호, 시퀀스 초기값, 윈도우 값등 필수 정보를 기록한다.</li>\n<li>패킷을 받았다는 ACK 번호, 서버의 시퀀스 초기값, 수신 버퍼 빈 용량인 윈도우 값 등을 기록한 TCP 헤더를 만들고 IP 담당에 의뢰하여 반송한다.</li>\n<li>패킷이 잘 도착하면 ACK 번호가 돌아와 접속이 완료된다.</li>\n</ul>\n<h3 id=\"4-tcp-담당-부분이-데이터-패킷을-수신했을-때의-동작\" style=\"position:relative;\"><a href=\"#4-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"4 tcp 담당 부분이 데이터 패킷을 수신했을 때의 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. TCP 담당 부분이 데이터 패킷을 수신했을 때의 동작</h3>\n<ul>\n<li>서버측에 같은 포트 번호를 가진 소켓이 많으므로 앞에서 말한 4가지 정보로 적절한 소켓을 찾는다.</li>\n<li>\n<p>해당 소켓에 기록된 정보들을 통해 올바르게 데이터 송수신이 이루어지고 있는지 확인한다.</p>\n<ul>\n<li>시퀀스 번호, 데이터 조각의 길이 등등을 확인한다.</li>\n</ul>\n</li>\n<li>패킷에서 추출된 데이터를 수신 버퍼에 저장한다.</li>\n<li>데이터를 수신하면 수신 응답용 TCP 헤더를 만들고 수신 패킷에 시퀀스 번호와 데이터 길이로 얻은 ACK 번호를 기록하고 IP 담당에 넘겨 클라이언트에게 반송한다.</li>\n<li>수신 버퍼에 기록된 데이터들은 소켓 라이브러리의 <code class=\"language-text\">read</code> 함수 호출을 통해 어플리케이션에 넘겨진다.</li>\n<li>어플리케이션에서 http 리퀘스트 메시지 내용을 조사하고 브라우저에서 데이터를 반송한다.</li>\n</ul>\n<h3 id=\"5-tcp-담당-부분의-연결-끊기-동작\" style=\"position:relative;\"><a href=\"#5-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8F%99%EC%9E%91\" aria-label=\"5 tcp 담당 부분의 연결 끊기 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. TCP 담당 부분의 연결 끊기 동작</h3>\n<ul>\n<li>\n<p>어느 쪽(클라이언트 or 서버) 에서든 연결 끊기 동작에 들어가도 상관없다.</p>\n<ul>\n<li>HTTP 1.0 이라면 서버에서 연결 끊기 동작을 시작한다.</li>\n</ul>\n</li>\n<li>서버에서 <code class=\"language-text\">close</code> 함수를 호출하고 FIN 1로 설정한 TCP 헤더를 클라이언트에게 보낸다.</li>\n<li>클라이언트도  <code class=\"language-text\">close</code> 를 호출하고 FIN 1로 설정하여 반송하고 ACK도 보낸다.</li>\n<li>잠시 기다렸다가 소켓을 말소한다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story1-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EC%9A%94\">🛺 Story1 서버의 개요</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">1. 클라이언트와 서버의 차이점</a></p>\n<ul>\n<li><a href=\"#%EC%84%9C%EB%B2%84%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">서버와 클라이언트의 차이점</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%EC%84%9C%EB%B2%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B5%AC%EC%A1%B0\">2. 서버 어플리케이션의 구조</a></li>\n<li>\n<p><a href=\"#3-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%9D%98-%EC%86%8C%EC%BC%93%EA%B3%BC-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8\">3. 서버측의 소켓과 포트 번호</a></p>\n<ul>\n<li><a href=\"#%EC%9B%B9-%EC%86%8C%EC%BC%93%EC%9D%98-%ED%8F%AC%ED%8A%B8%EB%B2%88%ED%98%B8\">웹 소켓의 포트번호</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story2-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91\">🛺 Story2 서버의 수신동작</a></p>\n<ul>\n<li><a href=\"#1-lan-%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%8B%A0-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%94%94%EC%A7%80%ED%84%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\">1. LAN 어댑터에서 수신 신호를 디지털 데이터로 변환한다</a></li>\n<li><a href=\"#2-ip-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91\">2. IP 담당 부분의 수신 동작</a></li>\n<li><a href=\"#3-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%A0%91%EC%86%8D-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\">3. TCP 담당 부분이 접속 패킷을 수신했을 때의 동작</a></li>\n<li><a href=\"#4-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\">4. TCP 담당 부분이 데이터 패킷을 수신했을 때의 동작</a></li>\n<li><a href=\"#5-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8F%99%EC%9E%91\">5. TCP 담당 부분의 연결 끊기 동작</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 07, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_9","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-9/"}},"prev":{"id":"e5504118-763f-5c6d-b5da-4fd50eef8d78","html":"<blockquote>\n<p>다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ <em>CH2. 운영체제 개요</em>를 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"-1-운영체제의-정의\" style=\"position:relative;\"><a href=\"#-1-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\" 1 운영체제의 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 1. 운영체제의 정의</h2>\n<ul>\n<li>운영체제란 컴퓨터 하드웨어 바로 위에 설치되는 소프트웨어이다.</li>\n<li>사용자가 직접 하드웨어를 다루는 것이 쉽지 않기 때문에 하드웨어를 기본적으로 운용하는 운영체제를 탑재해서 사용하도록 한다.</li>\n</ul>\n<h3 id=\"좁은-의미-운영체제-vs-넓은-의미-운영체제\" style=\"position:relative;\"><a href=\"#%EC%A2%81%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-vs-%EB%84%93%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C\" aria-label=\"좁은 의미 운영체제 vs 넓은 의미 운영체제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좁은 의미 운영체제 vs. 넓은 의미 운영체제</h3>\n<ul>\n<li>운영체제도 소프트웨어이기 때문에 컴퓨터가 켜지면서 메모리에 올라가서 사용이 되어야 한다. 하지만 운영체제 전부를 메모리에 올려서 사용하기에는 리소스 낭비가 심하기 때문에 꼭 필요한 부분만을 전원이 켜짐과 동시에 메모리에 올린다.</li>\n<li>메모리에 전원이 켜짐과 동시에 상주하는 부분을 <strong>커널</strong>이라고 한다 ⇒ 좁은 의미의 운영체제</li>\n<li>\n<p>이후 필요한 부분은 그때그때 사용자 유틸리티로 메모리에 올려서 사용한다 ⇒ 넓은 의미의 운영체제</p>\n<ul>\n<li>파일 복사 등등</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"--2-운영체제의-기능\" style=\"position:relative;\"><a href=\"#--2-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EA%B8%B0%EB%8A%A5\" aria-label=\"  2 운영체제의 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩  2. 운영체제의 기능</h2>\n<ul>\n<li>\n<p><strong>1) 하드웨어</strong>와 <strong>2) 사용자</strong>를 위한 역할 두가지를 중간에서 담당한다.</p>\n<ul>\n<li>\n<p>하드웨어를 관리하고 리소스를 효율적으로 운용한다.</p>\n<ul>\n<li>자원 관리자 (resource manager)라고도 불린다.</li>\n<li>자원이란 CPU, 메모리, 하드디스크, 소프트웨어 자원들 등등</li>\n</ul>\n</li>\n<li>사용자에게 사용하기 편리한 인터페이스를 제공한다.</li>\n</ul>\n</li>\n<li>자원을 관리할 때 최대한의 성능을 내도록 한다. 동시에 모든 사용자 및 프로그램이 형평성있게 자원을 분배받을 수 있도록 관리한다.</li>\n<li>\n<p>사용자와 운영체제의 보안을 담당한다.</p>\n<ul>\n<li>다른 프로그램의 메모리 영역 참조를 막고 사적인 정보를 보호한다.</li>\n<li>메모리 영역의 보안을 담당한다.</li>\n</ul>\n<br>\n</li>\n</ul>\n<h2 id=\"--3-운영체제의-분류\" style=\"position:relative;\"><a href=\"#--3-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EB%B6%84%EB%A5%98\" aria-label=\"  3 운영체제의 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩  3. 운영체제의 분류</h2>\n<h3 id=\"단일-작업용-vs-다중-작업용\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%9E%91%EC%97%85%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%9E%91%EC%97%85%EC%9A%A9\" aria-label=\"단일 작업용 vs 다중 작업용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 작업용 vs. 다중 작업용</h3>\n<ul>\n<li>단일 작업용 single tasking - 한번에 하나의 프로그램만 실행</li>\n<li>\n<p>다중 작업용 multi tasking - 여러 프로그램을 동시에 실행</p>\n<ul>\n<li>여러 프로그램이 CPU와 메모리를 공유한다.</li>\n<li><strong>시분할 시스템(time sharing system) -</strong> CPU의 작업시간을 나누어서 시분할 시스템(time sharing system) 방식으로 하나의 CPU에서 여러 프로그램을 실행시킨다.</li>\n<li><strong>다중 프로그래밍 시스템(multi-programming system)</strong> - 메모리 공간을 분할해 여러 프로그램들을 동시에 메모리에 올려놓고 처리하는 다중 프로그래밍 시스템(multi-programming system)으로 실행한다.</li>\n<li>\n<p><strong>대화형 시스템(interactive system)</strong> - 여러 프로그램을 같이 실행시키지만 사용자 개개인의 관점에서 각 프로그램에 대한 키보드 입력 결과를 바로 화면에 보여준다.</p>\n<ul>\n<li>ex. 여러 사람이 접속해서 사용하는 서버 (ec2)</li>\n</ul>\n</li>\n<li><strong>다중처리기 시스템 (multi-processor system)</strong> - 하나의 컴퓨터에 여러 CPU가 설치된 경우이다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"단일-사용자용-vs-다중-사용자용\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9\" aria-label=\"단일 사용자용 vs 다중 사용자용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 사용자용 vs. 다중 사용자용</h3>\n<ul>\n<li>\n<p>단일 사용자용 - 한번에 한명의 사용자만 사용가능한 운영체제이다.</p>\n<ul>\n<li>단일 사용자용은 단일 작업용, 다중 작업용으로 나뉜다.</li>\n<li>MS 윈도우 등등</li>\n</ul>\n</li>\n<li>\n<p>다중 사용자용 - 여러 사용자가 동시에 접속해서 사용할 수 있는 운영체제이다.</p>\n<ul>\n<li>서버, 웹서버 등등</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"처리방식\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%8B%9D\" aria-label=\"처리방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리방식</h3>\n<ul>\n<li>\n<p>일괄처리 (batch processing) 방식 - 요청된 작업을 모아서 한꺼번에 처리한다.</p>\n<ul>\n<li>사용자 측면에서 응답시간이 길다.</li>\n</ul>\n</li>\n<li>\n<p>시분할 방식 - 컴퓨터의 처리능력을 일정한 시간 단위로 분할해서 사용한다. (현대에 대부분 사용)</p>\n<ul>\n<li>여러 사용자의 요청을 짧은 단위의 시간을 번갈아서 처리하여 응답한다.</li>\n<li>따라서 각 사용자가 혼자 사용하는 것처럼 느낀다. (대화형 시스템)</li>\n</ul>\n</li>\n<li>\n<p>실시간 (real time) 운영체제 - 정해진 시간 안에 어떤 작업이 반드시 처리됨을 보장하는 시스템</p>\n<ul>\n<li>원자로, 공장 제어 시스템, 미사일 제어 시스템 등등</li>\n<li>\n<p>경성 실시간 시스템 (hard realtime system)</p>\n<ul>\n<li>주어진 시간을 지키지 못하면 위험할 결과를 초래할 로켓, 원자로 제어 시스템 등등</li>\n</ul>\n</li>\n<li>\n<p>연성 실시간 시스템 (soft realtime system)</p>\n<ul>\n<li>멀티 미티어 스트리밍처럼 데이터가 정해진 시간 단위로 전달되어야 올바른 기능을 수행하는 시스템</li>\n</ul>\n</li>\n</ul>\n<br>\n</li>\n</ul>\n<h2 id=\"-4-운영체제의-예\" style=\"position:relative;\"><a href=\"#-4-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%98%88\" aria-label=\" 4 운영체제의 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 4. 운영체제의 예</h2>\n<ul>\n<li>윈도우는 시스템에 새로운 하드웨어를 장착하면 운영체제가 자동으로 감지하여 설정되는 plug and play 기능이 있다.</li>\n<li>유닉스는 안정성이 높고 깔끔한 모듈 단위로 구현된 운영체제로 확장성을 지원하는 대중적인 os이다.</li>\n</ul>\n<br>\n<h2 id=\"-5-운영체제의-자원-관리-기능\" style=\"position:relative;\"><a href=\"#-5-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-%EA%B8%B0%EB%8A%A5\" aria-label=\" 5 운영체제의 자원 관리 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 5. 운영체제의 자원 관리 기능</h2>\n<h3 id=\"하드웨어\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4\" aria-label=\"하드웨어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하드웨어</h3>\n<ul>\n<li>\n<p>자원</p>\n<ul>\n<li>CPU, 메모리, 입출력 장치 등의 주변기기</li>\n<li>여러 프로세스가 CPU와 메모리를 효율적으로 사용하도록 관리</li>\n<li>CPU와 메모리의 데이터가 전원이 꺼지면 없어지기 때문에 해당 데이터를 파일의 형태로 보조기억장치에 저장 (하드디스크)</li>\n<li>키보드, 모니터 등의 입출력 장치로 정보 교환</li>\n</ul>\n</li>\n<li>\n<p>CPU 관리</p>\n<ul>\n<li>CPU 스캐줄링 - 하나의 CPU를 어느 시점에 어떤 프로세스가 점유할 것인가</li>\n<li>CPU를 효율적으로 사용하면서 불이익을 받는 프로세스는 없도록 관리</li>\n<li>\n<p><strong>FCFS</strong> - 먼저온 프로세스를 먼저 처리</p>\n<ul>\n<li>시스템 전체적인 측면에서 비효율적일 수 있다. CPU를 먼저 점유한 프로세스가 작업을 완료할 때까지 다른 프로세스는 CPU를 사용할 수 없다. 이때 짧은 처리 시간을 가진 프로세스가 뒤늦게 도착했다면 매우 비효율적이다.</li>\n<li>문제 개선을 위해 RR이 등장했다.</li>\n</ul>\n</li>\n<li>\n<p><strong>RR</strong> - CPU를 할당받아 사용할 수 있는 시간을 고정하여 번갈아 사용한다.</p>\n<ul>\n<li>응답시간은 밀리초 단위로 지정하여 다수의 사용자가 동시접속해도 1초 이하의 응답시간을 보장받는다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Priority</strong> - 우선순위를 부여하여 그것에 따라 CPU를 먼저 할당한다.</p>\n<ul>\n<li>지나치게 오래 기다리지 않도록 기다린 시간이 길면 우선순위를 높여준다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>메모리 관리</p>\n<ul>\n<li>CPU가 직접 접근할 수 있는 컴퓨터 내부의 기억장치</li>\n<li>\n<p>메모리의 어느 부분이 어떤 프로그램에 의해 사용되는지 파악하기 위해 주소(address)로 관리한다.</p>\n<ul>\n<li>필요할 때 할당하고 끝나면 회수한다.</li>\n<li>불필요한 자원 낭비를 막는다.</li>\n</ul>\n</li>\n<li>메모리의 다른 프로세스가 서로 침범하지 않도록 보안을 유지한다.</li>\n<li>\n<p><strong>고정분할(fixed partition)</strong> - 물리적 메모리를 몇개의 분할로 미리 나누어서 관리</p>\n<ul>\n<li>각각의 분할에는 하나의 프로그램만 적재되므로 융통성이 없다.</li>\n<li>동시 적재 프로그램이 분할 개수로 한정되며, 분할된 크기보다 큰 프로그램은 적재할 수 없다.</li>\n<li>분할 크기보다 작은 프로그램은 남는 영역인 internal fragmentation이 생겨 비효율적이다.</li>\n</ul>\n</li>\n<li>\n<p><strong>가변분할(variable partition)</strong> - 프로그램 크기에 맞게 메모리를 분할해서 사용한다.</p>\n<ul>\n<li>프로그램의 크기에 따라서 제한이 되는 고정분할의 문제를 해결하지만 물리 메모리보다 큰 프로그램의 적재는 여전히 어렵다.</li>\n<li>분할 크기와 개수가 동적으로 변하기 때문에 기술적 관리 기법이 필요하다.</li>\n<li>\n<p>내부조각 (internal fragmentation)은 발생하지 않지만 외부조각 (external fragmentation)은 발생한다.</p>\n<ul>\n<li>프로그램에 할당되지는 않지만 남은 크기가 작아 할당되지 못하는 메모리 영역</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>가상 메모리 (virtual memory)</strong> - 가장 많이 이용되며 물리 메모리보다 큰 프로그램 실행이 가능하다.</p>\n<ul>\n<li>모든 프로그램은 물리 메모리와 상관없이 독립적으로 0번에서 시작하는 가상 메모리 주소를 가진다.</li>\n<li>운영체제가 이 가상 메모리를 물리 메모리로 mapping 하여 변환 후 프로그램을 물리 메모리에 올린다.</li>\n<li>\n<p>프로그램이 전체가 동시에 사용되는것이 아니기 때문에 물리 메모리보다 큰 프로그램을 사용할 수 있다. 나머지 부분을 하드디스크나 보조기억장치에 저장했다가 적재하는 방식을 택한다.</p>\n<ul>\n<li>스왑 영역 swap area - 이때 사용되는 보조기억장치</li>\n</ul>\n</li>\n<li>가상 메모리 주소 공간은 페이지(page) 단위로 동일하게 나뉘어 물리적 메모리와 스왑 영역에 일부분씩 저장된다 ⇒ 페이징 기법</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>주변장치 및 입출력 장치</p>\n<ul>\n<li>인터럽트 (interrupt) 매커니즘으로 관리한다.</li>\n<li>\n<p>CPU가 필요할 때 신호를 발생시켜 서비스를 요청하는데, CPU는 스캐줄링 맞추어 작업을 처리하다가 인터럽트에 의한 요청 서비스를 수행한다.</p>\n<ul>\n<li>ex. 키보드 입력</li>\n</ul>\n</li>\n<li>CPU는 인터럽트의 작업을 중간에 수행하기 위해서 이전에 처리중이던 작업의 상태를 저장해둔다.</li>\n<li>\n<p>각 상황과 운영체제마다 인터럽트가 발생할때마다 따르는 인터럽트 루틴에 따라서 수행한다.</p>\n<ul>\n<li>운영체제 커널의 일부분이다.</li>\n</ul>\n</li>\n<li>각 주변장치는 업무를 관리하기 위한 컨트롤러(CPU와 같은 것)가 있어 업무를 처리하고 CPU에 인터럽트를 발생시켜 보고하는 역할을 한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-1-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%A0%95%EC%9D%98\">🌩 1. 운영체제의 정의</a></p>\n<ul>\n<li><a href=\"#%EC%A2%81%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-vs-%EB%84%93%EC%9D%80-%EC%9D%98%EB%AF%B8-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C\">좁은 의미 운영체제 vs. 넓은 의미 운영체제</a></li>\n</ul>\n</li>\n<li><a href=\"#--2-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EA%B8%B0%EB%8A%A5\">🌩  2. 운영체제의 기능</a></li>\n<li>\n<p><a href=\"#--3-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EB%B6%84%EB%A5%98\">🌩  3. 운영체제의 분류</a></p>\n<ul>\n<li><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%9E%91%EC%97%85%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%9E%91%EC%97%85%EC%9A%A9\">단일 작업용 vs. 다중 작업용</a></li>\n<li><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9-vs-%EB%8B%A4%EC%A4%91-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9A%A9\">단일 사용자용 vs. 다중 사용자용</a></li>\n<li><a href=\"#%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%8B%9D\">처리방식</a></li>\n</ul>\n</li>\n<li><a href=\"#-4-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%98%88\">🌩 4. 운영체제의 예</a></li>\n<li>\n<p><a href=\"#-5-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-%EA%B8%B0%EB%8A%A5\">🌩 5. 운영체제의 자원 관리 기능</a></p>\n<ul>\n<li><a href=\"#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4\">하드웨어</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 11, 2021","title":"운영체제와 정보기술의 원리 - CH2. 운영체제 개요","categories":"운영체제 책","author":"코다","emoji":"🧁"},"fields":{"slug":"/operating-system-1/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/one-percent-network-10/","nextSlug":"/one-percent-network-9/","prevSlug":"/operating-system-1/"}},"staticQueryHashes":["1073350324","2938748437"]}