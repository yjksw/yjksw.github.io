{"componentChunkName":"component---src-templates-blog-template-js","path":"/one-percent-network-10/","result":{"data":{"cur":{"id":"b1d694e9-dd29-553b-90c6-4f7d6293c7a6","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"🛺-story3-웹-서버-소프트웨어가-리퀘스트-메시지의-의미를-해석하여-요구에-응한다\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story3-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%EC%9D%98%EB%AF%B8%EB%A5%BC-%ED%95%B4%EC%84%9D%ED%95%98%EC%97%AC-%EC%9A%94%EA%B5%AC%EC%97%90-%EC%9D%91%ED%95%9C%EB%8B%A4\" aria-label=\"🛺 story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story3] 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다.</h2>\n<h3 id=\"1-조회의-uri를-실제-파일명으로-변환한다\" style=\"position:relative;\"><a href=\"#1-%EC%A1%B0%ED%9A%8C%EC%9D%98-uri%EB%A5%BC-%EC%8B%A4%EC%A0%9C-%ED%8C%8C%EC%9D%BC%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\" aria-label=\"1 조회의 uri를 실제 파일명으로 변환한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 조회의 URI를 실제 파일명으로 변환한다</h3>\n<ul>\n<li>http 요청 메세지의 메소드와 URI에 따라서 웹 서버 내부의 동작이 달라진다.</li>\n<li>\n<p>URI에 적힌 경로에 따라서 데이터를 얻어 응답하는 것이다.</p>\n<ul>\n<li>하지만 이 데이터를 반드시 디스크에서 읽는 것은 아니다.</li>\n<li>URI에 기록된 경로명의 파일을 읽어오면 디스크의 파일이 전부 노출되기 때문에 무방비해진다.</li>\n</ul>\n</li>\n<li>\n<p>해결 방법으로 웹 서버에 공개하는 디렉토리를 디스크의 실제 디렉토리가 아니라 가상으로 만든 디렉토리 구조를 사용하도록 한다.</p>\n<ul>\n<li>웹 어플리케이션 내부에서 가상으로 설정한 디렉토리와 실제 데이터를 대응하여 해당 데이터를 반송하도록 한다.</li>\n</ul>\n</li>\n<li>\n<p>만일 브라우저에서 보낸 URI에 마지막 파일명이 생략되면 default로 설정된 파일명이 추가되어서 화명에 표시된다.</p>\n<ul>\n<li>ex. index.html</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-cgi-common-gateway-interface-프로그램을-작동하는-경우\" style=\"position:relative;\"><a href=\"#2-cgi-common-gateway-interface-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"2 cgi common gateway interface 프로그램을 작동하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. CGI (Common Gateway Interface) 프로그램을 작동하는 경우</h3>\n<ul>\n<li>만일 파일 내용에 HTML 문서나 화상데이터면 해당 데이터를 그대로 응답하면 된다.</li>\n<li>\n<p>하지만 만일 문서 등이 아니라 프로그램 파일의 이름을 쓸 수도 있다.</p>\n<ul>\n<li>파일의 내용을 그대로 반송하는 것이 아니라 해당 프로램을 작동시켜 출력하는 데이터를 반송해야 한다.</li>\n<li>여러 프로그램 유형이 있고 각 유형에 따라서 동작 방식은 상이하다.</li>\n</ul>\n</li>\n<li>\n<p>단순 문서를 요청하는 경우와 위에서 말한 프로그램을 동작시켜서 데이터를 얻는 요청 메세지의 형태가 다르다.</p>\n<ul>\n<li>요청 메세지 안에 처리하고자 하는 데이터를 넣어서 보낸다.</li>\n<li>예를 들어서 GET 요청일 경우 query params를 POST 요청일 경우 request body에 데이터가 추가되서 요청 메세지가 온다.</li>\n</ul>\n</li>\n<li>\n<p>해당 요청 메세지가 온다면 웹 서버는 다음과 같이 동작한다.</p>\n<ul>\n<li>\n<p>먼저 URI에 적힌 파일명을 보고 프로그램인지 확인한다.</p>\n<ul>\n<li>ex. .cgi, php 등등</li>\n</ul>\n</li>\n<li>프로그램이라면 해당 프로그램을 작동시키도록 OS에 의뢰한다.</li>\n<li>데이터를 처리한 후 출력 데이터를 웹 서버에 돌려준다. 해당 데이터는 Html 태그를 내장한 문서이므로 이것을 응답 메세지로 클라이언트에 반송한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-웹-서버로-수행하는-액세스-제어\" style=\"position:relative;\"><a href=\"#3-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%88%98%ED%96%89%ED%95%98%EB%8A%94-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4\" aria-label=\"3 웹 서버로 수행하는 액세스 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 웹 서버로 수행하는 액세스 제어</h3>\n<ul>\n<li>\n<p>웹 서버에서는 데이터를 특정 조건에 따라서 액세스를 제어할 수 있다.</p>\n<ul>\n<li>예를 들어 회원 정보에서 특정 조건으로 동작을 금지시킬 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>이때 사용되는 정보는 다음 3가지 이다.</p>\n<ol>\n<li>클라이언트 주소</li>\n<li>클라이언트 도메인명</li>\n<li>사용자명과 패쓰워드</li>\n</ol>\n</li>\n<li>이 조건을 판단하여 액세스가 허가된 경우에만 파일을 읽거나 프로그램을 실행하도록 할 수 있다.</li>\n<li>\n<p>예시</p>\n<ul>\n<li>클라이언트 IP 주소가 조건이라면 accept로 접속했을 때 점검한다.</li>\n<li>\n<p>클라이언트 도메인명이면 클라이언트 IP주소로 DNS 서버를 이용해 조사한다.</p>\n<ul>\n<li>요청을 받은 웹 서버는 DNS 서버로 요청을 보내 도메인명을 조사한다.</li>\n<li>도메인명을 응답 받으면 해당 도메인 명의 IP가 클라이언트의 송신처 IP와 동일한지 이중으로 확인한다.</li>\n</ul>\n</li>\n<li>사용자명과 패쓰워드를 입력하여 액세스를 제어하기도 한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-응답-메세지를-되돌려-보낸다\" style=\"position:relative;\"><a href=\"#4-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%90%98%EB%8F%8C%EB%A0%A4-%EB%B3%B4%EB%82%B8%EB%8B%A4\" aria-label=\"4 응답 메세지를 되돌려 보낸다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 응답 메세지를 되돌려 보낸다.</h3>\n<ul>\n<li>최초 클라이언트가 요청 메세지를 웹 서버에 응답하는 동작과 동일하다.</li>\n<li>웹 서버가 소켓 라이브러리의 <code class=\"language-text\">write</code> 함수를 호출하여 응답 메세지를 프로토콜 스택에 건내준다.</li>\n<li>어느 소켓을 사용하여 통지할 지 디스크립터를 통지하여 상대를 지정한다.</li>\n<li>해당 패킷이 프로토콜 스택에 의뢰되어 응답된다.</li>\n</ul>\n<br>\n<h2 id=\"🛺-story4-웹-브라우저가-응답-메시지를-받아-화면에-표시한다\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story4-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%95%84-%ED%99%94%EB%A9%B4%EC%97%90-%ED%91%9C%EC%8B%9C%ED%95%9C%EB%8B%A4\" aria-label=\"🛺 story4 웹 브라우저가 응답 메시지를 받아 화면에 표시한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story4] 웹 브라우저가 응답 메시지를 받아 화면에 표시한다</h2>\n<h3 id=\"1-응답-데이터의-형식을-보고-타입을-판단한다\" style=\"position:relative;\"><a href=\"#1-%EC%9D%91%EB%8B%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4\" aria-label=\"1 응답 데이터의 형식을 보고 타입을 판단한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 응답 데이터의 형식을 보고 타입을 판단한다</h3>\n<ul>\n<li>\n<p>응답 메시지에 저장된 데이터가 어떤 종류인지 조사한다.</p>\n<ul>\n<li>문장, 화상, 음성, 영상 등등</li>\n</ul>\n</li>\n<li>\n<p>응답 메시지의 헤더에 <code class=\"language-text\">Content-Type</code>을 통해 데이터의 종류를 쓰도록 한다.</p>\n<ul>\n<li>MIME 사양으로 그 종류가 규정되어 있다.</li>\n</ul>\n</li>\n<li>데이터의 종류가 text라면 어떤 문자 코드를 사용해야하는지 <code class=\"language-text\">charset</code>을 통해서 판단한다.</li>\n<li>\n<p><code class=\"language-text\">Content-Encoding</code> 을 통해 헤더의 필드 값을 조사한다.</p>\n<ul>\n<li>압축 기술이나 부호화 기술에 따라서 변환 여부를 알아야 한다.</li>\n</ul>\n</li>\n<li>요청 파일의 확장자를 통해서 데이터를 판단하기도 한다.</li>\n</ul>\n<h3 id=\"2-브라우저-화면에-웹-페이지를-표시하여-액세스를-완료한다\" style=\"position:relative;\"><a href=\"#2-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%ED%99%94%EB%A9%B4%EC%97%90-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%ED%91%9C%EC%8B%9C%ED%95%98%EC%97%AC-%EC%95%A1%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%9C%EB%8B%A4\" aria-label=\"2 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다</h3>\n<ul>\n<li>HTML의 경우 그 태그의 의미를 해석하여 OS가 어느 위치에 어떻게 표시할지 지시한다.</li>\n<li>JPEG나 GIF 형식은 압축을 풀고 건네준다.</li>\n<li>\n<p>관련된 응답 데이터 중 소프트웨어 어플리케이션 데이터는 해당 데이터를 호출하여 화면에 표시될 수도 있다.</p>\n<ul>\n<li>워드프로세서나 프레젠테이션 등등.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story3-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%80-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9D%98-%EC%9D%98%EB%AF%B8%EB%A5%BC-%ED%95%B4%EC%84%9D%ED%95%98%EC%97%AC-%EC%9A%94%EA%B5%AC%EC%97%90-%EC%9D%91%ED%95%9C%EB%8B%A4\">🛺 Story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다.</a></p>\n<ul>\n<li><a href=\"#1-%EC%A1%B0%ED%9A%8C%EC%9D%98-uri%EB%A5%BC-%EC%8B%A4%EC%A0%9C-%ED%8C%8C%EC%9D%BC%EB%AA%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\">1. 조회의 URI를 실제 파일명으로 변환한다</a></li>\n<li><a href=\"#2-cgi-common-gateway-interface-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">2. CGI (Common Gateway Interface) 프로그램을 작동하는 경우</a></li>\n<li><a href=\"#3-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%88%98%ED%96%89%ED%95%98%EB%8A%94-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4\">3. 웹 서버로 수행하는 액세스 제어</a></li>\n<li><a href=\"#4-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EB%90%98%EB%8F%8C%EB%A0%A4-%EB%B3%B4%EB%82%B8%EB%8B%A4\">4. 응답 메세지를 되돌려 보낸다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story4-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%B0%9B%EC%95%84-%ED%99%94%EB%A9%B4%EC%97%90-%ED%91%9C%EC%8B%9C%ED%95%9C%EB%8B%A4\">🛺 Story4 웹 브라우저가 응답 메시지를 받아 화면에 표시한다</a></p>\n<ul>\n<li><a href=\"#1-%EC%9D%91%EB%8B%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4\">1. 응답 데이터의 형식을 보고 타입을 판단한다</a></li>\n<li><a href=\"#2-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%ED%99%94%EB%A9%B4%EC%97%90-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%ED%91%9C%EC%8B%9C%ED%95%98%EC%97%AC-%EC%95%A1%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%99%84%EB%A3%8C%ED%95%9C%EB%8B%A4\">2. 브라우저 화면에 웹 페이지를 표시하여 액세스를 완료한다</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌 🛺 Story3 웹 서버 소프트웨어가 리퀘스트 메시지의 의미를 해석하여 요구에 응한다. 1. 조회의 URI를 실제 파일명으로 변환한다 http 요청 메세지의 메소드와 URI에 따라서 웹 서버 내부의 동작이 달라진다. URI에 적힌 경로에 따라서 데이터를 얻어 응답하는 것이다. 하지만 이 데이터를 반드시 디스크에서 읽는 것은 아니다. URI에 기록된 경로명의 파일을 읽어오면 디스크의 파일이 전부 노출되기 때문에 무방비해진다. 해결 방법으로 웹 서버에 공개하는 디렉토리를 디스크의 실제 디렉토리가 아니라 가상으로 만든 디렉토리 구조를 사용하도록 한다. 웹 어플리케이션 내부에서 가상으로 설정한 디렉토리와 실제 데이터를 대응하여 해당 데이터를 반송하도록 한다. 만일 브라우저에서 보낸 URI에 마지막 파일명이 생략되면 defau…","frontmatter":{"date":"October 07, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_10","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-10/"}},"next":{"id":"6e17ee34-1cf3-539f-a77c-ab519e24df3c","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH6. 웹 서버에 도착하여 응답 데이터가 웹 브라우저로 돌아간다 입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"🛺-story1-서버의-개요\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story1-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EC%9A%94\" aria-label=\"🛺 story1 서버의 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story1] 서버의 개요</h2>\n<h3 id=\"1-클라이언트와-서버의-차이점\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"1 클라이언트와 서버의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클라이언트와 서버의 차이점</h3>\n<ul>\n<li>서버도 클라이언트로부터 전송된 패킷을 받기 위해서 준비 단계를 거쳐야한다.</li>\n</ul>\n<h4 id=\"서버와-클라이언트의-차이점\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"서버와 클라이언트의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버와 클라이언트의 차이점</h4>\n<ul>\n<li>네트워크와 관련된 전체적인 구조는 비슷한 형태를 지니고 있다.</li>\n<li>하지만 서버는 소켓을 미리 열고 클라이언트의 연결을 기다린다는 점, 여러 클라이언트와 소통해야 한다는 점에서 클라이언트와 차이점을 가지고 있다.</li>\n</ul>\n<h3 id=\"2-서버-어플리케이션의-구조\" style=\"position:relative;\"><a href=\"#2-%EC%84%9C%EB%B2%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 서버 어플리케이션의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 서버 어플리케이션의 구조</h3>\n<p>서버 프로그램에서 다수의 클라이언트와 소켓 통신을 하기 위해서 다음과 같은 구조로 진행한다. </p>\n<ul>\n<li>서버 프로그램에서 클라이언트의 접속을 기다리는 부분과</li>\n<li>클라이언트와 대화를 하는 부분을 나눈다.</li>\n</ul>\n<p>클라이언트와 대화를 하는 부분은 각 클라이언트와 1대1로 대화를 한다. 따라서 대화가 섞이지 않는다. </p>\n<ul>\n<li>서버 OS의 멀티태스크, 멀티스레드 기능을 사용한 기법이다.</li>\n<li>이때 접속할 때마다 새로운 연결을 맺는것이 부담이 되면 클라이언트와의 연결 동작을 미리 해놓고 비어있는 소켓에 연결하기도 한다.</li>\n</ul>\n<h3 id=\"3-서버측의-소켓과-포트-번호\" style=\"position:relative;\"><a href=\"#3-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%9D%98-%EC%86%8C%EC%BC%93%EA%B3%BC-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8\" aria-label=\"3 서버측의 소켓과 포트 번호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 서버측의 소켓과 포트 번호</h3>\n<ul>\n<li>서버와 클라이언트의 역할이 고정되어 있는 것이 아니라 여러 형태로 변경되면서 데이터를 송수신 할 수 있기 때문에 좌우대칭으로 실행될 수 있도록 하는 것이 중요하다.</li>\n<li>\n<p>하지만 TCP 접속 동작은 좌우 대칭으로 만들기 어렵다. 한쪽이 소켓을 열고 기다리며 다른 한쪽이 연결을 해야하기 때문이다.</p>\n<ul>\n<li>여기서 접속하는 측이 클라이언트, 접속을 기다리는 측이 서버라고 할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>클라이언트의 데이터 송수신 동작</p>\n<ol>\n<li>소켓 작성 - 소켓 생성</li>\n<li>서버측의 소켓과 파이프로 연결 - 소켓 접속</li>\n<li>데이터 송수신</li>\n<li>파이프 분리 후 소켓 말소</li>\n</ol>\n</li>\n<li>\n<p>서버의 데이터 송수신 동작</p>\n<ol>\n<li>소켓 작성 - 소켓 생성</li>\n<li>소켓을 접속 대기 생태로 만듬</li>\n<li>접속을 접수</li>\n<li>데이터 송수신</li>\n<li>파이프 분리 후 소켓 말소 </li>\n<li>서버의 접속 준비 단계에서는 서버 어플리케이션의 포트 번호를 소켓에 기록한다. (웹 서버의 경우에는 80)</li>\n</ol>\n</li>\n<li>서버에서 <code class=\"language-text\">accept</code> 를 통해서 클라이언트로부터 소켓을 접수한다.</li>\n<li>\n<p>클라이언트와의 접속이 되면 접속 대기 소켓을 복사하여 새로운 소켓을 생성한다.</p>\n<ul>\n<li>접속 상대에 대한 제어 정보를 새로운 소켓에 기록한다.</li>\n</ul>\n</li>\n<li>기존의 접속 대기 소켓은 계속 접속 대기인 상태로 존재하여 다른 클라이언트와의 접속을 기다린다.</li>\n</ul>\n<h4 id=\"웹-소켓의-포트번호\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%86%8C%EC%BC%93%EC%9D%98-%ED%8F%AC%ED%8A%B8%EB%B2%88%ED%98%B8\" aria-label=\"웹 소켓의 포트번호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 소켓의 포트번호</h4>\n<ul>\n<li>\n<p>본래 클라이언트는 80이라는 포트의 소켓과 통신을 시작한다. 하지만 접속 한 후 응답에 다른 포트 번호가 들어올 수 없으므로 그대로 80 포트를 사용해야 한다.</p>\n<ul>\n<li>이때 같은 포트 번호를 지닌 여러 소켓이 있게되는 문제가 발생한다.</li>\n<li>다음 패킷이 왔을 때 헤더의 포트번호로 통신 중인 소켓을 식별할 수 없기 때문이다.</li>\n</ul>\n</li>\n<li>\n<p>해결방법</p>\n<ul>\n<li>\n<p>소켓을 지정할 때 다음 4가지 정보를 모두 조합하여 소켓을 식별한다.</p>\n<ol>\n<li>클라이언트 IP주소</li>\n<li>클라이언트 포트 번호</li>\n<li>서버 IP주소</li>\n<li>서버 포트 번호 </li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>그렇다면 왜 디스크립터가 필요할까 ? (위 4가지 정보로 소켓을 식별할 수 있는데)</p>\n<ul>\n<li>접속을 대기할 때는 아직 클라이언트 소켓이 지정되지 않았으므로 정보가 없다.</li>\n<li>또한 디스크립터 하나로 소켓을 식별하는 것이 더 간단하다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"🛺-story2-서버의-수신동작\" style=\"position:relative;\"><a href=\"#%F0%9F%9B%BA-story2-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91\" aria-label=\"🛺 story2 서버의 수신동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story2] 서버의 수신동작</h2>\n<h3 id=\"1-lan-어댑터에서-수신-신호를-디지털-데이터로-변환한다\" style=\"position:relative;\"><a href=\"#1-lan-%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%8B%A0-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%94%94%EC%A7%80%ED%84%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\" aria-label=\"1 lan 어댑터에서 수신 신호를 디지털 데이터로 변환한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. LAN 어댑터에서 수신 신호를 디지털 데이터로 변환한다</h3>\n<ul>\n<li>LAN 어댑터에서 수신하여 디지털 데이터로 바꾼다. (클록 신호를 추출하여 데이터를 0101의 형태로 바꾼다)</li>\n<li>FCS를 통해 패킷의 오류 유무를 검사한다. 오류가 있다면 패킷을 폐기한다.</li>\n<li>\n<p>MAC헤더의 수신처가 본인인지 확인한다.</p>\n<ul>\n<li>이더넷은 LAN 전체에 신호를 흘리고 상대를 찾는 형태이기 때문에 올바른 패킷이 아니더라도 도착할 수 있기 때문이다.</li>\n</ul>\n</li>\n<li>변환된 디지털 데이터를 LAN 어댑터 내부의 버퍼 메모리에 저장한다. (여기까지 LAN의 MAC 부분이 담당한다)</li>\n<li>LAN 어댑터에서 CPU에게 인터럽트로 패킷이 도착했다는 사실을 알린다.</li>\n<li>LAN 드라이버는 LAN 어댑터의 버퍼 메모리에서 수신한 패킷을 추출하여 프로토콜을 판별하고 적합한 프로토콜 처리 소프트웨어를 호출한다. (TCP/IP 면 해당 프로토콜을 호출하여 패킷을 건낸다)</li>\n</ul>\n<h3 id=\"2-ip-담당-부분의-수신-동작\" style=\"position:relative;\"><a href=\"#2-ip-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91\" aria-label=\"2 ip 담당 부분의 수신 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. IP 담당 부분의 수신 동작</h3>\n<ul>\n<li>\n<p>IP 담당은 IP 헤더를 점검하고 수신처가 본인 IP인지 확인한다.</p>\n<ul>\n<li>서버가 라우터와 같이 패킷을 중개하는 역할일 수 있으므로 본인에게 온 패킷이 아닐수도 있다. 이 경우에는 패킷에 쓰인 수신처 IP 주소로 패킷을 중개해야한다.</li>\n</ul>\n</li>\n<li>IP 담당에서는 fragmentation을 통해서 패킷이 분할되었는지 조사하고 그렇다면 패킷을 일시적으로 메모리에 저장하고 패킷이 모두 모이면 복원한다.</li>\n<li>\n<p>IP 헤더의 프로토콜 번호를 조사하여 해당 부분에 패킷을 건내준다.</p>\n<ul>\n<li>06이면 TCP 담당, 11이면 UDP 담당 등등</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-tcp-담당-부분이-접속-패킷을-수신했을-때의-동작\" style=\"position:relative;\"><a href=\"#3-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%A0%91%EC%86%8D-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"3 tcp 담당 부분이 접속 패킷을 수신했을 때의 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. TCP 담당 부분이 접속 패킷을 수신했을 때의 동작</h3>\n<ul>\n<li>\n<p>만일 도착한 패킷의 SYN 컨트롤비트가 1이라면 접속 동작의 패킷이다.</p>\n<ul>\n<li>접속을 접수하는 동작을 실행한다.</li>\n<li>\n<p>포트 번호를 조사하여 해당 포트 번호와 일치하는 접속 대기 소켓이 있는지 확인한다.</p>\n<ul>\n<li>만일 없다면 오류이므로 오류 패킷을 클라이언트에게 반환한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>접속 대기 소켓을 찾으면 소켓을 복사하여 새로운 소켓을 만들고 송신처IP주소, 포트번호, 시퀀스 초기값, 윈도우 값등 필수 정보를 기록한다.</li>\n<li>패킷을 받았다는 ACK 번호, 서버의 시퀀스 초기값, 수신 버퍼 빈 용량인 윈도우 값 등을 기록한 TCP 헤더를 만들고 IP 담당에 의뢰하여 반송한다.</li>\n<li>패킷이 잘 도착하면 ACK 번호가 돌아와 접속이 완료된다.</li>\n</ul>\n<h3 id=\"4-tcp-담당-부분이-데이터-패킷을-수신했을-때의-동작\" style=\"position:relative;\"><a href=\"#4-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-label=\"4 tcp 담당 부분이 데이터 패킷을 수신했을 때의 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. TCP 담당 부분이 데이터 패킷을 수신했을 때의 동작</h3>\n<ul>\n<li>서버측에 같은 포트 번호를 가진 소켓이 많으므로 앞에서 말한 4가지 정보로 적절한 소켓을 찾는다.</li>\n<li>\n<p>해당 소켓에 기록된 정보들을 통해 올바르게 데이터 송수신이 이루어지고 있는지 확인한다.</p>\n<ul>\n<li>시퀀스 번호, 데이터 조각의 길이 등등을 확인한다.</li>\n</ul>\n</li>\n<li>패킷에서 추출된 데이터를 수신 버퍼에 저장한다.</li>\n<li>데이터를 수신하면 수신 응답용 TCP 헤더를 만들고 수신 패킷에 시퀀스 번호와 데이터 길이로 얻은 ACK 번호를 기록하고 IP 담당에 넘겨 클라이언트에게 반송한다.</li>\n<li>수신 버퍼에 기록된 데이터들은 소켓 라이브러리의 <code class=\"language-text\">read</code> 함수 호출을 통해 어플리케이션에 넘겨진다.</li>\n<li>어플리케이션에서 http 리퀘스트 메시지 내용을 조사하고 브라우저에서 데이터를 반송한다.</li>\n</ul>\n<h3 id=\"5-tcp-담당-부분의-연결-끊기-동작\" style=\"position:relative;\"><a href=\"#5-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8F%99%EC%9E%91\" aria-label=\"5 tcp 담당 부분의 연결 끊기 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. TCP 담당 부분의 연결 끊기 동작</h3>\n<ul>\n<li>\n<p>어느 쪽(클라이언트 or 서버) 에서든 연결 끊기 동작에 들어가도 상관없다.</p>\n<ul>\n<li>HTTP 1.0 이라면 서버에서 연결 끊기 동작을 시작한다.</li>\n</ul>\n</li>\n<li>서버에서 <code class=\"language-text\">close</code> 함수를 호출하고 FIN 1로 설정한 TCP 헤더를 클라이언트에게 보낸다.</li>\n<li>클라이언트도  <code class=\"language-text\">close</code> 를 호출하고 FIN 1로 설정하여 반송하고 ACK도 보낸다.</li>\n<li>잠시 기다렸다가 소켓을 말소한다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story1-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B0%9C%EC%9A%94\">🛺 Story1 서버의 개요</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">1. 클라이언트와 서버의 차이점</a></p>\n<ul>\n<li><a href=\"#%EC%84%9C%EB%B2%84%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">서버와 클라이언트의 차이점</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%EC%84%9C%EB%B2%84-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B5%AC%EC%A1%B0\">2. 서버 어플리케이션의 구조</a></li>\n<li>\n<p><a href=\"#3-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%9D%98-%EC%86%8C%EC%BC%93%EA%B3%BC-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8\">3. 서버측의 소켓과 포트 번호</a></p>\n<ul>\n<li><a href=\"#%EC%9B%B9-%EC%86%8C%EC%BC%93%EC%9D%98-%ED%8F%AC%ED%8A%B8%EB%B2%88%ED%98%B8\">웹 소켓의 포트번호</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%F0%9F%9B%BA-story2-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%88%98%EC%8B%A0%EB%8F%99%EC%9E%91\">🛺 Story2 서버의 수신동작</a></p>\n<ul>\n<li><a href=\"#1-lan-%EC%96%B4%EB%8C%91%ED%84%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%8B%A0-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%94%94%EC%A7%80%ED%84%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%9C%EB%8B%A4\">1. LAN 어댑터에서 수신 신호를 디지털 데이터로 변환한다</a></li>\n<li><a href=\"#2-ip-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91\">2. IP 담당 부분의 수신 동작</a></li>\n<li><a href=\"#3-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EC%A0%91%EC%86%8D-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\">3. TCP 담당 부분이 접속 패킷을 수신했을 때의 동작</a></li>\n<li><a href=\"#4-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%82%B7%EC%9D%84-%EC%88%98%EC%8B%A0%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-%EB%8F%99%EC%9E%91\">4. TCP 담당 부분이 데이터 패킷을 수신했을 때의 동작</a></li>\n<li><a href=\"#5-tcp-%EB%8B%B4%EB%8B%B9-%EB%B6%80%EB%B6%84%EC%9D%98-%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8F%99%EC%9E%91\">5. TCP 담당 부분의 연결 끊기 동작</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 07, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_9","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-9/"}},"prev":{"id":"5c1b47d1-8778-57cd-9be5-9beb636f6354","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>진행 중인 <a href=\"https://github.com/woowacourse-teams/2021-pick-git\">프로젝트</a>에서 구현한 웹 어플리케이션이 어느 정도의 부하를 견딜 수 있는지에 대한 성능테스트를 진행했다. </li>\n<li>프로젝트는 개발자를 타켓으로 한 깃헙 레포지토리를 연동한 게시물을 업로드하여 개발자들이 자신의 작업을 공유하고 다른 이들의 프로젝트를 캐줄얼하게 엿볼 수 있는 SNS형 웹 어플리케이션이다. </li>\n<li>웹 어플리케이션에 들어가자마자 최신순으로 정렬된 게시물 피드를 볼 수 있다. (비로그인/로그인 모두 가능)</li>\n<li>홈피드 게시물 조회 성능테스트를 진행, 병목 지점을 분석하고 개선하는 과정을 따라가보자. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"-사전-작업\" style=\"position:relative;\"><a href=\"#-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85\" aria-label=\" 사전 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 사전 작업</h2>\n<h3 id=\"테스트-더미-데이터-입력\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%AF%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EB%A0%A5\" aria-label=\"테스트 더미 데이터 입력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 더미 데이터 입력</h3>\n<ul>\n<li>테스트를 진행하기 위해서는 실제 운영환경과 최대한 유사한 환경에서 테스트하는 것이 중요하다. </li>\n<li>운영환경과 유사한 환경이라고 하면 크게 1) 인프라 구조 2) 데이터 두 가지가 있다. </li>\n<li>먼저 대량의 더미 데이터를 입력하도록 한다. (팀원 케빈이 수고해주었다 !! 👍)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> * 테스트 데이터 : 게시물 100만 / 유저 20만\n *                 태그 10만 (1개당 게시물 10개)\n *                 댓글 100만 (게시물당 1개)\n *\n * 테스트 용이성을 위해 유저 1명 이름은 tester로 명명해 저장\n * 테스트 용이성을 위해 태그 3개 이름은 java, javascript, spring로 명명해 저장</code></pre></div>\n<h3 id=\"mariadb-쿼리-캐시-끄기\" style=\"position:relative;\"><a href=\"#mariadb-%EC%BF%BC%EB%A6%AC-%EC%BA%90%EC%8B%9C-%EB%81%84%EA%B8%B0\" aria-label=\"mariadb 쿼리 캐시 끄기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MariaDB 쿼리 캐시 끄기</h3>\n<ul>\n<li>\n<p>왜 쿼리 캐시를 껐을까?</p>\n<ul>\n<li>실제 어플리케이션에서는 query cache 설정이 켜져있음에도 불구하고 cache 설정을 끈 이유는 실제 환경에서는 많은 유저들이 여러 태그를 검색하여 매번 다양한 쿼리가 실행되지만 테스트 환경에서는 3개의 태그를 랜덤으로 실행하기 때문에 캐시 적중률이 실제 환경보다 높다. 따라서 db 쿼리캐시를 꺼서 최대한 실제 환경과 맞춰주도록 한다. </li>\n<li>참고로 MySQL 8.0 부터는 쿼리 캐시 기능이 꺼져있다고 한다. </li>\n<li>또한 여전히 os 측에서 하는 memory 캐시 영향이 있지만 제어하기 어려운 부분이므로 우선 넘어가도록 한다. </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>쿼리 캐시 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438052-8604eb7d-a892-4a2b-9ca2-064ef832743b.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438572-2c20b02c-9cfb-4556-a9b8-ae362209423b.png\"></p>\n<ul>\n<li>MariaDB config 파일에서 cache size를 0으로 설정한다. </li>\n<li>이후 <code class=\"language-text\">sudo service mysqld restart</code> 로 DB를 재구동시킨다. </li>\n</ul>\n<blockquote>\n<p>변경 후 적용 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438718-ba0973ee-3037-4729-b1cb-ef2d2fe43354.png\"></p>\n<h3 id=\"mariadb-slow-query-로그-설정하기\" style=\"position:relative;\"><a href=\"#mariadb-slow-query-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"mariadb slow query 로그 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MariaDB slow query 로그 설정하기</h3>\n<ul>\n<li>오래 걸리는 쿼리에 대한 로그를 남겨 특정 쿼리로 인한 병목이 있는지 확인할 수 있도록 설정한다. </li>\n<li>단위는 1초 이상 걸리는 쿼리에 대한 로그를 남기는 것으로 했다. </li>\n</ul>\n<blockquote>\n<p>Slow query 적용 중인지 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438832-c3b085d0-8143-4974-8045-829455f6fbe7.png\"></p>\n<ul>\n<li>\n<p>Slow 쿼리 설정 적용 하기</p>\n<ul>\n<li>slow<em>query</em>log = 1 부터 long<em>query</em>time 까지 적용</li>\n<li>\n<p>적용 후 <code class=\"language-text\">sudo service mysqld restart</code> 로 재시작</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438852-19161fd9-ac7b-4948-bdb3-0df7991bbf6f.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Slow query 설정 후 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439074-ff7ed9e9-0ff8-454b-b471-1634454ca3bf.png\"></p>\n<ul>\n<li>\n<p>제대로 적용되었는지 확인하기 위해서 5초 이상 걸리는 쿼리를 실행하고 로그파일 경로의 <code class=\"language-text\">mariadb-slow.log</code>에 대항 쿼리에 대한 로그가 남았는지 확인해보자. </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439218-aa74256f-24e3-40c8-9351-03f83fda8a6b.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439229-266c8c68-1626-43b6-a481-c99b245c6b20.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439238-f496e3bf-41fc-4c2a-afdc-5008d843c634.png\"></p>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-테스트-진행하기\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\" 테스트 진행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 테스트 진행하기</h2>\n<h3 id=\"테스트-환경\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"테스트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경</h3>\n<p>테스트를 위해 구축한 테스트 환경은 다음과 같다. </p>\n<ul>\n<li>WAS 2대가 각각 AWS EC2 Medium 사양으로 실행중이다. </li>\n<li>AWS EC2 Medium 사양으로 Reverse Proxy가 있으며 Load balancer 역할을 하면 ssl 적용이 되어 있다. </li>\n<li>\n<p>데이터 베이스는 AWS EC2 Medium에 MariaDB로 3대가 연결되어 있다. </p>\n<ul>\n<li>Master DB 1개, Slave DB 2대로 replication이 적용되어 있다. </li>\n</ul>\n</li>\n</ul>\n<p>테스트 툴은 K6로 진행한다. </p>\n<ul>\n<li>AWS EC2 Medium 에 K6 테스트 서버를 구축했다. </li>\n<li>\n<p>왜 K6일까?</p>\n<ul>\n<li>사실 팀 차원에서 하는 테스트 툴은 <a href=\"https://naver.github.io/ngrinder/#:~:text=nGrinder%20is%20a%20platform%20for,inconveniences%20and%20providing%20integrated%20environments\">Ngrinder</a> 이다. </li>\n<li>하지만 AWS 권한 제한으로 인해 controller와 agent를 별도의 EC2로 분리하지 못했다. (그것 때문인지는 모르겠지만 간혹 랜덤하게 K6와 동일한 테스트를 돌렸을 때 결과가 매우 다르게 나올때도 있었다…) ngrinder는 반드시 분리하도록 권장하기 때문에 혹시 모를 영향을 최소화 하기 위해서 나는 K6에서 진행하였다. </li>\n<li>또한 K6는 문서가 굉장히 깔끔하게 잘 되어 있어 스크립트를 짜거나 테스트 설정을 하는 것이 입문자에게 편하다는 장점이 있었다. </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"테스트-스크립트-및-설정\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"테스트 스크립트 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 스크립트 및 설정</h3>\n<ul>\n<li>K6는 자바스크립트로 테스트 스크립트를 짠다. </li>\n<li>\n<p>부하 테스트는 약 10분간 148 명의 vuser로 진행했다. </p>\n<ul>\n<li>본래 30분 이상을 하기를 권장하지만 시간 관계상 10분만 진행하고 빠르게 결과를 분석하기로 했다. </li>\n</ul>\n</li>\n<li>\n<p>스크립트 </p>\n<ul>\n<li>비회원으로 홈 피드 조회 API 요청을 보낸다. 우선 pagination은 0 - 20 고정이다. (추후 랜덤 페이지 테스트를 진행해야한다.)</li>\n<li>응답코드가 200 인지 확인한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'k6/http'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'https://jslib.k6.io/url/1.0.0/index.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> check <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'k6'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> randomIntBetween <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://jslib.k6.io/k6-utils/1.1.0/index.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nvus<span class=\"token operator\">:</span> <span class=\"token number\">148</span><span class=\"token punctuation\">,</span>\nduration<span class=\"token operator\">:</span> <span class=\"token string\">'600s'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test-pick-git.o-r.kr/api/posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'limit'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'is status 200'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>성능 테스트를 진행하면서 서버의 상태를 관리하기 위해 각각 WAS 2대, DB 2대에 대한 상태를 출력하고 모니터링 했다. </li>\n<li><code class=\"language-text\">vmstat 1 -Sm</code> 와 <code class=\"language-text\">top</code> 명령어를 통해 프로세스의 상태, CPU 상태, 스왑 발생 여부, load average 등을 확인했다.  </li>\n</ul>\n<br>\n<br>\n<h2 id=\"-테스트-진행하기-1\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0-1\" aria-label=\" 테스트 진행하기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 테스트 진행하기</h2>\n<h3 id=\"첫번째-테스트---was-오류\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8---was-%EC%98%A4%EB%A5%98\" aria-label=\"첫번째 테스트   was 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 테스트 - WAS 오류</h3>\n<ul>\n<li>\n<p>WAS 및 DB 모니터링: 왼쪽 위 부터 시계 방향으로 <code class=\"language-text\">was1</code> → <code class=\"language-text\">was2</code> → <code class=\"language-text\">slaveDB2</code> → <code class=\"language-text\">slaveDB1</code></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137442374-21e53603-b1d6-4505-9290-9bc65dfc1d38.png\"></p>\n<ul>\n<li>WAS2에 대한 CPU idle 비율이 100% 이므로 해당 WAS가 동작하지 않은 것을 알아내었다. 확인해보니 어플리케이션이 종료되어 있었다. 테스트 진행시간이 5분정도 경과되었을 때 was2에 어플리케이션을 띄웠고 테스트는 그대로 계속 진행했다. </li>\n</ul>\n</li>\n<li>\n<p>테스트 결과 </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137442922-2b3148e4-d243-480e-b442-3ea3a5168eb4.png\"></p>\n</li>\n<li>DB의 경우 OS메모리 캐싱이 되므로 DISK I/O는 발생하지 않았다. </li>\n<li>\n<p>다만 비효율적인 쿼리에 의해 CPU 과부하가 걸리는 것을 확인할 수 있었다.</p>\n<ul>\n<li>맨 왼쪽 칼럼 <strong>r</strong>(실행 대기 프로세스 수) 수치가 10 정도로 매우 높다.</li>\n<li>본래 r은 CPU 코어 갯수여야 서버가 잘 돌아가고 있다고 판단한다. (현재 ec2 CPU 코어 개수 2개)</li>\n</ul>\n</li>\n<li>요청 당 실행 시간(http<em>req</em>duration) <strong>13.33 초</strong>로 매우 긴 시간이 소요되기에 개선해야 할 점이 명확히 보였다. </li>\n</ul>\n<br>\n<h3 id=\"두번째-테스트\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"두번째 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 테스트</h3>\n<ul>\n<li>\n<p>WAS 및 DB 모니터링: 왼쪽 위 부터 시계 방향으로 <code class=\"language-text\">was1</code> → <code class=\"language-text\">was2</code> → <code class=\"language-text\">slaveDB2</code> → <code class=\"language-text\">slaveDB1</code></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443197-e4a921d2-f0b5-45b8-a8f1-84ce23bf5c94.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443204-86fd6f1b-1f46-4613-bb31-00dc4091bb68.png\"></p>\n<ul>\n<li>앞 테스트와 동일하게 WAS의 CPU나 I/O 상황은 대체적으로 양호하고 DB 서버에 CPU 과부하가 걸리는 것을 확인할 수 있다. </li>\n</ul>\n</li>\n<li>\n<p>테스트 결과 </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443363-66ab8e2e-33a6-4cd5-9e59-72354e93c3fc.png\"></p>\n</li>\n<li>\n<p>WAS가 2대였음에도 불구하고 error rate이 줄어든 것 밖에 나아진 부분은 없었다. </p>\n<ul>\n<li>요청 실행 시간이나 테스트 갯수 tps 등의 수치가 위와 동일했다. </li>\n</ul>\n</li>\n<li>이것을 통해 알 수 있는 것은 WAS의 성능이 아니라 DB에 의한 성능저하라는 것이다. </li>\n</ul>\n<br>\n<ul>\n<li>\n<p>더 명확하게 알아보기 위해 slow query 로그를 확인해 보았다. </p>\n<ul>\n<li>로그를 확인해보니 태그를 검색하고 검색 결과인 게시물을 조회하는 쿼리가 1.5 초 정도 소요되는 것을 확인할 수 있었다. </li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443674-1307b8ca-3cfa-41c8-ba80-c0e1adf39e12.png\"></p>\n</li>\n</ul>\n<br>\n<blockquote>\n<p>다음 포스트에서 병목이 생기는 DB 쿼리를 진단하고 개선한 후 결과에 대해서 다룬다. </p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 Intro</a></li>\n<li>\n<p><a href=\"#-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85\">🌩 사전 작업</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%AF%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EB%A0%A5\">테스트 더미 데이터 입력</a></li>\n<li><a href=\"#mariadb-%EC%BF%BC%EB%A6%AC-%EC%BA%90%EC%8B%9C-%EB%81%84%EA%B8%B0\">MariaDB 쿼리 캐시 끄기</a></li>\n<li><a href=\"#mariadb-slow-query-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">MariaDB slow query 로그 설정하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0\">🌩 테스트 진행하기</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\">테스트 환경</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%EC%84%A4%EC%A0%95\">테스트 스크립트 및 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0-1\">🌩 테스트 진행하기</a></p>\n<ul>\n<li><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8---was-%EC%98%A4%EB%A5%98\">첫번째 테스트 - WAS 오류</a></li>\n<li><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">두번째 테스트</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"K6를 활용한 성능테스트 경험기 1 - 홈피드 조회 기능 향상","categories":"웹 프로젝트 성능테스트 데이터베이스","author":"코다","emoji":"📈"},"fields":{"slug":"/project-pickgit-homefeed-performance-test-1/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/one-percent-network-10/","nextSlug":"/one-percent-network-9/","prevSlug":"/project-pickgit-homefeed-performance-test-1/"}},"staticQueryHashes":["1073350324","2938748437"]}