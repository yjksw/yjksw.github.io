{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/high-traffic-service_5/",
    "result": {"data":{"cur":{"id":"cbda6c6e-78e0-5537-8357-d8fbe5ec7db1","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<ul>\n<li>이전에는 미들웨어를 살펴보면서 운용에 대한 생각을 했다면 이제는 개발에 대한 생각을 하면서 어플리케이션 개발시 고려해야할 급소들에 대해서 살펴보도록 한다.</li>\n<li>대량의 데이터에 액세스 (그리고 이러한 데이터들을 특정 부분을 절단하기 어려운 경우가 대부분이다)를 할 대 RDBMS, MySQL등에서 처리할 수 없는 규모의 데이터를 계산하고자 할 경우를 살펴본다.</li>\n</ul>\n<br>\n<h2 id=\"강의14-용도특화형-인덱싱\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9814-%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1\" aria-label=\"강의14 용도특화형 인덱싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의14] 용도특화형 인덱싱</h2>\n<h2 id=\"인덱스와-시스템-구성---rdbms가-한계를-보일-때\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%84%B1---rdbms%EA%B0%80-%ED%95%9C%EA%B3%84%EB%A5%BC-%EB%B3%B4%EC%9D%BC-%EB%95%8C\" aria-label=\"인덱스와 시스템 구성   rdbms가 한계를 보일 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스와 시스템 구성 - RDBMS가 한계를 보일 때</h2>\n<p>지나치게 많은 데이터를 다루는 경우 (검색 등) RDBMS로는 한계가 있다. 그렇다면 해결 방법은 ?</p>\n<ul>\n<li>배치 처리로 RDBMS에서 대량의 데이터를 추출</li>\n<li>별도의 인덱스 서버와 같은 것에 데이터를 보관</li>\n<li>웹 어플리케이션에서 RPC(Remote Procedure Call)등으로 액세스 하도록 처리</li>\n</ul>\n<h3 id=\"rpc-웹-api\" style=\"position:relative;\"><a href=\"#rpc-%EC%9B%B9-api\" aria-label=\"rpc 웹 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RPC, 웹 API</h3>\n<ol>\n<li>DB 가 정기적으로 데이터를 추출해서 인덱스 서버로 넘긴다.</li>\n<li>인덱스 서버에서 검색용 인덱스를 만든다.</li>\n<li>WAS 서버에서 인덱스를 가지고 있는 인덱스 서버에 RPC로 액섹스 한다.\n<ul>\n<li>여기서 말하는 RPC는 웹 API 이다.</li>\n<li>웹 서버에 직접 인덱스를 저장하지 않는 이유는 웹 서버의 용량이 주로 충분하지 않기 때문이다.</li>\n<li>대용량 인덱스 데이터를 여러 프로세스에서 공유하는 것은 적합하지 않다.</li>\n<li>여러 WAS를 두었을 때 각각 그런 대용량 인덱스를 가지고 있는 것은 매우 비효율적이다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"용도특화형-인덱싱---튜닝한-데이터-구조-사용하기\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1---%ED%8A%9C%EB%8B%9D%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"용도특화형 인덱싱   튜닝한 데이터 구조 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용도특화형 인덱싱 - 튜닝한 데이터 구조 사용하기</h2>\n<ul>\n<li>RDBMS와 같은 경우는 여러 용도를 가지고 만들어져있다 → 여러 관계형 데이터들을 여러 방식으로 처리할 수 있도록 만들어져 있다.</li>\n<li>만일 특정 목적으로 튜닝한 데이터구조를 사용하면 그 목적에 대해서는 압도적으로 빨라질 수 있다.\n<ul>\n<li>예) 검색에서의 역 인덱스</li>\n<li>자연어 처리를 모두 해두면 데이터를 전부 순회하지 않아도 검색을 처리할 수 있는 등의 속도 개선을 할 수 있음</li>\n</ul>\n</li>\n<li>전문 검색 엔진을 사용\n<ul>\n<li>대량의 데이터를 검색하고자 할 때 용이</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"강의15-이론과-실전-양쪽과의-싸움\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9815-%EC%9D%B4%EB%A1%A0%EA%B3%BC-%EC%8B%A4%EC%A0%84-%EC%96%91%EC%AA%BD%EA%B3%BC%EC%9D%98-%EC%8B%B8%EC%9B%80\" aria-label=\"강의15 이론과 실전 양쪽과의 싸움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의15] 이론과 실전 양쪽과의 싸움</h2>\n<ul>\n<li>RDBMS에서 Join을 사용하지 말라는 것은 Bad Knowhow 같은 것이다.\n<ul>\n<li>이런건 이론에서 추구하기에는 이상한 개념이지만 실전에서 마주한 노하우 같은 것이다.</li>\n<li>대규모 어플리케이션을 하면서 이론과 실전의 적절한 균형이 매우 중요하다.</li>\n<li>너무 이론을 추구하다보면 실전에서 걸림돌이 되는 경우도 많다.</li>\n<li>이론을 모른다면 엄청난 규모의 데이터에서 문제가 생겼을 때 노하우만으로는 해결되지 않는 때가 많아진다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%95%EC%9D%9814-%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1\">[강의14] 용도특화형 인덱싱</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%84%B1---rdbms%EA%B0%80-%ED%95%9C%EA%B3%84%EB%A5%BC-%EB%B3%B4%EC%9D%BC-%EB%95%8C\">인덱스와 시스템 구성 - RDBMS가 한계를 보일 때</a></p>\n<ul>\n<li><a href=\"#rpc-%EC%9B%B9-api\">RPC, 웹 API</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EB%8F%84%ED%8A%B9%ED%99%94%ED%98%95-%EC%9D%B8%EB%8D%B1%EC%8B%B1---%ED%8A%9C%EB%8B%9D%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">용도특화형 인덱싱 - 튜닝한 데이터 구조 사용하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%95%EC%9D%9815-%EC%9D%B4%EB%A1%A0%EA%B3%BC-%EC%8B%A4%EC%A0%84-%EC%96%91%EC%AA%BD%EA%B3%BC%EC%9D%98-%EC%8B%B8%EC%9B%80\">[강의15] 이론과 실전 양쪽과의 싸움</a></p>\n</li>\n</ul>\n</div>","excerpt":"다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 이전에는 미들웨어를 살펴보면서 운용에 대한 생각을 했다면 이제는 개발에 대한 생각을 하면서 어플리케이션 개발시 고려해야할 급소들에 대해서 살펴보도록 한다. 대량의 데이터에 액세스 (그리고 이러한 데이터들을 특정 부분을 절단하기 어려운 경우가 대부분이다)를 할 대 RDBMS, MySQL등에서 처리할 수 없는 규모의 데이터를 계산하고자 할 경우를 살펴본다. [강의14] 용도특화형 인덱싱 인덱스와 시스템 구성 - RDBMS가 한계를 보일 때 지나치게 많은 데이터를 다루는 경우 (검색 등) RDBMS로는 한계가 있다. 그렇다면 해결 방법은 ? 배치 처리로 RDBMS에서 대량의 데이터를 추출 별도의 인덱스 서버와 같은 것에 데이터를 보관 웹 어플리케이션에서 RPC(Remote Procedure Call)등으로 액세스 하도록 처리 RPC, 웹 API DB 가 정기적으로 데이터를 추출해서 인덱스 서버로 넘긴다.…","frontmatter":{"date":"September 27, 2021","title":"대규모 서비스를 지탱하는 기술 - 대규모 데이터 처리 실전 입문","categories":"웹 인프라 책 성능테스트","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_5/"}},"next":{"id":"e7c35456-c55f-522b-9f50-b7f1989bb9fe","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<h2 id=\"강의19-알고리즘과-평가\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9819-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC-%ED%8F%89%EA%B0%80\" aria-label=\"강의19 알고리즘과 평가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의19] 알고리즘과 평가</h2>\n<h2 id=\"데이터-규모와-계산량-차이\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B7%9C%EB%AA%A8%EC%99%80-%EA%B3%84%EC%82%B0%EB%9F%89-%EC%B0%A8%EC%9D%B4\" aria-label=\"데이터 규모와 계산량 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 규모와 계산량 차이</h2>\n<ul>\n<li>데이터가 클 수록 알고리즘이나 데이터 구조 선택이 속도에 영향을 미친다.\n<ul>\n<li>ex. 선형탐색 vs. 이분탐색</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"알고리즘이란\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘이란?</h2>\n<ul>\n<li>알고리즘은 값의 집합을 입력, 다른 값의 집합을 출력으로 하고 명확하게 정의된 계산절차이다.</li>\n<li>유한한 자원인 CPU나 메모리를 어떻게 활용하여 문제를 해결해야 할까?</li>\n<li>적절한 데이터구조를 사용하여 알고리즘을 구현해야지 효과가 있다.</li>\n<li>결국 측정이 중요하다 !!</li>\n</ul>\n<h2 id=\"알고리즘을-활용한-데이터-처리\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC\" aria-label=\"알고리즘을 활용한 데이터 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘을 활용한 데이터 처리</h2>\n<ul>\n<li>과도한 알고리즘이 항상 더 효율이 좋은 것은 아니다.\n<ul>\n<li>때로는 간단한 알고리즘이 더 시간을 줄여줄 때가 있다.\n<ul>\n<li>과도한 알고리즘의 경우 전처리에 많은 시간이 소요되기도 한다.</li>\n</ul>\n</li>\n<li>항상 측정이 중요하다. 단순이 데이터가 ‘적다’, ‘많다’ 라는 것으로 판단하는 것은 좋지 않다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"데이터-압축과-속도---전체적인-처리량을-높이기-위한-사고방식\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%95%EC%B6%95%EA%B3%BC-%EC%86%8D%EB%8F%84---%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%B2%98%EB%A6%AC%EB%9F%89%EC%9D%84-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%82%AC%EA%B3%A0%EB%B0%A9%EC%8B%9D\" aria-label=\"데이터 압축과 속도   전체적인 처리량을 높이기 위한 사고방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 압축과 속도 - 전체적인 처리량을 높이기 위한 사고방식</h3>\n<ul>\n<li>압축이라는 것이 오히려 압축을 해제하고 처리하는 관점에서 더 무겁다고 생각할 수 있다.</li>\n<li>하지만 처리량 관점에서는 데이터를 압축하는 것이 더 빠르다.\n<ul>\n<li>컴퓨터에 CPU와 I/O라는 두 종류의 부하가 있는데, 압축을 할 경우 CPU에는 더 무리가 갈 수 있으나, I/O측면에서 보면 대기를 줄일 수 있다.</li>\n</ul>\n</li>\n<li>I/O 처리를 하며 대기하는 동안은 CPU 가 처리할 수 없다.</li>\n<li>CPU가 여유롭고 I/O가 바쁜 경우가 많으므로 I/O 부하를 줄이고 그 정도의 부담을 CPU에 넘기는 것이 전체적인 처리량을 높일수도 있다.</li>\n</ul>\n<h2 id=\"실전에서-사용하면서-느낀-점\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"실전에서 사용하면서 느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전에서 사용하면서 느낀 점</h2>\n<ul>\n<li>처음에 단순한 정규표현식을 사용해서 구현을 했던 것을 적절한 알고리즘과 자료구조를 활용하면서 개선시키면서 느낀것들이 있다.</li>\n<li>처음에 구현한 심플한 방식이 데이터가 적었을 때 더 적합했던 적도 있다.\n<ul>\n<li>구현에 걸리는 비용이 적고, 유연성이 풍부하다.</li>\n<li>하지만 데이터가 커지면서 문제가 생긴다. 이때는 캐싱 등으로 우선 문제를 잠재우다가 결국에는 본질적인 해결책이 필요하다.</li>\n<li>즉, 현재 사용중인 알고리즘이 가지고 있는 문제점을 개선하여 문제를 개선할 필요가 있는 것이다.</li>\n</ul>\n</li>\n<li>처음부터의 최적화가 중요한 것은 아니다. 이후에 데이터의 규모가 커졌을 때 본질적인 문제 해결방법을 미리 고민하는 것이 좋다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%95%EC%9D%9819-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC-%ED%8F%89%EA%B0%80\">[강의19] 알고리즘과 평가</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B7%9C%EB%AA%A8%EC%99%80-%EA%B3%84%EC%82%B0%EB%9F%89-%EC%B0%A8%EC%9D%B4\">데이터 규모와 계산량 차이</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\">알고리즘이란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC\">알고리즘을 활용한 데이터 처리</a></p>\n<ul>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%95%EC%B6%95%EA%B3%BC-%EC%86%8D%EB%8F%84---%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%B2%98%EB%A6%AC%EB%9F%89%EC%9D%84-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%82%AC%EA%B3%A0%EB%B0%A9%EC%8B%9D\">데이터 압축과 속도 - 전체적인 처리량을 높이기 위한 사고방식</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%EC%A0%84%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-%EC%A0%90\">실전에서 사용하면서 느낀 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 27, 2021","title":"대규모 서비스를 지탱하는 기술 - 알고리즘 실용화","categories":"웹 인프라 책 성능테스트","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_6/"}},"prev":{"id":"2e80a8a5-69a9-58c6-979c-b792ba90a6bb","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH1. 웹 브라우저가 메시지를 만든다 입니다 🙌</p>\n</blockquote>\n<br>\n<h2 id=\"-story3-전-세계의-dns-서버가-연대한다\" style=\"position:relative;\"><a href=\"#-story3-%EC%A0%84-%EC%84%B8%EA%B3%84%EC%9D%98-dns-%EC%84%9C%EB%B2%84%EA%B0%80-%EC%97%B0%EB%8C%80%ED%95%9C%EB%8B%A4\" aria-label=\" story3 전 세계의 dns 서버가 연대한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story3] 전 세계의 DNS 서버가 연대한다.</h2>\n<h3 id=\"dns-서버의-기본-동작\" style=\"position:relative;\"><a href=\"#dns-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91\" aria-label=\"dns 서버의 기본 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS 서버의 기본 동작</h3>\n<ul>\n<li>DNS 서버는 조회 메세지를 받고 그것에 대해 응답을 한다.</li>\n<li>조회 메세지 내용\n<ul>\n<li>이름: 서버나 메일 배송 목적지 (@뒤 호스트)\n<ul>\n<li>ex. <a href=\"http://www.example.com\">www.example.com</a></li>\n</ul>\n</li>\n<li>클래스: 이전에 필요했으나 요즘에는 항상 인터넷을 나타내는 클래스 ‘IN’으로 표기됨</li>\n<li>타입: 다음마다 응답 형태가 바뀐다.\n<ul>\n<li>A: 이름에 지원되는 IP 주소</li>\n<li>MX: 메일 배송 목적지</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DNS 서버에서 위 3가지가 일치하는 응답 정보를 찾아서 등록된 IP 주소 등을 회신한다.</li>\n<li>MX, 메일 서버에 대한 응답인 경우\n<ul>\n<li>메일 서버의 우선순위 + 메일 서버의 이름, 해당 메일 서버의 IP 주소를 함께 회신한다.</li>\n</ul>\n</li>\n<li>DNS 서버에서 취급하는 타입은 여러개가 있다.\n<ul>\n<li>PTR, NS, SOA, CNAME 등등</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"도메인의-계층\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%98-%EA%B3%84%EC%B8%B5\" aria-label=\"도메인의 계층 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인의 계층</h3>\n<ul>\n<li>정말 많은 서버의 수가 존재하기 때문에 한대의 DNS 서버에 모든 정보를 등록할 수 없다. <strong>정보를 분산시켜 여러대의 DNS 서버에 등록</strong>해놓고 조회하는 정보를 찾아서 응답하는 구조로 되어있다.</li>\n</ul>\n<h4 id=\"도메인명\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EB%AA%85\" aria-label=\"도메인명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인명</h4>\n<ul>\n<li>DNS 서버에 등록되어 있는 도메인명은 계층적 구조를 가지고 있다.</li>\n<li>도메인의 계층은 .점으로 구분되어 있다. (ex. <a href=\"http://www.example.com\">www.example.com</a> 각각의 www, example, com 이 계층을 나타냄)\n<ul>\n<li>위의 경우 com 도메인 하위에 example 도메인 하위에 www 도메인이 있는 것 (서브 도메인)</li>\n</ul>\n</li>\n<li>하나의 도메인에 대한 정보들은 하나의 DNS 서버에서 모두 관리한다.\n<ul>\n<li>DNS 서버는 다수의 도메인을 관리할 수 있지만 같은 도메인인 정보들은 모두 한대의 DNS 서버에 존재한다.</li>\n</ul>\n</li>\n<li>가장 먼저 출연하는 도메인이 서버의 이름, 최하위 서브 도메인이다 (예, www, api, dev 같은 경우)</li>\n</ul>\n<h3 id=\"담당-dns-서버를-찾아-ip-주소를-가져온다\" style=\"position:relative;\"><a href=\"#%EB%8B%B4%EB%8B%B9-dns-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%B0%BE%EC%95%84-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A8%EB%8B%A4\" aria-label=\"담당 dns 서버를 찾아 ip 주소를 가져온다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>담당 DNS 서버를 찾아 IP 주소를 가져온다</h3>\n<ul>\n<li>\n<p>여러 DNS 서버가 존재하기 때문에 중요한 것은 어느 DNS 서버에 원하는 정보가 있는지 판단하는 것이다.</p>\n</li>\n<li>\n<p>그 방법으로 상위 도메인에 하위 도메인을 등록하여 찾아갈 수 있는 구조로 설계했다.</p>\n<ul>\n<li>com 도메인에 <a href=\"http://example.com\">example.com</a> 도메인이 등록되어 있는 구조</li>\n</ul>\n</li>\n<li>\n<p>com, kr 등등은 최상위 도메인이 아니다 → root 도메인이 존재하여 거기에 com, kr 등등의 도메인이 등록되어 있다.</p>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/138427408-cd36ffcc-7956-46a4-8a99-d6459cdc3264.png\"><br>출처: 상위 1% 네트워크</p>\n</li>\n</ul>\n<h4 id=\"루트-도메인\" style=\"position:relative;\"><a href=\"#%EB%A3%A8%ED%8A%B8-%EB%8F%84%EB%A9%94%EC%9D%B8\" aria-label=\"루트 도메인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루트 도메인</h4>\n<ul>\n<li>최상위 도메인으로 할당된 IP 주소는 13개 뿐이다.</li>\n<li>그렇기 때문에 루트 도메인의 정보를 모든 DNS 서버에 등록할 수 있다 → 기본으로 DNS 서버 설정 파일에 등록되어 있다.</li>\n<li>그 어떤 DNS 서버에서도 루트 도메인 DNS 서버로 이동할 수 있는 주소를 확보한다.</li>\n</ul>\n<h4 id=\"클라이언트가-wwwexamplecom의-ip-주소를-구하는-방법\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-wwwexamplecom%EC%9D%98-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"클라이언트가 wwwexamplecom의 ip 주소를 구하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트가 <a href=\"http://www.example.com%EC%9D%98\">www.example.com의</a> IP 주소를 구하는 방법</h4>\n<ul>\n<li>\n<p>컴퓨터에 설정되어 있는 가장 가까운 DNS 서버로 조회를 요청 → 없으면 루트 도메인 서버로 메세지 전송</p>\n</li>\n<li>\n<p>(존재하지 않는 경우) 루트 도메인으로 이동 → 없으면 com 도메인 주소 반송</p>\n</li>\n<li>\n<p>루트 도메인에 등록된 com 도메인 서버로 이동 → 없으면 <a href=\"http://example.com\">example.com</a> 도메인 주소 반송</p>\n</li>\n<li>\n<p>com 도메인 서버에 등록된 <a href=\"http://example.com\">example.com</a> 도메인 서버로 이동 → 반복</p>\n</li>\n<li>\n<p>원하는 도메인 IP 주소를 응답</p>\n</li>\n<li>\n<p>그것을 가장 가까운 DNS 서버에서 클라이언트에게 응답</p>\n</li>\n<li>\n<p>도메인이 같은 DNS 서버에 존재할 수 있으므로 도메인 개수만큼 서버를 꼭 이동하는 것은 아니다.</p>\n</li>\n</ul>\n<h3 id=\"dns-서버는-캐시-기능으로-빠르게-회답할-수-있다\" style=\"position:relative;\"><a href=\"#dns-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%BA%90%EC%8B%9C-%EA%B8%B0%EB%8A%A5%EC%9C%BC%EB%A1%9C-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%9A%8C%EB%8B%B5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"dns 서버는 캐시 기능으로 빠르게 회답할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS 서버는 캐시 기능으로 빠르게 회답할 수 있다</h3>\n<ul>\n<li>DNS 서버에서 한번 조사한 이름을 캐시에 저장한다.</li>\n<li>이후에 저장할 경우 루트 도메인애서부터 찾는 것이 아니라 캐싱된 도메인의 하위 도메인부터 찾을 수 있다.</li>\n<li>존재하지 않은 도메인인 경우도 캐싱하여 빠르게 응답한다.</li>\n<li>유효기간에 따라서 정보를 삭제하고 캐시 응답인지 서버 응답인지 알려준다. (정보 업데이트 고려)</li>\n</ul>\n<br>\n<h2 id=\"-story4-프로토콜-스택에-메시지-송신을-의뢰한다\" style=\"position:relative;\"><a href=\"#-story4-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%97%90-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%86%A1%EC%8B%A0%EC%9D%84-%EC%9D%98%EB%A2%B0%ED%95%9C%EB%8B%A4\" aria-label=\" story4 프로토콜 스택에 메시지 송신을 의뢰한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story4] 프로토콜 스택에 메시지 송신을 의뢰한다.</h2>\n<h3 id=\"데이터-송수신-동작의-개요\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%98-%EA%B0%9C%EC%9A%94\" aria-label=\"데이터 송수신 동작의 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 송수신 동작의 개요</h3>\n<ul>\n<li>메세지 전송을 OS 내의 <strong>프로토콜 스택</strong>에 위임한다.</li>\n<li>반드시 웹 요청 메세지 뿐 아니라 컴퓨터의 모든 네트워크 관련 동작에 공통인 부분이다.\n<ul>\n<li>디지털 데이터 송수신이 필요한 부분은 모두 할당된다.</li>\n</ul>\n</li>\n<li>프로토콜 스택에 의뢰하여 메세지를 전송할 때도 <strong>Socket 라이브러리</strong>를 사용한다.</li>\n</ul>\n<h4 id=\"소켓을-활용한-데이터-송수신-기본-동작---프로토콜-스택-담당\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%BC%93%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91---%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D-%EB%8B%B4%EB%8B%B9\" aria-label=\"소켓을 활용한 데이터 송수신 기본 동작   프로토콜 스택 담당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소켓을 활용한 데이터 송수신 기본 동작 - 프로토콜 스택 담당</h4>\n<ol>\n<li>소켓을 생성 (서버와 클라이언트가 각각 소켓을 생성)</li>\n</ol>\n<ul>\n<li>소켓은 데이터가 흐르는 통로의 입구와 같은 것이다.</li>\n</ul>\n<ol>\n<li>서버측의 소켓에 클라이언트 소켓 접속</li>\n<li>데이터 송 수신</li>\n<li>완료 후 파이프 분리 후 소켓 말소 (close는 어느 측에 해도 무방)</li>\n</ol>\n<ul>\n<li>소켓 라이브러리는 어플리케이션으로부터 위 단계를 실행하도록 의뢰받고 그대로 프로토콜 스택에 중계하는 역할을 한다.</li>\n</ul>\n<h3 id=\"소켓의-작성-단계---소켓-라이브러리-메서드-활용\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%BC%93%EC%9D%98-%EC%9E%91%EC%84%B1-%EB%8B%A8%EA%B3%84---%EC%86%8C%EC%BC%93-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%9C%EC%9A%A9\" aria-label=\"소켓의 작성 단계   소켓 라이브러리 메서드 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소켓의 작성 단계 - 소켓 라이브러리 메서드 활용</h3>\n<ul>\n<li><code class=\"language-text\">디스크립터 = socket</code>을 생성\n<ul>\n<li>디스크립터로 소켓을 식별</li>\n</ul>\n</li>\n<li><code class=\"language-text\">connect</code> 메서드로 (소켓 디스크립터, 대상 서버 IP 주소 및 포트번호 필요) 로 대상 서버와 접속</li>\n<li><code class=\"language-text\">write</code> 메서드로 데이터 송신</li>\n<li><code class=\"language-text\">read</code> 메서드로 데이터 수신</li>\n<li><code class=\"language-text\">close</code> 메서드로 소켓 말소</li>\n</ul>\n<h3 id=\"파이프-연결하는-접속-단계\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EC%A0%91%EC%86%8D-%EB%8B%A8%EA%B3%84\" aria-label=\"파이프 연결하는 접속 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이프 연결하는 접속 단계</h3>\n<ul>\n<li><code class=\"language-text\">connect</code>  라는 메서드에 인자로 소켓 디스크립터 + 서버 IP 주소 + 서버 포트 번호 가 필요하다.</li>\n<li>프로토콜 스택은 connect에서 중계한 디스크립터로 데이터 송수신을 담당할 소켓을 판별한다.</li>\n<li>IP 주소는 컴퓨터를 식별할 수 있지만, 컴퓨터에 존재하는 여러 소켓 중 어느 것에 연결할지 알기 위해서는 포트 번호가 필요하다.\n<ul>\n<li><strong>포트 번호는 상대 소켓을 식별 !!</strong></li>\n<li>왜 소켓을 식별할 수 있는 디스크립터를 사용하지 않을까 ?\n<ul>\n<li>디스크립터는 소켓을 생성한 어플리케이션에서 프로토콜 스택에 의뢰하도록 주는 것이다.</li>\n<li>상대에게 소켓 디스크립터를 넘겨주어도 정보가 없으므로 식별할 수 없다.</li>\n</ul>\n</li>\n<li>포트 번호는 미리 지정한 규칙에 따라서 서로 알고있는 값이다. (웹 서버는 80, 메일은 25 등등)</li>\n<li>포트 번호도 충돌할 수 있기 때문에 중복되지 않도록 IANA에서 일괄 관리한다.</li>\n<li><strong>클라이언트의 소켓 번호는 알아서 할당 후 접속 동작에서 서버에 통지한다.  (이후 추가 설명)</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"메세지를-주고받는-송수신-단계\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%A3%BC%EA%B3%A0%EB%B0%9B%EB%8A%94-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8B%A8%EA%B3%84\" aria-label=\"메세지를 주고받는 송수신 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메세지를 주고받는 송수신 단계</h3>\n<ul>\n<li>송신측에서 메모리에 송신 데이터를 준비한다. (HTTP request 메세지)</li>\n<li><code class=\"language-text\">write</code>를 호출하며 소켓 디스크립터와 송신 데이터를 지정한다.</li>\n<li>디스크립터로 지정된 소켓에 연결대상이 이미 접속 단계에서 지정이 되어있다. 목적지로 데이터를 송신한다.</li>\n<li>이후 응답 메세지를 수신할 때는 <code class=\"language-text\">read</code>를 통해 수신 버퍼에 응답 메세지를 저장한다.\n<ul>\n<li>수신 버퍼는 어플리케이션의 메모리 영역</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"연결-끊기-단계에서-송수신이-종료된다\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C-%EC%86%A1%EC%88%98%EC%8B%A0%EC%9D%B4-%EC%A2%85%EB%A3%8C%EB%90%9C%EB%8B%A4\" aria-label=\"연결 끊기 단계에서 송수신이 종료된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결 끊기 단계에서 송수신이 종료된다</h3>\n<p>웹 서비스와 같은 경우 웹 서버에서 먼저 close를 호출한다. (어느측에서 먼저해도 상관없다)</p>\n<ul>\n<li>웹 서버에서 <code class=\"language-text\">close()</code>를 호출</li>\n<li>클라이언트가 <code class=\"language-text\">close()</code> 호출 여부를 응답받으면, 클라이언트도 <code class=\"language-text\">close()</code>를 호출하여 연결 끊기를 진행</li>\n<li>HTTP 프로토콜은 하나하나의 데이터를 별도의 것으로 취급하기 때문에 위 단계를 모든 데이터를 송수신 할때마다 반복하는 것이다.\n<ul>\n<li>이것이 비효율적이라고 생각하여 나온것이 HTTP 1.1의 <code class=\"language-text\">keep-alive</code></li>\n<li>더 이상 송수신할 데이터가 없는 경우에만 소켓을 말소하는 단계에 들어간다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>이 이후에 데이터에 네트워크가 흘러가기 전까지 프로토콜 스택, LAN 드라이버, LAN 어댑터가 연동하여 실행된다. (다음 챕터)</strong></p>\n<br>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[용어]\n\nMX - Mail eXchange\n\n캐시 - 한 번 사용한 데이터를 데이터의 이용 장소와 가까운 곳에 있는 고속의 기억 장치에 저장하여 두 번째 이후 고속화 하는 것</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-story3-%EC%A0%84-%EC%84%B8%EA%B3%84%EC%9D%98-dns-%EC%84%9C%EB%B2%84%EA%B0%80-%EC%97%B0%EB%8C%80%ED%95%9C%EB%8B%A4\">🛺 [Story3] 전 세계의 DNS 서버가 연대한다.</a></p>\n<ul>\n<li>\n<p><a href=\"#dns-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91\">DNS 서버의 기본 동작</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%98-%EA%B3%84%EC%B8%B5\">도메인의 계층</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EB%AA%85\">도메인명</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%B4%EB%8B%B9-dns-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%B0%BE%EC%95%84-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A8%EB%8B%A4\">담당 DNS 서버를 찾아 IP 주소를 가져온다</a></p>\n<ul>\n<li><a href=\"#%EB%A3%A8%ED%8A%B8-%EB%8F%84%EB%A9%94%EC%9D%B8\">루트 도메인</a></li>\n<li><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-wwwexamplecom%EC%9D%98-ip-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">클라이언트가 www.example.com의 IP 주소를 구하는 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dns-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%BA%90%EC%8B%9C-%EA%B8%B0%EB%8A%A5%EC%9C%BC%EB%A1%9C-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%9A%8C%EB%8B%B5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\">DNS 서버는 캐시 기능으로 빠르게 회답할 수 있다</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-story4-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D%EC%97%90-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%86%A1%EC%8B%A0%EC%9D%84-%EC%9D%98%EB%A2%B0%ED%95%9C%EB%8B%A4\">🛺 [Story4] 프로토콜 스택에 메시지 송신을 의뢰한다.</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8F%99%EC%9E%91%EC%9D%98-%EA%B0%9C%EC%9A%94\">데이터 송수신 동작의 개요</a></p>\n<ul>\n<li><a href=\"#%EC%86%8C%EC%BC%93%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%88%98%EC%8B%A0-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91---%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8A%A4%ED%83%9D-%EB%8B%B4%EB%8B%B9\">소켓을 활용한 데이터 송수신 기본 동작 - 프로토콜 스택 담당</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%86%8C%EC%BC%93%EC%9D%98-%EC%9E%91%EC%84%B1-%EB%8B%A8%EA%B3%84---%EC%86%8C%EC%BC%93-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%9C%EC%9A%A9\">소켓의 작성 단계 - 소켓 라이브러리 메서드 활용</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EC%A0%91%EC%86%8D-%EB%8B%A8%EA%B3%84\">파이프 연결하는 접속 단계</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EC%84%B8%EC%A7%80%EB%A5%BC-%EC%A3%BC%EA%B3%A0%EB%B0%9B%EB%8A%94-%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8B%A8%EA%B3%84\">메세지를 주고받는 송수신 단계</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C-%EC%86%A1%EC%88%98%EC%8B%A0%EC%9D%B4-%EC%A2%85%EB%A3%8C%EB%90%9C%EB%8B%A4\">연결 끊기 단계에서 송수신이 종료된다</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 27, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_2","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-2/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/high-traffic-service_5/","nextSlug":"/high-traffic-service_6/","prevSlug":"/one-percent-network-2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}