{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/one-percent-network-8/",
    "result": {"data":{"cur":{"id":"4ffde1a9-559f-5ac3-96ef-467e77c4740e","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"-story4-캐시-서버를-이용한-서버의-부하-분산\" style=\"position:relative;\"><a href=\"#-story4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0\" aria-label=\" story4 캐시 서버를 이용한 서버의 부하 분산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story4] 캐시 서버를 이용한 서버의 부하 분산</h2>\n<h3 id=\"1-캐시-서버의-이용\" style=\"position:relative;\"><a href=\"#1-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9D%B4%EC%9A%A9\" aria-label=\"1 캐시 서버의 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 캐시 서버의 이용</h3>\n<ul>\n<li>프록시 구조를 사용하여 데이터를 캐시에 저장한다.</li>\n<li>프록시는 웹 서버와 클라이언트 사이에 들어가서 웹 서버에 대한 액세스 동작을 중개한다.\n<ul>\n<li>중개하는 과정에서 웹 서버에서 받은 데이터를 저장해두고 가능하면 해당 데이터를 대신하여 응답한다.</li>\n<li>웹 서버가 처리해야할 일을 실행하기 위해서 오랜 시간이 걸리는 반면 캐시 서버는 받은 데이터를 곧바로 송신만 하면 되기 때문에 매우 빠르다.</li>\n</ul>\n</li>\n<li>데이터가 자주 바뀌는 부분은 캐시 서버를 활용하기 어렵다. 하지만 캐시 서버에서 처리할 수 있는 얼마를 담당하면 웹 서버에 가는 부하도 줄어들어 처리속도도 향상된다.</li>\n</ul>\n<h3 id=\"2-캐시-서버는-갱신일로-콘텐츠를-관리한다\" style=\"position:relative;\"><a href=\"#2-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%8A%94-%EA%B0%B1%EC%8B%A0%EC%9D%BC%EB%A1%9C-%EC%BD%98%ED%85%90%EC%B8%A0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4\" aria-label=\"2 캐시 서버는 갱신일로 콘텐츠를 관리한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 캐시 서버는 갱신일로 콘텐츠를 관리한다</h3>\n<ul>\n<li>캐시 서버가 동작할 때 캐시 서버를 웹 서버 대신 DNS에 등록한다. 따라서 요청이 오면 캐시 서버가 대신해서 데이터를 받는다.\n<ul>\n<li>메세지를 받을 때 웹 서버의 수신 동작과 동일한 절차를 거쳐서 받는다.</li>\n<li>패킷을 만들고, 접속 동작을 실행하고 요청 메세지를 받는다.</li>\n</ul>\n</li>\n<li>이후 해당 요청에 대한 데이터가 저장되어 있는지 조사한다.</li>\n<li>저장된 데이터가 없는 경우\n<ul>\n<li><code class=\"language-text\">Via</code> 라는 필드 값을 헤더에 추가하여 캐시 서버를 경유했다는 것을 나타낸다.\n<ul>\n<li>중요한 값은 아니며 캐시 서버의 설정에 따라서 추가되지 않는 경우도 있다.</li>\n</ul>\n</li>\n<li>만일 여러대의 서버가 캐시 서버에 연결이 되어 있다면 요청의 URI에 따라서 웹 서버로 요청을 전송한다.\n<ul>\n<li>이때 클라이언트는 캐시 서버로 변경된다.</li>\n</ul>\n</li>\n<li>웹 서버에서 캐시 서버로 응답을 보내고 캐시 서버는 <code class=\"language-text\">Via</code> 헤더를 추가하여 클라이언트에게 응답을 한다.</li>\n<li>그리고 응답에 대한 메시지를 캐시 서버에 저장하고 저장한 일시를 기록한다.</li>\n</ul>\n</li>\n<li>데이터가 저장되어 있는 경우\n<ul>\n<li>만일 캐시 데이터가 저장되어 있다면 해당 데이터가 변경 되지는 않았는지 확인하는 <code class=\"language-text\">If-Modified-Since</code> 헤더를 덧붙여서 웹 서버에 전송한다.\n<ul>\n<li>만일 데이터가 없었다면 위 헤더는 추가되지 않는다.</li>\n</ul>\n</li>\n<li>이때 웹 서버는 변경이 없다면 <code class=\"language-text\">304 Not Modified</code> 상태코드를 응답한다. 변경이 있다면 데이터가 없던 것과 마찬가지로 동작한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-프록시의-원점은-포워드-프록시이다\" style=\"position:relative;\"><a href=\"#3-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%98-%EC%9B%90%EC%A0%90%EC%9D%80-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%B4%EB%8B%A4\" aria-label=\"3 프록시의 원점은 포워드 프록시이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 프록시의 원점은 포워드 프록시이다</h3>\n<ul>\n<li>클라이언트측에 캐시 서버를 두는 경우이다. → 포워드 프록시</li>\n<li>웹 서버에 대한 캐시 서버와 동일하게 동작하지만 추가로 방화벽을 실현하는 목적이 있었다.</li>\n<li>방화벽은 인터넷에서의 부정침입을 막는 것이기 때문에 프록시에서 요청 메세지를 받아 인터넷으로 필요한 것을 통과시키는 역할을 한다.</li>\n<li>프록시의 캐시를 이용하면 사내 LAN에서 더 빨리 데이터를 얻을 수 있다.</li>\n<li>프록시를 사용하면 요청의 내용을 조사하기 때문에 더 자세한 조건을 설정해서 특정 사이나에 대한 액세스를 금지하는 등의 제한을 걸 수 있다.</li>\n</ul>\n<h4 id=\"포워드-프록시-사용시-데이터-송신\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%8B%A0\" aria-label=\"포워드 프록시 사용시 데이터 송신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포워드 프록시 사용시 데이터 송신</h4>\n<ul>\n<li>요청 메세지의 URL과 관계없이 모든 요청을 포워드 프록시에 우선 송신한다.</li>\n<li>요청 메세지의 내용도 변경된다.\n<ul>\n<li>본래 웹 서버의 이름을 제외하고 URI에 데이터 경로를 적었는데, 포워드 프록시를 사용하는 경우 이름까지 그대로 요청 URL에 기록한다.</li>\n</ul>\n</li>\n<li>URL에 적힌 그대로가 전송 대상이므로 서버측 캐시 서버와 같이 정해진 서버로 전송하는 것이 아니라 모든 서버에 전송할 수 있다.</li>\n</ul>\n<h3 id=\"4-포워드-프록시를-개량한-리버스-프록시\" style=\"position:relative;\"><a href=\"#4-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A5%BC-%EA%B0%9C%EB%9F%89%ED%95%9C-%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C\" aria-label=\"4 포워드 프록시를 개량한 리버스 프록시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 포워드 프록시를 개량한 리버스 프록시</h3>\n<ul>\n<li>포워드 프록시는 브라우저의 설정이 필요해 장애의 원인이 되기도 한다.</li>\n<li>따라서 요청 메세지에 전체 URL이 아닌 URI 에 쓰여있는 디렉토리를 웹 서버에 대응시켜 전송할 수 있도록 했다 → 서버측에 설치하는 캐시 서버에서 채택한 방법으로 <strong>리버스 프록시</strong>라고 한다.</li>\n</ul>\n<h3 id=\"5-트랜스패어런트-프록시\" style=\"position:relative;\"><a href=\"#5-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%A8%EC%96%B4%EB%9F%B0%ED%8A%B8-%ED%94%84%EB%A1%9D%EC%8B%9C\" aria-label=\"5 트랜스패어런트 프록시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 트랜스패어런트 프록시</h3>\n<ul>\n<li>캐시 서버에서 전송 대상을 판단하는 방법이다.\n<ul>\n<li>IP 헤더의 수신처 IP 주소로 액세스 대상 웹 서버를 찾는 방법을 <strong>트랜스패어런트 프록시</strong>라고 한다.</li>\n</ul>\n</li>\n<li>포워드 프록시에서 처럼 브라우저에 설정할 필요도 없고 리버스 프록시처럼 전송 대상을 리버스 프록시로 설정하고 DNS에 등록할 필요도 없다.\n<ul>\n<li>만일 트랜스패어런트 프록시에 DNS에 등록된다면 수신처 IP가 해당 프록시가 되므로 수신처 IP를 조사해서 패킷을 중개하는 구조를 사용할 수 있다.</li>\n</ul>\n</li>\n<li>그래서 트랜스 패어런트 프록시를 브라우저에서 웹 서버로 요청 메세지가 흘러가는 길목에 설치하거나 한 길로 수렴하는 네트워크의 길목에 설치하여 사용한다. (길마다 프록시를 설치해야할 수도 있다)</li>\n</ul>\n<br>\n<h2 id=\"-story5-콘텐츠-배포-서비스\" style=\"position:relative;\"><a href=\"#-story5-%EC%BD%98%ED%85%90%EC%B8%A0-%EB%B0%B0%ED%8F%AC-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\" story5 콘텐츠 배포 서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story5] 콘텐츠 배포 서비스</h2>\n<h3 id=\"1-cdn을-이용한-부하-분산\" style=\"position:relative;\"><a href=\"#1-cdn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0\" aria-label=\"1 cdn을 이용한 부하 분산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. CDN을 이용한 부하 분산</h3>\n<ul>\n<li>서버 측 캐시와 클라이언트 측 캐시의 부하 경감 효과가 각각 다르다.\n<ul>\n<li>서버 측 캐시는 웹 서버에 들어오는 요청에 대한 부하를 분산시킨다.</li>\n<li>클라이언트 측 캐시는 인터넷에 들어오는 패킷 수를 줄여 인터넷 트래픽을 억제한다.</li>\n</ul>\n</li>\n<li>인터넷 트래픽을 억제하기 위해서는 (특히나 대용량 이미지나 영상 데이터에 대해) 클라이언트 측에 캐시 서버를 두는 것이 더 좋다. 하지만 그것은 웹 서버 개발자가 제어할 수 있는 부분이 아니다. (브라우저를 통한 설정이 필요하기 때문이다.)</li>\n<li>따라서 해결책으로 프로바이더와 계약하여 웹 서버 개발자가 제어할 수 있는 클라이언트 가까이 있는 캐시 서버를 이용하는 것이다. → CDN</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139086526-535450f9-f459-4d2d-bc6c-748046ff5174.png\"><br>출처: 상위 1% 네트워크</p>\n<ul>\n<li>모든 프로바이더에 캐시 서버를 설치하는 것은 어려우니 우선 중요한 프로바이더마다 캐시 서버를 설치한다.</li>\n<li>서버 운영자가 직접 설치하고 프로바이더와 계약하는 것이 어려우므로 그것을 대신 하고 캐시 서버를 대출하는 CDN 서비스가 등장했다.\n<ul>\n<li>CDN 서버는 여러 웹 서버의 데이터를 캐싱할 수 있으므로 여러 웹 서버 개발자들이 공동으로 이용하여 이용 비용을 절감할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-가장-가까운-캐시-서버의-관점\" style=\"position:relative;\"><a href=\"#2-%EA%B0%80%EC%9E%A5-%EA%B0%80%EA%B9%8C%EC%9A%B4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B4%80%EC%A0%90\" aria-label=\"2 가장 가까운 캐시 서버의 관점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 가장 가까운 캐시 서버의 관점</h3>\n<ul>\n<li>CDN을 사용하기 위해서는 클라이언트가 가장 가까운 캐시 서버를 찾을 수 있어야한다.</li>\n</ul>\n<h4 id=\"최초-방법\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%B4%88-%EB%B0%A9%EB%B2%95\" aria-label=\"최초 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최초 방법</h4>\n<ul>\n<li>DNS 서버가 IP주소를 응답할 때 가장 가까운 캐시 서버의 IP 주소를 응답하도록 설정한다.\n<ul>\n<li>DNS 서버에서 복수의 IP가 등록된 경우 RR로 응답하는 것을 변경한다.</li>\n<li>응답할 때 RR 방식이 아니라 클라이언트와 캐시 서버의 거리를 판단하여 가장 가까운 캐시 서버 IP를 반환하도록 한다.</li>\n</ul>\n</li>\n<li>가장 가까운 거리를 측정하는 방법\n<ul>\n<li>캐시 서버의 설치 장소에 있는 라우터에서 경로 정보를 모은다. (캐시 서버 갯수만큼의 경로표가 모인다)</li>\n<li>웹 서버 측 DNS 서버에서 해당 경로표를 입수하여 클라이언트의 DNS 요청 패킷의 송신처 IP주소와의 경로 및 거리를 측정한다.\n<ul>\n<li>이때 클라이언트 측 DNS 서버와의 거리를 측정하기 때문에 대략적인 거리이다.</li>\n<li>인터넷 경로 정보에 지나는 프로바이더와 대략적인 거리 정보가 있다.</li>\n</ul>\n</li>\n<li>클라이언트 DNS 서버와 가장 가까운 캐시의 라우터를 알 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-리피터용-서버로-액세스-대상을-분배한다\" style=\"position:relative;\"><a href=\"#3-%EB%A6%AC%ED%94%BC%ED%84%B0%EC%9A%A9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4-%EB%8C%80%EC%83%81%EC%9D%84-%EB%B6%84%EB%B0%B0%ED%95%9C%EB%8B%A4\" aria-label=\"3 리피터용 서버로 액세스 대상을 분배한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 리피터용 서버로 액세스 대상을 분배한다</h3>\n<h4 id=\"두번째-방법\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95\" aria-label=\"두번째 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 방법</h4>\n<ul>\n<li>리다이렉트를 나타내는 <code class=\"language-text\">Location</code> 필드를 사용하여 액세스 대상을 가장 가까운 캐시 서버로 돌리는 방법이다.</li>\n<li>먼저 DNS 서버에서 웹 서버의 IP주소를 회답하고 클라이언트가 해당 IP 주소(리다이렉트용 서버)로 요청을 보낸다. 리다이렉트용 서버는 경로표를 가지고 있어 가장 가까운 캐시 서버로 리다이렉트 하도록 <code class=\"language-text\">Location</code> 필드를 설정하여 응답한다.</li>\n<li>HTTP 요청이 많아지므로 어느정도 오버헤드가 있다. 하지만 클라이언트 DNS 서버와의 거리가 아닌 클라이언트 간의 거리를 조사하므로 더 정확하다.</li>\n<li>더 정확하게 하기 위해 최적의 캐시 서버에 액세스하는 스크립트 프로그램을 내장한 페이지를 반송할 수도 있다.</li>\n</ul>\n<h3 id=\"4-캐시-내용의-갱신-방법에서-성능의-차이가-난다\" style=\"position:relative;\"><a href=\"#4-%EC%BA%90%EC%8B%9C-%EB%82%B4%EC%9A%A9%EC%9D%98-%EA%B0%B1%EC%8B%A0-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%84%B1%EB%8A%A5%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%82%9C%EB%8B%A4\" aria-label=\"4 캐시 내용의 갱신 방법에서 성능의 차이가 난다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 캐시 내용의 갱신 방법에서 성능의 차이가 난다</h3>\n<ul>\n<li>캐시서버를 이용할 때 갱신 내용 유무를 확인하느라 네트워크가 혼잡해질 수도 있다.</li>\n<li>이 점을 개선하기 위해 확인을 하지 않고 데이터가 업데이트 된다면 즉시 갱신할 수 있다.\n<ul>\n<li>CDN 캐시 서버에는 이러한 기능이 내장되어 있다.</li>\n</ul>\n</li>\n<li>캐시에는 변하지 않는 부분만 캐싱하는 것이 효율적이다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-story4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0\">🛺 [Story4] 캐시 서버를 이용한 서버의 부하 분산</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9D%B4%EC%9A%A9\">1. 캐시 서버의 이용</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%8A%94-%EA%B0%B1%EC%8B%A0%EC%9D%BC%EB%A1%9C-%EC%BD%98%ED%85%90%EC%B8%A0%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4\">2. 캐시 서버는 갱신일로 콘텐츠를 관리한다</a></p>\n</li>\n<li>\n<p><a href=\"#3-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%98-%EC%9B%90%EC%A0%90%EC%9D%80-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%9D%B4%EB%8B%A4\">3. 프록시의 원점은 포워드 프록시이다</a></p>\n<ul>\n<li><a href=\"#%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%A1%EC%8B%A0\">포워드 프록시 사용시 데이터 송신</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%ED%8F%AC%EC%9B%8C%EB%93%9C-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A5%BC-%EA%B0%9C%EB%9F%89%ED%95%9C-%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C\">4. 포워드 프록시를 개량한 리버스 프록시</a></p>\n</li>\n<li>\n<p><a href=\"#5-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%A8%EC%96%B4%EB%9F%B0%ED%8A%B8-%ED%94%84%EB%A1%9D%EC%8B%9C\">5. 트랜스패어런트 프록시</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-story5-%EC%BD%98%ED%85%90%EC%B8%A0-%EB%B0%B0%ED%8F%AC-%EC%84%9C%EB%B9%84%EC%8A%A4\">🛺 [Story5] 콘텐츠 배포 서비스</a></p>\n<ul>\n<li>\n<p><a href=\"#1-cdn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0\">1. CDN을 이용한 부하 분산</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EA%B0%80%EC%9E%A5-%EA%B0%80%EA%B9%8C%EC%9A%B4-%EC%BA%90%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B4%80%EC%A0%90\">2. 가장 가까운 캐시 서버의 관점</a></p>\n<ul>\n<li><a href=\"#%EC%B5%9C%EC%B4%88-%EB%B0%A9%EB%B2%95\">최초 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EB%A6%AC%ED%94%BC%ED%84%B0%EC%9A%A9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4-%EB%8C%80%EC%83%81%EC%9D%84-%EB%B6%84%EB%B0%B0%ED%95%9C%EB%8B%A4\">3. 리피터용 서버로 액세스 대상을 분배한다</a></p>\n<ul>\n<li><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95\">두번째 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EC%BA%90%EC%8B%9C-%EB%82%B4%EC%9A%A9%EC%9D%98-%EA%B0%B1%EC%8B%A0-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%84%B1%EB%8A%A5%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%82%9C%EB%8B%A4\">4. 캐시 내용의 갱신 방법에서 성능의 차이가 난다</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"다음은 성공과 실패를 결정하는 1%의 네트워크 원리 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌 🛺 [Story4] 캐시 서버를 이용한 서버의 부하 분산 1. 캐시 서버의 이용 프록시 구조를 사용하여 데이터를 캐시에 저장한다. 프록시는 웹 서버와 클라이언트 사이에 들어가서 웹 서버에 대한 액세스 동작을 중개한다. 중개하는 과정에서 웹 서버에서 받은 데이터를 저장해두고 가능하면 해당 데이터를 대신하여 응답한다. 웹 서버가 처리해야할 일을 실행하기 위해서 오랜 시간이 걸리는 반면 캐시 서버는 받은 데이터를 곧바로 송신만 하면 되기 때문에 매우 빠르다. 데이터가 자주 바뀌는 부분은 캐시 서버를 활용하기 어렵다. 하지만 캐시 서버에서 처리할 수 있는 얼마를 담당하면 웹 서버에 가는 부하도 줄어들어 처리속도도 향상된다. 2. 캐시 서버는 갱신일로 콘텐츠를 관리한다 캐시 서버가 동작할 때 캐시 서버를 웹 서버 대신 DN…","frontmatter":{"date":"October 06, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_8","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-8/"}},"next":{"id":"d210d56b-50d7-58a6-ab93-5d3e0056f480","html":"<blockquote>\n<p>다음은 <em>성공과 실패를 결정하는 1%의 네트워크 원리</em> 를 읽고 정리한 내용입니다. 본 글은 CH5. 서버측의 LAN에는 무엇이 있는가?_방화벽과 캐시 서버의 탐험입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"-story1-웹-서버의-설치-장소\" style=\"position:relative;\"><a href=\"#-story1-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%84%A4%EC%B9%98-%EC%9E%A5%EC%86%8C\" aria-label=\" story1 웹 서버의 설치 장소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story1] 웹 서버의 설치 장소</h2>\n<h3 id=\"1-사내에-웹-서버를-설치하는-경우\" style=\"position:relative;\"><a href=\"#1-%EC%82%AC%EB%82%B4%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"1 사내에 웹 서버를 설치하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 사내에 웹 서버를 설치하는 경우</h3>\n<p>사내 LAN에 서버를 설치하고 인터넷에서 직접 액세스 하는 경우 (a)</p>\n<ul>\n<li>이 경우는 현재 주류가 아님\n<ul>\n<li>IP 부족 - 이 경우 서버와 클라이언트에도 글로벌 주소를 할당해야하는데 IP 주소가 매우 부족하다.</li>\n<li>보안상의 이유 - 인터넷에서 들어오는 패킷이 그대로 중계되는데 어플리케이션에 보안 구멍이 있다면 어플리케이션은 무방비 상태가 된다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"방화벽\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%ED%99%94%EB%B2%BD\" aria-label=\"방화벽 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방화벽</h4>\n<ul>\n<li>보안 문제를 해결하기 위해서 방화벽을 두어 관문의 역할을 하도록 한다. (b)\n<ul>\n<li>특정 서버에서 동작하는 특정 어플리케이션에 액세스 하는 패킷만 통과시키고 나머지는 차단하도록 한다.</li>\n<li>외부 액세스가 허가되지 않은 어플리케이션에 대한 패킷은 차단이 되므로 도착하지 않는다.</li>\n<li>액세스가 허가된 어플리케이션에 보안구멍이 있을 수 있기 때문에 완전히 위험이 없어지지 않지만 공격받을 위험성이 훨씬 적다.</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139085989-322d8e49-e1e2-4b2d-a405-6b9f0b002f8c.png\"><br>출처: 상위 1% 네트워크</p>\n<h3 id=\"2-데이터센터에-웹-서버를-설치하는-경우\" style=\"position:relative;\"><a href=\"#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%84%BC%ED%84%B0%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"2 데이터센터에 웹 서버를 설치하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 데이터센터에 웹 서버를 설치하는 경우</h3>\n<ul>\n<li>프로바이더가 운영하는 서버를 빌려쓰는 형태로 운영하는 경우 (c)</li>\n<li>프로바이더 중심 부분 NOC나 상호 접속 부분 IX에 고속 회선으로 접속되어 있으므로 고속 액세스가 가능하다.</li>\n<li>데이터센터는 물리적으로 안전한 건물, 방화벽 설치 운영, 기기 가동 상태 감시, 부정 침입 감시 등등의 부가 서비스를 제공하며 안정성이 높다.</li>\n<li>이 경우 패킷은 인터넷 중심 부분에서 데이터센터로 흘러가 서버에 도착한다.</li>\n</ul>\n<br>\n<h2 id=\"-story2-방화벽의-원리와-동작\" style=\"position:relative;\"><a href=\"#-story2-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%98-%EC%9B%90%EB%A6%AC%EC%99%80-%EB%8F%99%EC%9E%91\" aria-label=\" story2 방화벽의 원리와 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story2] 방화벽의 원리와 동작</h2>\n<h3 id=\"1-패킷-필터링형이-주류이다\" style=\"position:relative;\"><a href=\"#1-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%ED%98%95%EC%9D%B4-%EC%A3%BC%EB%A5%98%EC%9D%B4%EB%8B%A4\" aria-label=\"1 패킷 필터링형이 주류이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 패킷 필터링형이 주류이다</h3>\n<ul>\n<li>방화벽의 기본: 특정 서버와 해당 서버 안의 특정 어플리케이션에 액세스 하는 패킷만 통과하고 나머지는 차단\n<ul>\n<li>성능, 가격, 사용 편의성 등에 의해 패킷 필터링형 방화벽이 가장 많이 보급되어 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-패킷-필터링의-조건-설정-개념\" style=\"position:relative;\"><a href=\"#2-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%EC%9D%98-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EA%B0%9C%EB%85%90\" aria-label=\"2 패킷 필터링의 조건 설정 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 패킷 필터링의 조건 설정 개념</h3>\n<p>패킷의 헤더에 들어있는 제어 정보를 통해 패킷 필터링 조건을 설정한다. 이 조건에 따라서 액세스가 허가되지 않으면 해당 패킷을 차단한다.</p>\n<ul>\n<li>먼저 패킷의 흐름을 판단한다.\n<ul>\n<li>패킷 헤더의 수신처 IP와 송신처 IP 로 종점과 시작점을 판단할 수 있다. <strong>수신처가 해당 웹 서버의 IP 주소와 일치하는 경우에만 패킷을 통과</strong>시킨다.</li>\n<li>패킷이 들어온 후 응답 패킷(ACK 등)을 다시 클라이언트에게 보내야 하기 때문에 웹 서버에서 인터넷으로 나가는 패킷 중 <strong>송신처 IP가 본 서버 IP인 경우 통과</strong>시킨다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-어플리케이션을-한정할-때-포트-번호를-사용한다\" style=\"position:relative;\"><a href=\"#3-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%ED%95%9C%EC%A0%95%ED%95%A0-%EB%95%8C-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"3 어플리케이션을 한정할 때 포트 번호를 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 어플리케이션을 한정할 때 포트 번호를 사용한다</h3>\n<ul>\n<li>서버에 보안에 취약한 다양한 어플리케이션이 있을 수 있다. 웹 어플리케이션에 대한 패킷만을 허용하고 나머지를 차단하는 방식으로 보안을 향상시킬 수 있다.</li>\n<li>TCP 헤더나 UDP 헤더의 포트 번호를 조건으로 추가하여 웹 서버를 지칭하는 80 포트만 통과되도록 설정할 수 있다.</li>\n</ul>\n<h3 id=\"4-컨트롤-비트로-접속-방향을-판단한다\" style=\"position:relative;\"><a href=\"#4-%EC%BB%A8%ED%8A%B8%EB%A1%A4-%EB%B9%84%ED%8A%B8%EB%A1%9C-%EC%A0%91%EC%86%8D-%EB%B0%A9%ED%96%A5%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4\" aria-label=\"4 컨트롤 비트로 접속 방향을 판단한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 컨트롤 비트로 접속 방향을 판단한다</h3>\n<ul>\n<li>문제 상황 - 웹 서버에 기생하며 다른 서버에 바이러스를 감염시키는 경우가 많기 때문에 웹 서버 → 인터넷으로 가는 패킷을 차단한다. 그렇지만 패킷은 양방향 프로토콜로 소통하기 때문에 한쪽이 차단되면 소통할 수 없어진다.\n<ul>\n<li>웹 서버에서 시작되는 통신을 금지해야하는데, 그렇다고 웹 서버에서 나가는 모든 패킷을 차단할 수 없다. 프로토콜 소통이 전혀 되지 않기 때문이다.</li>\n</ul>\n</li>\n<li>해결 방안 - 액세스 방향을 판단하여 패킷을 필터링 해야한다 → TCP 헤더의 컨트롤 비트로 판단할 수 있다.\n<ul>\n<li>TCP 접속 시 최초 패킷만 컨트롤 비트의 SYN → 1, ACK → 0 이다.</li>\n<li>웹 서버에서 인터넷으로 나가는 패킷 중 위와 같이 컨트롤 비트가 설정된 패킷을 차단하면 <strong>웹 서버에서 TCP 접속을 시작하여 인터넷으로 액세스하는 동작</strong>을 차단할 수 있다.</li>\n</ul>\n</li>\n<li>이외에도 헤더의 여러 제어 정보들을 활용해서 패킷을 차단시키고 통과시킬 수 있다.</li>\n<li>통과시키는 것과 차단하는 것을 선별할 수 없는 경우도 있다.\n<ul>\n<li>DNS 서버에 대한 액세스와 같이 UDP를 사용하는 경우 접속 단계 동작이 없으므로 필터링 할 수 없다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-사내-lan에서-공개-서버용-lan으로-조건을-설정한다\" style=\"position:relative;\"><a href=\"#5-%EC%82%AC%EB%82%B4-lan%EC%97%90%EC%84%9C-%EA%B3%B5%EA%B0%9C-%EC%84%9C%EB%B2%84%EC%9A%A9-lan%EC%9C%BC%EB%A1%9C-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4\" aria-label=\"5 사내 lan에서 공개 서버용 lan으로 조건을 설정한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 사내 LAN에서 공개 서버용 LAN으로 조건을 설정한다</h3>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139086154-9532eae2-1f30-4e77-b831-b92408e59230.png\"><br>출처: 상위 1% 네트워크</p>\n<ul>\n<li>위와 같은 구조에서는 <strong>공개 서버용 LAN과 사내 LAN 패킷 조건</strong>, <strong>인터넷과 사내 LAN 패킷 조건</strong>도 잘 설정해야한다.\n<ul>\n<li>잘못 설정하는 경우\n<ul>\n<li>사내 LAN과 공개 서버용 LAN의 패킷을 허용하기 위해 수신처 IP가 공개 서버용 LAN과 일치하면 모두 통과하고 송신처 IP 조건을 설정하지 않음</li>\n<li>인터넷에서 흘러온 패킷이 무조건 공개 서버용 LAN에 유입되어 서버가 위험해짐</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-밖에서-사내-lan으로-액세스할-수-없다\" style=\"position:relative;\"><a href=\"#6-%EB%B0%96%EC%97%90%EC%84%9C-%EC%82%AC%EB%82%B4-lan%EC%9C%BC%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"6 밖에서 사내 lan으로 액세스할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 밖에서 사내 LAN으로 액세스할 수 없다</h3>\n<ul>\n<li>패킷 필터링형 방화벽은 주소 변환 기능도 가지고 있다. 패킷 필터링과 마찬가지로 패킷의 시작점과 종착점을 판단하여 주소변환이 필요한 경우 주소 변환을 하고 아니면 하지 않는다.\n<ul>\n<li>주소 변환을 하지 않으면 액세스할 수 없다. 적절한 주소와 포트를 찾지 못하기 때문이다. 따라서 자연스럽게 인터넷에서 사내 LAN에 접근할 수 없는 구조가 된다. (따로 패킷 조건을 설정하지 않아도 된다)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-방화벽을-통과한다\" style=\"position:relative;\"><a href=\"#7-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%84-%ED%86%B5%EA%B3%BC%ED%95%9C%EB%8B%A4\" aria-label=\"7 방화벽을 통과한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 방화벽을 통과한다</h3>\n<ul>\n<li>방화벽은 차단하는 패킷에 대한 기록을 남긴다.\n<ul>\n<li>부정 침입의 흔적이 남아 분석하여 정보로 사용한다.</li>\n</ul>\n</li>\n<li>통과 시킨 후에는 패킷을 라우터와 비슷하게 중계한다.</li>\n<li>패킷 필터링은 라우터의 패킷 중계 기능 중 부가기능으로 볼 수 있는데 그 조건 설정이 복잡해지면서 전용 하드웨어나 소프트웨어가 등장한 것이다. 간단한 패킷 필터링을 사용하면 라우터를 방화벽으로 사용할 수도 있다.</li>\n</ul>\n<h3 id=\"8-방화벽으로-막을-수-없는-공격\" style=\"position:relative;\"><a href=\"#8-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9C%BC%EB%A1%9C-%EB%A7%89%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B3%B5%EA%B2%A9\" aria-label=\"8 방화벽으로 막을 수 없는 공격 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 방화벽으로 막을 수 없는 공격</h3>\n<ul>\n<li>특수한 데이터에 의해 서버를 공격하는 경우, 방화벽은 헤더의 정보만으로 필터링하기 때문에 차단할 수 없다.\n<ul>\n<li>이 경우 어플리케이션의 버그를 수정하거나 패킷의 내용을 조사하여 위험한 데이터를 차단하는 별도의 소프트웨어를 준비하는 것이다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-story3-복수-서버에-리퀘스트를-분배한-서버의-부하-분산\" style=\"position:relative;\"><a href=\"#-story3-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EC%97%90-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%B6%84%EB%B0%B0%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0\" aria-label=\" story3 복수 서버에 리퀘스트를 분배한 서버의 부하 분산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛺 [Story3] 복수 서버에 리퀘스트를 분배한 서버의 부하 분산</h2>\n<h3 id=\"1-처리-능력이-부족하면-복수-서버로-부하-분산된다\" style=\"position:relative;\"><a href=\"#1-%EC%B2%98%EB%A6%AC-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%EB%B6%80%EC%A1%B1%ED%95%98%EB%A9%B4-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0%EB%90%9C%EB%8B%A4\" aria-label=\"1 처리 능력이 부족하면 복수 서버로 부하 분산된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 처리 능력이 부족하면 복수 서버로 부하 분산된다</h3>\n<p>회선이 아무리 빨라도 대량의 패킷이 들어오면 처리능력이 부족하다. 이때 복수의 서버를 이용하여 한대의 서버에 몰리는 처리량을 출이는 <strong>분산 처리</strong>를 할 수 있다.</p>\n<ul>\n<li>DNS 서버에 IP 주소를 같은 이름으로 여러개 등록하면 <strong>DNS 서버</strong>는 조회 때마다 <strong>라운드 로빈</strong>으로 IP를 응답하여 액세스를 균등하게 분산시킨다.\n<ul>\n<li>하지만 특정 IP 주소를 가진 서버가 고장나도 DNS 서버는 그대로 응답한다.</li>\n<li>또한 복수의 페이지가 하나의 로직을 수행할 수 있는데 매 요청마다 다른 서버가 응답하면 로직이 이어지지 않을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-부하-분산-장치를-이용해-복수의-웹-서버로-분할된다\" style=\"position:relative;\"><a href=\"#2-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0-%EC%9E%A5%EC%B9%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%B3%B5%EC%88%98%EC%9D%98-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%84%ED%95%A0%EB%90%9C%EB%8B%A4\" aria-label=\"2 부하 분산 장치를 이용해 복수의 웹 서버로 분할된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 부하 분산 장치를 이용해 복수의 웹 서버로 분할된다</h3>\n<ul>\n<li>부하 분산 장치나 로드 밸런서를 활용한다.\n<ul>\n<li>DNS 서버에 로드 밸런서의 IP가 등록된다.</li>\n</ul>\n</li>\n<li>로드 밸런서에서 연결된 서버의 부하 상태를 확인(너무 많이 하면 부하 상태 확인이 부하가 될 수 있다) 하고 요청을 분배한다.</li>\n<li>대화가 복수의 페이지에 걸쳐있는 경우 이전 요청과 같은 서버로 요청을 보내도록한다.\n<ul>\n<li>HTTP는 stateless 하므로 전후 관계를 판단하기 어렵다.</li>\n<li>판단하기 위해서 웹 서버에서 정보를 유지해야하지만 그럼 웹 서버에 부담이 간다.</li>\n<li>현재는 HTTP 헤더 필드에 정보를 추가할 수 있도록 하거나 데이터가 전후 관계를 확인할 수 있는 정보를 부가하는 방법을 사용한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[용어]\n\nPOP - Point of Presence 인터넷 사용자가 ISP를 만나는 지점\n\nISP - Internet Service Provider\n\n방화벽 - 네트워크를 외부의 공격으로부터 지키기 위한 고안된 구조</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-story1-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%84%A4%EC%B9%98-%EC%9E%A5%EC%86%8C\">🛺 [Story1] 웹 서버의 설치 장소</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EC%82%AC%EB%82%B4%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">1. 사내에 웹 서버를 설치하는 경우</a></p>\n<ul>\n<li><a href=\"#%EB%B0%A9%ED%99%94%EB%B2%BD\">방화벽</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%84%BC%ED%84%B0%EC%97%90-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">2. 데이터센터에 웹 서버를 설치하는 경우</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-story2-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%98-%EC%9B%90%EB%A6%AC%EC%99%80-%EB%8F%99%EC%9E%91\">🛺 [Story2] 방화벽의 원리와 동작</a></p>\n<ul>\n<li><a href=\"#1-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%ED%98%95%EC%9D%B4-%EC%A3%BC%EB%A5%98%EC%9D%B4%EB%8B%A4\">1. 패킷 필터링형이 주류이다</a></li>\n<li><a href=\"#2-%ED%8C%A8%ED%82%B7-%ED%95%84%ED%84%B0%EB%A7%81%EC%9D%98-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EA%B0%9C%EB%85%90\">2. 패킷 필터링의 조건 설정 개념</a></li>\n<li><a href=\"#3-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%ED%95%9C%EC%A0%95%ED%95%A0-%EB%95%8C-%ED%8F%AC%ED%8A%B8-%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\">3. 어플리케이션을 한정할 때 포트 번호를 사용한다</a></li>\n<li><a href=\"#4-%EC%BB%A8%ED%8A%B8%EB%A1%A4-%EB%B9%84%ED%8A%B8%EB%A1%9C-%EC%A0%91%EC%86%8D-%EB%B0%A9%ED%96%A5%EC%9D%84-%ED%8C%90%EB%8B%A8%ED%95%9C%EB%8B%A4\">4. 컨트롤 비트로 접속 방향을 판단한다</a></li>\n<li><a href=\"#5-%EC%82%AC%EB%82%B4-lan%EC%97%90%EC%84%9C-%EA%B3%B5%EA%B0%9C-%EC%84%9C%EB%B2%84%EC%9A%A9-lan%EC%9C%BC%EB%A1%9C-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4\">5. 사내 LAN에서 공개 서버용 LAN으로 조건을 설정한다</a></li>\n<li><a href=\"#6-%EB%B0%96%EC%97%90%EC%84%9C-%EC%82%AC%EB%82%B4-lan%EC%9C%BC%EB%A1%9C-%EC%95%A1%EC%84%B8%EC%8A%A4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\">6. 밖에서 사내 LAN으로 액세스할 수 없다</a></li>\n<li><a href=\"#7-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9D%84-%ED%86%B5%EA%B3%BC%ED%95%9C%EB%8B%A4\">7. 방화벽을 통과한다</a></li>\n<li><a href=\"#8-%EB%B0%A9%ED%99%94%EB%B2%BD%EC%9C%BC%EB%A1%9C-%EB%A7%89%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B3%B5%EA%B2%A9\">8. 방화벽으로 막을 수 없는 공격</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-story3-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EC%97%90-%EB%A6%AC%ED%80%98%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%B6%84%EB%B0%B0%ED%95%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0\">🛺 [Story3] 복수 서버에 리퀘스트를 분배한 서버의 부하 분산</a></p>\n<ul>\n<li><a href=\"#1-%EC%B2%98%EB%A6%AC-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%EB%B6%80%EC%A1%B1%ED%95%98%EB%A9%B4-%EB%B3%B5%EC%88%98-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0%EB%90%9C%EB%8B%A4\">1. 처리 능력이 부족하면 복수 서버로 부하 분산된다</a></li>\n<li><a href=\"#2-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0-%EC%9E%A5%EC%B9%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%B3%B5%EC%88%98%EC%9D%98-%EC%9B%B9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%84%ED%95%A0%EB%90%9C%EB%8B%A4\">2. 부하 분산 장치를 이용해 복수의 웹 서버로 분할된다</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 05, 2021","title":"성공과 실패를 결정하는 1%의 네트워크 원리_7","categories":"네트워크 책","author":"코다","emoji":"⚡️"},"fields":{"slug":"/one-percent-network-7/"}},"prev":{"id":"f536d063-bb0a-5d8a-89be-12abd97a0c4e","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>JPA의 <code class=\"language-text\">fetch join</code> 사용시 별칭을 쓰면 안되는 이유가 무엇인지 알아본다.</li>\n<li><a href=\"https://github.com/woowacourse-teams/2021-pick-git\">프로젝트</a>애서 fetch join 시 별칭 사용에 대해서 고민해본다.</li>\n</ul>\n<br>\n<h2 id=\"fetch-join-별칭은-왜-안될까-\" style=\"position:relative;\"><a href=\"#fetch-join-%EB%B3%84%EC%B9%AD%EC%9D%80-%EC%99%9C-%EC%95%88%EB%90%A0%EA%B9%8C-\" aria-label=\"fetch join 별칭은 왜 안될까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fetch join 별칭은 왜 안될까 ?</h2>\n<ul>\n<li>\n<p>fetch join에서 별칭이 안되는 이유는 데이터의 일관성이 깨지기 때문이다.</p>\n</li>\n<li>\n<p>예를 들어서 다음과 같은 코드는 fetch join 대상에 조건문이 들어가서 일관성이 깨진 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch join 대상에 조건문을 걸었을 때 데이터가 불일치하다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findTeamWithSpecificNameMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n\n    <span class=\"token comment\">// 데이터 삽입</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> memberA1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberA2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberA3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> teamAMembers <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>memberA1<span class=\"token punctuation\">,</span> memberA2<span class=\"token punctuation\">,</span> memberA3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span>teamAMembers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 데이터 조회</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> teamAMemberSize <span class=\"token operator\">=</span> teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Team</span> teamAWithMemberName <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findTeamWithSomeMemberByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token comment\">/* 본래 teamA에 3명의 멤버가 들어가있지만 fetch join 대상에 where문이 들어가면서 데이터 불일치가 일어났다.\n    * collection 에는 관련 데이터가 모두 들어가있기를 기대하는데 그렇지 않다.\n    * 따라서 fetch join 대상에 필터링 조건을 거는 것을 지양한다. \n    */</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>teamAWithMemberName<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamAMemberSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span>teamAWithMemberName<span class=\"token punctuation\">.</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>TeamA에 대한 member collection 은 본래 3개이다. 그리고 fetch join을 하면 연관된 데이터가 모두 들어올 것이라고 가정한다.</p>\n</li>\n<li>\n<p>하지만 위와 같이 fetch join 대상에 별칭을 주어 where 필터링 조건을 사용하면 실제로 TeamA에 연관된 멤버는 3명이지만 <code class=\"language-text\">memberA1</code>만 연관 데이터로 들어온다.</p>\n</li>\n<li>\n<p>DB의 상태에 대한 일관성이 깨진다.</p>\n</li>\n</ul>\n<h3 id=\"하지만-예외는-있다\" style=\"position:relative;\"><a href=\"#%ED%95%98%EC%A7%80%EB%A7%8C-%EC%98%88%EC%99%B8%EB%8A%94-%EC%9E%88%EB%8B%A4\" aria-label=\"하지만 예외는 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하지만 예외는 있다</h3>\n<ul>\n<li>\n<p>일관성을 해치지지 않는 한에서 성능에 도움이 된다면 예외적으로 사용해도 된다. (아마도 하이버네이트가 별칭을 허용하는 이유…)</p>\n</li>\n<li>\n<p>예를 들어 다음과 같은 쿼리는 일관성을 해치지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> m <span class=\"token keyword\">from</span> Member m <span class=\"token keyword\">join</span> <span class=\"token keyword\">fetch</span> m<span class=\"token punctuation\">.</span>team <span class=\"token keyword\">where</span> t<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> :teamName</code></pre></div>\n</li>\n<li>\n<p>하지만 위의 쿼리가 left join fetch로 되면 일관성이 깨진다. (Team이 null이 아닌 Member에 대해서 null 값이 들어가기 때문이다.)</p>\n</li>\n<li>\n<p>때문에 매우 조심스럽게 사용해야한다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"우리-프로젝트에-있는-별칭은\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD%EC%9D%80\" aria-label=\"우리 프로젝트에 있는 별칭은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우리 프로젝트에 있는 별칭은?!</h2>\n<ul>\n<li>\n<p>깃들다 프로젝트에도 fetch join 대상에 별칭을 사용하는 부분이 있다. 다음 <a href=\"http://tech.pick-git.com/jpa-proxy-equals-bug/\">포스트</a>에 어떤 상황이었는지 배경 설명이 자세하게 되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct p from Post p left join fetch p.likes.likes l left join fetch l.user where p.id = :postId\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findPostWithLikeUsers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Post 안에는 해당 게시물을 좋아요한 유저들 정보를 담은 <code class=\"language-text\">Like</code> 리스트가 담겨있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//....</span>\n\n   <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n      mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n      fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span>\n      cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n      orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Like</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Like</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n  <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"post_id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Post</span> post<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n  <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>위 쿼리를 살펴보면</p>\n<ul>\n<li>별칭이 <code class=\"language-text\">p.likes.likes l</code>에 사용된다.</li>\n<li>where 조건문에는 fetch join 대상을 필터링 하지 않는다.</li>\n<li>따라서 데이터 일관성을 헤치지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>fetch join을 할 때 주의해야하는 부분은 collection을 여러개 fetch join 할 경우이다.</p>\n</li>\n<li>\n<p>위 같은 경우는 <code class=\"language-text\">post -> like</code> 관계는 OneToMany라서 한번까지 fetch join 할 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">like -> user</code>는 ManyToOne 관계 이므로 추가 fetch join을 할 수 있었다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<ul>\n<li>처음에 버그를 마주하고 fetch join 대상에 별칭을 두는 것이 찝찝했지만 왜 안되는지 모르는 상태로 (나만) 넘어갔다.</li>\n<li>검토해보니 fetch join 대상이 아니었으며 여러 collection을 fetch join 하는 상황도 아니었다.</li>\n<li>하지만 이런 예외적인 경우는 자세히 알아보고 주의해서 사용해야 할 것 같다. 또 왜인지 모르고 그냥 안쓰지는 말자.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n</li>\n<li>\n<p><a href=\"#fetch-join-%EB%B3%84%EC%B9%AD%EC%9D%80-%EC%99%9C-%EC%95%88%EB%90%A0%EA%B9%8C-\">fetch join 별칭은 왜 안될까 ?</a></p>\n<ul>\n<li><a href=\"#%ED%95%98%EC%A7%80%EB%A7%8C-%EC%98%88%EC%99%B8%EB%8A%94-%EC%9E%88%EB%8B%A4\">하지만 예외는 있다</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%B0%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD%EC%9D%80\">우리 프로젝트에 있는 별칭은?!</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 06, 2021","title":"JPA 에서 별칭을 쓰지 않는 이유 (하지만 쓴 이유)","categories":"JPA 프로젝트","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-fetch-join-nickname/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/one-percent-network-8/","nextSlug":"/one-percent-network-7/","prevSlug":"/jpa-fetch-join-nickname/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}