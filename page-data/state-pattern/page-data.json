{"componentChunkName":"component---src-templates-blog-template-js","path":"/state-pattern/","result":{"data":{"cur":{"id":"ad427acb-0b76-5d44-a5eb-8db7c23257a3","html":"<h2 id=\"fsm-을-state-design-pattern-으로\" style=\"position:relative;\"><a href=\"#fsm-%EC%9D%84-state-design-pattern-%EC%9C%BC%EB%A1%9C\" aria-label=\"fsm 을 state design pattern 으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FSM 을 State Design Pattern 으로!</h2>\n<p>FSM (Finite State Machine) : 유한 상태 기계</p>\n<ul>\n<li>\n<p>특징</p>\n<ul>\n<li>유한한 개수의 상태를 가짐.</li>\n<li>그 중 하나의 상태만 취함.</li>\n<li>특정 조건이 되면 다른 상태로 변함.</li>\n<li>가능한 상태 집합과 각 상태들의 전이 조건으로 정의됨.</li>\n</ul>\n</li>\n<li>\n<p>왜 쓸까?</p>\n<ul>\n<li>가능한 상태들을 명확히 규정할 수 있음.</li>\n<li>상태 중복을 피하고 전이들읠 명확하게 규정할 수 있음.</li>\n<li>기계의 동작이 명확히 규정됨.</li>\n</ul>\n</li>\n</ul>\n<p>이러한 FSM 을 구현하려면 각 상황에 대한 수많은 분기문들을 통해서 구현이 되어야 한다. <br></p>\n<p>또한 기능이 하나 추가가 될 때 고려해야 할 상황과 추가해야할 코드들이 굉장히 많아진다. <br></p>\n<h2 id=\"state-design-pattern-상태-디자인-패턴\" style=\"position:relative;\"><a href=\"#state-design-pattern-%EC%83%81%ED%83%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"state design pattern 상태 디자인 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Design Pattern 상태 디자인 패턴</h2>\n<h3 id=\"언제-사용할까\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"언제 사용할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 사용할까?</h3>\n<ul>\n<li>객체가 상태를 가져야 할 때</li>\n<li>특정한 조건을 판단하여 해당하는 상태로 변환해야 하는 로직이 있을 때</li>\n<li>\n<p>각 상태마다 전이 조건이 있어 상황이 달라질 때</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">예를 들어보자<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n어떤 캐릭터가 있다고 가정해보자<span class=\"token punctuation\">.</span> 이 캐릭터는 휴식<span class=\"token punctuation\">,</span> 이동<span class=\"token punctuation\">,</span> 배고픔<span class=\"token punctuation\">,</span> 싸움 상태가 있다<span class=\"token punctuation\">.</span> \n할 수 있는 행동은 휴식<span class=\"token punctuation\">,</span> 이동<span class=\"token punctuation\">,</span> 먹기<span class=\"token punctuation\">,</span> 싸우기 행동이 있다<span class=\"token punctuation\">.</span> \n\n캐릭터 상태가 이동일 때<span class=\"token punctuation\">,</span> 휴식을 하면 휴식 상태로 전환된다<span class=\"token punctuation\">.</span> \n캐릭터 상태가 휴식일 때<span class=\"token punctuation\">,</span> 싸우면 싸움 상태로 전환된다<span class=\"token punctuation\">.</span> \n캐릭터 상태가 싸움일 때<span class=\"token punctuation\">,</span> 싸우면 이기고 배고픈 상태로 전환된다<span class=\"token punctuation\">.</span>\n\n이런 전이 조건에 따른 상태 변화가 이루어지는 경우에 상태 패턴이 적합하다<span class=\"token punctuation\">.</span> </code></pre></div>\n</li>\n</ul>\n<h3 id=\"state-pattern-을-사용한다면\" style=\"position:relative;\"><a href=\"#state-pattern-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"state pattern 을 사용한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Pattern 을 사용한다면?</h3>\n<ul>\n<li>\n<p>State Pattern 을 사용하지 않을 때 객체 자신이 상태를 체크하고 행위에 따라서 상태를 바꾼다.</p>\n<ul>\n<li>이 때 수많은 분기문이 생긴다.</li>\n</ul>\n</li>\n<li>State Pattern 을 사용한다면 객체가 아니라 상태가 직접 행동하고 변환된 새로운 상태를 반환하도록 위힘이하는 패턴이다.</li>\n</ul>\n<h3 id=\"어떻게-사용하지\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80\" aria-label=\"어떻게 사용하지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 사용하지?</h3>\n<ul>\n<li>객체의 상태들을 클래스로 선언한다.</li>\n<li>각 클래스에서 각 상태들이 할 수 있는 행위를 메서드로 정의한다.</li>\n<li>이 모든 상태 클래스들을 인터페이스로 캡슐화 해서 Client 에서는 이 인터페이스를 호출하고 저장한다.</li>\n</ul>\n<h3 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h3>\n<ul>\n<li><a href=\"https://daru-daru.tistory.com/70\">https://daru-daru.tistory.com/70</a></li>\n<li><a href=\"https://ozt88.tistory.com/8\">https://ozt88.tistory.com/8</a></li>\n<li><a href=\"https://victorydntmd.tistory.com/294\">https://victorydntmd.tistory.com/294</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#fsm-%EC%9D%84-state-design-pattern-%EC%9C%BC%EB%A1%9C\">FSM 을 State Design Pattern 으로!</a></li>\n<li>\n<p><a href=\"#state-design-pattern-%EC%83%81%ED%83%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\">State Design Pattern 상태 디자인 패턴</a></p>\n<ul>\n<li><a href=\"#%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\">언제 사용할까?</a></li>\n<li><a href=\"#state-pattern-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4\">State Pattern 을 사용한다면?</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80\">어떻게 사용하지?</a></li>\n<li><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"FSM 을 State Design Pattern 으로! FSM (Finite State Machine) : 유한 상태 기계 특징 유한한 개수의 상태를 가짐. 그 중 하나의 상태만 취함. 특정 조건이 되면 다른 상태로 변함. 가능한 상태 집합과 각 상태들의 전이 조건으로 정의됨. 왜 쓸까? 가능한 상태들을 명확히 규정할 수 있음. 상태 중복을 피하고 전이들읠 명확하게 규정할 수 있음. 기계의 동작이 명확히 규정됨. 이러한 FSM 을 구현하려면 각 상황에 대한 수많은 분기문들을 통해서 구현이 되어야 한다.  또한 기능이 하나 추가가 될 때 고려해야 할 상황과 추가해야할 코드들이 굉장히 많아진다.  State Design Pattern 상태 디자인 패턴 언제 사용할까? 객체가 상태를 가져야 할 때 특정한 조건을 판단하여 해당하는 상태로 변환해야 하는 로직이 있을 때 각 상태마다 전이 조건이 있어 상황이 달라질 때 State Pattern 을 사용한다면? State Pattern 을 사용…","frontmatter":{"date":"Invalid date","title":"상태 패턴이란?","categories":"설계","author":"코다","emoji":"🛠"},"fields":{"slug":"/state-pattern/"}},"next":{"id":"cb8b1699-6eb2-57ae-b2f6-9f902372f5bb","html":"<p>총 4가지 테스트에 대해서 간단히 다룰 것이다. 지금 우테코 LEVEL1에서 진행하고 있는 미션에서는 단위 테스트를 연습하는 TDD를 하고 있다. <del>내가 TDD를 할 줄이야..</del></p>\n<h3 id=\"유닛-테스트unit-test\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8unit-test\" aria-label=\"유닛 테스트unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유닛 테스트(Unit Test)</h3>\n<p>가장 작은 단위의 테스트로 메서드 레벨로 테스트를 한다. (현재 내가 진행중인 TDD 방식) <br></p>\n<p>즉각적인 결과가 나와서, 해당 메소드에 대한 원하는 결과가 연산이 되는지에 대한 확인이 가능한 테스트이다. <br></p>\n<p>테스트 하기 어려운 메소드들이 등장하곤 하는데 이때는 stub (더미 객체가 마치 실제로 동작하는 것처럼 보이도록 만든 객체) 을 사용하여서 테스트 하는데 비용을 따져서 판단하도록 한다. (비용 관점을 항상 고려해야한다!) <br></p>\n<p>하나의 메소드가 원하는 방식으로 동작한다는 것을 확인할 수 있지만, 결합되었을 때, 잘 동작하는지에 대한 보장은 어렵다. <br></p>\n<h3 id=\"전-구간-테스트end-to-end-test\" style=\"position:relative;\"><a href=\"#%EC%A0%84-%EA%B5%AC%EA%B0%84-%ED%85%8C%EC%8A%A4%ED%8A%B8end-to-end-test\" aria-label=\"전 구간 테스트end to end test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전 구간 테스트(End-To-End Test)</h3>\n<p>시스템 자체와 시스템을 구축하고 배포하는 프로세스를 모두 시험한다. <br></p>\n<p>내부 기능들(클래스 및 메소드)를 테스트 할 필요는 없다. 단위 테스트의 영역으로 구분한다. <br></p>\n<p>테스트 만들기가 쉽지 않고 신뢰하기도 어렵다ㅜㅜ <br></p>\n<h3 id=\"통합-테스트integration-test\" style=\"position:relative;\"><a href=\"#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8integration-test\" aria-label=\"통합 테스트integration test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>통합 테스트(Integration Test)</h3>\n<p>여러개를 통합하여 테스트 할 때 사용하는 테스트 기법이다. <br></p>\n<p>변경할 수 없는 (외부 라이브러리 등) 부분 까지 묶어서 같이 테스트 할 때 주로 사용된다. <br></p>\n<h3 id=\"인수-테스트acceptance-test\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8acceptance-test\" aria-label=\"인수 테스트acceptance test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인수 테스트(Acceptance Test)</h3>\n<p>인수 테스트의 초점은 기술 보다는 비즈니스 쪽이라고 할 수 있다. <br></p>\n<p>구현하고자 하는 기능에 대한 테스트인데, 주로 전 구간 테스트를 사용하여 기능을 테스트하곤 한다. <br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8unit-test\">유닛 테스트(Unit Test)</a></li>\n<li><a href=\"#%EC%A0%84-%EA%B5%AC%EA%B0%84-%ED%85%8C%EC%8A%A4%ED%8A%B8end-to-end-test\">전 구간 테스트(End-To-End Test)</a></li>\n<li><a href=\"#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8integration-test\">통합 테스트(Integration Test)</a></li>\n<li><a href=\"#%EC%9D%B8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8acceptance-test\">인수 테스트(Acceptance Test)</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 25, 2021","title":"TDD 맛보기 - 테스트 종류","categories":"테스트","author":"코다","emoji":"⏳"},"fields":{"slug":"/tdd-tests/"}},"prev":{"id":"a31d3ec2-ded1-5cd7-b9e1-9aa1ecf9b0c9","html":"<h2 id=\"전략-패턴strategy-pattern이란\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern%EC%9D%B4%EB%9E%80\" aria-label=\"전략 패턴strategy pattern이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴(Strategy Pattern)이란?</h2>\n<p>객체가 할 수 있는 <strong>행위</strong>에 대한 <code class=\"language-text\">전략 클래스</code> 생성하여 해당 행위들을 캡슐화(인터페이스화) 하여 사용하는 것이다. <br></p>\n<p>즉, 행위를 각각의 전략 클래스로 생성하고 수정이 필요한 경우 전략을 바꾸는 것으로 행위를 수정하도록 한다. <br></p>\n<h2 id=\"왜-전략-패턴을-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"왜 전략 패턴을 사용해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 전략 패턴을 사용해야 할까?</h2>\n<p>예를 들어 움직이는 Bus, Train 이라는 객체가 있다고 하고 각각 move() 함수를 통해서 움직인다. <br></p>\n<p>그런데, Bus는 도로로 Train은 선로로 움직인다. 만약 이때 버스가 더 이상 길이 아니라 선로로 움직인다고 가정할 때, 버스의 move() 메소드를 선로로 움직이는 로직으로 수정해야 한다. <br></p>\n<p>이때 두 가지 문제가 발생한다. </p>\n<ol>\n<li>OCP (Open-Closed Principle)에 위배 : 수정에 닫혀있어야 하는데, <code class=\"language-text\">move()</code> 메소드를 직접 수정</li>\n<li>확장이 될 경우 메서드 중복 문제 : <code class=\"language-text\">move()</code> 메소드를 가진 여러 객체가 있을 때 일일이 수정을 해아함</li>\n</ol>\n<p><strong>이 때 전략 패턴을 사용하면, 위 두 문제를 마주하지 않으면서 행위를 수정할 수 있다.</strong> </p>\n<h2 id=\"전략-패턴-구현\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84\" aria-label=\"전략 패턴 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴 구현</h2>\n<ul>\n<li>행위에 대한 메소드를 정의하는 <code class=\"language-text\">Strategy</code> 인터페이스를 생성하고 해당 인터페이스를 구현하는 구현체로 각기 다른 전략 로직을 구현한다. <br></li>\n</ul>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/63405904/134760341-bf9b0e5b-8db9-489f-a529-63a46844a877.png\"></p>\n<ul>\n<li>\n<p>움직이는 객체인 <code class=\"language-text\">Bus</code>, <code class=\"language-text\">Train</code> 등등에 위 <code class=\"language-text\">MovableStrategy</code> 를 조합하여, <code class=\"language-text\">move()</code> 메소드에서 지정된 전략 패턴으로 실행되도록 한다. (Bus, Train 등을 Movable 이라는 추상 클래스나 부모 클래스로부터 확장을 해서 추가적으로 중복을 줄일 수도 있다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Moving</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MovableStrategy</span> movableStrategy<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        movableStrategy<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMovableStrategy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MovableStrategy</span> movableStrategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>movableStrategy <span class=\"token operator\">=</span> movableStrategy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>전략 패턴은 상태 패턴과 유사한 매커니즘으로 구조가 되어 있다. 다만 조금 다른 점은 전략 패턴이 대체하고자 하는 것은 <code class=\"language-text\">상속</code> 에 가깝다. 반면 상태 패턴이 대체하고자 하는 것은 수많은 <code class=\"language-text\">조건문</code> 이다. 두 패턴 모두 조합을 통해서 문제를 해결하려고 하기 때문에 그 생김새가 매우 유사하다. <a href=\"%5Bhttps://github.com/KWSStudy/Refactoring/issues/2%5D(https://github.com/KWSStudy/Refactoring/issues/2)\">참고</a> <br></p>\n<h3 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h3>\n<ul>\n<li><a href=\"https://victorydntmd.tistory.com/292\">https://victorydntmd.tistory.com/292</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern%EC%9D%B4%EB%9E%80\">전략 패턴(Strategy Pattern)이란?</a></li>\n<li><a href=\"#%EC%99%9C-%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">왜 전략 패턴을 사용해야 할까?</a></li>\n<li>\n<p><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84\">전략 패턴 구현</a></p>\n<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"Invalid date","title":"전략 패턴이란?","categories":"설계","author":"코다","emoji":"🛠"},"fields":{"slug":"/strategy-pattern/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/state-pattern/","nextSlug":"/tdd-tests/","prevSlug":"/strategy-pattern/"}},"staticQueryHashes":["1073350324","2938748437"]}