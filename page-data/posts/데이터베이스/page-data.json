{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/데이터베이스","result":{"pageContext":{"currentCategory":"데이터베이스","categories":["All","웹","인프라","책","자바","스프링부트","알고리즘","데이터베이스","스프링","JPA","설계","머신러닝","프로젝트","성능테스트","테스트","블로그","운영","빌드","기타"],"edges":[{"node":{"id":"8912f646-45ee-5117-87b0-27ff15400fe1","excerpt":"💡 Intro 이전 포스트에서 진행한 프로젝트에서 태그 검색 성능 테스트에 대한 결과를 보고 개선대상을 파악하고 개선한다.  개선 후 테스트를 재진행하여 결과를 비교한다.  🌩 쿼리 진단 이전 포스트에서 진행한 성능 테스트를 통해 DB 쿼리 쪽 병목이 있다는 것을 알아냈다. 구체적으로 쿼리를 자세히 살펴보면서 어떤 문제가 있는지 확인해보자.  태그 검색 시 파생되는 추가 쿼리  아래는 태그를 검색했을 때 그 결과를 반환하기까지 수행되는 쿼리이다.  ’——————-’ 사이에 있는 쿼리가 실제 태그 검색 쿼리 그 이후는 post 결과를 리턴하기 위해서 postAssemble 하면서 파생되는 추가 쿼리 검색 된 포스트에 태그가 1개인 경우 - tag 조회 쿼리가 1번 발생 검색 된 포스트에 태그가 3개인 경우 - tag 조회 쿼리가 3번 발생 게시물에 있는 태그 갯수만큼 추가 쿼리가 발생하는 것으로 보인다. (JPA N+1 문제)  이 부분을 개선하여 태그 갯수와 상관없이 하나의 추가 …","fields":{"slug":"/project-pickgit-tag-performance-test-2/"},"frontmatter":{"categories":"프로젝트 성능테스트 데이터베이스","title":"K6를 활용한 성능테스트 경험기 2 - 태그 검색 기능 향상","date":"October 15, 2021"}},"next":{"fields":{"slug":"/project-pickgit-tag-performance-test-1/"}},"previous":null},{"node":{"id":"876f010c-b6f8-5496-bba9-4a58ff6140b0","excerpt":"💡 Intro 진행 중인 프로젝트에서 구현한 웹 어플리케이션이 어느 정도의 부하를 견딜 수 있는지에 대한 성능테스트를 진행했다.  프로젝트는 개발자를 타켓으로 한 깃헙 레포지토리를 연동한 게시물을 업로드하여 개발자들이 자신의 작업을 공유하고 다른 이들의 프로젝트를 캐줄얼하게 엿볼 수 있는 SNS형 웹 어플리케이션이다.  사용자는 각 게시물에 관련된 태그를 남길 수 있고 해당 태그를 기반으로 검색하여 관련 게시물을 찾아볼 수 있다. (비로그인/로그인 모두 가능) 태그를 통해서 관련 게시물을 검색하는 성능테스트를 진행, 병목 지점을 분석하고 개선하는 과정을 따라가보자.  🌩 사전 작업 테스트 더미 데이터 입력 테스트를 진행하기 위해서는 실제 운영환경과 최대한 유사한 환경에서 테스트하는 것이 중요하다.  운영환경과 유사한 환경이라고 하면 크게 1) 인프라 구조 2) 데이터 두 가지가 있다.  먼저 대량의 더미 데이터를 입력하도록 한다. (팀원 케빈이 수고해주었다 !! 👍) MariaDB…","fields":{"slug":"/project-pickgit-tag-performance-test-1/"},"frontmatter":{"categories":"프로젝트 성능테스트 데이터베이스","title":"K6를 활용한 성능테스트 경험기 1 - 태그 검색 기능 향상","date":"October 15, 2021"}},"next":{"fields":{"slug":"/jpa-fetch-join-nickname/"}},"previous":{"fields":{"slug":"/project-pickgit-tag-performance-test-2/"}}},{"node":{"id":"3144633b-9fb5-54a7-9f11-f6a48517333b","excerpt":"INTRO 현재 진행중인 프로젝트에서 DB Replication을 적용했었다.  Replication 알아보기 DB replication 적용 이후 Master DB를 업그레이드 해야하는 상황에서 replicas와의 연동에 문제가 생긴적이 있었다. 이때 Master와 replicas 간의 데이터 연동 방법을 이해하고 해결한 (매우 간단한) 방법을 기록한다.  Master DB와 replicas 동기화 Master DB에 데이터를 쓰기 위해서는 replicas에서 master db 의 데이터와 연결되어 있어야 한다. 그러기 위해서 replication을 설정할 때  라는 명령어를 통해서 나온 값과  값을 replica db 설정시 적용해 주었다.  여기서 File은 master db의 binary 로그 파일이고 Position 값은 해당 파일의 현재 위치이다.  위 log 파일에는 어떤 내용이 담겨 있을까? The MariaDB binary log is a series of file…","fields":{"slug":"/db-replication-binary-log/"},"frontmatter":{"categories":"데이터베이스 인프라","title":"DB 리플리케이션 적용시 Binary 로그 에러 해결방법","date":"September 26, 2021"}},"next":{"fields":{"slug":"/high-traffic-service_4/"}},"previous":{"fields":{"slug":"/high-traffic-service_7/"}}},{"node":{"id":"11b32bd6-6da4-513d-9a84-05d7450180a7","excerpt":"INTRO DB Replication을 MySQL 공식 홈페이지에서 찾아보면 다음과 같이 말한다.     Replication enables data from one MySQL databse server (known as a source) to be copied to one or more MySQL database servers (know as replicas) \n출처 : 링크 즉, 하나의 데이터베이스(master/source)에서 다른 하나 또는 그 이상의 데이터베이스(slaves/replicas)로 데이터를 복제하여 저장하는 것이다.  Replication은 비동기로 동작한다. 따라서 replicas가 master에 지속적으로 연결되어는 동기식으로 동작하지 않는다.  설정에 따라서 여러 데이터베이스, 선택된 데이터베이스, 선택된 테이블에만 replication을 적용할 수도 있다.  MySQL replication 장점 공식 홈페이지에 나와있는 장점 4가지는 다음과 같다.  S…","fields":{"slug":"/db-replication/"},"frontmatter":{"categories":"데이터베이스 인프라","title":"DB 리플리케이션 적용하기","date":"September 10, 2021"}},"next":{"fields":{"slug":"/cookie-session/"}},"previous":{"fields":{"slug":"/behavior-parameterization/"}}},{"node":{"id":"0574f453-d5ef-573e-bcb2-ee85bc19c34e","excerpt":"동시성 문제 발생 가능 상황 두개의 트랜잭션이 모두 읽는 연산을 하는 경우 문제가 되지 않는다. 하나의 트랜잭션은 read, 하나는 write인 경우 (Isolation으로 해결) Dirty Read 상황: 트랜잭션1이 write 할 때 트랜잭션2가 update된 데이터를 읽었지만 트랜잭션1이 rollback 되었을 때 발생  문제: 트랜잭션2가 무효된 데이터를 읽었음  Non-repeatable Read 상황: 트랜잭션1이 데이터를 read하고, 트랜잭션2가 데이터를 write 한 후, 트랜잭션1이 다시 동일한 데이터를 read 할 경우에 발생  문제: 트랜잭션이 1이 동일한 read를 했음에도 불구하고 바뀐 데이터를 읽음  Phantom Read 상황: 트랜잭션1이 데이터(범위)를 read하고, 트랜잭션 2가 데이터를 추가(insert) 했는데, 트랜잭션1이 다시 데이터를 read한 경우  문제: 동일한 read를 실행하였는데, 이전에 없었던 값이 추가됨  두개의 트랜잭션이 모…","fields":{"slug":"/database-transaction-currency-control/"},"frontmatter":{"categories":"데이터베이스","title":"Transaction의 동시성 제어(Currency Control)","date":"July 01, 2021"}},"next":{"fields":{"slug":"/spring-spring-web-application-architecture/"}},"previous":{"fields":{"slug":"/gatsby-github-blog/"}}},{"node":{"id":"75f61000-50f8-58be-a445-5bda37396ef5","excerpt":"트랜잭션을 사용하는 이유 트랜잭션을 사용하면 각각의 단위로 나누어져있는 작업의 단위를 하나로 합칠 수 있다. 즉, 일련의 연산들을 하나의 독립된 작업 단위로 보고 하나로 취급하기 위해서 사용하는 것이다.  언제 일련의 연산들을 하나로 봐야 할 때가 생길까?  예를 들어서 돈을 송금하는 시스템이 있다고 가정해보자. 계좌A에서 계좌B로 돈을 송금해야 할 때, 계좌A에 충분한 잔액이 있는 것을 확인하고 돈을 송금하기 위해서 돈을 차감했다. 그리고 계좌B에 입금을 하려고 하는 순간 예외가 발생하면서 입금을 하지 못했다. 그런데 계좌A에서는 여전히 돈이 차감된 상태이다. 중간에 송금하려고 했던 돈이 사라지게 된 것이다.  이때, 위의 과정을 로 관리를 하게 된다면 위의 여러 작업들을 하나의 단위로 보고 중간에 예외가 발생한다면 위에서 실행중이던 작업을 한꺼번에 롤백해준다.  트랜잭션 기본 방법 2개 이상의 쿼리를 하나의 커넥션으로 묶어 DB에 전송하고, 에러가 발생할 경우 자동으로 모든 과…","fields":{"slug":"/transaction-annotation/"},"frontmatter":{"categories":"스프링부트 웹 데이터베이스","title":"@Transactional","date":"May 10, 2021"}},"next":{"fields":{"slug":"/controller-vs-restcontroller/"}},"previous":{"fields":{"slug":"/cicd/"}}},{"node":{"id":"88e09de5-4062-57a5-9ae6-1b90ae07ab3a","excerpt":"Transaction 이란? 개인이 설정할 수 있는 작업의 최소 단위이다. Transaction을 기준으로 을 할 수도, 을 할 수도 있다. Transaction을 사용할 때 DBMS에서 ACID를 제공받을 수 있다. Atomic(원자성) : 한꺼번에 모두 처리가 되거나, 한꺼번에 모두 처리가 되지 않도록 원자성을 부여한다. 데이터 관련 일부만 처리되었을 때 생길 복잡한 상황과 부작용을 막을 수 있다. Consistency(일치성) : 하나의 데이터가 처리되었을 때 관련된 다른 테이블 혹은 상황에서 일관된 논리가 수행 되도록 하는 것을 보장한다 (ex. A 에서 1000원이 차감되면 B에서 1000원이 증감되어야 하는 상황 등등.) Isolation(독립성) : 데이터가 처리되는 도중 다른 일이 중간에 일어나지 않도록 해당 데이터를 보호하도록 보장. 중간에 다른 일이 끼어들어 부작용이 생기는 것을 방지한다. Durability(영구보존성) : 데이터를 DB에 저장하여 보존하도록 한…","fields":{"slug":"/transaction/"},"frontmatter":{"categories":"데이터베이스","title":"Transaction의 동작제어","date":"March 09, 2021"}},"next":{"fields":{"slug":"/web-layer/"}},"previous":{"fields":{"slug":"/dip/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}