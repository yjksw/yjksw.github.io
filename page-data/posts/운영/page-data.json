{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/운영","result":{"pageContext":{"currentCategory":"운영","categories":["All","웹","책","성능테스트","인프라","스프링부트","네트워크","자바","알고리즘","데이터베이스","JPA","스프링","프로젝트","설계","테스트","머신러닝","운영체제","블로그","운영","빌드","기타"],"edges":[{"node":{"id":"80eec19c-30a9-53ed-bbfd-bb60c8bcfc25","excerpt":"💡 INTRO 팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다.  실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다.  기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다.  따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다.  따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다.  🌩 KEYWORDS  교착상태 특징  필요 조건들  자원 할당 그래프 ..  교착상태 처리 방법  교착상태 예방  상호 배제 Mutual Exclusion  점유하여 대기 Hold and Wait  비선점 No Preemption  순환 대기 Circular Wait  교착상태 회피  안전 상태 Safe State  자원 할당 그래프 알고리즘 Resource-Al…","fields":{"slug":"/os-deadlock/"},"frontmatter":{"categories":"운영체제","title":"내가 또 보기 위한 운영체제 Deadlock","date":"October 22, 2021"}},"next":{"fields":{"slug":"/process_synchronization/"}},"previous":{"fields":{"slug":"/tcp-congestion-control/"}}},{"node":{"id":"6e98f82c-055a-5bde-b249-27124d358da9","excerpt":"💡 INTRO 팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다.  실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다.  기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다.  따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다.  따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다.  🌩 KEYWORD  경쟁 상태 Race Condition  임계 영역 문제 The Critical-Section Problem  피터슨 해결안 Peterson’s Solution - 소프트웨어 측면  세마포어 Semaphores & 뮤텍스 Mutex  동기화 문제들 유한 버퍼 문제 Readers-writers 문제 식사하는 철학자들 문제 🌩 경쟁 상태 Race c…","fields":{"slug":"/process_synchronization/"},"frontmatter":{"categories":"운영체제","title":"내가 또 보기 위한 운영체제 프로세스 동기화","date":"October 21, 2021"}},"next":{"fields":{"slug":"/jpa-default-batch-fetch-size-not-working/"}},"previous":{"fields":{"slug":"/os-deadlock/"}}},{"node":{"id":"36216a08-7f3b-5fae-a020-c6ecb5db3d3e","excerpt":"자바 + 스프링 MVC 프로젝트 배포과정 (별도 인스턴스 활용) 이번에 몇몇 크루들과 미션을 진행하면서 웹을 처음으로 호스팅 해보았다. 웹을 배포 할 때 더욱 편리하다는 DevOps의 꽃 ci/cd를 학습해보기 위해서 6명이 모여서 한번 적용해보았다. 적용하면서 밟은 단계들을 기록해둔다.  아래와 같이 그대로 적용하다가 본 프로젝트에 맞게 어느정도 커스텀하여 다르게 설정한 것도 있다. 특히 버전같은 것들은 좀 outdated 된 정보일 수 있다.  추후에 진행할 팀 프로젝트에 큰 도움이 될 것 같다.  docker 설치 EC2에서 Jenkins key 받기 및 적용 Jenkins 포트 번호 변경 젠킨스는 내부적으로 톰캣 서버를 이용하므로 기본포트 8080을 이용한다. 대부분의 스프링 프로젝트도 8080 톰캣 포트를 이용하기 때문에 젠킨스의 포트번호를 변경해야한다.  Jenkins 홈 디렉토리 Jenkins 기본 설정파일 & 로그 파일 포트 변경 후 재시작 Jenkins 접속 및 설…","fields":{"slug":"/cicd-jenkins/"},"frontmatter":{"categories":"웹 운영","title":"젠킨스를 활용한 CI/CD 적용기","date":"May 19, 2021"}},"next":{"fields":{"slug":"/cicd/"}},"previous":{"fields":{"slug":"/annotation-valid/"}}},{"node":{"id":"f02c63aa-3997-5d83-92ac-51b2edd0b27e","excerpt":"CI/CD 의 필요성 개발 후 운영을 하기까지 다음 그림의 프로세스가 반복해서 진행된다.  즉, 개발 프로세스(Dev)의 일종으로 개발을 하여 빌드를 하고 운영 프로세스(Ops)의 일종으로 릴리즈, 배포, 모니터링이 반복된다. 점점 이것을 짧은 쥐기로 반복하는 DevOps가 등장하면서 CI/CD가 중요해졌다.  CI - Continuous Integration 정의: 지속적으로 퀄리티 컨트롤을 적용하는 프로세스를 실행하는 것 어플리케이션 코드에 변경이 생기더라도 정기적인 빌드와 테스트를 통과하여 하나의 레포지토리에 관리가 되는 것 예시: SCM(Source Code Management): 깃헙 레포 하나로 소스코드를 머지하고 충도를 처리하는 과정 테스트 코드를 통해서 유효성을 검증하는 과정 장점: 소스코드를 Ready-to-run 상태로 유지할 수 있다. 이 부분은 혼자 개발할 경우 장점을 느끼기 어렵지만 주로 여러명이서 협업하여 개발을 하기 때문에 중간에 합류한 그 누구도 빌드가…","fields":{"slug":"/cicd/"},"frontmatter":{"categories":"웹 운영","title":"CI/CD란 무엇일까","date":"May 17, 2021"}},"next":{"fields":{"slug":"/transaction-annotation/"}},"previous":{"fields":{"slug":"/cicd-jenkins/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}