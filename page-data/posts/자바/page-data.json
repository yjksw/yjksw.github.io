{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/자바","result":{"pageContext":{"currentCategory":"자바","categories":["All","웹","스프링부트","자바","스프링","설계","데이터베이스","인프라","JPA","테스트","블로그","운영","알고리즘","빌드","머신러닝"],"edges":[{"node":{"id":"44979c6c-3a26-53fb-9abc-7e9b88c7744c","excerpt":"INTRO 자바가 업데이트 되면서 메소드를 일급시민으로 취급할 수 있게 되었다. 이로 인해 동작 파라미터를 통해서 어떠한 동작을 인자로 넘길 수 있다.  메소드를 일급 시민으로 취급하면서 함수형 인터페이스 등의 개념이 등장한다. 코드의 명확성을 증진시키기 위해 익명 클래스, 람다 함수, 메서드 참조 등등의 개념이 활용된다.  동작 파라미터를 활용한 예시로 콜백 함수를 들여다보자.  왜 동작 파라미터인가? 코딩을 할 때 가장 중요한 요소 중 하나는 변화하는 요구사항에 대응하는 것이다.  동작 파라미터화는 나중에 실행할 코드 블록을 인수로 넘겨서 행동을 결정하는 것이다.  나중에 실행되도록 넘기는 콜백 함수와 같은 동일하게 작용한다. (내재된 개념이다) 이해를 돕기 위해 모던 자바 인 액션 에 나온 예제를 살펴보자.  상황1: 사과를 색으로 필터링 하는 요구사항을 구현한다.  상황2: 사과를 무게로 필터링하는 요구사항을 구현한다.  위 두 코드가 상당히 유사하다. (실제로 작성할 때도…","fields":{"slug":"/behavior-parameterization/"},"frontmatter":{"categories":"자바","title":"동작 파라미터부터 람다까지: 콜백함수를 곁들인","date":"September 22, 2021"}},"next":{"fields":{"slug":"/db-replication/"}},"previous":{"fields":{"slug":"/db-replication-binary-log/"}}},{"node":{"id":"41ff080c-8050-53a6-a648-d015de29c91e","excerpt":"자바 I/O 스트림 Stream은 데이터의 연속이다. Sequence of Data 다르게 말하면 Stream 이란 한쪽으로 흐르는 통로같은 것이다. 자바에서 Stream이란 한쪽 source에서 destination으로 흐르는 데이터를 위한 단방향 통로이다. 자바에서는 여러 매체를 읽거나 쓸 수 있고 각자를 위한 I/O Stream이 구현되어 있다. (disk files, devices, programs, memory arrays) Stream은 단방향 통신이기때문에 들어오는 데이터, 나가는 데이터에 따로 InputStream, OutputStream이 있는 것이다.  I/O 스트림은 여러가지 종류의 데이터들을 처리할 수 있다: 바이트, primitive data type, characters, objects Stream은 단순히 데이터를 전달하는 역할만 하기도하고, 몇몇 stream은 데이터를 조작하고 편리하게 변환하는 역할을 수행하기도 한다. 모든 Stream은 사용 후 반드…","fields":{"slug":"/java-iostream-file/"},"frontmatter":{"categories":"자바","title":"Java IOStream 과 파일 입출력","date":"August 26, 2021"}},"next":{"fields":{"slug":"/profile-active-profile/"}},"previous":{"fields":{"slug":"/jpa-proxy/"}}},{"node":{"id":"89cc4854-91bf-5d0c-abe5-c82fe6e01006","excerpt":"들어가기 전에 암호화(Encryption)과 해싱은 다른 개념 암호화 - 양방향이므로 복호화가 가능 해싱 - 단방향이므로 복호화가 불가능 단방향 해시 함수 (One-Way Hash Function) 기본적으로 패스워드 등의 보안의 문제가 걸린 정보를 DB에 저장할 때 평문으로 저장하지 않고 해싱한 값을 저장한다. (평문으로 저장할 경우 DB가 해킹되었을 때 심각한 문제가 발생한다)  단방향 해시 함수를 사용해서 원본 내용을 완전히 새로운 내용으로 다이제스트(digest)로 매핑한다. 이때 매핑하는 것을 해시라고 한다. 이것은 단방향이므로 복호화할 수 없다.  해시 함수 종류 SHA MD HAS WHIRLPOOL 한계점 Rainbow Table 동일한 데이터를 동일한 해시 함수로 연산한 다이제스트는 동일한 값을 가진다. 따라서 여러 값들에 대한 다이제스트를 모아놓은 Rainbow Table이라는 것이 존재하고 이것을 통해서 원본 데이터를 유추할 수 있다.  Brute-force 해싱…","fields":{"slug":"/hash-salt/"},"frontmatter":{"categories":"웹 자바","title":"Hash와 Salt","date":"June 21, 2021"}},"next":{"fields":{"slug":"/request-body-model-attribute-advanced/"}},"previous":{"fields":{"slug":"/symmetric-vs-asymmetric-encryption/"}}},{"node":{"id":"8bf91ec6-90fe-5ce0-86c1-d8e98765968f","excerpt":"간단한 JavaBean 규약에 대해서 알고 넘어가기 JavaBean 자바빈 규약을 따르는 Java Class를 말한다.  JavaBean 규약 defulat 패키지가 아닌 패키지 하위에 있는 클래스 기본 생성자가 존재 (no-arg constructor) Property는 모두 private으로 선언 Getter/setter를 통해서 properties를 조작 을 implement 하여 직렬화 가능 번외 : Serialization & Deserialization Serialization : converting state of an object into a byte stream Deserialization: reverse process of serialization 해당 객체에 영속성을 부여하기 위해서 사용되는 매커니즘이다.  Java 객체를 serialize 하게 하기 위해서는  인터페이스를 구현하도록 한다. 해당 인터페이스는 멤버변수나 메소드가 존재하지 않는 marker int…","fields":{"slug":"/java-bean/"},"frontmatter":{"categories":"자바","title":"자바빈 규약 (번외: Serialization)","date":"June 08, 2021"}},"next":{"fields":{"slug":"/dispatcher-servlet/"}},"previous":{"fields":{"slug":"/jwt-token/"}}},{"node":{"id":"c6060cb1-1a69-5cc5-8508-1df3c8357b5f","excerpt":"요약하자면 Stream과 Collection의 차이는 다음과 같다.  개념적으로 접근했을 때 Collection의 경우에는 어떠한 데이터를 담는 자료구조의 역할을 주로 하지만, Stream의 경우는 연산과 관련된 것이 주라고 볼 수 있다.  Quote Java Collections offer efficient mechanisms to store and process the data by providing data structures like List, Set, and Map. However, the Stream API is useful for performing various operations on the data without the need for intermediate storage. 출처: https://www.baeldung.com/java-return-stream-collection Traversal Collection은 여러번 데이터를 횡단할 수 있지만, Stream…","fields":{"slug":"/stream-vs-collection/"},"frontmatter":{"categories":"자바","title":"Stream vs. Collection","date":"March 20, 2021"}},"next":{"fields":{"slug":"/boolean-timestamp/"}},"previous":{"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}