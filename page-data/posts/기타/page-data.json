{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/기타","result":{"pageContext":{"currentCategory":"기타","categories":["All","웹","책","성능테스트","인프라","자바","스프링부트","알고리즘","데이터베이스","JPA","스프링","프로젝트","네트워크","설계","머신러닝","테스트","블로그","운영","빌드","기타"],"edges":[{"node":{"id":"da36c6a9-a62a-53e5-a254-0a74475b5d42","excerpt":"Github에 익숙하지 않기 때문에 커밋은 나에게 push를 해서 업로드를 하기 위한 중간과정 중 하나였다. 하지만 다른 곳에서 깃헙이나 프로젝트 진행을 하면서 커밋을 하는 단위의 중요성과 깃헙의 최대 장점인 프로젝트를 되돌리기 위한 커밋 메세지의 중요성에 대해서 여러번 들었었다. 이번에 프리코스를 시작하면서 커밋 메세지에 대한 가이드를 읽고 정리해보기로 했다.  참고 사이트 CHANGELOG.md 생성하기 changelog에는 3개의 section이 있다: new features, bug fixes, breaking changes. 이러한 정보들은 배포가 될 때 script로 생성이 되어야 하며 해당하는 commit과 함께 제공되어야 한다. 해당 로그들을 보는 방법들은 다음과 같다. 지난 release 이후에 발생한 모든 subject(커밋 메세지의 첫번째 라인) 조회: 이번 release의 새로운 feature: Recognizing unimportant commits 사소한 …","fields":{"slug":"/commit-message-convetion/"},"frontmatter":{"categories":"기타","title":"[GitHub] Commit Message Convetion","date":"November 29, 2020"}},"next":{"fields":{"slug":"/java-coding-convention/"}},"previous":{"fields":{"slug":"/mvc-pattern/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}