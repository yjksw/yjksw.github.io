{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/운영체제","result":{"pageContext":{"currentCategory":"운영체제","categories":["All","웹","책","성능테스트","인프라","스프링부트","네트워크","자바","알고리즘","운영체제","데이터베이스","JPA","스프링","프로젝트","설계","테스트","머신러닝","블로그","운영","빌드","기타"],"edges":[{"node":{"id":"80eec19c-30a9-53ed-bbfd-bb60c8bcfc25","excerpt":"💡 INTRO 팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다.  실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다.  기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다.  따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다.  따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다.  🌩 KEYWORDS  교착상태 특징  필요 조건들  자원 할당 그래프 ..  교착상태 처리 방법  교착상태 예방  상호 배제 Mutual Exclusion  점유하여 대기 Hold and Wait  비선점 No Preemption  순환 대기 Circular Wait  교착상태 회피  안전 상태 Safe State  자원 할당 그래프 알고리즘 Resource-Al…","fields":{"slug":"/os-deadlock/"},"frontmatter":{"categories":"운영체제","title":"내가 또 보기 위한 운영체제 Deadlock","date":"October 22, 2021"}},"next":{"fields":{"slug":"/process_synchronization/"}},"previous":{"fields":{"slug":"/tcp-congestion-control/"}}},{"node":{"id":"6e98f82c-055a-5bde-b249-27124d358da9","excerpt":"💡 INTRO 팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다.  실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다.  기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다.  따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다.  따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다.  🌩 KEYWORD  경쟁 상태 Race Condition  임계 영역 문제 The Critical-Section Problem  피터슨 해결안 Peterson’s Solution - 소프트웨어 측면  세마포어 Semaphores & 뮤텍스 Mutex  동기화 문제들 유한 버퍼 문제 Readers-writers 문제 식사하는 철학자들 문제 🌩 경쟁 상태 Race c…","fields":{"slug":"/process_synchronization/"},"frontmatter":{"categories":"운영체제","title":"내가 또 보기 위한 운영체제 프로세스 동기화","date":"October 21, 2021"}},"next":{"fields":{"slug":"/jpa-default-batch-fetch-size-not-working/"}},"previous":{"fields":{"slug":"/os-deadlock/"}}},{"node":{"id":"6a22f61a-df2e-50fa-b1ee-dcb3734cbb98","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH6. CPU 스케줄링를 읽고 정리한 내용입니다 🙌 🌩 INTRO CPU는 PC가 가리키는 명령어를 하나씩 수행하기 때문에 효율적으로 관리해야한다. 기계어 명령은 다음 3가지로 나뉜다. CPU 내에서 수행되는 명령  ADD 명령 수행 속도 빠르며 일반명령 CPU 버스트  메모리 접근을 필요로 하는 명령 LOAD 명령 메모리에 있는 데이터를 CPU로 읽는 명령 CPU 명령보다는 오래 걸리지만 비교적 빠르며 일반명령 CPU 버스트  입출력을 동반하는 명령 입출력 작업이필요한 경우이며 오랜 시간이 소요 특권명령으로 운영체제를 통해 서비스를 대행해야한다.  I/O 버스트  CPU 수행은 위 명령어의 조합과 반복으로 이루어진다. 각 프로그램마다 위 명령어들의 비율이 다르며 CPU 연산이 많이 이루어지는 것을 CPU 바운드 프로세스, I/O 연산이 많이 일어나는 것을 I/O 바운트 프로세스라고 한다. I/O 바운드 프로세스는 사용자 인터…","fields":{"slug":"/operating-system-5/"},"frontmatter":{"categories":"운영체제 책","title":"운영체제와 정보기술의 원리 - CH6. CPU 스케줄링","date":"October 15, 2021"}},"next":{"fields":{"slug":"/netflix-performance-analysis/"}},"previous":{"fields":{"slug":"/jpa-default-batch-fetch-size-not-working/"}}},{"node":{"id":"729d1153-237f-5fde-a73b-e4781e4d31d3","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH5. 프로세스 관리를 읽고 정리한 내용입니다 🙌 🌩 1. 프로세스의 개념 프로세스란 실행 중인 프로그램이다. 프로세스는 CPU를 획득해서 코드를 수행하고 CPU를 반환하고 입출력 작업을 수행하기도 한다. 프로세스 문맥 (context) - 프로세스가 현재 어떤 상태에서 수행되고 있는 규명하기 위해 필요한 정보 여러 프로세스가 CPU를 사용하면서 중간에 CPU를 다른 프로세스에게 넘겨야 한다. 이때 다시 이어서하기 위한 필요 정보가 있는데 그것을 프로세스 문맥이라고 한다. 프로세스의 주소 공간, 레지스터의 값, 시스템 콜을 통해 커널에서 수행한 일의 상태, 프로세스에 대해 커널이 관리하고 있는 여러 정보들을 포함한다. 프로세스 문맥은 3가지로 나뉜다. 하드웨어 문맥 CPU의 수행 상태를 나타낸다.  프로그램 카운터 값, 각종 레지스터에 저장하고 있는 값들이다.  프로세스의 주소 공간 코드, 데이터, 스택으로 이루어진 프로세스의…","fields":{"slug":"/operating-system-4/"},"frontmatter":{"categories":"운영체제 책","title":"운영체제와 정보기술의 원리 - CH5. 프로세스 관리","date":"October 13, 2021"}},"next":{"fields":{"slug":"/operating-system-3/"}},"previous":{"fields":{"slug":"/project-pickgit-homefeed-performance-test-1/"}}},{"node":{"id":"c8678391-1095-5db1-99f3-e36da5f03ed2","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH4. 프로그램의 구조와 실행를 읽고 정리한 내용입니다 🙌 🌩 1. 프로그램의 구조와 인터럽트 CPU에서 프로그램 명령을 실행하기 위해서는 프로그램 명령을 담은 주소 영역이 메모리에 올라가야한다. 주소 영역은 code(프로그램 함수들이 기계어로 변환되어 저장), data(전역 변수 등 프로그램이 사용하는 데이터 저장), stack(함수 복귀 주소 및 데이터 임시 저장)으로 구분된다. 함수를 호출하여 새로운 함수 위치로 점프할 때 다시 돌아올 주소를 스택 영역에 저장한다. 인터럽트 동작 원리도 함수의 호출과 비슷하다. 인터럽트 발생시 실행중이던 명령어의 위치를 저장한다. 처리루틴 후 해당 주소로 돌아와서 수행을 이어간다. 이 주소는 운영체제가 관리하는 PCB에 저장된다. 🌩 2. 컴퓨터 시스템의 작동 개요 CPU는 매 시점 특정 주소에 존재하는 명령을 읽어서 그대로 실행한다. CPU가 실행해야할 명령의 메모리 위치는 Progra…","fields":{"slug":"/operating-system-3/"},"frontmatter":{"categories":"운영체제 책","title":"운영체제와 정보기술의 원리 - CH4. 프로그램의 구조와 실행","date":"October 12, 2021"}},"next":{"fields":{"slug":"/operating-system-2/"}},"previous":{"fields":{"slug":"/operating-system-4/"}}},{"node":{"id":"0515d110-b29d-5c41-a700-b62f2f2aee0f","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH3. 컴퓨터 시스템의 동작원리를 읽고 정리한 내용입니다 🙌 🌩 1. 컴퓨터 시스템의 구조 내부 장치 - CPU, 메모리 외부 장치 - 디스크, 키보드, 마우스, 모니터, 네트워크 장치 등등 입출력장치라고 한다. 각 하드웨어 장치를 각각의 컨트롤러가 제어한다. 컴퓨터는 외부장치에서 내부장치로 데이터를 읽어 연산한 후 결과를 외부장치로 내보내는 방식으로 동작한다. input - 내부로 들어오는 것 output - 외부로 내보내는 것 여러 프로그램을 동시에 수행할 수 있도록 하는 것이 운영체제이기 때문에 항상 메모리에 상주한다. 전체가 상주하기엔 너무 낭비이기 때문에 꼭 필요한 부분만 항상 메모리에 상주하고 그 부분을 커널(kernel)이라고 한다. 🌩 2. CPU 연산과 I/O 연산 I/O 연산들은 입출력 컨트롤러가 담당하고 컴퓨터 내부의 연산은 메인 CPU가 담당한다. 입출력 장치와 메인 CPU는 동시 수행이 가능하다. 각 장…","fields":{"slug":"/operating-system-2/"},"frontmatter":{"categories":"운영체제 책","title":"운영체제와 정보기술의 원리 - CH3. 컴퓨터 시스템의 동작원리","date":"October 11, 2021"}},"next":{"fields":{"slug":"/operating-system-1/"}},"previous":{"fields":{"slug":"/operating-system-3/"}}},{"node":{"id":"e5504118-763f-5c6d-b5da-4fd50eef8d78","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH2. 운영체제 개요를 읽고 정리한 내용입니다 🙌 🌩 1. 운영체제의 정의 운영체제란 컴퓨터 하드웨어 바로 위에 설치되는 소프트웨어이다. 사용자가 직접 하드웨어를 다루는 것이 쉽지 않기 때문에 하드웨어를 기본적으로 운용하는 운영체제를 탑재해서 사용하도록 한다. 좁은 의미 운영체제 vs. 넓은 의미 운영체제 운영체제도 소프트웨어이기 때문에 컴퓨터가 켜지면서 메모리에 올라가서 사용이 되어야 한다. 하지만 운영체제 전부를 메모리에 올려서 사용하기에는 리소스 낭비가 심하기 때문에 꼭 필요한 부분만을 전원이 켜짐과 동시에 메모리에 올린다. 메모리에 전원이 켜짐과 동시에 상주하는 부분을 커널이라고 한다 ⇒ 좁은 의미의 운영체제 이후 필요한 부분은 그때그때 사용자 유틸리티로 메모리에 올려서 사용한다 ⇒ 넓은 의미의 운영체제 파일 복사 등등 🌩  2. 운영체제의 기능 1) 하드웨어와 2) 사용자를 위한 역할 두가지를 중간에서 담당한다. 하드…","fields":{"slug":"/operating-system-1/"},"frontmatter":{"categories":"운영체제 책","title":"운영체제와 정보기술의 원리 - CH2. 운영체제 개요","date":"October 11, 2021"}},"next":{"fields":{"slug":"/one-percent-network-10/"}},"previous":{"fields":{"slug":"/operating-system-2/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}