{"componentChunkName":"component---src-templates-blog-template-js","path":"/tcp-congestion-control/","result":{"data":{"cur":{"id":"dcb75ef2-3086-5644-8574-f88a14febe20","html":"<h2 id=\"-왜-혼잡제어가-필요할까\" style=\"position:relative;\"><a href=\"#-%EC%99%9C-%ED%98%BC%EC%9E%A1%EC%A0%9C%EC%96%B4%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\" 왜 혼잡제어가 필요할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 왜 혼잡제어가 필요할까?</h2>\n<ul>\n<li>라우터에 패킷이 몰리면 패킷이 유실되고 패킷을 재전송 하면서 네트워크는 더 혼잡해진다.</li>\n<li>송신측에서 이러한 문제를 해결하기 위해 전송속도를 줄이는 혼잡 제어를 사용한다.</li>\n</ul>\n<br>\n<h2 id=\"-aimd\" style=\"position:relative;\"><a href=\"#-aimd\" aria-label=\" aimd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 AIMD</h2>\n<ul>\n<li>Additive Increase, Mutiplicative Decrese</li>\n<li>패킷을 하나씩 보내고 문제없이 도착하면 window 크기를 1개씩 증가한다.</li>\n<li>패킷 전송에 실패하면 속도를 절반으로 줄인다.</li>\n<li>이 경우 나중에 네트워크에 진입한 쪽이 처음에는 불리하지만 점점 동일한 평형상태가 되기 때문에 공정하다.</li>\n<li>네트워크 혼잡을 미리 감지하지는 못하고 혼잡하면 대역폭을 줄인다.</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139091747-767ffc1e-b9a7-4894-9445-17930ef59391.png\"></p>\n<br>\n<h2 id=\"-slow-start\" style=\"position:relative;\"><a href=\"#-slow-start\" aria-label=\" slow start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Slow Start</h2>\n<ul>\n<li>AIMD는 처음 전송속도를 올리는 것이 너무 느리다는 단점이 있다.</li>\n<li>slow start는 처음에는 문제가 없다면 윈도우 사이즈를 지수함수꼴로 증가한다.</li>\n<li>혼잡 현상이 발생하면 window사이즈를 1로 떨어뜨린다. 하지만 이때는 네트워크의 혼잡율을 어느정도 예상할 수 있다.</li>\n<li>따라서 혼잡 현상이 발생했던 window size의 크기의 반까지 지수함수 꼴로 증가시키고 이후부터 1씩 완만하게 증기시킨다. (임계점에 다다르면 지수함수는 너무 급격하므로 1씩 윈도우를 증가시킨다)</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139091821-279101d0-e464-4644-a803-3ea6a7c2a678.png\"></p>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139091877-c00e5fdd-d52f-4280-9f76-3ba9587b225a.png\"></p>\n<br>\n<h2 id=\"-fast-retransmit-빠른-재전송\" style=\"position:relative;\"><a href=\"#-fast-retransmit-%EB%B9%A0%EB%A5%B8-%EC%9E%AC%EC%A0%84%EC%86%A1\" aria-label=\" fast retransmit 빠른 재전송 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Fast Retransmit 빠른 재전송</h2>\n<ul>\n<li>패킷을 받는 쪽에서 패킷이 도착하지 않고 다음 패킷이 도착하더라도 ACK를 보내는데 이때 잘 도착한 패킷의 다음 패킷을 ACK로 보낸다.</li>\n<li>그러면 중복된 ACK 패킷이 계속 도착하므로 이때는 문제가 된 순번의 패킷을 재전송 해줄수 있다.</li>\n<li>중복된 패킷을 3개 받으면 재전송을 하는데, 혼잡임을 감지하고 window size를 반으로 줄이다.</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139092293-9e27653f-f3aa-44fd-867c-c2327be7b57f.png\"></p>\n<br>\n<h2 id=\"-fast-recovery-빠른-회복\" style=\"position:relative;\"><a href=\"#-fast-recovery-%EB%B9%A0%EB%A5%B8-%ED%9A%8C%EB%B3%B5\" aria-label=\" fast recovery 빠른 회복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Fast Recovery 빠른 회복</h2>\n<ul>\n<li>혼잡한 상태가 되면 window를 1이 아닌 반으로 줄이고 선형증가시킨다.</li>\n<li>혼잡상황을 한번 겪으면 순수 AIMD 방식으로 동작한다.</li>\n</ul>\n<br>\n<h2 id=\"-tcp-reno\" style=\"position:relative;\"><a href=\"#-tcp-reno\" aria-label=\" tcp reno permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 TCP Reno</h2>\n<ul>\n<li>위 기법들을 사용한 TCP 혼잡제어이다.</li>\n<li>먼저 slow start로 시작하고 임계점을 넘어가면 1씩 설정하여 윈도우 사이즈를 높인다.</li>\n<li>\n<p>위의 3 ACK Duplicated와 타임아웃을 구분하여 각기 다른 방식을 취한다.</p>\n<ul>\n<li>3 ACK Duplicated라면 윈도우 사이즈를 반으로 줄이고 선형적으로 증가시킨다.</li>\n<li>타임아웃이 발생하면 윈도우 크기를 1로 줄이고 slow start를 진행한다.</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139091995-e0f1f659-47c8-486a-b7c4-d9ddc7ee2c9a.png\"></p>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://evan-moon.github.io/2019/11/26/tcp-congestion-control/\">https://evan-moon.github.io/2019/11/26/tcp-congestion-control/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EC%99%9C-%ED%98%BC%EC%9E%A1%EC%A0%9C%EC%96%B4%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\">🌩 왜 혼잡제어가 필요할까?</a></li>\n<li><a href=\"#-aimd\">🌩 AIMD</a></li>\n<li><a href=\"#-slow-start\">🌩 Slow Start</a></li>\n<li><a href=\"#-fast-retransmit-%EB%B9%A0%EB%A5%B8-%EC%9E%AC%EC%A0%84%EC%86%A1\">🌩 Fast Retransmit 빠른 재전송</a></li>\n<li><a href=\"#-fast-recovery-%EB%B9%A0%EB%A5%B8-%ED%9A%8C%EB%B3%B5\">🌩 Fast Recovery 빠른 회복</a></li>\n<li><a href=\"#-tcp-reno\">🌩 TCP Reno</a></li>\n</ul>\n</div>","excerpt":"🌩 왜 혼잡제어가 필요할까? 라우터에 패킷이 몰리면 패킷이 유실되고 패킷을 재전송 하면서 네트워크는 더 혼잡해진다. 송신측에서 이러한 문제를 해결하기 위해 전송속도를 줄이는 혼잡 제어를 사용한다. 🌩 AIMD Additive Increase, Mutiplicative Decrese 패킷을 하나씩 보내고 문제없이 도착하면 window 크기를 1개씩 증가한다. 패킷 전송에 실패하면 속도를 절반으로 줄인다. 이 경우 나중에 네트워크에 진입한 쪽이 처음에는 불리하지만 점점 동일한 평형상태가 되기 때문에 공정하다. 네트워크 혼잡을 미리 감지하지는 못하고 혼잡하면 대역폭을 줄인다. 🌩 Slow Start AIMD는 처음 전송속도를 올리는 것이 너무 느리다는 단점이 있다. slow start는 처음에는 문제가 없다면 윈도우 사이즈를 지수함수꼴로 증가한다. 혼잡 현상이 발생하면 window사이즈를 1로 떨어뜨린다. 하지만 이때는 네트워크의 혼잡율을 어느정도 예상할 수 있다. 따라서 혼잡 현상이 …","frontmatter":{"date":"October 22, 2021","title":"내가 또 보기 위한 TCP 혼잡제어","categories":"네트워크","author":"코다","emoji":"⚡️"},"fields":{"slug":"/tcp-congestion-control/"}},"next":{"id":"80eec19c-30a9-53ed-bbfd-bb60c8bcfc25","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 INTRO</h2>\n<ul>\n<li>팀과 함께 나름 큰 프로젝트를 진행했다. 또한 추후에 있을 꽤 많은 사람들(약 100명 예상)이 참여하는 데모를 준비했다. </li>\n<li>실제 사람들에게 사용되려니 고려해야할 것이 굉장히 많았다. </li>\n<li>기능이 제대로 돌아가는 것도 중요하지만 많은 사용자에게 실제로 서비스 될 수 있는지까지 고려해야했다. </li>\n<li>따라서 어플리케이션이 실제로 구동되는 OS에 대한 지식이 없이는 어플리케이션의 안정성에 대한 판단력을 가지기 어렵다고 생각했다. </li>\n<li>따라서 운영체제 관련 책을 읽고 (추후 업로드 예정) 책에 빠진 부분을 보충하여 학습한다. </li>\n</ul>\n<br>\n<h2 id=\"-keywords\" style=\"position:relative;\"><a href=\"#-keywords\" aria-label=\" keywords permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 KEYWORDS</h2>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  교착상태 특징</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  필요 조건들</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  자원 할당 그래프 ..</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  교착상태 처리 방법</p>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  교착상태 예방</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  상호 배제 Mutual Exclusion</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  점유하여 대기 Hold and Wait</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  비선점 No Preemption</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  순환 대기 Circular Wait</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  교착상태 회피</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  안전 상태 Safe State</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  자원 할당 그래프 알고리즘 Resource-Allocation Graph Algorithm</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  은행원 알고리즘 Banker’s Algorithm</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  교착상태 탐지 Deadlock Detection</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  교착상태 회복</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  프로세스 종료 Process Termination</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  자원 선점 Resource Preemption</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-교착상태-deadlock\" style=\"position:relative;\"><a href=\"#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-deadlock\" aria-label=\" 교착상태 deadlock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 교착상태 Deadlock</h2>\n<ul>\n<li>둘 이상의 프로세스 혹은 스레드가 다른 프로세스/스레드가 가지고 있는 자원을 기다리면서 무한대기 루프에 빠지는 것이다.</li>\n<li>자원은 I/O 디바이스, CPU cycle, 메모리, 세마포어 등등</li>\n<li>\n<p>예를 들어 바이너리 세마포어 2개가 있는데 2개를 모두 획득해야 임계 영역에 들어갈 수 있다면 교착상태에 빠질 가능성이 생긴다.</p>\n<ul>\n<li>P0 → P(A); P(B);</li>\n<li>P1 → P(B); P(A);</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"발생조건-4가지\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EC%83%9D%EC%A1%B0%EA%B1%B4-4%EA%B0%80%EC%A7%80\" aria-label=\"발생조건 4가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발생조건 4가지</h3>\n<ul>\n<li>\n<p>상호 배제</p>\n<ul>\n<li>한번에 하나의 프로세스만 자원을 사용할 수 있다. 사용하고 싶은 다른 프로세스는 해제할 때까지 기다려야 한다.</li>\n</ul>\n</li>\n<li>\n<p>점유 대기</p>\n<ul>\n<li>자원을 하나 보유하고 다른 프로세스에 할당된 자원을 점유하기 위해 대기하는 프로세스가 존재한다.</li>\n</ul>\n</li>\n<li>\n<p>비선점</p>\n<ul>\n<li>다른 프로세스에게 할당된 자원을 강제로 빼앗을 수 없다.</li>\n</ul>\n</li>\n<li>\n<p>순환 대기</p>\n<ul>\n<li>대기 프로세스의 집합이 순환 형태로 자원을 대기하고 있어야 한다. 즉, 원하는 자원을 이어서 순환 사이클이 만들어진다.</li>\n</ul>\n</li>\n<li>위 4가지를 모두 만족해야지 데드락이 발생한다.</li>\n</ul>\n<h3 id=\"자원-할당-그래프-resource-allocation-graph\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84-resource-allocation-graph\" aria-label=\"자원 할당 그래프 resource allocation graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자원 할당 그래프 Resource Allocation Graph</h3>\n<ul>\n<li>프로세스의 자원 할당 상태를 표현해주는 그래프이다.</li>\n<li>각각 프로세스, 자원이 노드로 있으며 프로세스 → 자원 edge는 프로세스의 자원 요청, 자원 → 프로세스 edge는 해당 프로세스의 자원 소유를 뜻한다.</li>\n<li><strong>자원 할당 그래프에 사이클이 없으면 데드락이 아니다.</strong></li>\n<li>\n<p>사이클이 있다면 맞을 수도 아닐 수도 있다.</p>\n<ul>\n<li>각 리소스 당 하나의 프로세스만 요청을 보내고 있다면 데드락이다.</li>\n<li>\n<p>여러 인스턴스가 요청을 보내고 있다면 데드락 가능성이 있는 것이다.</p>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139089988-7833eebb-8fc4-4571-8ed8-4bbe254e85cc.png\"></p>\n</li>\n<li>왼쪽은 데드락, 오른쪽은 데드락이 아니다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-교착상태-처리-방법\" style=\"position:relative;\"><a href=\"#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95\" aria-label=\" 교착상태 처리 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 교착상태 처리 방법</h2>\n<ul>\n<li>\n<p>교착상태 예방</p>\n<ul>\n<li>자원 할당을 하면서 데드락 발생조건 4가지 중 하나가 일어나지 않도록 하는 것이다.</li>\n<li>자원이 소모되고, 성능이 낮아지며, 기아 현상을 겪을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>교착상태 회피</p>\n<ul>\n<li>자원 요청의 부가적인 정보를 통해 데드락 가능성이 없는 경우에만 자원을 할당한다.</li>\n<li>보수적으로 자원을 할당하여 시스템에 비효율적이다.</li>\n</ul>\n</li>\n<li>\n<p>교착상태 탐지</p>\n<ul>\n<li>데드락 발생을 허용하고 탐지가 된다면 데드락을 회복시키는 방법이다.</li>\n<li>탐지하는데 오버헤드가 존재한다.</li>\n</ul>\n</li>\n<li>\n<p>교착상태 무시</p>\n<ul>\n<li>데드락을 시스템이 책임지지 않는다.</li>\n<li>자주 발생하는 상황이 아니므로 대부분은 os는 데드락 무시를 채택한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"교착상태-예방\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9\" aria-label=\"교착상태 예방 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착상태 예방</h3>\n<ul>\n<li>\n<p>상호 배제</p>\n<ul>\n<li>여러 프로세스가 자원을 공유할 수 있다면 데드락이 발생하지 않지만 공유할 수 없는 상황이므로 이 조건을 배제하기는 어렵다.</li>\n</ul>\n</li>\n<li>\n<p>점유하여 대기 Hold and Wait</p>\n<ul>\n<li>프로세스가 자원을 소유하면서 다른 자원을 요청할 수 없도록 한다. 애초에 필요한 모든 자원을 할당받거나 일부를 받지 못한 경우 보유 자원을 모두 반납하고 다시 자원을 요청하도록 한다.</li>\n</ul>\n</li>\n<li>\n<p>비선점 No Preemption</p>\n<ul>\n<li>만일 한 프로세스가 다른 자원을 기다리는 경우 보유된 자원은 선점되도록 한다.</li>\n<li>모든 자원을 다 얻을 수 있을 때 해당 프로세스가 시작된다.</li>\n<li>상태를 쉽게 저장하고 로딩할 수 있는 자원에서 주로 사용된다. (cpu, memory)</li>\n</ul>\n</li>\n<li>\n<p>순환대기 Circular Wait</p>\n<ul>\n<li>자원에 할당 순서를 정한다. 예를 들어 R1, R2 순서대로 자원을 할당 받도록 한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"교착상태-회피\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC\" aria-label=\"교착상태 회피 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착상태 회피</h3>\n<ul>\n<li>\n<p>안전 상태 Safe State</p>\n<ul>\n<li>프로세스가 시작될 때 사용할 자원의 최대 요구량을 알 수 있다.</li>\n<li>현재 가용 자원량을 판단하여 프로세스가 요구한 자원최대량 보다 많을 경우에만 프로세스에게 자원을 할당한다.</li>\n<li>시스템이 safe state에 있다면 데드락이 없고 unsafe state에 있다면 데드락 발생 가능성이 있는 것이다.</li>\n<li>따라서 시스템이 unsafe state에 들어가지 않도록 보장한다.</li>\n</ul>\n</li>\n<li>\n<p>자원 할당 그래프 알고리즘 Resource-Allocation Graph Algorithm</p>\n<ul>\n<li>자원 할당 그래프를 보고 사이클이 생기지 않는 경우에만 자원을 할당한다.</li>\n<li>사이클 생성 여부 조사시 O(n^2) 시간이 걸린다.</li>\n</ul>\n</li>\n<li>\n<p>은행원 알고리즘 Banker’s Algorithm</p>\n<ul>\n<li>Allocation -  현재 프로세스에 할당된 자원량</li>\n<li>Max - 프로세스가 요구할 수 있는 최대 자원량</li>\n<li>Available - 자원당 가용 자원량</li>\n<li>Need - 프로세스가 현재 추가로 요구할 수 있는 자원량 (Max - Allocation)</li>\n<li>\n<p>아래 그림에서 P1의 Need는 현재 가용 자원으로 할당될 수 있으나, P1의 최대 자원량보다 현재 갸용 자원량이 적으므로 보수적으로 자원을 할당하지 않는다.</p>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/63405904/139090079-ad692f17-888d-4acd-bc10-ef49b281df84.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"교착상태-탐지\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%83%90%EC%A7%80\" aria-label=\"교착상태 탐지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착상태 탐지</h3>\n<ul>\n<li>데드락이 발생했을 때 그것을 후속처리한다.</li>\n<li>\n<p>탐지하는 방법</p>\n<ul>\n<li>\n<p>만일 자원당 인스턴스가 하나인 경우 → 자원 할당 그래프의 사이클은 데드락이다.</p>\n<ul>\n<li>\n<p>wait-for graph 알고리즘 사용</p>\n<ul>\n<li>자원 할당 그래프와 비슷한 형태이지만 프로세스만 노드로 구성되어 있다.</li>\n<li>P0 → P1은 P0이 P1의 자원을 기다리는 경우이다.</li>\n<li>wait-for graph에 사이클이 존재하는지 주기적으로 조사한다. (O(n^2))</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>자원당 여러 인스턴스 인 경우 → 은행원 알고리즘과 유사한 방법을 활용한다.</p>\n<ul>\n<li>자원을 요청하고 있지 않은 프로세스들이 보유한 자원은 반환된 자원이라고 가정한다.</li>\n<li>은행원 알고리즘으로 safe state를 찾아간다. 하지만 safe state를 찾을 수 없다면 데드락이다.</li>\n<li>이때 회복을 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"교착상태-회복\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%EB%B3%B5\" aria-label=\"교착상태 회복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착상태 회복</h3>\n<p>데드락 회복 2가지 방법</p>\n<ul>\n<li>\n<p>Process Termination 프로세스 죽이기</p>\n<ul>\n<li>데드락이 걸린 프로세스를 모두 죽인다.</li>\n<li>데드락이 풀릴 때까지 프로세스를 하나씩 죽인다.</li>\n</ul>\n</li>\n<li>\n<p>Resource Preemption</p>\n<ul>\n<li>비용을 최소화 할 victim을 설정하여 해당 프로세스를 재시작한다.</li>\n<li>하지만 동일한 프로세스가 계속 victim으로 선정되면 기아현상이 발생할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"교착상태-무시\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C\" aria-label=\"교착상태 무시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착상태 무시</h3>\n<ul>\n<li>데드락은 잘 발생하지 않는다.</li>\n<li>만일 발생하면 시스템에 이상해지고 사용자가 알아서 프로세스를 죽이도록 한다.</li>\n<li>데드락을 예방하고 처리하는 것은 시스템 오버헤드가 존재한다.</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고링크]</strong></p>\n<ul>\n<li><a href=\"https://kpuls.tistory.com/61\">https://kpuls.tistory.com/61</a></li>\n<li><a href=\"https://chanhuiseok.github.io/posts/cs-2/\">https://chanhuiseok.github.io/posts/cs-2/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 INTRO</a></li>\n<li><a href=\"#-keywords\">🌩 KEYWORDS</a></li>\n<li>\n<p><a href=\"#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-deadlock\">🌩 교착상태 Deadlock</a></p>\n<ul>\n<li><a href=\"#%EB%B0%9C%EC%83%9D%EC%A1%B0%EA%B1%B4-4%EA%B0%80%EC%A7%80\">발생조건 4가지</a></li>\n<li><a href=\"#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84-resource-allocation-graph\">자원 할당 그래프 Resource Allocation Graph</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95\">🌩 교착상태 처리 방법</a></p>\n<ul>\n<li><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9\">교착상태 예방</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC\">교착상태 회피</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%83%90%EC%A7%80\">교착상태 탐지</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%ED%9A%8C%EB%B3%B5\">교착상태 회복</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C\">교착상태 무시</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 22, 2021","title":"내가 또 보기 위한 운영체제 Deadlock","categories":"운영체제","author":"코다","emoji":"🧁"},"fields":{"slug":"/os-deadlock/"}},"prev":{"id":"2f49dd5a-2fdd-5bc5-99dd-37f1109d261c","html":"<blockquote>\n<p>다음 <a href=\"%5Bhttps://www.baeldung.com/spring-boot-testing%5D(https://www.baeldung.com/spring-boot-testing)\">링크</a>를 읽고 정리한 내용입니다 🙌 <br> 이전에 작성했던 <a href=\"https://yjksw.github.io/spring-boot-test/\">글</a>이 있습니다. </p>\n</blockquote>\n<p>스프링부트에서 지원하는 여러 테스팅 기법들을 통해서 단위 테스트나 스프링 컨텍스트를 띄우는 통합 테스트를 진행할 수 있다.\n사전 준비로는 스프링부트 프로젝트에 <code class=\"language-text\">org.springframwork.boot.spring-boot-start-test</code> 의존성을 추가해야한다.</p>\n<br>\n<h2 id=\"-springboottest-통합테스트\" style=\"position:relative;\"><a href=\"#-springboottest-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" springboottest 통합테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @SpringBootTest 통합테스트</h2>\n<ul>\n<li>통합테스트는 어플리케이션의 여러 레이어의 통합 로직을 테스트 하는 것이다. 따라서 mocking을 하지 않는다.</li>\n<li>\n<p>원칙적으로는 통합테스트는 단위테스트와 분리되어 있어야하며 실행 또한 분리해서 실행해야 한다. 다른 profile 환경으로 나누고 통합테스트만을 분리하여 실행해야한다.</p>\n<ul>\n<li>이렇게 해야하는 이유 중 하나는 통합 테스트는 어플리케이션 컨텍스트를 띄우는 작업을 필요로 하기 때문에 상대적으로 긴 시간이 소요된다.</li>\n<li>또한 실제 데이터베이스의 실행을 필요로 하기도 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@SpringBootTest</code> 은 컨테이너 전체를 띄우는데 유용하다. 이 어노테이션은 테스트에 사용될 ApplicationContext를 생성하여 테스트를 진행한다.</p>\n<ul>\n<li><code class=\"language-text\">@SpringBootTest</code>의 <code class=\"language-text\">SpringBootTest.webEnvironment.MOCK</code> 을 통해 mock 서블릿 환경에서 컨테이너를 실행할 수 있다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">@TestPropertySource</code> 어노테이션을 통해 properties 파일을 지정할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"-testconfiguration-을-활용한-테스트-설정\" style=\"position:relative;\"><a href=\"#-testconfiguration-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\" testconfiguration 을 활용한 테스트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @TestConfiguration 을 활용한 테스트 설정</h2>\n<ul>\n<li><code class=\"language-text\">@SpringBootTest</code>는 어플리케이션 컨텍스트 전체를 띄우는 것이기 때문에 <code class=\"language-text\">@Autowired</code> 를 통해 자동주입하는 bean 은 모두 컴포넌트 스캔을 통한다는 것이다.</li>\n<li>하지만 테스트를진행하면서실제 어플리케이션 컨텍스트와 다른 테스트용 설정 빈들을 주입하고 싶을 수 있다. 이때 <code class=\"language-text\">@TestConfiguration</code> 어노테이션을 활용한다.</li>\n<li>\n<p>사용하는 방법은 2가지 이다.</p>\n<ol>\n<li>\n<p>static inner class</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@TestConfiguration</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token function\">employeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// implement methods</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeService</span> employeeService<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>separated test configuration class</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TestConfiguration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token function\">employeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token comment\">// implement methods </span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">@TestConfiguration</code>이 명시된 클래스는 component scanning에서 제외되어 있다. 따라서 해당 설정을 사용하고 싶은 테스트에 <code class=\"language-text\">@Import</code> 어노테이션을 통해 명시해주어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeService</span> employeeService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// remaining class code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"-mockbean-을-활용한-모킹\" style=\"position:relative;\"><a href=\"#-mockbean-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%AA%A8%ED%82%B9\" aria-label=\" mockbean 을 활용한 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @MockBean 을 활용한 모킹</h2>\n<ul>\n<li>특정 layer의 로직만 테스트하고 싶은 경우 해당 layer나 클래스가 의존하고 있는 다른 빈의 동작에 대해서는 크게 상관하고 싶지 않을때가 있다.</li>\n<li>\n<p>따라서 <code class=\"language-text\">@MockBean</code>을 활용하여 실제 의존 빈을 사용하는 것이 아니라 해당 빈이 지정된 값을 반환하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@TestConfiguration</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span> <span class=\"token punctuation\">{</span>\n \n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token function\">employeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeService</span> employeeService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@MockBean</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeRepository</span> employeeRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// write test cases here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>여기서 다음과 같이 <code class=\"language-text\">EmployeeRepository</code> 의 행동을 지정하고  테스트를 돌리면 EmployeeService 에서 repository 부분은 지정한 것과 같이 행동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Employee</span> alex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Mockito</span><span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span>employeeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenValidName_thenEmployeeShouldBeFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"alex\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Employee</span> found <span class=\"token operator\">=</span> employeeService<span class=\"token punctuation\">.</span><span class=\"token function\">getEmployeeByName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n     <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"-datajpatest-를-활용한-통합테스트\" style=\"position:relative;\"><a href=\"#-datajpatest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" datajpatest 를 활용한 통합테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @DataJpaTest 를 활용한 통합테스트</h2>\n<ul>\n<li>\n<p>Persistence layer를 테스트하고 JPA를 사용하고 있다면 <code class=\"language-text\">@DataJpaTest</code> 어노테이션이 해당 레이어를 테스트하는 여러 세팅을 해준다.</p>\n<ul>\n<li>H2 설정</li>\n<li>Hibernate, Spring Data, Datasource 설정</li>\n<li><code class=\"language-text\">@EntityScan</code> 실행</li>\n<li>SQL 로깅 실행</li>\n</ul>\n</li>\n<li>테스트 이전에 데이터베이스에 테스트 데이터를 미리 넣을 수 있도록 <code class=\"language-text\">TestEntityManager</code>를 활용한다.</li>\n</ul>\n<br>\n<h2 id=\"-webmvctest-를-활용한-단위-테스트\" style=\"position:relative;\"><a href=\"#-webmvctest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" webmvctest 를 활용한 단위 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @WebMvcTest 를 활용한 단위 테스트</h2>\n<ul>\n<li>주로 Controller는 Serivce에 의존한다.</li>\n<li>Controller에 대한 단위테스트를 진행하기 위해서는 service layer 코드를 모킹해야 한다.</li>\n<li>이때 <code class=\"language-text\">@WebMvcTest</code> 어노테이션을 활용할 수 있다. 이 어노테이션은 Spring MVC 인프라를 자동으로 설정해준다.</li>\n<li>주로 <code class=\"language-text\">@WebMvcTest</code> 하나의 컨트롤러에 국한되며 <code class=\"language-text\">@MockBean</code> 어노테이션을 활용해 의존 객체를 모킹할 수 있다.</li>\n<li>\n<p><code class=\"language-text\">@WebMvcTest</code> 는 또한 <code class=\"language-text\">MockMvc</code> 에 대한 자동설정을 해 전체 HTTP 서버를 구동하지 않고 MVC 컨트롤러를 테스트할 수 있도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">givenEmployees_whenGetEmployees_thenReturnJsonArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token class-name\">Employee</span> alex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> allEmployees <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">getAllEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span>allEmployees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/employees\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$[0].name\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"-각종-자동화-테스트\" style=\"position:relative;\"><a href=\"#-%EA%B0%81%EC%A2%85-%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 각종 자동화 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 각종 자동화 테스트</h2>\n<p>스프링부트에서는 전체 어플리케이션의 일부분을 로딩하고 특정 레이어만 테스트할 수 있는 자동화 어노테이션을 많이 제공한다. 설명한 몇가지를 소개해보려보 한다. </p>\n<ul>\n<li>@JdbcTest : JPA 어플리케이션을 테스트하는데 사용될 수 있다. 하지만 이 어노테이션이 사용되는 테스트는 DataSource를 필요로하는 테스트 이다.</li>\n<li>@DataRedisTest : Redis 어플리케이션을 테스트할 수 있는 어노테이션이다. @RedisHash 클래스를 스캔하고 Spring Data Redis 레포지토리를 default 설정한다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-느낀점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\" 느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀점</h2>\n<ul>\n<li>스프링부트 테스트는 <a href=\"https://yjksw.github.io/spring-boot-test/\">이전 글</a>에서도 한번 다루었던 이야기 이다. 다시 한번 쓰게 된 이유는 <a href=\"https://github.com/yjksw/jwp-refactoring\">레거시 리팩토링 미션</a>을 진행하면서 코드를 보호하는 테스트의 정도에 대한 고민이 되었기 때문이다. </li>\n<li>테스트를 작성할수록 어느정도의 테스트까지 작성하는 것이 좋은지는 정답이 없는 것 같다. 다만 테스트 코드 내에서 모순이 있어 항상 성공하는 테스트를 만들지 않기 위해서 주의해야한다. 또한 실패하는 케이스에 대한 작성도 꼼꼼히 해야 한다. </li>\n<li>테스트코드는 다다익선일까 ?</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-springboottest-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 @SpringBootTest 통합테스트</a></li>\n<li><a href=\"#-testconfiguration-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95\">🌩 @TestConfiguration 을 활용한 테스트 설정</a></li>\n<li><a href=\"#-mockbean-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%AA%A8%ED%82%B9\">🌩 @MockBean 을 활용한 모킹</a></li>\n<li><a href=\"#-datajpatest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 @DataJpaTest 를 활용한 통합테스트</a></li>\n<li><a href=\"#-webmvctest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 @WebMvcTest 를 활용한 단위 테스트</a></li>\n<li><a href=\"#-%EA%B0%81%EC%A2%85-%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 각종 자동화 테스트</a></li>\n<li><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\">🛋 느낀점</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 23, 2021","title":"Springboot 테스트 다시 한번 알아보기_중요한 건 여러 번 😊","categories":"스프링부트 테스트","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-boot-test-2/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/tcp-congestion-control/","nextSlug":"/os-deadlock/","prevSlug":"/spring-boot-test-2/"}},"staticQueryHashes":["1073350324","2938748437"]}