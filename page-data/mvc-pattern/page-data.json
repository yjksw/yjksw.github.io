{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/mvc-pattern/",
    "result": {"data":{"cur":{"id":"38332c86-9e30-5529-a076-df8e79f95c5b","html":"<p>처음 MVC 패턴을 공부하게 되면서 잘 이해하지 못한 상태로 1단계 코드를 제출한 것 같다. <code class=\"language-text\">객체가 핵심적인 비지니스 로직을 담당해야 한다</code> 라는 부분을 간과하고 모든 도메인 모델에 대한 로직을 모두 Controller로 넘겼다. 하지만 MVC는 그렇게 분리되는 것이 아니었다. <br></p>\n<p>이 부분에 대해 리뷰어에게 질문을 했더니 좋은 소스와 함께 정성스럽게 답해주셨다. <br></p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/134760085-c1dd5e76-65e9-4ecf-9e53-55020b69bcc8.png\"></p>\n<p>즉, <code class=\"language-text\">Controller는 도메인 모델과 View를 연결한다</code> 인데 Controller는 View로 부터 받은 입력을 기반으로 Model에 적절한 메세지를 보낸다. 그리고, Model은 해당 메시지에 따른 로직을 수행하고, 그에 따른 결과를 다시 Controller에 전달한다. 이렇게 왔다갔다 상호작용 하는 중간다리 역할이 Controller이다. <del>모든 서비스 로직을 Controller에다가만 구현하는 것이 아니다.</del> <br></p>\n<p>우테코에서 제공한 MVC 패턴에 대한 설명에도 핵심적인 설명이 있다. <code class=\"language-text\">핵심 비지니스 로직을 가지는 객체를 domain 패키지로</code> 리뷰어도 이것만 챙겨도 절반 이상이 MVC 패턴에 맞추어 진다고 한다. <br></p>\n<p>공부하기에 좋은 자료로 추천한 <a href=\"%5Bhttps://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%5D(https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC)\">위키피디아</a>와, <a href=\"%5Bhttps://bsnippet.tistory.com/13%5D(https://bsnippet.tistory.com/13)\">모델-뷰-컨트롤러</a> 도 한번 살펴보자. <br></p>\n<h3 id=\"mvc-패턴이란-무엇인가\" style=\"position:relative;\"><a href=\"#mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"mvc 패턴이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 패턴이란 무엇인가?</h3>\n<p>위키피디아에 나온 정의에 따르면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">MVC에서 모델은 어플리케이션의 정보<span class=\"token punctuation\">(</span>데이터<span class=\"token punctuation\">)</span>를 나타내며<span class=\"token punctuation\">,</span> \n뷰는 텍스트<span class=\"token punctuation\">,</span> 체크박스 항목 등과 같은 상요자 인터페이스 요소를 나타내고<span class=\"token punctuation\">,</span> \n컨트롤러는 데이터와 비즈니스 로직 사이의 상호동작을 관리한다<span class=\"token punctuation\">.</span> </code></pre></div>\n<p>이때 나오는 질문이 <code class=\"language-text\">각각의 역할이 뭐지?</code> <code class=\"language-text\">컨트롤러의 역할은 어디까지인가?</code> 이다. 하나씩 간단히 살펴보자</p>\n<h3 id=\"모델model\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8D%B8model\" aria-label=\"모델model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모델(Model)</h3>\n<p>데이터를 가진 객체이다. 내부 상태에 대한 정보이거나, 모델을 표현하는 이름 속성을 가질 수 있다. <br>\n모델이 가지고 있는 규칙은 다음과 같다.</p>\n<ol>\n<li>사용자가 편집하기를 원하는 모든 데이터를 가지고 있다.</li>\n<li>View나 Controller에 대한 어떤 정보도 알지 말아야 한다.</li>\n<li>변경이 일어나면 변경에 대한 통지를 해야한다.</li>\n</ol>\n<p>모델은 무엇을 할 것인지 정의한다. 내부 비지니스 로직을 처리하기 위한 역할을 담당한다.</p>\n<ul>\n<li>처리도는 알고리즘, DB와 상호작용, 데이터 등등</li>\n</ul>\n<h3 id=\"뷰view\" style=\"position:relative;\"><a href=\"#%EB%B7%B0view\" aria-label=\"뷰view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰(View)</h3>\n<p>화면에 표시되는 글자, 체크박스, 윈도우와 같은 UI 시작적 요소들이다. <br>\n뷰가 가지고 있는 규칙은 다음과 같다.</p>\n<ol>\n<li>모델이 가지고 있는 정보를 따로 저장하지 않는다.</li>\n<li>모델이나 컨트롤러와 같은 다른 구성 요소를 몰라야 한다.\n<ul>\n<li>자기 자신을 빼고는 참조하거나 동작하는지 알아서는 안된다.</li>\n<li>뷰는 데이터를 받으면 화면에 표시해주는 역할만 가진다고 본다.</li>\n</ul>\n</li>\n<li>변경이 일어났을 때, 변경 통지에 대한 처리 방법이 있어야 한다.\n<ul>\n<li>모델과 유사하다.</li>\n<li>사용자가 화면에 표시된 내용을 변경하게 되면, 이것을 모델에 전달하여 모델을 변경해야 한다.</li>\n</ul>\n</li>\n</ol>\n<p>즉, 모델이나 뷰에서 변경이 일어나면, 컨트롤러에 이것을 알리고, 컨트롤러가 처리 방법을 결정해 다른 구성 요소들에게 또 알리는 방식으로 중재자 역할을 하도록 한다.\n뷰는 무엇을 보여주기 위한 역할을 하는 것이다. 컨트롤러의 하위에 종속되어서 모델이나 컨트롤러가 보여주려고 하는 필요한 것들을 보여줄 것이다. <br></p>\n<h3 id=\"컨트롤러controller\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%ACcontroller\" aria-label=\"컨트롤러controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨트롤러(Controller)</h3>\n<p>모델과 뷰를 연결해주는 역할을 한다.\n<br></p>\n<ol>\n<li>모델이나 뷰에 대해서 알고 있다.</li>\n<li>모델이나 뷰의 변경을 모니터링 한다.</li>\n</ol>\n<p>컨트롤러는 모델이 어떻게 처리할지 알려주는 역할을 할 것이다. 즉, 화면의 로직처리 부분이라고 할 수 있다. 화면에서 사용자의 요청을 받아서 처리되는 부분을 구현하고, 요청 내용을 분석해서 모델과 뷰에 업데이트 요청을 하게 된다. <br></p>\n<p>컨트롤러는 모델과 뷰가 각각 무엇을 해야 할 지를 알아서 통제한다. 때문에 비지니스 로직을 처리하는 모델과 뷰는 서로 직접 이야기할 수 없다. <br></p>\n<h3 id=\"mvc에서-발생할-수-있는-문제점\" style=\"position:relative;\"><a href=\"#mvc%EC%97%90%EC%84%9C-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"mvc에서 발생할 수 있는 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC에서 발생할 수 있는 문제점</h3>\n<p>우선 지금 당장 MVC 패턴으로 구현을 할 때는 지나치게 복잡한 정도로 구현을 하지는 않지만 훨씬 복잡한 어플리케이션이 작성이 된다면 다수의 뷰와 다수의 모델이 컨트롤러에 연결되어 있는 상황이 생길 수 있다. 그러면서 소스 코드 테스트나 분석이 어려워지는 <code class=\"language-text\">Massive ViewController</code> 탄생하게 되면서 문제가 발생한다. <br></p>\n<p>이러한 문제를 해결하기 위한 다른 다수의 패턴이 있다는 것을 기억하자. <br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">MVC 패턴이란 무엇인가?</a></li>\n<li><a href=\"#%EB%AA%A8%EB%8D%B8model\">모델(Model)</a></li>\n<li><a href=\"#%EB%B7%B0view\">뷰(View)</a></li>\n<li><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%ACcontroller\">컨트롤러(Controller)</a></li>\n<li><a href=\"#mvc%EC%97%90%EC%84%9C-%EB%B0%9C%EC%83%9D%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90\">MVC에서 발생할 수 있는 문제점</a></li>\n</ul>\n</div>","excerpt":"처음 MVC 패턴을 공부하게 되면서 잘 이해하지 못한 상태로 1단계 코드를 제출한 것 같다.  라는 부분을 간과하고 모든 도메인 모델에 대한 로직을 모두 Controller로 넘겼다. 하지만 MVC는 그렇게 분리되는 것이 아니었다.  이 부분에 대해 리뷰어에게 질문을 했더니 좋은 소스와 함께 정성스럽게 답해주셨다.  즉,  인데 Controller는 View로 부터 받은 입력을 기반으로 Model에 적절한 메세지를 보낸다. 그리고, Model은 해당 메시지에 따른 로직을 수행하고, 그에 따른 결과를 다시 Controller에 전달한다. 이렇게 왔다갔다 상호작용 하는 중간다리 역할이 Controller이다. 모든 서비스 로직을 Controller에다가만 구현하는 것이 아니다.  우테코에서 제공한 MVC 패턴에 대한 설명에도 핵심적인 설명이 있다.  리뷰어도 이것만 챙겨도 절반 이상이 MVC 패턴에 맞추어 진다고 한다.  공부하기에 좋은 자료로 추천한 위키피디아와, 모델-뷰-컨트롤러 …","frontmatter":{"date":"February 24, 2021","title":"MVC 패턴 첫 적용기","categories":"설계","author":"코다","emoji":"🛠"},"fields":{"slug":"/mvc-pattern/"}},"next":{"id":"da36c6a9-a62a-53e5-a254-0a74475b5d42","html":"<p>Github에 익숙하지 않기 때문에 커밋은 나에게 push를 해서 업로드를 하기 위한 중간과정 중 하나였다. 하지만 다른 곳에서 깃헙이나 프로젝트 진행을 하면서 커밋을 하는 단위의 중요성과 깃헙의 최대 장점인 프로젝트를 되돌리기 위한 커밋 메세지의 중요성에 대해서 여러번 들었었다. 이번에 프리코스를 시작하면서 커밋 메세지에 대한 가이드를 읽고 정리해보기로 했다. <br></p>\n<p><a href=\"%5Bhttps://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits%5D(https://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits)\">참고 사이트</a></p>\n<br>\n<h2 id=\"changelogmd-생성하기\" style=\"position:relative;\"><a href=\"#changelogmd-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"changelogmd 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CHANGELOG.md 생성하기</h2>\n<ul>\n<li>changelog에는 3개의 section이 있다: new features, bug fixes, breaking changes.</li>\n<li>이러한 정보들은 배포가 될 때 script로 생성이 되어야 하며 해당하는 commit과 함께 제공되어야 한다.</li>\n<li>해당 로그들을 보는 방법들은 다음과 같다.\n<ol>\n<li>\n<p>지난 release 이후에 발생한 모든 subject(커밋 메세지의 첫번째 라인) 조회:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">git log <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>lasg tag<span class=\"token punctuation\">></span></span> HEAD <span class=\"token operator\">--</span>pretty<span class=\"token operator\">=</span>format<span class=\"token operator\">:</span>$s</code></pre></div>\n</li>\n<li>\n<p>이번 release의 새로운 feature:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">git log <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>last release<span class=\"token punctuation\">></span></span> HEAD <span class=\"token operator\">--</span>grep feature</code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"recognizing-unimportant-commits\" style=\"position:relative;\"><a href=\"#recognizing-unimportant-commits\" aria-label=\"recognizing unimportant commits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recognizing unimportant commits</h3>\n<ul>\n<li>\n<p>사소한 버그 수정 등과 같이 중요하지 않은 커밋들을 걸러낼 수 있다. 코드의 logic이 수정된 부분들이 아닌 경우에는 다음과 같은 명령어로 무시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">git bisect skip $<span class=\"token punctuation\">(</span>git rev<span class=\"token operator\">-</span>list <span class=\"token operator\">--</span>grep irrelevant <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>good place<span class=\"token punctuation\">></span></span> HEAD<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"history-브라우징-시-정보-제공을-위한-커밋\" style=\"position:relative;\"><a href=\"#history-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95-%EC%8B%9C-%EC%A0%95%EB%B3%B4-%EC%A0%9C%EA%B3%B5%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%BB%A4%EB%B0%8B\" aria-label=\"history 브라우징 시 정보 제공을 위한 커밋 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>History 브라우징 시 정보 제공을 위한 커밋</h3>\n<ul>\n<li>커밋 메세지를 작성할 때 가능한 많은 정보들을 제공하는 것이 좋다.</li>\n<li>그렇기에 메세지로 무슨 변경이나 추가가 있었는지 확인 할 수 있는데, 해당 메세지가 일정한 convention을 지닐 필요가 있다.</li>\n</ul>\n<br>\n<h2 id=\"commit-message-형식\" style=\"position:relative;\"><a href=\"#commit-message-%ED%98%95%EC%8B%9D\" aria-label=\"commit message 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commit Message 형식</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>type<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>subject<span class=\"token punctuation\">></span></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>BLANK LINE<span class=\"token punctuation\">></span></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>body<span class=\"token punctuation\">></span></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>BLANK LINE<span class=\"token punctuation\">></span></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>footer<span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>커밋 메세지는 100자를 넘지 않는다. 이래야지 깃헙이나 깃 툴을 사용할 때 메세지 읽기가 쉽다.</li>\n</ul>\n<h3 id=\"subject-line\" style=\"position:relative;\"><a href=\"#subject-line\" aria-label=\"subject line permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subject line</h3>\n<p>어떤 변경이 일어났는지에 대한 간단명료한 설명을 담고 있다. (커밋 메세지의 첫 줄)</p>\n<ol>\n<li>Allowed <code class=\"language-text\">&lt;type></code>\n<ul>\n<li>feat (feature)</li>\n<li>fix (bug fix)</li>\n<li>docs (documentation)</li>\n<li>style (formatting, missing semi colons, …)</li>\n<li>refactor</li>\n<li>test (when adding missing tests)</li>\n<li>chore (maintain)</li>\n</ul>\n</li>\n<li>Allowed <code class=\"language-text\">&lt;scope></code>\n<ul>\n<li>적용 범위를 나타내는 것으로 커밋에 대한 부가적인 정보이다. (선택 사항)</li>\n<li>적용 범위에 대한 예시는 이러하다: $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, 등등</li>\n</ul>\n</li>\n<li><code class=\"language-text\">&lt;subject></code>\n<ul>\n<li>현재형으로 작성한다: “change” → x “changed” or “changes”</li>\n<li>첫 문자를 대문자로 작성하지 않는다.</li>\n<li>(.)을 작성하지 않는다.</li>\n</ul>\n</li>\n<li>해당 커밋에 major 한 변화가 있다면 큰 변화가 있기 때문에 호환이 안되는 부분들이 있을 수 있다. 해당 부분들을 footer에 반드시 작성하게 되는데, 해당 메세지를 확인하지 못할 수도 있기 때문에 다음과 같이 <code class=\"language-text\">BREAKING CHANGE: 설명</code> 있음을 표시한다.\n<ul>\n<li><code class=\"language-text\">예: fead(pipeling)!: Add pipeline function</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"message-body\" style=\"position:relative;\"><a href=\"#message-body\" aria-label=\"message body permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Message body</h3>\n<ul>\n<li>커밋 메세지와 같이 현재형 동사로 작성한다.</li>\n<li>수정의 동기화, 수정 이전과의 비교를 명시한다.</li>\n<li>본문에 여러개가 있을 경우에는 (-)로 구분한다.</li>\n</ul>\n<h3 id=\"message-footer\" style=\"position:relative;\"><a href=\"#message-footer\" aria-label=\"message footer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Message footer</h3>\n<ul>\n<li>\n<p>커밋이 어떤 이슈에서 왔는지 촘조 정보들을 추가하는 용도로 사용.</p>\n</li>\n<li>\n<p>특정 이슈와의 연관을 표현하기 위해 <code class=\"language-text\">close #123 #245</code> 같이 커밋 메세지를 추가한다.</p>\n</li>\n<li>\n<p>Breaking changes에 대해서 footer에 작성한다</p>\n<p>어떤 것이 수정되었는지, 수정이 된 정의, migration note 등이 추가되도록한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">BREAKING CHANGE<span class=\"token operator\">:</span> isolate scope bindings definition has changed and\n    the inject option <span class=\"token keyword\">for</span> the directive controller injection was <span class=\"token class-name\"><span class=\"token namespace\">removed<span class=\"token punctuation\">.</span></span>\n    \n    To</span> migrate the code follow the example below<span class=\"token operator\">:</span>\n    \n    <span class=\"token class-name\">Before</span><span class=\"token operator\">:</span>\n    \n    scope<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      myAttr<span class=\"token operator\">:</span> <span class=\"token string\">'attribute'</span><span class=\"token punctuation\">,</span>\n      myBind<span class=\"token operator\">:</span> <span class=\"token string\">'bind'</span><span class=\"token punctuation\">,</span>\n      myExpression<span class=\"token operator\">:</span> <span class=\"token string\">'expression'</span><span class=\"token punctuation\">,</span>\n      myEval<span class=\"token operator\">:</span> <span class=\"token string\">'evaluate'</span><span class=\"token punctuation\">,</span>\n      myAccessor<span class=\"token operator\">:</span> <span class=\"token string\">'accessor'</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">After</span><span class=\"token operator\">:</span>\n    \n    scope<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      myAttr<span class=\"token operator\">:</span> <span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span>\n      myBind<span class=\"token operator\">:</span> <span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span>\n      myExpression<span class=\"token operator\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// myEval - usually not useful, but in cases where the expression is assignable, you can use '='</span>\n      myAccessor<span class=\"token operator\">:</span> <span class=\"token string\">'='</span> <span class=\"token comment\">// in directive's template change myAccessor() to myAccessor</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">The</span> removed `inject` wasn't generaly useful <span class=\"token keyword\">for</span> directives so there should be no code using it<span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">feat</span><span class=\"token punctuation\">(</span>$browser<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> onUrlChange event <span class=\"token punctuation\">(</span>popstate<span class=\"token operator\">/</span>hashchange<span class=\"token operator\">/</span>polling<span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">Added</span> <span class=\"token keyword\">new</span> event <span class=\"token keyword\">to</span> $browser<span class=\"token operator\">:</span>\n<span class=\"token operator\">-</span> forward popstate event <span class=\"token keyword\">if</span> available\n<span class=\"token operator\">-</span> forward hashchange event <span class=\"token keyword\">if</span> popstate not available\n<span class=\"token operator\">-</span> <span class=\"token keyword\">do</span> polling when neither popstate nor hashchange available\n\n<span class=\"token class-name\">Breaks</span> $browser<span class=\"token punctuation\">.</span>onHashChange<span class=\"token punctuation\">,</span> which was removed <span class=\"token punctuation\">(</span>use onUrlChange instead<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>$compile<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> couple of unit tests <span class=\"token keyword\">for</span> IE9\n\n<span class=\"token class-name\">Older</span> <span class=\"token class-name\">IEs</span> serialize html uppercased<span class=\"token punctuation\">,</span> but IE9 does not<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Would</span> be better <span class=\"token keyword\">to</span> <span class=\"token namespace\">expect</span> <span class=\"token keyword\">case</span> insensitive<span class=\"token punctuation\">,</span> unfortunately jasmine does\nnot allow <span class=\"token keyword\">to</span> <span class=\"token namespace\">user</span> regexps <span class=\"token keyword\">for</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\"><span class=\"token namespace\">expectations<span class=\"token punctuation\">.</span></span>\n\nCloses</span> #<span class=\"token number\">392</span>\n<span class=\"token class-name\">Breaks</span> foo<span class=\"token punctuation\">.</span>bar api<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">.</span>baz should be used instead</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">docs</span><span class=\"token punctuation\">(</span>guide<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> updated fixed docs from <span class=\"token class-name\">Google</span> <span class=\"token class-name\">Docs</span>\n\n<span class=\"token class-name\">Couple</span> of typos fixed<span class=\"token operator\">:</span>\n<span class=\"token operator\">-</span> indentation\n<span class=\"token operator\">-</span> batchLogbatchLog <span class=\"token operator\">-></span> batchLog\n<span class=\"token operator\">-</span> start periodic checking\n<span class=\"token operator\">-</span> missing brace</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#changelogmd-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">CHANGELOG.md 생성하기</a></p>\n<ul>\n<li><a href=\"#recognizing-unimportant-commits\">Recognizing unimportant commits</a></li>\n<li><a href=\"#history-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95-%EC%8B%9C-%EC%A0%95%EB%B3%B4-%EC%A0%9C%EA%B3%B5%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%BB%A4%EB%B0%8B\">History 브라우징 시 정보 제공을 위한 커밋</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#commit-message-%ED%98%95%EC%8B%9D\">Commit Message 형식</a></p>\n<ul>\n<li><a href=\"#subject-line\">Subject line</a></li>\n<li><a href=\"#message-body\">Message body</a></li>\n<li><a href=\"#message-footer\">Message footer</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 29, 2020","title":"[GitHub] Commit Message Convetion","categories":"기타","author":"코다","emoji":"👀"},"fields":{"slug":"/commit-message-convetion/"}},"prev":{"id":"cb8b1699-6eb2-57ae-b2f6-9f902372f5bb","html":"<p>총 4가지 테스트에 대해서 간단히 다룰 것이다. 지금 우테코 LEVEL1에서 진행하고 있는 미션에서는 단위 테스트를 연습하는 TDD를 하고 있다. <del>내가 TDD를 할 줄이야..</del></p>\n<h3 id=\"유닛-테스트unit-test\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8unit-test\" aria-label=\"유닛 테스트unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유닛 테스트(Unit Test)</h3>\n<p>가장 작은 단위의 테스트로 메서드 레벨로 테스트를 한다. (현재 내가 진행중인 TDD 방식) <br></p>\n<p>즉각적인 결과가 나와서, 해당 메소드에 대한 원하는 결과가 연산이 되는지에 대한 확인이 가능한 테스트이다. <br></p>\n<p>테스트 하기 어려운 메소드들이 등장하곤 하는데 이때는 stub (더미 객체가 마치 실제로 동작하는 것처럼 보이도록 만든 객체) 을 사용하여서 테스트 하는데 비용을 따져서 판단하도록 한다. (비용 관점을 항상 고려해야한다!) <br></p>\n<p>하나의 메소드가 원하는 방식으로 동작한다는 것을 확인할 수 있지만, 결합되었을 때, 잘 동작하는지에 대한 보장은 어렵다. <br></p>\n<h3 id=\"전-구간-테스트end-to-end-test\" style=\"position:relative;\"><a href=\"#%EC%A0%84-%EA%B5%AC%EA%B0%84-%ED%85%8C%EC%8A%A4%ED%8A%B8end-to-end-test\" aria-label=\"전 구간 테스트end to end test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전 구간 테스트(End-To-End Test)</h3>\n<p>시스템 자체와 시스템을 구축하고 배포하는 프로세스를 모두 시험한다. <br></p>\n<p>내부 기능들(클래스 및 메소드)를 테스트 할 필요는 없다. 단위 테스트의 영역으로 구분한다. <br></p>\n<p>테스트 만들기가 쉽지 않고 신뢰하기도 어렵다ㅜㅜ <br></p>\n<h3 id=\"통합-테스트integration-test\" style=\"position:relative;\"><a href=\"#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8integration-test\" aria-label=\"통합 테스트integration test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>통합 테스트(Integration Test)</h3>\n<p>여러개를 통합하여 테스트 할 때 사용하는 테스트 기법이다. <br></p>\n<p>변경할 수 없는 (외부 라이브러리 등) 부분 까지 묶어서 같이 테스트 할 때 주로 사용된다. <br></p>\n<h3 id=\"인수-테스트acceptance-test\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8acceptance-test\" aria-label=\"인수 테스트acceptance test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인수 테스트(Acceptance Test)</h3>\n<p>인수 테스트의 초점은 기술 보다는 비즈니스 쪽이라고 할 수 있다. <br></p>\n<p>구현하고자 하는 기능에 대한 테스트인데, 주로 전 구간 테스트를 사용하여 기능을 테스트하곤 한다. <br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8unit-test\">유닛 테스트(Unit Test)</a></li>\n<li><a href=\"#%EC%A0%84-%EA%B5%AC%EA%B0%84-%ED%85%8C%EC%8A%A4%ED%8A%B8end-to-end-test\">전 구간 테스트(End-To-End Test)</a></li>\n<li><a href=\"#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8integration-test\">통합 테스트(Integration Test)</a></li>\n<li><a href=\"#%EC%9D%B8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8acceptance-test\">인수 테스트(Acceptance Test)</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 25, 2021","title":"TDD 맛보기 - 테스트 종류","categories":"테스트","author":"코다","emoji":"⏳"},"fields":{"slug":"/tdd-tests/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/mvc-pattern/","nextSlug":"/commit-message-convetion/","prevSlug":"/tdd-tests/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}