{"componentChunkName":"component---src-templates-blog-template-js","path":"/project-pickgit-homefeed-performance-test-1/","result":{"data":{"cur":{"id":"5c1b47d1-8778-57cd-9be5-9beb636f6354","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>진행 중인 <a href=\"https://github.com/woowacourse-teams/2021-pick-git\">프로젝트</a>에서 구현한 웹 어플리케이션이 어느 정도의 부하를 견딜 수 있는지에 대한 성능테스트를 진행했다. </li>\n<li>프로젝트는 개발자를 타켓으로 한 깃헙 레포지토리를 연동한 게시물을 업로드하여 개발자들이 자신의 작업을 공유하고 다른 이들의 프로젝트를 캐줄얼하게 엿볼 수 있는 SNS형 웹 어플리케이션이다. </li>\n<li>웹 어플리케이션에 들어가자마자 최신순으로 정렬된 게시물 피드를 볼 수 있다. (비로그인/로그인 모두 가능)</li>\n<li>홈피드 게시물 조회 성능테스트를 진행, 병목 지점을 분석하고 개선하는 과정을 따라가보자. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"-사전-작업\" style=\"position:relative;\"><a href=\"#-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85\" aria-label=\" 사전 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 사전 작업</h2>\n<h3 id=\"테스트-더미-데이터-입력\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%AF%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EB%A0%A5\" aria-label=\"테스트 더미 데이터 입력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 더미 데이터 입력</h3>\n<ul>\n<li>테스트를 진행하기 위해서는 실제 운영환경과 최대한 유사한 환경에서 테스트하는 것이 중요하다. </li>\n<li>운영환경과 유사한 환경이라고 하면 크게 1) 인프라 구조 2) 데이터 두 가지가 있다. </li>\n<li>먼저 대량의 더미 데이터를 입력하도록 한다. (팀원 케빈이 수고해주었다 !! 👍)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> * 테스트 데이터 : 게시물 100만 / 유저 20만\n *                 태그 10만 (1개당 게시물 10개)\n *                 댓글 100만 (게시물당 1개)\n *\n * 테스트 용이성을 위해 유저 1명 이름은 tester로 명명해 저장\n * 테스트 용이성을 위해 태그 3개 이름은 java, javascript, spring로 명명해 저장</code></pre></div>\n<h3 id=\"mariadb-쿼리-캐시-끄기\" style=\"position:relative;\"><a href=\"#mariadb-%EC%BF%BC%EB%A6%AC-%EC%BA%90%EC%8B%9C-%EB%81%84%EA%B8%B0\" aria-label=\"mariadb 쿼리 캐시 끄기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MariaDB 쿼리 캐시 끄기</h3>\n<ul>\n<li>\n<p>왜 쿼리 캐시를 껐을까?</p>\n<ul>\n<li>실제 어플리케이션에서는 query cache 설정이 켜져있음에도 불구하고 cache 설정을 끈 이유는 실제 환경에서는 많은 유저들이 여러 태그를 검색하여 매번 다양한 쿼리가 실행되지만 테스트 환경에서는 3개의 태그를 랜덤으로 실행하기 때문에 캐시 적중률이 실제 환경보다 높다. 따라서 db 쿼리캐시를 꺼서 최대한 실제 환경과 맞춰주도록 한다. </li>\n<li>참고로 MySQL 8.0 부터는 쿼리 캐시 기능이 꺼져있다고 한다. </li>\n<li>또한 여전히 os 측에서 하는 memory 캐시 영향이 있지만 제어하기 어려운 부분이므로 우선 넘어가도록 한다. </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>쿼리 캐시 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438052-8604eb7d-a892-4a2b-9ca2-064ef832743b.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438572-2c20b02c-9cfb-4556-a9b8-ae362209423b.png\"></p>\n<ul>\n<li>MariaDB config 파일에서 cache size를 0으로 설정한다. </li>\n<li>이후 <code class=\"language-text\">sudo service mysqld restart</code> 로 DB를 재구동시킨다. </li>\n</ul>\n<blockquote>\n<p>변경 후 적용 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438718-ba0973ee-3037-4729-b1cb-ef2d2fe43354.png\"></p>\n<h3 id=\"mariadb-slow-query-로그-설정하기\" style=\"position:relative;\"><a href=\"#mariadb-slow-query-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"mariadb slow query 로그 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MariaDB slow query 로그 설정하기</h3>\n<ul>\n<li>오래 걸리는 쿼리에 대한 로그를 남겨 특정 쿼리로 인한 병목이 있는지 확인할 수 있도록 설정한다. </li>\n<li>단위는 1초 이상 걸리는 쿼리에 대한 로그를 남기는 것으로 했다. </li>\n</ul>\n<blockquote>\n<p>Slow query 적용 중인지 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438832-c3b085d0-8143-4974-8045-829455f6fbe7.png\"></p>\n<ul>\n<li>\n<p>Slow 쿼리 설정 적용 하기</p>\n<ul>\n<li>slow<em>query</em>log = 1 부터 long<em>query</em>time 까지 적용</li>\n<li>\n<p>적용 후 <code class=\"language-text\">sudo service mysqld restart</code> 로 재시작</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137438852-19161fd9-ac7b-4948-bdb3-0df7991bbf6f.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Slow query 설정 후 확인</p>\n</blockquote>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439074-ff7ed9e9-0ff8-454b-b471-1634454ca3bf.png\"></p>\n<ul>\n<li>\n<p>제대로 적용되었는지 확인하기 위해서 5초 이상 걸리는 쿼리를 실행하고 로그파일 경로의 <code class=\"language-text\">mariadb-slow.log</code>에 대항 쿼리에 대한 로그가 남았는지 확인해보자. </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439218-aa74256f-24e3-40c8-9351-03f83fda8a6b.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439229-266c8c68-1626-43b6-a481-c99b245c6b20.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137439238-f496e3bf-41fc-4c2a-afdc-5008d843c634.png\"></p>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-테스트-진행하기\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\" 테스트 진행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 테스트 진행하기</h2>\n<h3 id=\"테스트-환경\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"테스트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경</h3>\n<p>테스트를 위해 구축한 테스트 환경은 다음과 같다. </p>\n<ul>\n<li>WAS 2대가 각각 AWS EC2 Medium 사양으로 실행중이다. </li>\n<li>AWS EC2 Medium 사양으로 Reverse Proxy가 있으며 Load balancer 역할을 하면 ssl 적용이 되어 있다. </li>\n<li>\n<p>데이터 베이스는 AWS EC2 Medium에 MariaDB로 3대가 연결되어 있다. </p>\n<ul>\n<li>Master DB 1개, Slave DB 2대로 replication이 적용되어 있다. </li>\n</ul>\n</li>\n</ul>\n<p>테스트 툴은 K6로 진행한다. </p>\n<ul>\n<li>AWS EC2 Medium 에 K6 테스트 서버를 구축했다. </li>\n<li>\n<p>왜 K6일까?</p>\n<ul>\n<li>사실 팀 차원에서 하는 테스트 툴은 <a href=\"https://naver.github.io/ngrinder/#:~:text=nGrinder%20is%20a%20platform%20for,inconveniences%20and%20providing%20integrated%20environments\">Ngrinder</a> 이다. </li>\n<li>하지만 AWS 권한 제한으로 인해 controller와 agent를 별도의 EC2로 분리하지 못했다. (그것 때문인지는 모르겠지만 간혹 랜덤하게 K6와 동일한 테스트를 돌렸을 때 결과가 매우 다르게 나올때도 있었다…) ngrinder는 반드시 분리하도록 권장하기 때문에 혹시 모를 영향을 최소화 하기 위해서 나는 K6에서 진행하였다. </li>\n<li>또한 K6는 문서가 굉장히 깔끔하게 잘 되어 있어 스크립트를 짜거나 테스트 설정을 하는 것이 입문자에게 편하다는 장점이 있었다. </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"테스트-스크립트-및-설정\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"테스트 스크립트 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 스크립트 및 설정</h3>\n<ul>\n<li>K6는 자바스크립트로 테스트 스크립트를 짠다. </li>\n<li>\n<p>부하 테스트는 약 10분간 148 명의 vuser로 진행했다. </p>\n<ul>\n<li>본래 30분 이상을 하기를 권장하지만 시간 관계상 10분만 진행하고 빠르게 결과를 분석하기로 했다. </li>\n</ul>\n</li>\n<li>\n<p>스크립트 </p>\n<ul>\n<li>비회원으로 홈 피드 조회 API 요청을 보낸다. 우선 pagination은 0 - 20 고정이다. (추후 랜덤 페이지 테스트를 진행해야한다.)</li>\n<li>응답코드가 200 인지 확인한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'k6/http'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'https://jslib.k6.io/url/1.0.0/index.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> check <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'k6'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> randomIntBetween <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://jslib.k6.io/k6-utils/1.1.0/index.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nvus<span class=\"token operator\">:</span> <span class=\"token number\">148</span><span class=\"token punctuation\">,</span>\nduration<span class=\"token operator\">:</span> <span class=\"token string\">'600s'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test-pick-git.o-r.kr/api/posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'limit'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'is status 200'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>성능 테스트를 진행하면서 서버의 상태를 관리하기 위해 각각 WAS 2대, DB 2대에 대한 상태를 출력하고 모니터링 했다. </li>\n<li><code class=\"language-text\">vmstat 1 -Sm</code> 와 <code class=\"language-text\">top</code> 명령어를 통해 프로세스의 상태, CPU 상태, 스왑 발생 여부, load average 등을 확인했다.  </li>\n</ul>\n<br>\n<br>\n<h2 id=\"-테스트-진행하기-1\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0-1\" aria-label=\" 테스트 진행하기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 테스트 진행하기</h2>\n<h3 id=\"첫번째-테스트---was-오류\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8---was-%EC%98%A4%EB%A5%98\" aria-label=\"첫번째 테스트   was 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 테스트 - WAS 오류</h3>\n<ul>\n<li>\n<p>WAS 및 DB 모니터링: 왼쪽 위 부터 시계 방향으로 <code class=\"language-text\">was1</code> → <code class=\"language-text\">was2</code> → <code class=\"language-text\">slaveDB2</code> → <code class=\"language-text\">slaveDB1</code></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137442374-21e53603-b1d6-4505-9290-9bc65dfc1d38.png\"></p>\n<ul>\n<li>WAS2에 대한 CPU idle 비율이 100% 이므로 해당 WAS가 동작하지 않은 것을 알아내었다. 확인해보니 어플리케이션이 종료되어 있었다. 테스트 진행시간이 5분정도 경과되었을 때 was2에 어플리케이션을 띄웠고 테스트는 그대로 계속 진행했다. </li>\n</ul>\n</li>\n<li>\n<p>테스트 결과 </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137442922-2b3148e4-d243-480e-b442-3ea3a5168eb4.png\"></p>\n</li>\n<li>DB의 경우 OS메모리 캐싱이 되므로 DISK I/O는 발생하지 않았다. </li>\n<li>\n<p>다만 비효율적인 쿼리에 의해 CPU 과부하가 걸리는 것을 확인할 수 있었다.</p>\n<ul>\n<li>맨 왼쪽 칼럼 <strong>r</strong>(실행 대기 프로세스 수) 수치가 10 정도로 매우 높다.</li>\n<li>본래 r은 CPU 코어 갯수여야 서버가 잘 돌아가고 있다고 판단한다. (현재 ec2 CPU 코어 개수 2개)</li>\n</ul>\n</li>\n<li>요청 당 실행 시간(http<em>req</em>duration) <strong>13.33 초</strong>로 매우 긴 시간이 소요되기에 개선해야 할 점이 명확히 보였다. </li>\n</ul>\n<br>\n<h3 id=\"두번째-테스트\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"두번째 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 테스트</h3>\n<ul>\n<li>\n<p>WAS 및 DB 모니터링: 왼쪽 위 부터 시계 방향으로 <code class=\"language-text\">was1</code> → <code class=\"language-text\">was2</code> → <code class=\"language-text\">slaveDB2</code> → <code class=\"language-text\">slaveDB1</code></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443197-e4a921d2-f0b5-45b8-a8f1-84ce23bf5c94.png\"></p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443204-86fd6f1b-1f46-4613-bb31-00dc4091bb68.png\"></p>\n<ul>\n<li>앞 테스트와 동일하게 WAS의 CPU나 I/O 상황은 대체적으로 양호하고 DB 서버에 CPU 과부하가 걸리는 것을 확인할 수 있다. </li>\n</ul>\n</li>\n<li>\n<p>테스트 결과 </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443363-66ab8e2e-33a6-4cd5-9e59-72354e93c3fc.png\"></p>\n</li>\n<li>\n<p>WAS가 2대였음에도 불구하고 error rate이 줄어든 것 밖에 나아진 부분은 없었다. </p>\n<ul>\n<li>요청 실행 시간이나 테스트 갯수 tps 등의 수치가 위와 동일했다. </li>\n</ul>\n</li>\n<li>이것을 통해 알 수 있는 것은 WAS의 성능이 아니라 DB에 의한 성능저하라는 것이다. </li>\n</ul>\n<br>\n<ul>\n<li>\n<p>더 명확하게 알아보기 위해 slow query 로그를 확인해 보았다. </p>\n<ul>\n<li>로그를 확인해보니 태그를 검색하고 검색 결과인 게시물을 조회하는 쿼리가 1.5 초 정도 소요되는 것을 확인할 수 있었다. </li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137443674-1307b8ca-3cfa-41c8-ba80-c0e1adf39e12.png\"></p>\n</li>\n</ul>\n<br>\n<blockquote>\n<p>다음 포스트에서 병목이 생기는 DB 쿼리를 진단하고 개선한 후 결과에 대해서 다룬다. </p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 Intro</a></li>\n<li>\n<p><a href=\"#-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85\">🌩 사전 작업</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%AF%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EB%A0%A5\">테스트 더미 데이터 입력</a></li>\n<li><a href=\"#mariadb-%EC%BF%BC%EB%A6%AC-%EC%BA%90%EC%8B%9C-%EB%81%84%EA%B8%B0\">MariaDB 쿼리 캐시 끄기</a></li>\n<li><a href=\"#mariadb-slow-query-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">MariaDB slow query 로그 설정하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0\">🌩 테스트 진행하기</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\">테스트 환경</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%EC%84%A4%EC%A0%95\">테스트 스크립트 및 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0-1\">🌩 테스트 진행하기</a></p>\n<ul>\n<li><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8---was-%EC%98%A4%EB%A5%98\">첫번째 테스트 - WAS 오류</a></li>\n<li><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">두번째 테스트</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"💡 Intro 진행 중인 프로젝트에서 구현한 웹 어플리케이션이 어느 정도의 부하를 견딜 수 있는지에 대한 성능테스트를 진행했다.  프로젝트는 개발자를 타켓으로 한 깃헙 레포지토리를 연동한 게시물을 업로드하여 개발자들이 자신의 작업을 공유하고 다른 이들의 프로젝트를 캐줄얼하게 엿볼 수 있는 SNS형 웹 어플리케이션이다.  웹 어플리케이션에 들어가자마자 최신순으로 정렬된 게시물 피드를 볼 수 있다. (비로그인/로그인 모두 가능) 홈피드 게시물 조회 성능테스트를 진행, 병목 지점을 분석하고 개선하는 과정을 따라가보자.  🌩 사전 작업 테스트 더미 데이터 입력 테스트를 진행하기 위해서는 실제 운영환경과 최대한 유사한 환경에서 테스트하는 것이 중요하다.  운영환경과 유사한 환경이라고 하면 크게 1) 인프라 구조 2) 데이터 두 가지가 있다.  먼저 대량의 더미 데이터를 입력하도록 한다. (팀원 케빈이 수고해주었다 !! 👍) MariaDB 쿼리 캐시 끄기 왜 쿼리 캐시를 껐을까? 실제 어플리…","frontmatter":{"date":"October 15, 2021","title":"K6를 활용한 성능테스트 경험기 1 - 홈피드 조회 기능 향상","categories":"웹 프로젝트 성능테스트 데이터베이스","author":"코다","emoji":"📈"},"fields":{"slug":"/project-pickgit-homefeed-performance-test-1/"}},"next":{"id":"79b6b456-21f6-50d7-af26-9328d6bda772","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>이전 포스트에서 진행한 <a href=\"https://github.com/woowacourse-teams/2021-pick-git\">프로젝트</a>에서 홈피드 게시물 조회 성능 테스트에 대한 결과를 보고 개선대상을 파악하고 개선한다. </li>\n<li>개선 후 테스트를 재진행하여 결과를 비교한다. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"-쿼리-진단\" style=\"position:relative;\"><a href=\"#-%EC%BF%BC%EB%A6%AC-%EC%A7%84%EB%8B%A8\" aria-label=\" 쿼리 진단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 쿼리 진단</h2>\n<p>이전 포스트에서 진행한 성능 테스트를 통해 DB 쿼리 쪽 병목이 있다는 것을 알아냈다. 구체적으로 쿼리를 자세히 살펴보면서 어떤 문제가 있는지 확인해보자. </p>\n<ul>\n<li>\n<p>홈피드 게시물을 반환할 때 발생하는 slow query</p>\n<ul>\n<li>현재는 포스트 조회하는 쿼리가 최대값으로는 3.62 초가 소요된다. </li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137448824-409b2475-61a2-48f1-8390-7f6364a5f4db.png\"></p> \n<ul>\n<li>쿼리의 실행계획을 확인해서 문제점을 파악해보니 100만건의 데이터를 거의 다 훑으면서 filesort를 하고 있었다. 게시물을 최신순으로 정렬하여 상위 10개를 가지고 오는 Pagination을 적용하고 있기 때문이다. </li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137449059-6b18bcad-3794-41b9-b7e2-6bc42ee7a971.png\"></p> \n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-개선하기\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\" aria-label=\" 개선하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 개선하기</h2>\n<ul>\n<li>\n<p>createt_At 칼럼에 인덱스를 추가하여 데이터가 정렬되도록 한다. 인덱스를 건 후 실행계획을 확인해보니 filesort가 제거되었고 훑는 row 수가 대폭 줄어들었다. </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137449278-a84af99e-42d5-4ada-86aa-cc3c9c05a2fb.png\"></p> \n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-개선-후-성능-테스트\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 개선 후 성능 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 개선 후 성능 테스트</h2>\n<h3 id=\"인덱스-추가-후-테스트\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%B6%94%EA%B0%80-%ED%9B%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"인덱스 추가 후 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스 추가 후 테스트</h3>\n<ul>\n<li>\n<p>테스트 중 서버 모니터링 </p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137449561-613620d9-d87a-4433-a626-aca8ea74ebcf.png\"></p> \n<ul>\n<li>본래 DB에 실행 대기 중인 프로세스(맨 왼쪽 r 칼럼)가 많았다. 약 20 이라는 수치를 보였으며 DB 서버의 CPU의 idle 상태도 항상 0%였다.</li>\n<li>인덱스를 걸어서 쿼리 수행이 훨씬 빨라지면서 <strong>DB 인스턴스에 CPU 부하가 훨씬 줄었다</strong>. 또한 여전히 Disk I/O는 발생하지 않는다.</li>\n<li>대신 WAS 쪽 CPU에 부하가 발생했다. r 수치가 11-15 사이를 왔다갔다 했으며 CPU idle 비율이 2% ~ 15%를 왔다갔다 했다. </li>\n<li><strong>왜 갑자기 이런 수치가 보여졌을까?</strong></li>\n<li>성능 테스트를 할 때 실운영 환경과의 차이가 있기 때문이다.</li>\n<li>성능 테스트를 할 때는 한 vuser의 요청에 대한 응답이 오기 전까지 다음 요청을 보내지 않는다. 따라서 요청에 대한 응답이 느리면 그 다음 요청을 못보내기 때문에 이전 테스트 결과와 다르게 더 많은 요청을 보냈고, WAS의 CPU 부하가 발생했다.</li>\n</ul>\n</li>\n<li>\n<p>인덱스 추가 후 성능 테스트 결과   </p>\n<ul>\n<li>진행된 테스트 개수: 6694 → 944360</li>\n<li>요청 응답 시간: 13.41s → 83.57ms</li>\n<li>TPS: 10.94/s → 1573.72/s</li>\n<li>성능이 대폭 향상된 것을 확인할 수 있다. </li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137450075-acdc9624-f2c0-4b3d-852c-367fc4a441bd.png\"></p> \n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-요약\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD\" aria-label=\" 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 요약</h2>\n<ul>\n<li>기존 홈피드를 조회할 때 13초 가량의 시간이 소요 되었다.</li>\n<li>분석해보니 디스크 I/O 부하는 없고 DB쪽 CPU 부하가 있으므로 쿼리 효율성의 문제라고 판단하였다.</li>\n<li><code class=\"language-text\">order by createdAt</code> 쿼리의 부분이 풀스캔 + filesort를 하고 있음을 발견했다. (쿼리 실행 시간 3초 이상)</li>\n<li><code class=\"language-text\">createdAt</code> 칼럼에 인덱스를 걸어서 풀스캔 → limit 개수 만큼만 스캔하도록 설정했다..</li>\n<li>결과적으로 응답 시간이 약 <strong>13초에서 85ms</strong> 정도로 단축되었다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-느낀점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\" 느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 느낀점</h2>\n<ul>\n<li>테스트 코드를 통해서는 확인할 수 없는 허점을 발견할 수 있었던 것이 새로웠다.</li>\n<li>성능 테스트를 하면서 가장 크게 느낀 것은 돌아가는 어플리케이션을 구현하는 것이 아니라 사용자에게 서비스될 수 있는 어플리케이션을 만들어야 한다는 것이다. 그렇게 하기 위해서는 경험하지 않으면 알 수 없는 많은 부분들을 고려해야한다. </li>\n<li>기존에는 코드 퀄리티 자체와 원하는 결과를 내는 것에 집중했다면, 이제는 제한된 리소스 내에게 원하는 목표치까지 서비스할 수 있는 어플리케이션을 구현하는것이 중요하다는 시각이 트인 좋은 기회였다. </li>\n<li>성능 테스트를 하면서 막힌 부분은 서버를 모니터링, 커넥션 개수 파악, 데이터베이스 쿼리 최적화, 네트워크 통신 부분이다. 많이 배웠던 CS 기초가 웹 어플리케이션을 구현하면서 많이 등장하지 않아서 왜 중요한지 체감하지 못하고 있있는데 이런 대용량 (대용량이라고 하기엔 훨씬 부족하지만..) 서비스를 만들면서 다시 마주하게 될 줄 몰랐다. 역시 기초가 튼튼한 것이 가장 중요한 것 같다. </li>\n<li>성능 테스트를 하면서 부족한 CS 기초 (운영체제, 네트워크, 데이터베이스)를 병행해서 공부했다. 띄엄띄엄 알던 지식들이 하나로 연결되는 경험이었다. </li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 Intro</a></li>\n<li><a href=\"#-%EC%BF%BC%EB%A6%AC-%EC%A7%84%EB%8B%A8\">🌩 쿼리 진단</a></li>\n<li><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\">🌩 개선하기</a></li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 개선 후 성능 테스트</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%B6%94%EA%B0%80-%ED%9B%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">인덱스 추가 후 테스트</a></li>\n</ul>\n</li>\n<li><a href=\"#-%EC%9A%94%EC%95%BD\">🌩 요약</a></li>\n<li><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\">🌩 느낀점</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"K6를 활용한 성능테스트 경험기 2 - 홈피드 조회 기능 향상","categories":"웹 프로젝트 성능테스트 데이터베이스","author":"코다","emoji":"📈"},"fields":{"slug":"/project-pickgit-homefeed-performance-test-2/"}},"prev":{"id":"2eba1279-e1e0-5811-91ac-0f45dbfc508a","html":"<blockquote>\n<p>이 글은 다음 <a href=\"https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55\">링크</a>를 번역하며 공부한 글입니다 🙌   </p>\n</blockquote>\n<br>\n<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>성능 테스트에 관련한 공부 및 적용을 하면서 좋은 아티클을 추천 받았다. (Thanks to 제리 👍)</li>\n<li>관련 명령어들에 대해서 공부하고 각 칼럼이 의미하는 os 및 네트워크 기초 지식을 메꾸보자.</li>\n</ul>\n<br>\n<h2 id=\"1-uptime\" style=\"position:relative;\"><a href=\"#1-uptime\" aria-label=\"1 uptime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. uptime</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">uptime</span> \n<span class=\"token number\">23</span>:51:26 up <span class=\"token number\">21</span>:31, <span class=\"token number\">1</span> user, load average: <span class=\"token number\">30.02</span>, <span class=\"token number\">26.43</span>, <span class=\"token number\">19.02</span></code></pre></div>\n<ul>\n<li>실행되기를 기다리는 프로세스의 갯수를 출력한다. 리눅스 시스템에서는 CPU를 기다리는 프로세스와 uninterruptible I/O (disk I/O) 에 의해 프로세스가 막혀있을 수 있다. 따라서 이 수치를 통해서 리소스 부하를 간편하게 확인 할 수 있다.</li>\n<li>위 세개의 번호는 각각 1분, 5분, 15분 간 실행되지 못하고 대기 중인 프로세스 갯수를 나타낸다. 시간 추이에 따른 부하 상태를 통해 상황을 유추할 수도 있다.</li>\n</ul>\n<br>\n<h2 id=\"2-dmesg--tail\" style=\"position:relative;\"><a href=\"#2-dmesg--tail\" aria-label=\"2 dmesg  tail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. dmesg | tail</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">dmesg</span> <span class=\"token operator\">|</span> <span class=\"token function\">tail</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1880957.563150</span><span class=\"token punctuation\">]</span> perl invoked oom-killer: <span class=\"token assign-left variable\">gfp_mask</span><span class=\"token operator\">=</span>0x280da, <span class=\"token assign-left variable\">order</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>, <span class=\"token assign-left variable\">oom_score_adj</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1880957.563400</span><span class=\"token punctuation\">]</span> Out of memory: Kill process <span class=\"token number\">18694</span> <span class=\"token punctuation\">(</span>perl<span class=\"token punctuation\">)</span> score <span class=\"token number\">246</span> or sacrifice child\n<span class=\"token punctuation\">[</span><span class=\"token number\">1880957.563408</span><span class=\"token punctuation\">]</span> Killed process <span class=\"token number\">18694</span> <span class=\"token punctuation\">(</span>perl<span class=\"token punctuation\">)</span> total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB\n<span class=\"token punctuation\">[</span><span class=\"token number\">2320864.954447</span><span class=\"token punctuation\">]</span> TCP: Possible SYN flooding on port <span class=\"token number\">7001</span>. Dropping request.  Check SNMP counters.</code></pre></div>\n<ul>\n<li>마지막 10개의 시스템 메세지를 출력한다. 여기서 성능에 이슈를 일으킨 에러 메세지를 확인할 수 있다. oom-killer나 TCP 요청 드랍 같은 경우를 확인할 수 있으므로 필수다.</li>\n</ul>\n<br>\n<h2 id=\"3-vmstat-1\" style=\"position:relative;\"><a href=\"#3-vmstat-1\" aria-label=\"3 vmstat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. vmstat 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b swpd   <span class=\"token function\">free</span>   buff  cache   si   so    bi    bo   <span class=\"token keyword\">in</span>   cs us sy <span class=\"token function\">id</span> wa st\n<span class=\"token number\">34</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200889792</span>  <span class=\"token number\">73708</span> <span class=\"token number\">591828</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">5</span>    <span class=\"token number\">6</span>   <span class=\"token number\">10</span> <span class=\"token number\">96</span>  <span class=\"token number\">1</span>  <span class=\"token number\">3</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200889920</span>  <span class=\"token number\">73708</span> <span class=\"token number\">591860</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>   <span class=\"token number\">592</span> <span class=\"token number\">13284</span> <span class=\"token number\">4282</span> <span class=\"token number\">98</span>  <span class=\"token number\">1</span>  <span class=\"token number\">1</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200890112</span>  <span class=\"token number\">73708</span> <span class=\"token number\">591860</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span> <span class=\"token number\">9501</span> <span class=\"token number\">2154</span> <span class=\"token number\">99</span>  <span class=\"token number\">1</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200889568</span>  <span class=\"token number\">73712</span> <span class=\"token number\">591856</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>    <span class=\"token number\">48</span> <span class=\"token number\">11900</span> <span class=\"token number\">2459</span> <span class=\"token number\">99</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200890208</span>  <span class=\"token number\">73712</span> <span class=\"token number\">591860</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span> <span class=\"token number\">15898</span> <span class=\"token number\">4840</span> <span class=\"token number\">98</span>  <span class=\"token number\">1</span>  <span class=\"token number\">1</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n^C</code></pre></div>\n<ul>\n<li>가상 메모리 stat를 보여준다. 서버의 중요한 statistics를 출력한다.</li>\n<li>vmstat 명령어와 1을 클릭하면 1초마다 서버의 statictics를 출력한다. (단 첫번째 행은 서버가 부팅되었을 때부터의 평균 수치를 보여준다)</li>\n</ul>\n<h3 id=\"중요한-칼럼\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%9A%94%ED%95%9C-%EC%B9%BC%EB%9F%BC\" aria-label=\"중요한 칼럼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중요한 칼럼</h3>\n<ul>\n<li>\n<p><strong>r</strong>: CPU에서 실행되는 프로세스와 기다리고 있는 프로세스 숫자이다. I/O에 의해 생기는 부하를 제외하고 CPU에 대해서만 보여주기 때문에 load average의 원인이 CPU인지 아닌지를 확인 할 수 있다.</p>\n<p>참고로, “r” 칼럼 값이 CPU 코어 갯수보다 많다면 saturation 상황이다.</p>\n</li>\n<li><strong>free</strong>: 비어있는 메모리를 kilobytes 단위로 보여준다.</li>\n<li><strong>si, so</strong>: swap-ins, swap-outs를 보여준다. 이 값이 0이 아니라면 메모리 부족이다.</li>\n<li>\n<p><strong>us, sy, id, wa, st</strong>: CPU 시간을 분할하여 모든 CPU 시간의 평균 정보를 보여준다.</p>\n<ul>\n<li>user time, system time(kernel), idle, wait I/O, stolen time(다른 게스트, Xen 등등) 지표를 보여준다.</li>\n</ul>\n</li>\n<li>여기서 user + system time을 통해 CPU가 바쁜 상태인지 확인할 수 있다.</li>\n<li>wait I/O에 특정 값이 유지된다면 disk 병목 현상이 있다고 볼 수 있다. 이 경우는 작업이 disk I/O 작업을 기다리느라 CPU 가 유휴 상태에 있는 때이다.</li>\n<li>System time은 I/O 작업을 하기 위해서 필수이다. high system time 평균은 20% 이상이며 이런 수치를 보이면 커널이 I/O 작업을 비효율적으로 처리하고 있다고 볼 수 있다.</li>\n<li>CPU 사용률(user-level)은 평균 90% 이상일 수도 있으나 이것이 꼭 문제를 뜻하는 것은 아니다. CPU에 부하가 걸리고 있는지는 “r” 칼럼을 통해서 판단해야한다.</li>\n<li><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&#x26;blogId=ggaibi1004&#x26;logNo=221398356656\">여기서</a> 각 칼럼에 대한 자세한 설명을 확인할 수 있다. 개인적으로 매우 유용하게 참고하고 있다. <a href=\"https://im-recording-of-sw-studies.tistory.com/30\">여기도..</a></li>\n</ul>\n<br>\n<h2 id=\"4-mpstat--p-all-1\" style=\"position:relative;\"><a href=\"#4-mpstat--p-all-1\" aria-label=\"4 mpstat  p all 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. mpstat -P ALL 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mpstat -P ALL <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015  _x86_64_ <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle\n07:38:50 PM  all  <span class=\"token number\">98.47</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.75</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.78</span>\n07:38:50 PM    <span class=\"token number\">0</span>  <span class=\"token number\">96.04</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">2.97</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.99</span>\n07:38:50 PM    <span class=\"token number\">1</span>  <span class=\"token number\">97.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">2.00</span>\n07:38:50 PM    <span class=\"token number\">2</span>  <span class=\"token number\">98.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">1.00</span>\n07:38:50 PM    <span class=\"token number\">3</span>  <span class=\"token number\">96.97</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">3.03</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>CPU 코어 별 CPU 시간을 출력한다. 이것을 통해 한 코어에 프로세스가 집중되어 비효율적이지는 않은지 확인할 수 있다.</li>\n<li>만일 하나의 CPU에 부하가 심하다면 single thread application에 의한 부하일 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"5-pidstat-1\" style=\"position:relative;\"><a href=\"#5-pidstat-1\" aria-label=\"5 pidstat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. pidstat 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pidstat <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015    _x86_64_    <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n07:41:02 PM   <span class=\"token environment constant\">UID</span>       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:03 PM     <span class=\"token number\">0</span>         <span class=\"token number\">9</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.94</span>     <span class=\"token number\">1</span>  rcuos/0\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">4214</span>    <span class=\"token number\">5.66</span>    <span class=\"token number\">5.66</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">11.32</span>    <span class=\"token number\">15</span>  mesos-slave\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">4354</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">1.89</span>     <span class=\"token number\">8</span>  java\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6521</span> <span class=\"token number\">1596.23</span>    <span class=\"token number\">1.89</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1598.11</span>    <span class=\"token number\">27</span>  java\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6564</span> <span class=\"token number\">1571.70</span>    <span class=\"token number\">7.55</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1579.25</span>    <span class=\"token number\">28</span>  java\n07:41:03 PM <span class=\"token number\">60004</span>     <span class=\"token number\">60154</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">4.72</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">5.66</span>     <span class=\"token number\">9</span>  pidstat\n\n07:41:03 PM   <span class=\"token environment constant\">UID</span>       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:04 PM     <span class=\"token number\">0</span>      <span class=\"token number\">4214</span>    <span class=\"token number\">6.00</span>    <span class=\"token number\">2.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">8.00</span>    <span class=\"token number\">15</span>  mesos-slave\n07:41:04 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6521</span> <span class=\"token number\">1590.00</span>    <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1591.00</span>    <span class=\"token number\">27</span>  java\n07:41:04 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6564</span> <span class=\"token number\">1573.00</span>   <span class=\"token number\">10.00</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1583.00</span>    <span class=\"token number\">28</span>  java\n07:41:04 PM   <span class=\"token number\">108</span>      <span class=\"token number\">6718</span>    <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">1.00</span>     <span class=\"token number\">0</span>  snmp-pass\n07:41:04 PM <span class=\"token number\">60004</span>     <span class=\"token number\">60154</span>    <span class=\"token number\">1.00</span>    <span class=\"token number\">4.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">5.00</span>     <span class=\"token number\">9</span>  pidstat\n^C</code></pre></div>\n<ul>\n<li>pidstat는 프로세스 별 top 명령어 같은 느낌이다. 하지만 rollling 방식으로 매 시간마다의 모니터링 결과를 출력해준다.</li>\n<li>이 명령을 통해 시간에 흐름에 따른 패턴을 확인할 수 있고, 현상을 기록할 수 있는 장점이 있다.</li>\n<li>위 예시를 보면 2개의 자바 프로세스가 CPU를 과하게 소비하고 있음을 알 수 있다.</li>\n<li>위에서 <code class=\"language-text\">%CPU</code> 칼럼은 서버의 모든 CPU를 포함한 수치이다. 따라서 1591%라는 수치는 해당 자바 프로세스가 거의 16개의 CPU를 소비하고 있음을 나타낸다. (리눅스에서 CPU 사용률은 주로 각 CPU 당 100%의 수치로 그 합을 의미한다)</li>\n</ul>\n<br>\n<h2 id=\"6-iostat--xz-1\" style=\"position:relative;\"><a href=\"#6-iostat--xz-1\" aria-label=\"6 iostat  xz 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. iostat -xz 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ iostat -xz <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015  _x86_64_ <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          <span class=\"token number\">73.96</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">3.73</span>    <span class=\"token number\">0.03</span>    <span class=\"token number\">0.06</span>   <span class=\"token number\">22.21</span>\n\nDevice:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nxvda        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.23</span>    <span class=\"token number\">0.21</span>    <span class=\"token number\">0.18</span>     <span class=\"token number\">4.52</span>     <span class=\"token number\">2.08</span>    <span class=\"token number\">34.37</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">9.98</span>   <span class=\"token number\">13.80</span>    <span class=\"token number\">5.42</span>   <span class=\"token number\">2.44</span>   <span class=\"token number\">0.09</span>\nxvdb        <span class=\"token number\">0.01</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">1.02</span>    <span class=\"token number\">8.94</span>   <span class=\"token number\">127.97</span>   <span class=\"token number\">598.53</span>   <span class=\"token number\">145.79</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.43</span>    <span class=\"token number\">1.78</span>    <span class=\"token number\">0.28</span>   <span class=\"token number\">0.25</span>   <span class=\"token number\">0.25</span>\nxvdc        <span class=\"token number\">0.01</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">1.02</span>    <span class=\"token number\">8.86</span>   <span class=\"token number\">127.79</span>   <span class=\"token number\">595.94</span>   <span class=\"token number\">146.50</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.45</span>    <span class=\"token number\">1.82</span>    <span class=\"token number\">0.30</span>   <span class=\"token number\">0.27</span>   <span class=\"token number\">0.26</span>\ndm-0        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.69</span>    <span class=\"token number\">2.32</span>    <span class=\"token number\">10.47</span>    <span class=\"token number\">31.69</span>    <span class=\"token number\">28.01</span>     <span class=\"token number\">0.01</span>    <span class=\"token number\">3.23</span>    <span class=\"token number\">0.71</span>    <span class=\"token number\">3.98</span>   <span class=\"token number\">0.13</span>   <span class=\"token number\">0.04</span>\ndm-1        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.94</span>     <span class=\"token number\">0.01</span>     <span class=\"token number\">3.78</span>     <span class=\"token number\">8.00</span>     <span class=\"token number\">0.33</span>  <span class=\"token number\">345.84</span>    <span class=\"token number\">0.04</span>  <span class=\"token number\">346.81</span>   <span class=\"token number\">0.01</span>   <span class=\"token number\">0.00</span>\ndm-2        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.09</span>    <span class=\"token number\">0.07</span>     <span class=\"token number\">1.35</span>     <span class=\"token number\">0.36</span>    <span class=\"token number\">22.50</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">2.55</span>    <span class=\"token number\">0.23</span>    <span class=\"token number\">5.62</span>   <span class=\"token number\">1.78</span>   <span class=\"token number\">0.03</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n^C</code></pre></div>\n<ul>\n<li>블록 디바이스 (disks)를 확인하기 매우 좋은 명령어다. 해당 디바이스의 부하와 퍼포먼스까지 확인할 수 있다. 다음 칼럼들을 유의해서 보자.</li>\n<li>\n<p><strong>r/s, w/s, rkB/s, wkB/s</strong> </p>\n<ul>\n<li>위 수치들은 1초 동안 해당 디바이스에게 전달된 읽기, 쓰기, Kbytes 읽기, Kbytes 쓰기이다.</li>\n<li>디바이스의 작업량 정도를 확인할 수 있다. 이 수치가 지나치게 높다면 과부하에 의한 성능 문제가 발생할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>await</strong></p>\n<ul>\n<li>ms 단위의 I/O 평균 시간이다. 이것은 어플리케이션이 queue에 있는 시간과 서비스되는 시간이 모두 포함된 시간이다.</li>\n<li>예상보다 긴 평균시간은 디바이스 포화 여부 혹은 디바이스에 오류 가능성을 의미할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>avgqu-sz</strong></p>\n<ul>\n<li>디바이스의 평균 요청 수이다. 1 보다 큰 수치는 포화상태의 근거일 수 있다. (여러 디스크에 대한 가장 디바이스 같은 경우 요청을 병렬로 처리할 수 있긴 하다는 것을 참고)</li>\n</ul>\n</li>\n<li>\n<p><strong>%util</strong></p>\n<ul>\n<li>디바이스 사용률이다. 매 초마다 디바이스가 처리하고 있는 퍼센트를 나타닌다.</li>\n<li>디바이스 마다 상이하지만 60% 보다 큰 수치는 주로 좋지 않은 성능을 나타낸다. (await 칼럼에서 함께 확인할 수 있는 상태이다)</li>\n<li>100%에 가까운 것은 포화상태임을 뜻한다.</li>\n</ul>\n</li>\n<li>만일 storage device가 여러 물리 디스크 앞에 있는 논리 디스크라면 100% 의 사용률은 어떤 I/O 프로세스가 100% 시간동안 처리되고 있으나 실제 물리 디스크는 포화상태가 아닐 수도 있다.</li>\n<li>참고할 것은 disk I/O의 낮은 성능이 어플리케이션의 성능을 저하시키는 요인이 아닐 수도 있다는 것이다. 많은 기술들은 I/O 작업을 비동기로 처리하여 어플리케이션이 봉쇄상태에 머물거나 지연시간(latency)에 영향이 가지 않도록 한다.</li>\n</ul>\n<br>\n<h2 id=\"7-free--m\" style=\"position:relative;\"><a href=\"#7-free--m\" aria-label=\"7 free  m permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. free -m</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">free</span> -m\n             total       used       <span class=\"token function\">free</span>     shared    buffers     cached\nMem:        <span class=\"token number\">245998</span>      <span class=\"token number\">24545</span>     <span class=\"token number\">221453</span>         <span class=\"token number\">83</span>         <span class=\"token number\">59</span>        <span class=\"token number\">541</span>\n-/+ buffers/cache:      <span class=\"token number\">23944</span>     <span class=\"token number\">222053</span>\nSwap:            <span class=\"token number\">0</span>          <span class=\"token number\">0</span>          <span class=\"token number\">0</span></code></pre></div>\n<ul>\n<li>\n<p>중요 칼럼 (가장 오른쪽 칼럼)</p>\n<ol>\n<li>\n<p><strong>buffers</strong></p>\n<ul>\n<li>버퍼 캐시이며 block device I/O 에 사용</li>\n</ul>\n</li>\n<li>\n<p><strong>cached</strong> </p>\n<ul>\n<li>페이지 캐시이며 file systems에 사용</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>위 두 칼럼의 수치가 <code class=\"language-text\">0</code>이 아니도록 주의하자. 0 이라면 disk I/O가 빈번하게 발생하며(<code class=\"language-text\">iostat</code>으로 확인) 가장 느린 연산이므로 최악의 성능을 낸다. 위 경우 Mbytes 이상의 여유 공간을 가지고 있으니 양호한 상태이다.</li>\n<li>\n<p><code class=\"language-text\">/+ buffers/cache</code> 은 <code class=\"language-text\">free</code> 수치에 대해서 더 명확하게 알려준다.</p>\n<ul>\n<li>운영체제의 물리 메모리는 그 빈 공간을 캐싱을 하기 위해서 사용한다. 하지만 프로세스가 필요로 하다면 곧바로 회수하여 필요한 프로세스에게 할당한다. 따라서 엄밀히 말하먄 캐시 데이터가 차지하고 있는 메모리의 용량도 free에 포함되어야 마땅하다.</li>\n<li>이 수치의 free는 캐시 데이터 메모리 용량까지 포함한 수치이다.</li>\n<li>이 부분에 대한 많은 혼란이 있기에 관련 <a href=\"https://www.linuxatemyram.com/\">사이트</a>가 따로 있을 정도이다. (ㅋㅋㅋㅋ)</li>\n</ul>\n</li>\n<li>\n<p>리눅스에서 <a href=\"https://itsfoss.com/what-is-zfs/\">ZFS</a> 라는 향상된 file system을 사용하고 있다면 위 수치가 더 혼란스러울 수 있다. ZFS는 별도의 캐시가 존재하며 <code class=\"language-text\">free -m</code> 에 제대로 반영이 되지 않기 때문이다.</p>\n<ul>\n<li>시스템이 가용 가능한 메모리 공간이 적어보이지만 ZFS 캐시에 의해 가용 가능한 메모리가 존재할 수도 있다는 것을 참고하자.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"8-sar--n-dev-1\" style=\"position:relative;\"><a href=\"#8-sar--n-dev-1\" aria-label=\"8 sar  n dev 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. sar -n DEV 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sar -n DEV <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015     _x86_64_    <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">12</span>:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n<span class=\"token number\">12</span>:16:49 AM      eth0  <span class=\"token number\">18763.00</span>   <span class=\"token number\">5032.00</span>  <span class=\"token number\">20686.42</span>    <span class=\"token number\">478.30</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:49 AM        lo     <span class=\"token number\">14.00</span>     <span class=\"token number\">14.00</span>      <span class=\"token number\">1.36</span>      <span class=\"token number\">1.36</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:49 AM   docker0      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n\n<span class=\"token number\">12</span>:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n<span class=\"token number\">12</span>:16:50 AM      eth0  <span class=\"token number\">19763.00</span>   <span class=\"token number\">5101.00</span>  <span class=\"token number\">21999.10</span>    <span class=\"token number\">482.56</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:50 AM        lo     <span class=\"token number\">20.00</span>     <span class=\"token number\">20.00</span>      <span class=\"token number\">3.25</span>      <span class=\"token number\">3.25</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:50 AM   docker0      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n^C</code></pre></div>\n<ul>\n<li>\n<p>이 명령어를 통해 네트워크 인터페이스 처리량을 확인할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">rxkB/s</code> 와 <code class=\"language-text\">txkB/s</code> 를 통해 작업량을 확인하고 한계치에 다다랐는지 확인할 수 있다.</li>\n<li>위 예시를 보면 eth0 는 22 Mbytes/s (176 Mbits/sec) 이다. (1 Gbit/sec 제한 보다 낮은 수치이다)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">%ifutil</code> 칼럼을 통해 디바이스 사용률을 확인할 수 있다. (full-duplex인 경우 양쪽 방향의 최대값이다) 이것은 정확한 수치를 알기 어렵고 사용하지 않는 0.00 수치를 보이기도 한다.</li>\n</ul>\n<br>\n<h2 id=\"9-sar--n-tcpetcp-1\" style=\"position:relative;\"><a href=\"#9-sar--n-tcpetcp-1\" aria-label=\"9 sar  n tcpetcp 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. sar -n TCP,ETCP 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sar -n TCP,ETCP <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015    _x86_64_    <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">12</span>:17:19 AM  active/s passive/s    iseg/s    oseg/s\n<span class=\"token number\">12</span>:17:20 AM      <span class=\"token number\">1.00</span>      <span class=\"token number\">0.00</span>  <span class=\"token number\">10233.00</span>  <span class=\"token number\">18846.00</span>\n\n<span class=\"token number\">12</span>:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n<span class=\"token number\">12</span>:17:20 AM      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n\n<span class=\"token number\">12</span>:17:20 AM  active/s passive/s    iseg/s    oseg/s\n<span class=\"token number\">12</span>:17:21 AM      <span class=\"token number\">1.00</span>      <span class=\"token number\">0.00</span>   <span class=\"token number\">8359.00</span>   <span class=\"token number\">6039.00</span>\n\n<span class=\"token number\">12</span>:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n<span class=\"token number\">12</span>:17:21 AM      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n^C</code></pre></div>\n<ul>\n<li>\n<p>중요한 TCP 수치에 대해서 보여준다.</p>\n<ol>\n<li>\n<p><strong>active/s</strong> </p>\n<ul>\n<li>로컬에서 시작된 초당 TCP 커넥션 개수 (<code class=\"language-text\">connect()</code>를 명령어로 시작된 커넥션)</li>\n</ul>\n</li>\n<li>\n<p><strong>passive/s</strong></p>\n<ul>\n<li>리모트에서 시작된 초당 TCP 커넥션 개수 (<code class=\"language-text\">accept()</code>로 연결된 커넥션)</li>\n</ul>\n</li>\n<li>\n<p><strong>retrans/s</strong></p>\n<ul>\n<li>초당 TCP 재전송량</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>active와 passive 수는 서버 부하를 대략적으로 산출할 수 있는 좋은 수치이다.</p>\n<ul>\n<li>새롭게 들어온 passive 커넥션 개수와 내보내지고 있는 active 커넥션 개수</li>\n<li>active를 outbound, passive을 inbound 수치로 판단할 수 있으나 정확히 그렇지만은 않다. (<a href=\"http://localhost\">localhost</a>와 localhost connection의 차이를 고려해보라)</li>\n</ul>\n</li>\n<li>\n<p>네트워크 재전송량은 네트워크 혹은 서버 이슈 일 수 있다.</p>\n<ul>\n<li>네트워크 문제라면 네트워크가 안정적이지 않은 네트워크 일 수 있다.</li>\n<li>혹은 서버 과부화로 인해 패킷이 유실되는 문제일 수도 있다.</li>\n<li>위 예시에서는 초당 1개의 TCP 커넥션이 재전송되고 있다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"10-top\" style=\"position:relative;\"><a href=\"#10-top\" aria-label=\"10 top permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. top</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">top</span>\n<span class=\"token function\">top</span> - 00:15:40 up <span class=\"token number\">21</span>:56,  <span class=\"token number\">1</span> user,  load average: <span class=\"token number\">31.09</span>, <span class=\"token number\">29.87</span>, <span class=\"token number\">29.92</span>\nTasks: <span class=\"token number\">871</span> total,   <span class=\"token number\">1</span> running, <span class=\"token number\">868</span> sleeping,   <span class=\"token number\">0</span> stopped,   <span class=\"token number\">2</span> zombie\n%Cpu<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: <span class=\"token number\">96.8</span> us,  <span class=\"token number\">0.4</span> sy,  <span class=\"token number\">0.0</span> ni,  <span class=\"token number\">2.7</span> id,  <span class=\"token number\">0.1</span> wa,  <span class=\"token number\">0.0</span> hi,  <span class=\"token number\">0.0</span> si,  <span class=\"token number\">0.0</span> st\nKiB Mem:  <span class=\"token number\">25190241</span>+total, <span class=\"token number\">24921688</span> used, <span class=\"token number\">22698073</span>+free,    <span class=\"token number\">60448</span> buffers\nKiB Swap:        <span class=\"token number\">0</span> total,        <span class=\"token number\">0</span> used,        <span class=\"token number\">0</span> free.   <span class=\"token number\">554208</span> cached Mem\n\n   PID <span class=\"token environment constant\">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n <span class=\"token number\">20248</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>  <span class=\"token number\">0</span>.227t <span class=\"token number\">0</span>.012t  <span class=\"token number\">18748</span> S  <span class=\"token number\">3090</span>  <span class=\"token number\">5.2</span>  <span class=\"token number\">29812</span>:58 java\n  <span class=\"token number\">4213</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span> <span class=\"token number\">2722544</span>  <span class=\"token number\">64640</span>  <span class=\"token number\">44232</span> S  <span class=\"token number\">23.5</span>  <span class=\"token number\">0.0</span> <span class=\"token number\">233</span>:35.37 mesos-slave\n <span class=\"token number\">66128</span> titancl+  <span class=\"token number\">20</span>   <span class=\"token number\">0</span>   <span class=\"token number\">24344</span>   <span class=\"token number\">2332</span>   <span class=\"token number\">1172</span> R   <span class=\"token number\">1.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.07 <span class=\"token function\">top</span>\n  <span class=\"token number\">5235</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span> <span class=\"token number\">38</span>.227g <span class=\"token number\">547004</span>  <span class=\"token number\">49996</span> S   <span class=\"token number\">0.7</span>  <span class=\"token number\">0.2</span>   <span class=\"token number\">2</span>:02.74 java\n  <span class=\"token number\">4299</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span> <span class=\"token number\">20</span>.015g <span class=\"token number\">2</span>.682g  <span class=\"token number\">16836</span> S   <span class=\"token number\">0.3</span>  <span class=\"token number\">1.1</span>  <span class=\"token number\">33</span>:14.42 java\n     <span class=\"token number\">1</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>   <span class=\"token number\">33620</span>   <span class=\"token number\">2920</span>   <span class=\"token number\">1496</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:03.82 init\n     <span class=\"token number\">2</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.02 kthreadd\n     <span class=\"token number\">3</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:05.35 ksoftirqd/0\n     <span class=\"token number\">5</span> root       <span class=\"token number\">0</span> -20       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.00 kworker/0:0H\n     <span class=\"token number\">6</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:06.94 kworker/u256:0\n     <span class=\"token number\">8</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">2</span>:38.05 rcu_sched</code></pre></div>\n<ul>\n<li><code class=\"language-text\">top</code> 명령어는 이전에 다룬 다른 명령어로 확인할 수 있는 수치를 전반적으로 포함한 지표들을 보여준다. 때문에 편리하게 사용된다.</li>\n<li><code class=\"language-text\">top</code> 명령어의 단점은 시간의 흐름에 따른 패턴 확인이 어렵고 당시 전반적인 서버의 상태만을 확인할 수 있다는 것이다. 시간의 흐름에 따른 패턴을 확인하고 싶다면 <code class=\"language-text\">vmstat</code> 혹은 <code class=\"language-text\">pidstat</code> 으로 확인할 수 있다. (rolling output을 보여준다)</li>\n</ul>\n <br>\n <br>\n<h2 id=\"-느낀-점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\" 느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 느낀 점</h2>\n<ul>\n<li>확실히 os 에 대한 지식이 필요한 것을 느꼈다. os와 네트워크 공부와 병행하며 지표를 살피니 의미하는 바를 잘 이해할 수 있었다.</li>\n<li>서버의 부하를 살펴보려면 크게 CPU부하, I/O 디바이스 부하, 네트워크 부하를 확인해야한다.</li>\n<li>어플리케이션을 구현하고 제대로 서비스 하기 위해서는 서버를 제대로 모니터링하고 미리 어느 정도를 감당할 수 있는지 확인할 수 있어야 한다.</li>\n<li>또한 지표를 보고 어느 부분을 개선하여 성능을 개선시킬 수 있을지도 판단할 수 있어야 한다.</li>\n<li>결국 경험이 답이다…!!</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55\">https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 Intro</a></li>\n<li><a href=\"#1-uptime\">1. uptime</a></li>\n<li><a href=\"#2-dmesg--tail\">2. dmesg | tail</a></li>\n<li>\n<p><a href=\"#3-vmstat-1\">3. vmstat 1</a></p>\n<ul>\n<li><a href=\"#%EC%A4%91%EC%9A%94%ED%95%9C-%EC%B9%BC%EB%9F%BC\">중요한 칼럼</a></li>\n</ul>\n</li>\n<li><a href=\"#4-mpstat--p-all-1\">4. mpstat -P ALL 1</a></li>\n<li><a href=\"#5-pidstat-1\">5. pidstat 1</a></li>\n<li><a href=\"#6-iostat--xz-1\">6. iostat -xz 1</a></li>\n<li><a href=\"#7-free--m\">7. free -m</a></li>\n<li><a href=\"#8-sar--n-dev-1\">8. sar -n DEV 1</a></li>\n<li><a href=\"#9-sar--n-tcpetcp-1\">9. sar -n TCP,ETCP 1</a></li>\n<li><a href=\"#10-top\">10. top</a></li>\n<li><a href=\"#-%EB%8A%90%EB%82%80-%EC%A0%90\">🌩 느낀 점</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"넷플릭스에서 60000ms 만에 리눅스 서버 성능을 진단하는 방법 10가지","categories":"웹 성능테스트","author":"코다","emoji":"📈"},"fields":{"slug":"/netflix-performance-analysis/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/project-pickgit-homefeed-performance-test-1/","nextSlug":"/project-pickgit-homefeed-performance-test-2/","prevSlug":"/netflix-performance-analysis/"}},"staticQueryHashes":["1073350324","2938748437"]}