{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/operating-system-8/",
    "result": {"data":{"cur":{"id":"15b12225-3396-59dc-8dc9-3527198db44f","html":"<blockquote>\n<p>다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ <em>CH9. 디스크 관리</em>를 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"-들어가기-전\" style=\"position:relative;\"><a href=\"#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\" aria-label=\" 들어가기 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 들어가기 전</h2>\n<ul>\n<li>컴퓨터 시스템의 대표적인 2차 저장장치이다.</li>\n<li>메모리는 휘발성이지만 디스크는 데이터를 영구저장할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"-1-디스크의-구조\" style=\"position:relative;\"><a href=\"#-1-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\" 1 디스크의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 1. 디스크의 구조</h2>\n<ul>\n<li>디스크 외부에서 디스크를 일정크기 저장공간들로 이루어진 1차원 배열로 취급한다.\n<ul>\n<li>그 저장공간들을 논리 블록 logical block 이라고 한다.</li>\n</ul>\n</li>\n<li>디스크에 데이터가 저장될 때 논리블록 단위로 저장되고, 입출력도 논리블록 단위로 전송된다.</li>\n<li>데이터 접근을 위해 배열처럼 블록 인덱스를 디스크에 전달하고 디스크 컨트롤러가 해당 논리블록의 물리적 위치를 찾아 요청 데이터에 대한 입출력 작업을 수행한다.</li>\n<li><strong>섹터 sector</strong> - 논리 블록이 저장된 물리적 위치\n<ul>\n<li>논리블록과 섹터는 1대1 매핑</li>\n</ul>\n</li>\n<li>디스크는 마그네틱 원판들로 구성되며 원판은 트랙, 트랙은 섹터로 나뉜다.</li>\n<li>원판의 동일한 위치의 트랙들을 실린더라고 부른다.</li>\n<li>디스크의 가장 바깥 실린더의 첫 트랙의 첫 섹터가 섹터 0 이다.</li>\n<li>데이터 입출력은 디스크의 암 arm이 섹터가 위치한 실린더로 이동하여 워판이 회전하고 디스크 헤드가 섹터 위치에 도달해야한다.</li>\n</ul>\n<br>\n<h2 id=\"-2-디스크--스캐줄링\" style=\"position:relative;\"><a href=\"#-2-%EB%94%94%EC%8A%A4%ED%81%AC--%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81\" aria-label=\" 2 디스크  스캐줄링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 2. 디스크  스캐줄링</h2>\n<ul>\n<li>디스크 접근시간 access time: 탐색 시간 seek time, 회전지연 시간 rotational latency, 전송시간 transfer time 으로 구분된다\n<ul>\n<li>탐색시간 - 디스크 헤드를 해당 실린더 위치로 이동시키는 시간</li>\n<li>회전지연시간 - 디스크게 회전해서 읽으려고 쓰는 섹터가 헤드 위치에 도달하는 시간</li>\n<li>전송시간 - 섹터의 데이터가 실제로 섹터에 읽고 쓰는데 소요되는 시간</li>\n</ul>\n</li>\n<li>디스크 입출력 효율 향상 - 디스크 입출력의 접근시간을 최소화\n<ul>\n<li>회전지연시간과 전송시간은 수치가 작고 운영체제에서 통제하기 어려운 부분이다.</li>\n<li>따라서 탐색시간을 줄여야한다.</li>\n</ul>\n</li>\n<li>디스크 스캐줄링 disk scheduling\n<ul>\n<li>여러 섹터들의 입출력 요청을 어떠한 순서로 처리할지 결정하는 매커니즘</li>\n<li>가장 중요한 목표는 디스크 헤드의 이동거리를 줄이는 것</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-fcfs-스케줄링\" style=\"position:relative;\"><a href=\"#1-fcfs-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\"1 fcfs 스케줄링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) FCFS 스케줄링</h3>\n<ul>\n<li>디스크에 먼저 들어온 요청을 먼저 처리하는 방식이다.</li>\n<li>효율성이 매우 떨어진다. 헤드가 긴 거리를 왕복하여 왔다갔다 할 수도 있다.</li>\n</ul>\n<h3 id=\"2-sstf-shortest-seek-time-first-스케줄링\" style=\"position:relative;\"><a href=\"#2-sstf-shortest-seek-time-first-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\"2 sstf shortest seek time first 스케줄링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) SSTF Shortest Seek Time First 스케줄링</h3>\n<ul>\n<li>헤드의 현재 위치로 가장 가까운 위치의 요청을 먼저 처리하는 알고리즘</li>\n<li>디스크 입출력 효율성을 증가시키지만 기아 starvation 현상을 발생시킬 수 있다.\n<ul>\n<li>현재 헤드에서 가까운 요청이 계속 들어오면 떨어진 곳 요청은 무한대기해야한다.</li>\n</ul>\n</li>\n<li>그래도 이동거리 측면에서 가장 우수한 알고리즘은 아니다.</li>\n</ul>\n<h3 id=\"3-scan-알고리즘\" style=\"position:relative;\"><a href=\"#3-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"3 scan 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) SCAN 알고리즘</h3>\n<ul>\n<li>헤드가 디스크 원판 안쪽 끝과 바깥쪽 끝을 오가며 경로에 존재하는 모든 요청을 처리한다.</li>\n<li>디스크 어떤 위치에 요청이 오는지 상관없이 정해진 방향으로 이동하며 길에 있는 요청들을 처리한다.</li>\n<li>한쪽 방향 끝으로 가면 다린 쪽 끝으로 방향을 바꾸어 그 경로 요청들의 다 처리한다.</li>\n<li>엘리베이터와 비슷한 알고리즘이라서 엘리베이터 스캐줄링 알고리즘 elevator scheduling algorithm이라고 부르기도 한다.</li>\n<li>너무 오래 기다리게 하거나 불필요한 헤드의 이동이 발생하지 않으므로 효율성과 형평성을 모두 만족하는 알고리즘이다.</li>\n<li>하지만 가장 바깥쪽 실린더보다 가운데 위치한 실린더가 더 자주 서비스 받는 편차가 존재한다.</li>\n</ul>\n<h3 id=\"4-c-scan-알고리즘\" style=\"position:relative;\"><a href=\"#4-c-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"4 c scan 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) C-SCAN 알고리즘</h3>\n<ul>\n<li>Circular-scan 알고리즘은 한쪽끝에서 다른 쪽 끝으로 이동하며 길목의 모든 요청을 처리한다.</li>\n<li>하지만 헤드가 도달해 방향을 바꾸고 요청 처리보다 다시 출발점으로 이동만한다.</li>\n<li>이동거리는 조금 길어지지만 탐색시간의 편차를 줄일 수 있다.</li>\n</ul>\n<h3 id=\"5-look과-c-look-알고리즘\" style=\"position:relative;\"><a href=\"#5-look%EA%B3%BC-c-look-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"5 look과 c look 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) LOOK과 C-LOOK 알고리즘</h3>\n<ul>\n<li>\n<p>SCAN 알고리즘은 요청 존재 여부와 관계없이 헤드가 무조건 디스크 한쪽 끝에서 다른 쪽 끝으로 이동한다.</p>\n</li>\n<li>\n<p>LOOK 알고리즘은 헤드가 한쪽으로 이동하다가 그 방향에 대기중인 요청이 없다면 방향을 바꾼다.</p>\n</li>\n<li>\n<p>C-LOOK은 LOOK 알고리즘에서 한쪽 방향으로 이동할 때만 요청을 처리하는 것이다. -</p>\n</li>\n<li>\n<p>SCAN, C-SCAN, LOOK, C-LOOK 등의 알고리즘이 디스크 입출력이 많은 시스템에서 FCFS나 SSTF에 비해 효울적이다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"-3-다중-디스크-환경에서의-스캐줄링\" style=\"position:relative;\"><a href=\"#-3-%EB%8B%A4%EC%A4%91-%EB%94%94%EC%8A%A4%ED%81%AC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81\" aria-label=\" 3 다중 디스크 환경에서의 스캐줄링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 3. 다중 디스크 환경에서의 스캐줄링</h2>\n<ul>\n<li>다중 디스크를 사용\n<ul>\n<li>동일한 정보를 디스크에 중복 저장하여 인기있는 데이터를 여러 디스크에서 동시 서비스 할 수 있다.</li>\n<li>일부 디스크 오류에도 지속적 서비스가 가능하다.</li>\n<li>시스템 성능과 신뢰성을 동시에 향상시킨다.</li>\n</ul>\n</li>\n<li>다중 디스크 시스템에서는 작업을 수행할 디스크를 결정하는 문제도 처리해야한다.</li>\n<li>스케줄링 목적에 따라 요청 처리 디스크를 결정하는 기준이 달라진다.\n<ul>\n<li>탐색시간을 줄이면 헤드의 위치가 데이터와 가장 가까운 디스크를 선택</li>\n<li>거시적인 관점에서 디스크간의 부하균형 Load balancing 을 이루도록 스케줄링</li>\n</ul>\n</li>\n<li>최근에는 전력 소모를 줄이는 것이 중요한 목표이다.\n<ul>\n<li>일부 디스크에 요청을 집중시키고 나머지 디스크는 회전을 정지시키는 것이 효과적이다.</li>\n<li>일부 디스크만으로 요청 처리가 가능한 경우에서만 성립된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-4-디스크의-저전력-관리\" style=\"position:relative;\"><a href=\"#-4-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EC%A0%80%EC%A0%84%EB%A0%A5-%EA%B4%80%EB%A6%AC\" aria-label=\" 4 디스크의 저전력 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 4. 디스크의 저전력 관리</h2>\n<h3 id=\"1-비활성화-기법\" style=\"position:relative;\"><a href=\"#1-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-%EA%B8%B0%EB%B2%95\" aria-label=\"1 비활성화 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 비활성화 기법</h3>\n<ul>\n<li>전력 소모 기준으로 4가지 디스크의 상태\n<ul>\n<li>활동 active\n<ul>\n<li>현재 읽거나 쓰는 상태</li>\n</ul>\n</li>\n<li>공회전 idle\n<ul>\n<li>회전중이나 읽거나 쓰지는 않는 상태</li>\n</ul>\n</li>\n<li>준비 standby\n<ul>\n<li>회전하지 않지만 인터페이스가 활성화된 상태</li>\n</ul>\n</li>\n<li>휴면 sleep\n<ul>\n<li>회전하지도 않고 인터페이스도 비활성화된 상태</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>활동과 공회전을 활성상태, 준비와 휴먼을 비활성 상태로 부른다.</li>\n<li>비활성 상태는 회전이 일어나지 않으므로 요청이 없다면 비활성 상태가 절감 측면에서 좋다.</li>\n<li>하지만 각 상태로 전환할 때 부가적인 전력 및 시간이 소모된다. 따라서 매번 비활성 상태로 바꾸는 것은 오히려 비효율적일 수 있다.</li>\n<li>후속 요청까지 일정 시간 이상인 경우에만 회전을 정지 시키는 것이 전력 소모 절감에 좋다.\n<ul>\n<li>미래 요청 도착 시점과 간격을 잘 예측하는 것이 필요하다.</li>\n</ul>\n</li>\n<li>디스크 비활성 시점 결정하는 방법\n<ul>\n<li>시간기반 timeout based</li>\n<li>예측기반 prediction based</li>\n<li>확률기반 stochastic based</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-회전속도-조절-기법\" style=\"position:relative;\"><a href=\"#2-%ED%9A%8C%EC%A0%84%EC%86%8D%EB%8F%84-%EC%A1%B0%EC%A0%88-%EA%B8%B0%EB%B2%95\" aria-label=\"2 회전속도 조절 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 회전속도 조절 기법</h3>\n<ul>\n<li>Rotation Per Minute RPM을 가변적으로 조절하여 디스크 전력 소모를 줄인다.</li>\n</ul>\n<h3 id=\"3-디스크의-데이터-배치-기법\" style=\"position:relative;\"><a href=\"#3-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%B0%EC%B9%98-%EA%B8%B0%EB%B2%95\" aria-label=\"3 디스크의 데이터 배치 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 디스크의 데이터 배치 기법</h3>\n<ul>\n<li>디스크 내에 복제본 replica를 많이 만들어 헤드 위치에 가까운 복제본을 접근하도록 하여 응답시간과 전력 소모량을 절감한다.</li>\n<li>쓰기연산의 일관성 문제가 있을 수 있으나, 가까운 복제본에만 데이터를 쓰고, 나머지 복제본들은 주소 테이블에서 무효화 연산을 수행하여 쓰기연산 효율성을 높일 수 있다.</li>\n</ul>\n<h3 id=\"4-버퍼캐싱-및-사전인출-기법\" style=\"position:relative;\"><a href=\"#4-%EB%B2%84%ED%8D%BC%EC%BA%90%EC%8B%B1-%EB%B0%8F-%EC%82%AC%EC%A0%84%EC%9D%B8%EC%B6%9C-%EA%B8%B0%EB%B2%95\" aria-label=\"4 버퍼캐싱 및 사전인출 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 버퍼캐싱 및 사전인출 기법</h3>\n<ul>\n<li>디스크가 활성 상태일 때 헤드 위치로부터 가까운 데이터를 사전인출 prefetching 하여 디스크 비활성화 가능성을 높여 전력을 줄일 수 있다.</li>\n<li>데드라인을 꼭 지켜야하는 요청이 아니라면 디스크의 활성상태 여부에 따라 요청을 지연시키는 방식도 사용한다.</li>\n<li>통합하여, 디스크가 저전력 모드라면 입출력 처리를 최대한 지연시켰다가 디스크가 정상 전력 모드라면 사전인출을 공격적으로 해서 디스크의 상태 변화 횟수를 최소화하는 방법을 사용할 수 있다.</li>\n</ul>\n<h3 id=\"5-쓰기전략을-통한-저전력-디스크-기법\" style=\"position:relative;\"><a href=\"#5-%EC%93%B0%EA%B8%B0%EC%A0%84%EB%9E%B5%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%A0%80%EC%A0%84%EB%A0%A5-%EB%94%94%EC%8A%A4%ED%81%AC-%EA%B8%B0%EB%B2%95\" aria-label=\"5 쓰기전략을 통한 저전력 디스크 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 쓰기전략을 통한 저전력 디스크 기법</h3>\n<ul>\n<li>해당 디스크가 비활성 상태일 때는 쓰기를 하지 않고 디스크가 활성 상태일 때 쓰는 방식으로 전력 소모를 젉감한다.</li>\n<li>일단 블록들을 로그 디스크에 썼다가 디스크 활성 상태일 때 디스크에 쓰기연산을 수행하는 방식도 있다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\">🌩 들어가기 전</a></p>\n</li>\n<li>\n<p><a href=\"#-1-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0\">🌩 1. 디스크의 구조</a></p>\n</li>\n<li>\n<p><a href=\"#-2-%EB%94%94%EC%8A%A4%ED%81%AC--%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81\">🌩 2. 디스크  스캐줄링</a></p>\n<ul>\n<li><a href=\"#1-fcfs-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">1) FCFS 스케줄링</a></li>\n<li><a href=\"#2-sstf-shortest-seek-time-first-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">2) SSTF Shortest Seek Time First 스케줄링</a></li>\n<li><a href=\"#3-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3) SCAN 알고리즘</a></li>\n<li><a href=\"#4-c-scan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">4) C-SCAN 알고리즘</a></li>\n<li><a href=\"#5-look%EA%B3%BC-c-look-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">5) LOOK과 C-LOOK 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-3-%EB%8B%A4%EC%A4%91-%EB%94%94%EC%8A%A4%ED%81%AC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81\">🌩 3. 다중 디스크 환경에서의 스캐줄링</a></p>\n</li>\n<li>\n<p><a href=\"#-4-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EC%A0%80%EC%A0%84%EB%A0%A5-%EA%B4%80%EB%A6%AC\">🌩 4. 디스크의 저전력 관리</a></p>\n<ul>\n<li><a href=\"#1-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-%EA%B8%B0%EB%B2%95\">1) 비활성화 기법</a></li>\n<li><a href=\"#2-%ED%9A%8C%EC%A0%84%EC%86%8D%EB%8F%84-%EC%A1%B0%EC%A0%88-%EA%B8%B0%EB%B2%95\">2) 회전속도 조절 기법</a></li>\n<li><a href=\"#3-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%B0%EC%B9%98-%EA%B8%B0%EB%B2%95\">3) 디스크의 데이터 배치 기법</a></li>\n<li><a href=\"#4-%EB%B2%84%ED%8D%BC%EC%BA%90%EC%8B%B1-%EB%B0%8F-%EC%82%AC%EC%A0%84%EC%9D%B8%EC%B6%9C-%EA%B8%B0%EB%B2%95\">4) 버퍼캐싱 및 사전인출 기법</a></li>\n<li><a href=\"#5-%EC%93%B0%EA%B8%B0%EC%A0%84%EB%9E%B5%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%A0%80%EC%A0%84%EB%A0%A5-%EB%94%94%EC%8A%A4%ED%81%AC-%EA%B8%B0%EB%B2%95\">5) 쓰기전략을 통한 저전력 디스크 기법</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH9. 디스크 관리를 읽고 정리한 내용입니다 🙌 🌩 들어가기 전 컴퓨터 시스템의 대표적인 2차 저장장치이다. 메모리는 휘발성이지만 디스크는 데이터를 영구저장할 수 있다. 🌩 1. 디스크의 구조 디스크 외부에서 디스크를 일정크기 저장공간들로 이루어진 1차원 배열로 취급한다. 그 저장공간들을 논리 블록 logical block 이라고 한다. 디스크에 데이터가 저장될 때 논리블록 단위로 저장되고, 입출력도 논리블록 단위로 전송된다. 데이터 접근을 위해 배열처럼 블록 인덱스를 디스크에 전달하고 디스크 컨트롤러가 해당 논리블록의 물리적 위치를 찾아 요청 데이터에 대한 입출력 작업을 수행한다. 섹터 sector - 논리 블록이 저장된 물리적 위치 논리블록과 섹터는 1대1 매핑 디스크는 마그네틱 원판들로 구성되며 원판은 트랙, 트랙은 섹터로 나뉜다. 원판의 동일한 위치의 트랙들을 실린더라고 부른다. 디스크의 가장 바깥 실린더의 첫 트랙의 …","frontmatter":{"date":"October 18, 2021","title":"운영체제와 정보기술의 원리 - CH9. 디스크 관리","categories":"운영체제 책","author":"코다","emoji":"🧁"},"fields":{"slug":"/operating-system-8/"}},"next":{"id":"6d288200-6a5c-5a45-b4b9-a99ac34bd599","html":"<blockquote>\n<p>다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ <em>CH8. 가상 메모리</em>를 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"-들어가기-전\" style=\"position:relative;\"><a href=\"#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\" aria-label=\" 들어가기 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 들어가기 전</h2>\n<ul>\n<li>시분할 환경에서는 여러 프로세스가 동시에 메모리에 올라와서 수행되기 때문에 어떤 메모리에 어느 정도의 메모리를 할당해야할지가 문제이다.</li>\n<li>운영체제는 몇몀 프로그램에게 집중적으로 메모리를 할당하고 시간이 흐른다음 메모리를 회수하여 다른 프로그램에게 집중적으로 메모리를 할당하는 방식을 택한다.\n<ul>\n<li>프로그램마다 프로세스를 빠르게 수행하기 위해서 확보해야하는 최소한의 메모리 크기가 있기 때문이다.</li>\n</ul>\n</li>\n<li>프로세스의 전체가 올라가는 것이 아니라 스왑 영역에 일부분은 내려놓기 때문에 프로세스 입장에서 물리 메모리 크기 제약은 생각하지 않게 된다.</li>\n<li>또한 운영체제는 각 프로세스가 자기만 메모리에 올라간 것처럼 여겨질 수 있는 가장 메모리를 지원한다.\n<ul>\n<li>각자의 주소 공간을 가정하여 모든 프로세스가 0번지부터 시작한다.</li>\n<li>일부는 스왑 영역에 일부는 메모리에 있다.</li>\n</ul>\n</li>\n<li>프로세스의 주소 공간을 메모리로 적재하는 단위에 따라 가상메모리 기법은 요구 페이징 (demand paging) 방식과 요구 세그멘테이션 (demand segmentation) 으로 구현된다.\n<ul>\n<li>대부분 요구 페이징을 사용하고 요구 세그먼테이션은 페이지드 세그먼테이션 기법을 사용하는 경우에 많이 사용한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-1-요구-페이징\" style=\"position:relative;\"><a href=\"#-1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95\" aria-label=\" 1 요구 페이징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 1. 요구 페이징</h2>\n<ul>\n<li>당장 사용될 페이지만 메모리에 올리는 방식이다.</li>\n<li>요구 페이징은 특정 페이지에 대한 CPU의 요청이 들어온 후에 페이지를 메모리에 적재한다.</li>\n<li>장점\n<ul>\n<li>메모리 사용량 감소</li>\n<li>프로세스 전체를 메모리에 올리는 입출력 오버헤드 감소</li>\n<li>사용하지 않을 주소 영역의 입출력은 안해도 되므로 응답시간 단축</li>\n<li>시스템이 더 많은 프로세스를 수용할 수 있도록 함</li>\n<li>프로그램이 물리적 메모리의 용량 제약에서 벗어남</li>\n</ul>\n</li>\n<li>어떤 페이지가 메모리에 존재하고 어떤 페이지가 메모리에 존재하지 않은지 구별이 필요하다.\n<ul>\n<li>유효-무효 비트 (valid-invalid bit)를 두어 각 페이지가 메모리에 존재하는지 표시한다.</li>\n<li>페이지 테이블의 각 엔트리에 저장된다.</li>\n<li>프로세스 시작 전 모든 페이지의 유효-무효 비트는 무효값이다.</li>\n<li>특정 페이지가 참조되면 유효값으로 바뀌고 스왑 영역으로 쫓겨나면 다시 무효값이 된다.</li>\n</ul>\n</li>\n<li>유효-무효 비트는 페이지가 속한 영역을 프로세스가 사용하지 않는 경우도 표시한다.</li>\n<li>CPU 참조 페이지가 메모리에 올라와 있지 않아서 무효값인 경우를 페이지 부재 page fault 라고 한다.</li>\n</ul>\n<h3 id=\"1-요구-페이징의-페이지-부재-처리\" style=\"position:relative;\"><a href=\"#1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EC%B2%98%EB%A6%AC\" aria-label=\"1 요구 페이징의 페이지 부재 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 요구 페이징의 페이지 부재 처리</h3>\n<ul>\n<li>CPU가 무효 페이지에 접근하면 주소 변환 담당 하드웨어 MMU가 페이지 부재 트랩 page fault trap을 발생시킨다.</li>\n<li>제어권이 커널모드로 전환되어 운영체제의 페이지 부재 처리루틴 page fulat handler가 호출되어 다음 순서로 페이지 부재를 처리한다.\n<ol>\n<li>해당 페이지에 대한 접근이 적법한지 체크\n<ul>\n<li>사용되지 않는 주소 영역이거나 해당 페이지에 대한 접근 권한을 위반 protection violation한 경우 해당 프로세스를 종료</li>\n</ul>\n</li>\n<li>적법하다면 물리 메모리의 비어있는 프레임 frame을 할당받아 그 공간에 해당 페이지를 읽는다.\n<ul>\n<li>비어있는 프레임이 없다면 기존에 메모리에 올라와 있는 페이지 중 하나를 디스크로 쫓아낸다. (스왑 아웃)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>페이지 부재로 페이지를 메모리에 적재하기까지 오랜 시간이 걸리기 때문에 페이지 부재 프로세스는 봉쇄 상태가 된다. (CPU 제어권이 없어진다)\n<ul>\n<li>CPU 레지스터 상태 및 카운터값을 PCB에 저장한다.</li>\n</ul>\n</li>\n<li>디스크 입출력이 완료되고 인터럽트가 발생하면 페이지 테이블의 페이지 유효-무효 비트를 유효로 설정하고 봉쇄 상태 프로세스를 준비큐로 옮긴다.</li>\n</ul>\n<h3 id=\"2-요구-페이징의-성능\" style=\"position:relative;\"><a href=\"#2-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%EC%84%B1%EB%8A%A5\" aria-label=\"2 요구 페이징의 성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 요구 페이징의 성능</h3>\n<ul>\n<li><strong>페이지 부재의 발생 빈도</strong>로 성능에 가장 큰 영향을 미친다.</li>\n<li>페이지가 메모리에 있다면 메모리 접근 시간만 걸리지만 페이지 부재가 일어나면 많은 오버헤드가 동반된다.\n<ul>\n<li>페이지 부재 발생 처리 오버헤드</li>\n<li>스왑 아웃 오버헤드</li>\n<li>수왑 인 오버헤드</li>\n<li>프로세스 재시작 오버헤드</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-2-페이지-교체\" style=\"position:relative;\"><a href=\"#-2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4\" aria-label=\" 2 페이지 교체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 2. 페이지 교체</h2>\n<ul>\n<li>물리 메모리에 빈 프레임이 존재하지 않는다면 올라와 있는 페이를 스왑 아웃 시켜야하는데 그것을 페이지 교체라고 한다. page replacement</li>\n<li>어떤 페이지를 쫓아낼 것인지 교체 알고리즘 replacement algorithm으로 결정한다.\n<ul>\n<li>페이지 부재를 최소화 하는 것이 알고리즘의 목표이다.</li>\n</ul>\n</li>\n<li>페이지 교체 알고리즘은 페이지 참조열 page reference string에 대한 페이지 부재율을 계산하여 평가한다.</li>\n<li>페이지가 이미 메모리에 올라와 있으면 hit 아니면 페이지 부재이다.</li>\n</ul>\n<h3 id=\"1-최적-페이지-교체\" style=\"position:relative;\"><a href=\"#1-%EC%B5%9C%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4\" aria-label=\"1 최적 페이지 교체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 최적 페이지 교체</h3>\n<ul>\n<li>가장 먼 미래에 참조될 페이지를 쫓아내는 방법이다.</li>\n<li>빌레디 최적 알고리즘, MIN, OPT, Belady’s optimal algorithm 라고 부른다.</li>\n<li>미래에 어떤 페이지가 어떤 순서로 참조될지 미라 알고 있는 전제로 알고리즘을 운영하므로 실제 시스템에서 사용할 수 있는 알고리즘은 아니다. ⇒ 오프라인 알고리즘</li>\n<li>빌레디 최적 알고리즘은 실제 시스템에 활용되기 보다 다른 알고리즘의 성능의 상한선을 제공한다.</li>\n</ul>\n<h3 id=\"2-선입선출-알고리즘-fifo\" style=\"position:relative;\"><a href=\"#2-%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-fifo\" aria-label=\"2 선입선출 알고리즘 fifo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 선입선출 알고리즘 FIFO</h3>\n<ul>\n<li>페이지 교체 시 물리 메모리에 가장 먼저 올라온 페이지를 우선 내쫓는다.</li>\n<li>비효율적인 상황이 발생할 가능성이 있다. 물리 메모리 공간이 늘어나도 페이지 참조 순서에 따라서 성능이 더 나빠질 수도 있다.</li>\n<li>FIFO에서 물리 메모리 영역에 올라갔는데도 페이지 부재가 늘어난 상황을 FIFO 이상 현상 (FIFO anomaly)라고 한다.</li>\n</ul>\n<h3 id=\"3-lru-least-recently-used\" style=\"position:relative;\"><a href=\"#3-lru-least-recently-used\" aria-label=\"3 lru least recently used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) LRU Least Recently Used</h3>\n<ul>\n<li>메모리 참조 성향 중 시간지역성 (temporal locality) 라는 것이 있다.\n<ul>\n<li>최근 참조된 페이지가 가까운 미래에 다시 참조될 가능성이 높은 성질이다.</li>\n</ul>\n</li>\n<li>위 성질을 이용하여 페이지 교체 시 가장 오래전에 참조한 페이지를 쫓아낸다.</li>\n</ul>\n<h3 id=\"4-lfu-least-frequently-used\" style=\"position:relative;\"><a href=\"#4-lfu-least-frequently-used\" aria-label=\"4 lfu least frequently used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) LFU Least Frequently Used</h3>\n<ul>\n<li>페이지 참조 횟수로 교체 페이지를 결정한다.</li>\n<li>과거에 참조 횟수 reference count가 가장 적었던 페이지를 교체하도록 한다.</li>\n<li>여러개의 페이지가 후보라면 그 중 하나를 임의로 선정하며 주로 상대적으로 오래 전에 참조된 페이지를 스왑 아웃한다.</li>\n<li>LFU의 페이지 참조 횟수 계산 방식\n<ol>\n<li>Incache-LFU\n<ul>\n<li>페이지가 물리 메모리에 올라온 후부터 참조 횟수를 카운트 한다.</li>\n<li>메모리에서 쫓겨났다가 다시 올라오면 참조 횟수를 1부터 시작한다.</li>\n</ul>\n</li>\n<li>Perfect-LFU\n<ul>\n<li>그 페이지의 과거 참조 횟수를 모두 카운ㅌ한다.</li>\n<li>정확하나 메모리에서 쫓겨난 페이지 참조 기록까지 보관해야하는 오버헤드가 있다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>LFU는 LRU 보다 오랜 시간 동안의 참조 기록을 반영하고 장기적 시간 규모의 참조 성향을 고려한다.</li>\n<li>하지만 LFU는 시간에 따른 페이지 참조 변화를 반영하지 못하며 구현이 LRU보다 복잡하다.</li>\n</ul>\n<h3 id=\"5-클럭-알고리즘\" style=\"position:relative;\"><a href=\"#5-%ED%81%B4%EB%9F%AD-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"5 클럭 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 클럭 알고리즘</h3>\n<ul>\n<li>LRU, LFU 는 참조 시각, 참조 횟수를 소프트웨어적으로 유지하고 비교하므로 알고리즘 운영 비용이 발생한다.</li>\n<li>클럭 알고리즘은 하드웨어의 지원으로 알고리즘의 운영 오버헤드를 줄인 것이다.</li>\n<li>클럭 알고리즘은 LRU를 근사시킨 알고리즘으로 NUR Not Used Recently 또는 NRU Not recently Used 라고 불린다.</li>\n<li>오래전에 참조된 페이지 중 하나를 교체하는데 가장 오래된 것은 보장할 수 없다.</li>\n<li>하드웨어의 지원이 있기 때문에 LRU에 비해 페이지 관리가 빠르고 효율적이다.\n<ul>\n<li>대부분이 클럭 알고리즘으로 페이지 교체 알고리즘을 사용한다.</li>\n</ul>\n</li>\n<li>클럭알고리즘은 페이지 프레임의 참조비트를 순차적으로 조사한다.\n<ul>\n<li>참조비트는 각 프레임에 존재하며 해당 프레임의 페이지가 참조될 때 하드웨어로 1로 자동 세팅된다.</li>\n</ul>\n</li>\n<li>클럭 알고리즘은 참조비트가 1인 페이지를 0으로 바꾸고 지나간다. 참조비트가 0인 페이지는 교체한다.\n<ul>\n<li>즉, 시간을 한바퀴 돌 동안 참조되지 않은 페이지들을 교체하는 것이다.</li>\n</ul>\n</li>\n<li>특정 클럭 주기동안 참조된 페이지를 메모리에 유지시켜둠으로 페이지 부재를 줄이기 때문에 2차 기회 알고리즘 second chance algorithm이라고 하기도 한다.</li>\n</ul>\n<br>\n<h2 id=\"-3-페이지-프레임의-할당\" style=\"position:relative;\"><a href=\"#-3-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%94%84%EB%A0%88%EC%9E%84%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\" 3 페이지 프레임의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 3. 페이지 프레임의 할당</h2>\n<ul>\n<li>어느 프로세스에게  얼만큼의 페이지 프레임을 할당할지 결정한다.</li>\n<li>기본적인 할당 알고리즘 allocation algorithm은 다음 3가지 이다.\n<ol>\n<li>균등할당 equal allocation - 모든 프로세스에게 페이지 프레임을 균일하게 할당</li>\n<li>비례할당 proportional allocation - 프로세스의 크기에 비례해 프레임 할당</li>\n<li>우선순위 할당 priority allocation - 프로세스의 우선순위에 따라 프레임 할당\n<ul>\n<li>당장 CPU에서 실행될 프로세스에게 더 많은 페이지 프레임을 할당</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>하지만 할당 알고리즘으로 프로세스 페이지 참조 특성을 제대로 반영하지 못할 수도 있다.\n<ul>\n<li>현재 수행중인 프로세스가 지나치게 많으면 프로세스당 할당되는 메모리가 과도하게 적다.</li>\n<li>프로세스를 정상적으로 수행하려면 일정 수준 이상의 페이지 프레임을 각 프로세스에게 할당해야한다. (여러 프레임을 동시에 참조하기 때문이다. 코드, 데이터 영역 등등)</li>\n<li>반복문인 경우 관련 페이지를 한꺼번에 올리는 것이 성능에 좋다.</li>\n</ul>\n</li>\n<li>종합적으로 각 프로세스의 프레임 수를 결정할 필요가 있다.</li>\n</ul>\n<br>\n<h2 id=\"-4-전역교체와-지역교체\" style=\"position:relative;\"><a href=\"#-4-%EC%A0%84%EC%97%AD%EA%B5%90%EC%B2%B4%EC%99%80-%EC%A7%80%EC%97%AD%EA%B5%90%EC%B2%B4\" aria-label=\" 4 전역교체와 지역교체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 4. 전역교체와 지역교체</h2>\n<ul>\n<li>교체 페이지를 결정할 때 교체 대상 프레임의 범위에 따라서 교체 방법을 전역교체 global replacement, 지역교체  local replacement로 구분한다.</li>\n<li>전역 교체 - 모든 페이지 프레임이 교체 대상\n<ul>\n<li>다른 프로세스에게 할당된 프레임도 빼앗을 수 있다.</li>\n<li>프로세스별 프레임 할당량이 조절될 수 있다.</li>\n</ul>\n</li>\n<li>지역 교체 - 현재 수행 중인 프로세스에게 할당된 프레임 내에서만 교체 대상을 선정\n<ul>\n<li>지역 교체는 프로세스마다 프레임을 미리 할당한다.</li>\n<li>LRU, LFU 알고리즘을 프로세스별로 독자적 운영하면 지역교체가 된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-5-스레싱-thrashing\" style=\"position:relative;\"><a href=\"#-5-%EC%8A%A4%EB%A0%88%EC%8B%B1-thrashing\" aria-label=\" 5 스레싱 thrashing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 5. 스레싱 thrashing</h2>\n<ul>\n<li>프로세스가 원활하게 수행되기 위해서는 일정 수준 이상의 페이지 프레임을 할당받아야한다.\n<ul>\n<li>집중적으로 참조되는 페이지를 한꺼번에 적재하지 않으면 페이지 부재율이 높아진다.</li>\n<li>입출력이 많아지므로 CPU 이용률이 떨어진다.</li>\n<li>위 현상을 스레싱이라고 한다.</li>\n</ul>\n</li>\n<li>운영체제는 CPU 이용률이 낮다는 것은 메모리에 올라온 프로세스의 수가 적기 때문이라고 판단한다. 따라서 CPU 이용률이 떨어지면 운영체제는 메모리에 올라와 있는 프로세스 수를 늘린다.</li>\n<li>다중 프로그래밍의 정도 Multi-programming Degree MPD 라고 부른다.\n<ul>\n<li>CPU 이용률이 낮으면 운영체제는 MPD를 높인다.</li>\n</ul>\n</li>\n<li>과도하게 MPD가 높아지면 각 프로세스에게 할당되는 메모리가 줄어들고 필요한 최소한 프레임 할당이 어렵다.</li>\n<li>따라서 페이지 부재가 더 빈번하게 발생하게 되고 디스크 I/O 작업이 많이 일어나며서 문맥교환으로 다른 프로세스에게 CPU를 넘긴다.</li>\n<li>반복되면서 CPU는 문맥교환과 페이지 부재 처리를 하느라 바빠지고 CPU이용률이 떨어지게 된다.\n<ul>\n<li>그러면 또 운영체제는 메모리에 프로세스를 더욱 올려 상황을 악화시킨다.</li>\n</ul>\n</li>\n<li>이것을 방지하기 위해 MPD를 조절하는 알고리즘으로 <strong>1) 워킹셋 알고리즘 2) 페이지 부재 빈도 알고리즘</strong>이 있다.</li>\n</ul>\n<h3 id=\"1-워킹셋-알고리즘-working-set-algorithm\" style=\"position:relative;\"><a href=\"#1-%EC%9B%8C%ED%82%B9%EC%85%8B-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-working-set-algorithm\" aria-label=\"1 워킹셋 알고리즘 working set algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 워킹셋 알고리즘 working-set algorithm</h3>\n<ul>\n<li>지역성 집합 locality set: 프로세스가 특정 주소 영역을 집중적으로 참조하는 경향</li>\n<li>워킹셋 알고리즘은 이런 지역성 집합이 메모리에 동시에 올라갈 수 있도록 보장해주는 메모리 관리 알고리즘이다.</li>\n<li>한꺼번에 메모리에 올라와야하는 페이지 집합을 working set으로 정의하여 한꺼번에 메모리에 올라갈 수 있을 때만 메모리를 할당한다.\n<ul>\n<li>그렇지 않다면 프로세스에 할당된 페이지 프레임을 모두 반납시키고 프로세스 전체를 스왑아웃시킨다.</li>\n</ul>\n</li>\n<li>다중 프로그래밍의 정도를 조절하고 스레싱을 방지한다.</li>\n<li>구현 방법\n<ul>\n<li>한꺼번에 올라갈 워킹셋을 정의하기 위해 워킹셋 윈도우 working-set window를 사용한다.</li>\n<li>워킹셋 윈도우는 특정 시간동안 참조된 페이지의 중복제거된 집합이다. 그 시간 이후 워킹셋에 포함된 페이지만 메모리에 유지되고 아닌 페이지는 메모리에서 쫓겨난다.</li>\n<li>워킹셋의 크기의 합이 프레임의 수보다 크면 일부 프로세스를 스왑 아웃 시켜 프레임에 워킹셋이 모두 올라갈 수 있도록 보장한다.\n<ul>\n<li>MPD 를 줄인다.</li>\n</ul>\n</li>\n<li>만일 프레임이 남으면 스왑 아웃 프로세스를 다시 메모리에 올려 워킹셋을 할당한다.\n<ul>\n<li>MPD를 증가시킨다.</li>\n</ul>\n</li>\n<li>윈도우 크기의 결정이 중요하다.\n<ul>\n<li>너무 작으면 지역성 집합 수용이 어렵댜.</li>\n<li>크면 MPD가 감소하여 CPU 이용률이 낮아질 수 잇다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-페이지-부재-빈도-알고리즘-pff-page-fault-frequency\" style=\"position:relative;\"><a href=\"#2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EB%B9%88%EB%8F%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-pff-page-fault-frequency\" aria-label=\"2 페이지 부재 빈도 알고리즘 pff page fault frequency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 페이지 부재 빈도 알고리즘 PFF page fault frequency</h3>\n<ul>\n<li>프로세스의 페이지 부재율을 주기적으로 조사하여 근거해 프로세스 할당 메모리를 동적으로 조절한다.</li>\n<li>어떤 프로세스의 페이지 부재율이 시스템의 상한값을 넘으면 이 프로세스에게 할당된 프레임 수가 부족하다고 판단한다.\n<ul>\n<li>프레임을 추가로 할당한다.</li>\n</ul>\n</li>\n<li>추가로 할당할 프레임이 없으면 일부 프로세스를 스왑 아웃시켜 프로세스의 수를 조절한다.</li>\n<li>부재율이 하한값 이하로 떨어지면 지나치게 많은 프레임을 할당받은 것으로 간주하고 할당 프레임 수를 줄인다.</li>\n<li>이렇게 다 조절 후 프레임이 남으면 스왑 아웃 프로세스에게 프레임을 할당한다.\n<ul>\n<li>MPD 증가</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\">🌩 들어가기 전</a></p>\n</li>\n<li>\n<p><a href=\"#-1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95\">🌩 1. 요구 페이징</a></p>\n<ul>\n<li><a href=\"#1-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EC%B2%98%EB%A6%AC\">1) 요구 페이징의 페이지 부재 처리</a></li>\n<li><a href=\"#2-%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%EC%84%B1%EB%8A%A5\">2) 요구 페이징의 성능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4\">🌩 2. 페이지 교체</a></p>\n<ul>\n<li><a href=\"#1-%EC%B5%9C%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4\">1) 최적 페이지 교체</a></li>\n<li><a href=\"#2-%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-fifo\">2) 선입선출 알고리즘 FIFO</a></li>\n<li><a href=\"#3-lru-least-recently-used\">3) LRU Least Recently Used</a></li>\n<li><a href=\"#4-lfu-least-frequently-used\">4) LFU Least Frequently Used</a></li>\n<li><a href=\"#5-%ED%81%B4%EB%9F%AD-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">5) 클럭 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-3-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%94%84%EB%A0%88%EC%9E%84%EC%9D%98-%ED%95%A0%EB%8B%B9\">🌩 3. 페이지 프레임의 할당</a></p>\n</li>\n<li>\n<p><a href=\"#-4-%EC%A0%84%EC%97%AD%EA%B5%90%EC%B2%B4%EC%99%80-%EC%A7%80%EC%97%AD%EA%B5%90%EC%B2%B4\">🌩 4. 전역교체와 지역교체</a></p>\n</li>\n<li>\n<p><a href=\"#-5-%EC%8A%A4%EB%A0%88%EC%8B%B1-thrashing\">🌩 5. 스레싱 thrashing</a></p>\n<ul>\n<li><a href=\"#1-%EC%9B%8C%ED%82%B9%EC%85%8B-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-working-set-algorithm\">1) 워킹셋 알고리즘 working-set algorithm</a></li>\n<li><a href=\"#2-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B6%80%EC%9E%AC-%EB%B9%88%EB%8F%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-pff-page-fault-frequency\">2) 페이지 부재 빈도 알고리즘 PFF page fault frequency</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 17, 2021","title":"운영체제와 정보기술의 원리 - CH8. 가상 메모리","categories":"운영체제 책","author":"코다","emoji":"🧁"},"fields":{"slug":"/operating-system-7/"}},"prev":{"id":"c5e44e8c-2ca4-5cbc-ae8a-04e3d2e1640a","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>JPA를 <a href=\"https://github.com/woowacourse-teams/2021-pick-git\">프로젝트</a>에서 사용하면서 연관 엔티티를 호출할 때 생기는 N+1을 해결한 경험이 있다. 이때 해결 방법으로 hibernate의 <code class=\"language-text\">default_batch_fetch_size</code>를 yml에 설정하여 해결했었다.\n<ul>\n<li><a href=\"https://yjksw.github.io/jpa-query-bug/\">참고링크</a></li>\n<li><a href=\"https://yjksw.github.io/jpa-query-bug/#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">해결부분</a></li>\n</ul>\n</li>\n<li>프로젝트를 전반적으로 체크하던 와중에 위 설정에 의한 in query가 실행되지 않고 여전히 N+1 문제가 발생하는 부분을 발견하였다.</li>\n<li>해당 현상을 공유하기 위해 글을 작성한다. (여전히 이유는 못 찾았다 😢)</li>\n</ul>\n<br>\n<h2 id=\"-code-classlanguage-texthiberbatedefault_batch_fetch_sizecode\" style=\"position:relative;\"><a href=\"#-code-classlanguage-texthiberbatedefault_batch_fetch_sizecode\" aria-label=\" code classlanguage texthiberbatedefault_batch_fetch_sizecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 <code class=\"language-text\">hiberbate.default_batch_fetch_size</code></h2>\n<p>우선 간단하게 위 설정에 대해서 짚고 넘어가보자.</p>\n<ul>\n<li>설정할 수 있는 방법은 두 가지 이다.\n<ul>\n<li>\n<p><code class=\"language-text\">@BatchSize(size={sizeNum})</code> 어노테이션 활용</p>\n<ul>\n<li>클래스, 메소드, 필드 레벨에서 사용할 수 있다.</li>\n<li>해당 사이즈 만큼의 상위 엔티티 id가 in query로 나간다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">spring.jpa.properties.hibernate.default_batch_fetch_size={batchSize}</code>를 application.properties에 지정</p>\n<ul>\n<li>전역적으로 적용이 되어서 상위 엔티티의 lazy loading된 하위 엔티티를 한꺼번에 in query로 로딩한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Hibernate javadocs 공식 문서에 다음과 같이 서술한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Defines</span> size <span class=\"token keyword\">for</span> batch loading of collections or lazy <span class=\"token class-name\"><span class=\"token namespace\">entities<span class=\"token punctuation\">.</span></span> For</span> example<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Entity</span>\n    <span class=\"token annotation punctuation\">@BatchSize</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\nwill initialize up <span class=\"token keyword\">to</span> <span class=\"token number\">100</span> lazy <span class=\"token class-name\">Product</span> entity proxies at a time<span class=\"token punctuation\">.</span>\n        <span class=\"token annotation punctuation\">@OneToMany</span>\n        <span class=\"token annotation punctuation\">@BatchSize</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>\n        <span class=\"token class-name\">Set</span> <span class=\"token function\">getProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nwill initialize up <span class=\"token keyword\">to</span> <span class=\"token number\">5</span> lazy collections of products at a time</code></pre></div>\n<ul>\n<li>즉, 속한 collection이나 lazy entities 들을 한꺼번에 batch로 로딩해준다.</li>\n<li>Batch로 로딩할 경우 하나의 쿼리로 연관 엔티티를 한꺼번에 가지고 올 수 있어서 성능이 향상된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>다음 <a href=\"https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html\">Hibernate Document</a>를 확인해보자.</p>\n<blockquote>\n<p>@BatchSize specifies a “batch size” for fetching instances of this class by identifier. Not yet loaded instances are loaded batch-size at a time (default 1).</p>\n</blockquote>\n<ul>\n<li><em>not yet loaded instance</em>를 batch로 로딩할 수 있는 설정이라고 한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-본-프로젝트-문제-상황\" style=\"position:relative;\"><a href=\"#-%EB%B3%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9\" aria-label=\" 본 프로젝트 문제 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 본 프로젝트 문제 상황</h2>\n<h3 id=\"entity-구조\" style=\"position:relative;\"><a href=\"#entity-%EA%B5%AC%EC%A1%B0\" aria-label=\"entity 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 구조</h3>\n<ul>\n<li>\n<p>다소 복잡하지만 우리 프로젝트에서의 상황을 살펴보자.</p>\n</li>\n<li>\n<p>조금 이해하기 쉽게 프로젝트의 일부 엔티티 관계를 그림으로 표현해 보았다.</p>\n<p align=\"center\"><img width=\"35%\" src=\"https://user-images.githubusercontent.com/63405904/138268405-8ada5b7b-278a-4c6f-971c-9fddc4e5c44f.png\"></p>\n<ul>\n<li>사용자는 포트폴리오를 만들고 본인이 진행한 여러 프로젝트들을 포함시킬 수 있다.</li>\n<li>각 프로젝트마다 프로젝트를 나타내는 태그를 여러개 추가할 수 있다. 예를 들어 Java, Web 등등의 태그로 키워드를 나열할 수 있다.</li>\n<li>프로젝트와 태그는 다대다 관계이기 때문에 중간 테이블인 ProjectTag로 연결되어 있다.</li>\n<li>ProjectTag는 프로젝트 id와 태그 id를 가지고 있다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>코드가 더 편한 사람들을 위해 Entity를 추가해본다. 편의를 위해 getter, 생성자, 다른 메소드와 관련 없는 필드들은 생략한다.</p>\n<ol>\n<li>\n<p>Portfolio.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Portfolio</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 다른 필드 생략 </span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n    mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"portfolio\"</span><span class=\"token punctuation\">,</span>\n    fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span>\n    cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n    orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Project</span><span class=\"token punctuation\">></span></span> projects<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Project.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Project</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 다른 필드 생략 </span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProjectTag</span><span class=\"token punctuation\">></span></span> tags<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>ProjectTag.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>\n    uniqueConstraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@UniqueConstraint</span><span class=\"token punctuation\">(</span>columnNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"tag_id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"project_id\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectTag</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"tag_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Tag</span> tag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"project_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Project</span> project<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Tag.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tag</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> unique <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> MAX_TAG_LENGTH<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h3 id=\"문제상황\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9\" aria-label=\"문제상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제상황</h3>\n<ul>\n<li>동일한 Assembler(같은 코드)로 응답 DTO를 만들때 포트폴리오를 조회할 때는 in 쿼리로 나가고, 포트폴리오를 업데이트 할 때는 n+1 쿼리가 나간다.\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">PortfolioResponseDto</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDto</span> userDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Portfolio</span><span class=\"token punctuation\">></span></span> portfolio <span class=\"token operator\">=</span> portfolioRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findPortfolioByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userDto<span class=\"token punctuation\">.</span><span class=\"token function\">isGuest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchPortfolioException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> portfolioDtoAssembler<span class=\"token punctuation\">.</span><span class=\"token function\">toPortfolioResponseDto</span><span class=\"token punctuation\">(</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> portfolioRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Portfolio</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default_batch_fetch_size로 인한 In 쿼리 수행 </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">PortfolioResponseDto</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PortfolioRequestDto</span> portfolioRequestDto<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDto</span> userDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Portfolio</span> portfolio <span class=\"token operator\">=</span> portfolioRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>portfolioRequestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchPortfolioException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userDto<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">isOwnedBy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnauthorizedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>portfolioDtoAssembler<span class=\"token punctuation\">.</span><span class=\"token function\">toPortfolio</span><span class=\"token punctuation\">(</span>portfolioRequestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> portfolioDtoAssembler<span class=\"token punctuation\">.</span><span class=\"token function\">toPortfolioResponseDto</span><span class=\"token punctuation\">(</span>portfolio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Tag를 lazy loading 할때 n+1 쿼리 발생</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><a href=\"https://github.com/woowacourse-teams/2021-pick-git/blob/develop/backend/pick-git/src/main/java/com/woowacourse/pickgit/portfolio/application/PortfolioService.java\">전체 코드보기</a></li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>쿼리 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// read 메소드 실행 시 </span>\n<span class=\"token class-name\">Hibernate</span><span class=\"token operator\">:</span> \nselect\n    tag0_<span class=\"token punctuation\">.</span>id as id1_13_0_<span class=\"token punctuation\">,</span>\n    tag0_<span class=\"token punctuation\">.</span>name as name2_13_0_ \nfrom\n    tag tag0_ \nwhere\n    tag0_<span class=\"token punctuation\">.</span>id in <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// update 메소드 실행 시 </span>\n<span class=\"token class-name\">Hibernate</span><span class=\"token operator\">:</span> \nselect\n    tag0_<span class=\"token punctuation\">.</span>id as id1_13_0_<span class=\"token punctuation\">,</span>\n    tag0_<span class=\"token punctuation\">.</span>name as name2_13_0_ \nfrom\n    tag tag0_ \nwhere\n    tag0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span><span class=\"token operator\">?</span>\n<span class=\"token class-name\">Hibernate</span><span class=\"token operator\">:</span> \n    select\n        tag0_<span class=\"token punctuation\">.</span>id as id1_13_0_<span class=\"token punctuation\">,</span>\n        tag0_<span class=\"token punctuation\">.</span>name as name2_13_0_ \n    from\n        tag tag0_ \n    where\n        tag0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span><span class=\"token operator\">?</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>위 쿼리가 수행되는 <code class=\"language-text\">Portfolio -> PortfolioResponseDto</code> 로 변환시키는 assembler의 코드는 다음과 같다.\n<ul>\n<li>\n<p>필드가 많아서 당황스럽겠지만 Project 부분만 보고 감만 잡으면 된다. (* 표시해둔 곳)</p>\n</li>\n<li>\n<p>간단히 말하면 get을 통해 lazy loading 하위 엔티티의 값을 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">PortfolioResponseDto</span> <span class=\"token function\">toPortfolioResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Portfolio</span> portfolio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PortfolioResponseDto</span><span class=\"token punctuation\">(</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">isProfileImageShown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getProfileImageUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getIntroduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getCreatedAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdatedAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">toContactResponsesDto</span><span class=\"token punctuation\">(</span>portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getContacts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">toProjectResponsesDto</span><span class=\"token punctuation\">(</span>portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getProjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// *</span>\n        <span class=\"token function\">toSectionResponsesDto</span><span class=\"token punctuation\">(</span>portfolio<span class=\"token punctuation\">.</span><span class=\"token function\">getSections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProjectResponseDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toProjectResponsesDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Projects</span> projects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// *</span>\n    <span class=\"token keyword\">return</span> projects<span class=\"token punctuation\">.</span><span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">toProjectResponseDto</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ProjectResponseDto</span> <span class=\"token function\">toProjectResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Project</span> project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TagResponseDto</span><span class=\"token punctuation\">></span></span> tags <span class=\"token operator\">=</span> project<span class=\"token punctuation\">.</span><span class=\"token function\">getTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">toTagResponseDto</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// *</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProjectResponseDto</span><span class=\"token punctuation\">(</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getStartDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getEndDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getImageUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        project<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tags\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">TagResponseDto</span> <span class=\"token function\">toTagResponseDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProjectTag</span> tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// *</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TagResponseDto</span><span class=\"token punctuation\">(</span>\n        tag<span class=\"token punctuation\">.</span><span class=\"token function\">getTagId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tag<span class=\"token punctuation\">.</span><span class=\"token function\">getTagName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-이상현상-들여다보기\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%EC%83%81%ED%98%84%EC%83%81-%EB%93%A4%EC%97%AC%EB%8B%A4%EB%B3%B4%EA%B8%B0\" aria-label=\" 이상현상 들여다보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 이상현상 들여다보기</h2>\n<ul>\n<li>프로젝트 코드로 들여다보기는 복잡하여 파악하기 어려움으로 동일한 상황을 간단한 테스트코드로 재현해보았다.</li>\n</ul>\n<h3 id=\"entity-구조-1\" style=\"position:relative;\"><a href=\"#entity-%EA%B5%AC%EC%A1%B0-1\" aria-label=\"entity 구조 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 구조</h3>\n<ol>\n<li>\n<p>Member.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getter 및 생성자 생략</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n<li>\n<p>Team.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getter 및 생성자 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h3 id=\"상황-재현\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%99%A9-%EC%9E%AC%ED%98%84\" aria-label=\"상황 재현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상황 재현</h3>\n<ul>\n<li>\n<p>먼저 application.properties에 다음 설정을 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\"><pre class=\"language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.jpa.properties.hibernate.default_batch_fetch_size</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">10</span></code></pre></div>\n</li>\n<li>\n<p>다음은 In 쿼리가 정상동작하는 테스트코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Member 리스트 조회 시 Team을 lazy loading 할 때 in 쿼리 Team이 한꺼번에 조회된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">team_inquery_working</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TeamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TeamB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> member1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> member2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member1<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member2<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    members<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Member 를 조회하는 쿼리가 생성된다.</span>\n    members<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">2L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> teamNames <span class=\"token operator\">=</span> members<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>member <span class=\"token operator\">-></span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Team 을 조회하는 쿼리가 in 쿼리로 수행된다.</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>[실행 Query]</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hibernate: \nselect\n    team0_.id as id1_1_0_,\n    team0_.name as name2_1_0_ \nfrom\n    team team0_ \nwhere\n    team0_.id in (\n        ?, ?\n    )</code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>다음은 프로젝트 상황은 동일하게 재현한 in 쿼리가 수행되지 않는 테스트코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team을 initialize 할 때 in 쿼리가 수행되지 않는다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">team_inquery_notWorking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">Team</span> savedTeamA <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TeamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> savedTeamB <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TeamB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Member</span> member1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> member2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedTeamA<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Team은 프록시 객체다.</span>\n    <span class=\"token class-name\">Team</span> teamB <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedTeamB<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member1<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member2<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    members<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 영속성 컨텍스트에 있는 Member를 로딩한다.</span>\n    members<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token number\">2L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> teamNames <span class=\"token operator\">=</span> members<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>member <span class=\"token operator\">-></span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 각 멤버의 개수만큼 team을 select하는 쿼리를 실행한다.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>[실행 Query]</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hibernate: \n    select\n        team0_.id as id1_1_0_,\n        team0_.name as name2_1_0_ \n    from\n        team team0_ \n    where\n        team0_.id=?\n\nHibernate: \n    select\n        team0_.id as id1_1_0_,\n        team0_.name as name2_1_0_ \n    from\n        team team0_ \n    where\n        team0_.id=?</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">findAll()</code>로 전체 멤버를 조회할 수 있지만, 그렇다면 두번째 테스트코드의 경우 모든 멤버가 영속성 컨텍스트에 있음에도 불구하고 영속성 컨텍스트는 전체 데이터인지 알 수 없기 때문에 Member를 조회하는 쿼리를 날린다.</p>\n</li>\n<li>\n<p>영속성 컨텍스트에 이미 있는 엔티티를 가져온다는 것을 확인하기 위해 Member를 <code class=\"language-text\">findById()</code>로 가져왔다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"-help\" style=\"position:relative;\"><a href=\"#-help\" aria-label=\" help permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 Help</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">default_batch_fetch_size</code> 설정이 먹히지 않는 이유로 <strong>해당 엔티티 (대상 엔티티 혹은 상위 엔티티)가 영속성 컨텍스트에서 관리되지 않을 경우</strong>를 생각해볼 수 있다. 위 개념에서 다루었듯이 아직 초기화 되지 않은 collections 혹은 lazy products에 대해서 한꺼번에 로딩해주는 역할을 하기 때문이다. 만일 하위 엔티티가 영속성 컨텍스트에서 관리되고 있지 않다면 로딩할 프록시 또한 없을 것이고 상위 엔티티가 관리되고 있지 않다면 연관관계를 파악할 수 없으므로 in 쿼리에 인자로 보낼 id 값이 없을 것이다.</p>\n</li>\n<li>\n<p>위 테스트 코드를 보았을 때 첫번째와 두번째 상황을 요약해보자.</p>\n<ul>\n<li>\n<p>첫번째 테스트코드 - in 쿼리 동작</p>\n<ul>\n<li>Member가 <code class=\"language-text\">findById</code>로 조회되고 Team은 프록시 객체이다. (Lazy loading)</li>\n<li>Member 리스트의 팀 목록을 조회할 때 Team의 Id가 in 쿼리로 들어간다.</li>\n</ul>\n</li>\n<li>\n<p>두번째 테스트코드 - in 쿼리 동작 안함</p>\n<ul>\n<li>Team은 이미 존재한다.</li>\n<li>새로운 Member를 생성하고 Team을 <code class=\"language-text\">em.getReference()</code>를 통해 Team의 프록시 객체를 Member의 Team을 지정한다. 이후 <code class=\"language-text\">save()</code>를 통해서 Member 엔티티를 저장하고 flush 하여 데이터베이스에 반영한다.</li>\n<li><code class=\"language-text\">findAll()</code>를 통헤 멤버 List를 가져온다. 이때 영속성 컨텍스트에 있는 Member가 조회된다.</li>\n<li>해당 Member의 Team은 <code class=\"language-text\">em.getReference()</code>로 조회된 프록시 객체이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>다음과 같은 이유로 두 테스트코드가 같은 상황이라고 생각한다.</p>\n<ul>\n<li>Member가 영속성 컨텍스트에 실제 엔티티로 관리되고 있다는 것.</li>\n<li>Member와 연관된 Team 엔티티가 모두 프록시 객체이며 영속성 컨텍스트에 있다는 것.</li>\n<li>연관관계는 두 경우 모두 잘 매핑이 되어 있다는 것.\n<ul>\n<li>두번째 테스트코드의 마지막 <code class=\"language-text\">flush()</code> 이후 <code class=\"language-text\">clear()</code>를 통해 영속성 컨텍스를 한번 초기화 하면 in 쿼리가 정상동작한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>실제 조회된 Member 리스트의 내부를 디버깅해 들여다 보았다.</p>\n<ul>\n<li>\n<p>In query가 정상 동작하는 members</p>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/138413600-1ec9f61a-5161-48a0-9919-fdbbcb1f88f7.png\"></p>\n</li>\n<li>\n<p>In query가 동작하지 않는 members</p>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/138413853-021c8bab-ada8-49f5-9497-bac041da22ce.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>디버깅했을 때 두가지 상태가 모두 똑같지만 하나는 in 쿼리가 동작하고 하나는 동작하지 않는 이유를 결국 못 찾았다. 😢</li>\n<li>우선은 현상만 기록하고 계속 알아볼 예정이다 !!</li>\n<li>혹시 아시는 분은 .. 연락주세요.. 깃헙이나 이메일, 댓글 아무거나 환영 !! 🎉</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"apiref.com/hibernate5/BatchSize.html\">apiref.com/hibernate5/BatchSize.html</a></li>\n<li><a href=\"https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html\">https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html</a></li>\n<li><a href=\"https://wckhg89.tistory.com/10\">https://wckhg89.tistory.com/10</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#-hiberbatedefault_batch_fetch_size\">🌩 <code class=\"language-text\">hiberbate.default_batch_fetch_size</code></a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%B3%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9\">🌩 본 프로젝트 문제 상황</a></p>\n<ul>\n<li><a href=\"#entity-%EA%B5%AC%EC%A1%B0\">Entity 구조</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9\">문제상황</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9D%B4%EC%83%81%ED%98%84%EC%83%81-%EB%93%A4%EC%97%AC%EB%8B%A4%EB%B3%B4%EA%B8%B0\">🌩 이상현상 들여다보기</a></p>\n<ul>\n<li><a href=\"#entity-%EA%B5%AC%EC%A1%B0-1\">Entity 구조</a></li>\n<li><a href=\"#%EC%83%81%ED%99%A9-%EC%9E%AC%ED%98%84\">상황 재현</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-help\">🌩 Help</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 21, 2021","title":"하이버네이트 default-batch-fetch-size 가 안되는 현상 😢","categories":"JPA 프로젝트","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-default-batch-fetch-size-not-working/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/operating-system-8/","nextSlug":"/operating-system-7/","prevSlug":"/jpa-default-batch-fetch-size-not-working/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}