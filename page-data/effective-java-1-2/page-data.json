{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/effective-java-1-2/",
    "result": {"data":{"cur":{"id":"8a58cdd7-21e7-58d3-8793-b9ad53913f5d","html":"<blockquote>\n<p>이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌</p>\n</blockquote>\n<h2 id=\"-아이템-1-생성자-대신-정적-팩터리-메서드를-고려하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 1 생성자 대신 정적 팩터리 메서드를 고려하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 1] 생성자 대신 정적 팩터리 메서드를 고려하라</h2>\n<h3 id=\"정적-팩터리-메서드static-factory-method란\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9Cstatic-factory-method%EB%9E%80\" aria-label=\"정적 팩터리 메서드static factory method란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드(static factory method)란?</h3>\n<p>해당 클래스의 인스턴스를 반환하는 정적 메서드이다.</p>\n<p>예를 들어 다음 박싱 클래스를 반환하는 정적 메서드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> b<span class=\"token operator\">?</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>TRUE <span class=\"token operator\">:</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 챕터에서 추천하는 바는 public 생성자 대신 정적 팩터리 메서드를 고려해보라는 것이다. 정적 팩터리 메서드는 장단점이 있다. 따라서 항상 정적 팩터리 메서드가 더 우수하다는 것은 아니다. 다만 습관적으로 public 생성자를 사용하기 이전에 상황을 살피고 정적 팩터리 메서드가 더 적합하다면 해당 메서드를 사용하도록 추천한다.</p>\n<br>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>\n<p>이름을 가질 수 있다.</p>\n<p>여러 종류의 생성자가 필요로 할 경우 매개변수의 수를 드라게 해서 추가하곤 한다. 하지만 이 매개변수와 생성자 자체로는 반환될 객체의 특성이나 언제 이 생성자가 사용이 되는지 설명할 수 없다.</p>\n<p>따라서 이름을 가진 정적 팩터리 메서드를 사용한다면 개발자가 각 생성 메서드가 무엇을 의짐하는지 알 수 있고 그 차이를 잘 드러낼 수 있다.</p>\n</li>\n<li>\n<p>호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.</p>\n<p>미리 만들어놓은 인스턴스나 새로 생성한 인스턴스 캐싱하여 재사용하는 추가 로직을 가지고 있을 수 있다.</p>\n<ul>\n<li>예를 들어 <code class=\"language-text\">Boolean.valueOf()</code> 메서드는 객체를 아예 생성하지 않고 미리 생성된 객체만을 반환한다.</li>\n</ul>\n<p>이렇게 미리 만들어놓은 인스턴스를 활용하는 것은 해당 코드의 성능도 높여주지만 개발자가 반환되는 인스턴스를 철저하게 통제할 수 있다는 이점도 제공한다. 이러한 클래스를 인스턴스 통제(instance-controlled) 클래스라고 한다.</p>\n<ul>\n<li>인스턴스를 통제한다면 클래스를 싱글톤(Singleton)이나 인스턴스 불가(noninstantiable)로 만들 수 있다.</li>\n<li>불변 값에서 동치를 보장하는 인스턴스를 제공할 수도 있다.</li>\n<li>Flyweight pattern의 근간이 된다. Flyweight pattern 이란 불필요한 new 연산자를 줄이고 필요한 인스턴스만 만들어 최대한 공유할 수 있도록 한 디자인 패턴이다.</li>\n<li>열거 타입이 인스턴스를 하나만 만들어지는 것을 보장하도록 해준다.</li>\n</ul>\n</li>\n<li>\n<p>반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.</p>\n<p>반환 할 때 반드시 해당 클래스의 객체만 반환하는 것이 아니라 필요시 하위 타입의 객체를 반환하도록 하는 것은 엄청난 유연성을 가질 수 있게 해준다.</p>\n<p>이 유연성을 활용하면 반환할 때 그 구현체를 공개하지 않고 반환하여 활용할 수 있도록 하므로 코드가 간결하고 작게 유지될 수 있다.</p>\n<ul>\n<li>\n<p>자바 컬렉션 프레임워크의 경우 여러 추가 기능을 덧붙인 45개의 유틸리티 구현체를 제공한다. 이 구현체들은 아래 사진에서 볼 수 있는 것과 같이 <code class=\"language-text\">java.util.Collections</code>에서 정적 팩토리 메서드를 통해서 얻어질 수 있다.</p>\n<p align=\"center\"><img width=\"75%\" src=\"https://user-images.githubusercontent.com/63405904/146213695-ebca67cd-c845-4eba-8c35-3a97bf683f3f.png\"></p>\n</li>\n<li>\n<p>위 클래스들은 공개되어 있지 않기 때문에 자바 컬렉션 프레임워크 자체를 외부에서 바라보았을 때 훨씬 작고, 응용하면서 익혀야하는 개념과 난이도가 대폭 줄어든다.</p>\n</li>\n<li>\n<p>또한 그 인터페이스가 명시한 대로 동작할 것을 알기 때문에 해당 구현 클래스가 무엇인지 자세히 살펴볼 필요도 없다. 즉, 정적 팩토리 메서드를 사용한 클라이언트는 해당 객체의 구현체가 아닌 인터페이스만으로 다룰 수 있는 이점이 있다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</p>\n<p>반환 타입의 하위 타입이기만 한다면 해당 클래스의 객체를 반환할 수 있다. 이것은 매번 다음 릴리즈 때 필요에 의해 다른 클래스의 객체를 반환할 수 있도록 해준다.</p>\n<ul>\n<li>예를 들면 <code class=\"language-text\">EnumSet</code> 같은 경우 정적 팩토리 메서드로만 객체를 생성할 수 있는데, 매개변수에 적인 원소의 수에 따라서 <code class=\"language-text\">RegularEnumSet</code> 인스턴스를 반환하거나 <code class=\"language-text\">JumboEnumSet</code> 인스턴스를 반환한다.</li>\n<li>다음 릴리즈 때 둘 중 하나의 구현체의 이점이 없어진다면 큰 번거로움 없이 둘 중 하나를 삭제하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</p>\n<p><strong>위 유연함을 제공하기 때문에 service provider framework가 가능하다.</strong></p>\n<p>흔히 알고 있는 대표적인 service provider framework는 <code class=\"language-text\">JDBC</code>이다. 여기서 provider는 구현체이다. 이러한 service provider framework에서는 클라이언트에게 구현체를 제공하는 역할을 프레임워크가 담당하기 때문에 클리아언트는 인터페이스로 기능만 제공받고 구현체로부터는 분리될 수 있다.</p>\n<p>클라이언트가 서비스의 인스턴스를 얻을 때 서비스 접근 API를 사용하여 조건에 따라 필요한 구현체를 얻는데 여기서 정적 팩터리 메서드의 유연성이 이것을 가능하게 한다.</p>\n</li>\n</ol>\n<br>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>\n<p>상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.</p>\n<p>하지만 이것은 <strong>상속보다 컴포지션을 사용</strong>하고 <strong>불변 타입을 보장</strong>하도록 한다면 이 제약이 그렇게 큰 단점으로 다가오지는 않는다.</p>\n</li>\n<li>\n<p>정적 팩터리 메서드는 프로그래머가 찾기 어렵다.</p>\n<p>어떤 메서드를 사용하여 해당 객체를 생성할 수 있는지 규정되어 있지 않으므로 찾기가 어렵다. 다만 흔히 사용하는 몇가지 명명 방식이 있기는 하다. (예를 들면 <code class=\"language-text\">from</code>, <code class=\"language-text\">of</code>, <code class=\"language-text\">valueOf</code>, <code class=\"language-text\">instance</code> 등등.. 필요하면 찾아보길)</p>\n</li>\n</ol>\n<br>\n<br>\n<h2 id=\"-아이템-2-생성자에-매개변수가-많다면-빌더를-고려하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EB%8B%A4%EB%A9%B4-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 2 생성자에 매개변수가 많다면 빌더를 고려하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 2] 생성자에 매개변수가 많다면 빌더를 고려하라</h2>\n<p>앞서 정적 팩터리 메서드의 장점에 대해서 이야기했다. 하지만 정적 팩터리 메서드도 여전히 한계점이 있는데 그것은 매개변수가 너무 많거나, 그 중 선택적인 요소들이 많을 때 <strong>가독성과 안정성</strong>을 유지시키는 것이 어렵다.</p>\n<ul>\n<li>여기서 <strong>가독성이</strong>라고 하는 것은 여러 매개변수가 있을 때 몇번째가 어느 필드에 관한 값인지 알기 어려운 것이다.</li>\n<li>여기서 <strong>안정성</strong>이라고 하는 것은 setter를 사용했을 때 중간에 일관성이 깨지게 되는 것을 말한다.</li>\n</ul>\n<br>\n<h3 id=\"생성자정적-팩터리-메서드와-setter의-한계점\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-setter%EC%9D%98-%ED%95%9C%EA%B3%84%EC%A0%90\" aria-label=\"생성자정적 팩터리 메서드와 setter의 한계점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자(정적 팩터리 메서드)와 setter의 한계점</h3>\n<p>여러 매개변수가 있고 몇몇 선택적인 요소들이 있을 경우 흔히 사용하는 방법은 <strong>점층적 생성자 패턴</strong>(telescoping constructor pattern)이다. 이 패턴을 사용할 경우 보통 생성자의 수가 너무 많아 가독성이 떨어지거나 설정하고 싶지 않은 매개변수까지 포함하기 쉽다. (따라서 0 또는 null로 해당 값을 입력하게 된다)</p>\n<p>두번째 가능한 방법은 자바빈즈 패턴JavaBeans Pattern이다. 이 경우 생성자는 기본으로 두고 setter를 통해서 원하는 매개변수의 값을 설정하는 것이다. 가독성은 좋아지나 <strong>불변 객체를 포기</strong>해야하며 여러 메서드를 호출해서 각각 초기값을 입력해주어야 하기 때문에 해당 작업이 완료되기 이전에는 <strong>일관성이 보장되지 않은 상태</strong>이다. 따라서 버그 가능성이 매우 높다. (스레드 안정성이 낮다.)</p>\n<br>\n<h3 id=\"빌더-패턴-builder-pattern을-통한-대안\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4-builder-pattern%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%8C%80%EC%95%88\" aria-label=\"빌더 패턴 builder pattern을 통한 대안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌더 패턴 Builder Pattern을 통한 대안</h3>\n<p>빌더 패턴을 사용할 경우 필수 매개변수(초기값이 반드시 있어야 하는 필드)로 빌더 객체를 생성한다. (<strong>해당 객체를 직접 생성하는 것이 아니다.</strong>) 이후 빌더를 통해서 선택 매개변수들을 하나씩 지정하게 되고 <code class=\"language-text\">build()</code> 메서드 호출을 통해 필요 매개변수들이 대입된 객체를 얻게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수 매개변수</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수 매개변수</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> school<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\t\tage <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n\t\tschool <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>school<span class=\"token punctuation\">;</span>\n\t\taddress <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> fianl <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> school <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> address <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">school</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> school<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>school <span class=\"token operator\">=</span> school<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\t</code></pre></div>\n<p>이처럼 Builder를 사용한다면 해당 클래스를 불변으로 유지하면서 기본값 매개변수는 반드시 지정하도록, 그리고선택 매개변수는 원하는 것을 선택해서 사용할 수 있도록 한다.</p>\n<p>Builder를 사용한다면 메서드 체이닝 방식으로(fluent API, method chaining) 사용되기 때문에 가독성이 좋고 일관성을 유지시킬 수 있다.</p>\n<p>불변식(invariant)을 검증하고 싶다면 <code class=\"language-text\">build()</code>에서 사용하는 생성자에 검증로직을 넣어서 보장하도록 한다.</p>\n<p><strong>번외) 불변(immutable) vs. 불변식(invariant)</strong></p>\n<p>불변은 해당 객체에 대한 그 어떠한 변경도 허용하지 않는 것이다. 불변식은 프로그램이 실행되는 동안 반드시 만족해야하는 조건이다. 값에 대한 변경과 상관없이 해당 객체가 가지고 있는 필수 요구사항이라고 할수 있다. (나이는 항상 양수여야 한다 등등</p>\n<br>\n<h3 id=\"빌더패턴의-장점---계층적-클래스에서의-응용\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90---%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%91%EC%9A%A9\" aria-label=\"빌더패턴의 장점   계층적 클래스에서의 응용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌더패턴의 장점 - 계층적 클래스에서의 응용</h3>\n<p>각 계층에서 각각의 빌더를 두어 사용한도록 한다. 상위 클래스에서는 추상 빌더를, 하위 클래스에서는 구현체 빌더를 사용하도록 한다. Generic과 추상 메서드를 활용한 빌더 패턴이다.</p>\n<p>코드를 통해서 이해하는 것이 훨씬 빠르므로 코드로 확인해보자.</p>\n<ul>\n<li>최상위 추상 클래스 <code class=\"language-text\">Pizza</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span>HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span> <span class=\"token comment\">//상위 클래스 필드</span>\n\n\t<span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttoppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// element 타입을 지정한 빈 EnumSet 자료구조이다.</span>\n\t\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ttoppings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 하위 클래스에서 그 값이 달라지므로 추상메서드 self()를 반환</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 하위 클래스의 생성자 호출</span>\n\n\t\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 하위 클래스의 Builder 반환 메서드 </span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\t</code></pre></div>\n<ul>\n<li>첫 번째 하위 클래스 <code class=\"language-text\">NyPizza</code> - 사이즈 지정이 필수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NyPizza</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Size</span> <span class=\"token punctuation\">{</span> SMALL<span class=\"token punctuation\">,</span> MEDIUM<span class=\"token punctuation\">,</span> LARGE <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">NyPizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 상위 클래스의 topping을 지정</span>\n\t\tsize <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 하위 클래스의 필드를 지정</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">NyPizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NyPizza</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>두 번째 하위 클래스 <code class=\"language-text\">Calzone</code> - Sauce 추가 여부 지정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calzone</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> sauceInside<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Calzone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsauceInside <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sauceInside<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> sauceInside <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값 지정</span>\n\t\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">sauceInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tsauceInside <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\t\n\t\t\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Calzone</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calzone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>상위 코드를 잘 이해해보면 계층적 클래스에서 빌더를 통해 구현체의 필수 매개변수를 지정하고 공통된 상위 클래스의 매개변수 지정까지 함께 처리할 수 있는 것을 확인할 수 있다.</p>\n<p>또한 하위 클래스에서 <code class=\"language-text\">build()</code>를 정의하기 때문에 구현체의 객체를 반환할 수 있다. 즉, <code class=\"language-text\">NyPizza.Builder</code>는 <code class=\"language-text\">NyPizza</code>를 반환할 수 있다. (상위 클래스에서는 <code class=\"language-text\">Pizza</code>를 반환하도록 되어 있다.)</p>\n<p>이렇게 하위 클래스의 메서드에서 상위 클래스에서 정의한 반환값이 아닌 하위 클래스의 타입을 반환하는 것을 <strong>공변 반환 타이핑(covariant return typing)</strong> 이라고 한다. 이것을 통해 클라이언트가 형변환을 굳이 하지 않고 Builder를 사용할 수 있게 된다.</p>\n<p>위에서 구현한 Builder는 다음과 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">NyPizza</span> pizza <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NyPizza<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span>SMALL<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span>SAUSAGE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span>ONION<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Calzone</span> calzone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calzone<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span>HAM<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">sauceInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>Builder의 추가적인 이점</p>\n<p>위의 <code class=\"language-text\">addToppings()</code> 처럼 가변인수(varargs) 매개변수를 여러개 지정할 수 있다.</p>\n<p>즉, 개수가 한정되어 있지 않은 가변 인자를 여러개 연달아 지정할 수 있는 이점을 누릴 수 있다.</p>\n</li>\n</ul>\n<br>\n<h3 id=\"빌더패턴의-단점\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"빌더패턴의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌더패턴의 단점</h3>\n<p>객체를 만들기 전 빌더 관련 로직을 구현하고 생성해야 하므로 성능에 민감한 상황에서 영향을 끼칠 수 있다.</p>\n<p>또한 추가 코드가 매우 많아지기 때문에 매개변수가 적을 때는 오히려 생산성이 훨씬 떨어진다.</p>\n<p>하지만 저자는 API는 일반적으로 시간이 지날수록 매개변수가 많아지기 때문에 나중에 빌더 패턴으로 전환하기보다는 애초에 빌더로 시작하는 것을 추천한다.</p>\n<br>\n<h3 id=\"요약---언제-빌더를-사용하는게-좋을까\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD---%EC%96%B8%EC%A0%9C-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"요약   언제 빌더를 사용하는게 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약 - 언제 빌더를 사용하는게 좋을까?</h3>\n<ul>\n<li>매개변수의 수가 많을 때</li>\n<li>매개변수의 수가 많고 매개변수 중 다수가 선택 매개변수 일 때 (또는 같은 타입이라서 점층적 생성자 패턴을 사용하지 못할 때)</li>\n<li>가독성이 필요하고 안정성이 중요할 때</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC\">🌩 [아이템 1] 생성자 대신 정적 팩터리 메서드를 고려하라</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9Cstatic-factory-method%EB%9E%80\">정적 팩터리 메서드(static factory method)란?</a></li>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EB%8B%A4%EB%A9%B4-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%98%EB%9D%BC\">🌩 [아이템 2] 생성자에 매개변수가 많다면 빌더를 고려하라</a></p>\n<ul>\n<li><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-setter%EC%9D%98-%ED%95%9C%EA%B3%84%EC%A0%90\">생성자(정적 팩터리 메서드)와 setter의 한계점</a></li>\n<li><a href=\"#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4-builder-pattern%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%8C%80%EC%95%88\">빌더 패턴 Builder Pattern을 통한 대안</a></li>\n<li><a href=\"#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%9E%A5%EC%A0%90---%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%91%EC%9A%A9\">빌더패턴의 장점 - 계층적 클래스에서의 응용</a></li>\n<li><a href=\"#%EB%B9%8C%EB%8D%94%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\">빌더패턴의 단점</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD---%EC%96%B8%EC%A0%9C-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A2%8B%EC%9D%84%EA%B9%8C\">요약 - 언제 빌더를 사용하는게 좋을까?</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 1] 생성자 대신 정적 팩터리 메서드를 고려하라 정적 팩터리 메서드(static factory method)란? 해당 클래스의 인스턴스를 반환하는 정적 메서드이다. 예를 들어 다음 박싱 클래스를 반환하는 정적 메서드를 보자. 이 챕터에서 추천하는 바는 public 생성자 대신 정적 팩터리 메서드를 고려해보라는 것이다. 정적 팩터리 메서드는 장단점이 있다. 따라서 항상 정적 팩터리 메서드가 더 우수하다는 것은 아니다. 다만 습관적으로 public 생성자를 사용하기 이전에 상황을 살피고 정적 팩터리 메서드가 더 적합하다면 해당 메서드를 사용하도록 추천한다. 장점 이름을 가질 수 있다. 여러 종류의 생성자가 필요로 할 경우 매개변수의 수를 드라게 해서 추가하곤 한다. 하지만 이 매개변수와 생성자 자체로는 반환될 객체의 특성이나 언제 이 생성자가 사용이 되는지 설명할 수 없다. 따라서 이름을 가진 정적…","frontmatter":{"date":"December 14, 2021","title":"이펙티브 자바 - 아이템 1 & 2","categories":"책 자바","author":"코다","emoji":"🐡"},"fields":{"slug":"/effective-java-1-2/"}},"next":{"id":"4cd455cf-db05-565f-9f74-949de3a0f6ec","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<p>애자일의 의도는 불확실성이 큰 소프트웨어 개발 분야에서는 꼼꼼한 초반 계획을 세우고 이행하는 형태는 불가능하다는 것에서 출발한다. 따라서 애자일은 불확실성이 더 큰 프로젝트일수록 적합하다.</p>\n<p>하지만 저자는 애자일을 단순한 소프트웨어 개발론으로만 보지 않고 하나의 일하거나 삶을 사는 스타일로 확장해서 해석해본다. 어떻게 우리 삶에서, 일에서 애자일을 적용할 수 있을까?</p>\n<p>지금까지 말한 학습과 협력이 애자일의 핵심 전략이 될 수 있다. 불확실성이 높은 프로젝트 일수록 안좋은 일이 생기기 쉽다. 그리고 안좋은 일은 ‘또는’ 조건에서 생기기 마련인데 애자일은 앞서 말한 서로의 업무를 공유하고 상호 검토하는 협력을 통해 ‘또는’ 조건을 ‘그리고’ 조건으로 만들어 확률을 낮춘다.</p>\n<p>또한 좋은 일은 확장될 수 있도록 ‘또는’ 조건을 공유를 통한 ‘그리고’ 조건으로 변경한다. 공유를 통해 전체가 개선되도록 하는 것이다.</p>\n<ul>\n<li>이 글은 세 번째 파트인 애자일 파트이다.</li>\n</ul>\n<br>\n<h2 id=\"애자일의-씨앗\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%98-%EC%94%A8%EC%95%97\" aria-label=\"애자일의 씨앗 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 애자일의 씨앗</h2>\n<p>애자일은 짧은 시간 내에 아주 간단하게 전달하는 것은 어렵다. 그럼에도 불구하고 애자일의 씨앗이라고 말할 수 있는 핵심을 한 문장으로 정의하면 다음이다.</p>\n<ul>\n<li>고객에게 매일 가치를 전하라.</li>\n</ul>\n<p>불확실성이 높을수록 빈도가 높아야한다. 그래서 한번에 몰아서 하기 보다 조금씩 자주 하는 것이 중요하다. 현재 위치를 확인하고 피드백을 받는 빈도를 늘리는 것이다.</p>\n<p>또한 해당 프로젝트의 이해관계자와 ‘함께’ 진행을 해야 한다. 끼리끼리 마구 진행해버리는 것은 아무 소용 없다.</p>\n<p>애자일에서 고객 참여와 코드 공유는 필수다. 하지만 많은 팀에서 이 두 가지는 ‘사람’을 다루는 것이기 때문에 많이 미룬다. 또한 애자일 성숙도에 큰 기여를 한 것은 짧은 개발 주기이다.</p>\n<p>정리해서 말하자면 애자일 실천법을 잘 하기만 하면 조직의 성공률이 올라간다. 애자일을 실천할 때 성공과 직결이 되는 것을 뽑자면 고객 참여, 리팩터링, 코딩 후 자동화 단위 테스트, 코드 공유 등이다. 애자일의 성숙도가 낮더라도 고객 참여를 하면 프로젝트의 성공 확률이 올라간다.</p>\n<br>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 마무리</h2>\n<p>어쩌면 어떤 방법론을 적용하는지보다 중요한 것은 어떤 사람들이 참여하는 가가 더 중요할 수 있다. 결국 그 방법론을 이행하는 주체는 그 팀의 사람들이기 때문이다. 더해서 이 책에서 언급하는 것은 애자일을 애자일스럽게 적용하자는 것이다. 불확실한 것을 적용할 때 하는 것이 애자일인데 애자일을 확실성 위에서 진행하고자 하는 것은 어리석은 일이다.</p>\n<br>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀 점</h2>\n<ul>\n<li>애자일을 소프트웨어 개발론의 하나가 아니라 학습과 삶의 방식으로 해석을 한 것이 흥미로웠다.</li>\n<li>처음에 애자일에 대해서 들었을 때 “그냥 그때그때 알아서 하라는 거 같은데 이게 무슨 방법론이야” 라는 생각을 했었다.</li>\n<li>하지만 이 글을 읽으면서 애자일의 핵심은 “불확실한 상황이라는 것을 인지하는 태도”라는 생각이 많이 들었다.</li>\n<li>결국 불확실한 상황이라는 것을 인지하기 때문에 짧은 주기로 잦은 피드백을 받고 많은 수정을 하면서 길을 찾아나가는 것이기 때문이다.</li>\n<li>여기에 더해서 흥미로운 애자일의 특징은 ‘사람’이라는 요소가 중요하게 작용한다는 것이다. 애자일은 불학실한 상황에서 상호 피드백과, 중복 검증, 좋은 정보 공유 등을 통해서 성공 확률을 높이고 실패 확률을 낮추는 것이 핵심이다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">💡 Intro</a></li>\n<li><a href=\"#%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%98-%EC%94%A8%EC%95%97\">🌩 애자일의 씨앗</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">🌩 마무리</a></li>\n<li><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\">🛋 느낀 점</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 06, 2021","title":"함께 자라기 🌱 읽자 - Part 3. 애자일","categories":"책","author":"코다","emoji":"🧸"},"fields":{"slug":"/growing-together-3/"}},"prev":{"id":"6a1f88a3-be3c-517e-b002-34f037e42eeb","html":"<blockquote>\n<p>이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌</p>\n</blockquote>\n<h2 id=\"-아이템-3-private-생성자나-열거-타입으로-싱글턴임을-보증하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-3-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%82%98-%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 3 private 생성자나 열거 타입으로 싱글턴임을 보증하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라</h2>\n<p>하나의 인스턴스만 생성할 수 있는 것이 싱글턴(Singleton) 패턴이다. 참고로 싱글턴을 사용할 경우 이것을 사용하는 클라이언트를 테스트하기가 어렵다. 싱글턴 객체의 생성지점을 제어하기 어려우므로 mock으로 대체하기가 어렵기 때문이다. 싱글턴 객체를 구현하기 위해서는 다음 <strong>3가지 방법</strong>을 사용할 수 있다.</p>\n<br>\n<h3 id=\"1-private-생성자--public-static-final-필드\" style=\"position:relative;\"><a href=\"#1-private-%EC%83%9D%EC%84%B1%EC%9E%90--public-static-final-%ED%95%84%EB%93%9C\" aria-label=\"1 private 생성자  public static final 필드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) private 생성자 &#x26; public static final 필드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Earth</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Earth</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Earth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Earth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성자의 접근제어자가 private이므로 인스턴스는 오직 <code class=\"language-text\">INSTANCE</code> 필드를 초기화할 때 단 한번만 생성된다. 일반적인 경우 클라이언트는 이 부분에 대한 권한이 전혀 없지만 예외적으로 <code class=\"language-text\">AccessibleObject.setAccessible</code>을 사용한다면 private 생성자를 호출할 수 있기는 하다. (방어를 위해서는 두번째 생성자 호출시 예외발생)</p>\n<ul>\n<li>장점\n<ul>\n<li><code class=\"language-text\">public static final</code> 필드를 사용할 경우 싱글턴이라는 것이 분명히 드러난다. (<code class=\"language-text\">final</code>이므로 재정의 할 수 없다.)</li>\n<li>간결하다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"2-private-생성자--정적-팩터리-메서드\" style=\"position:relative;\"><a href=\"#2-private-%EC%83%9D%EC%84%B1%EC%9E%90--%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2 private 생성자  정적 팩터리 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) private 생성자 &#x26; 정적 팩터리 메서드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Earth</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Earth</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Earth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>'\n\n\tpirvate <span class=\"token class-name\">Earth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Earth</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>장점\n<ul>\n<li>싱글턴이 아닌 경우로 리팩토링 할 경우 변경에 유연하다.</li>\n<li>정적 팩터리를 제네링 싱글턴 팩터리로 만들 수 있다.</li>\n<li>정적 팩터리 메소드를 Supplier로 사용할 수 있다. (일급 함수로 사용 가능)</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"위-방법에서-직렬화-시-주의할-점\" style=\"position:relative;\"><a href=\"#%EC%9C%84-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%A7%81%EB%A0%AC%ED%99%94-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"위 방법에서 직렬화 시 주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위 방법에서 직렬화 시 주의할 점</h3>\n<p>직렬화는 객체를 바이트로 변환해 데이터를 외부 시스템에 영구적으로 저장하거나 사용할 수 있도록 하는 것을 말한다. 직렬화 후 다시 역직렬화 할 때(<code class=\"language-text\">readObject()</code> 사용시) 싱글톤임에도 불구하고 새로운 인스턴스가 생성된다.</p>\n<p>이를 방지하기 위해서는 직렬화 하는 객체의 필드를 <code class=\"language-text\">transient</code> 선언(직렬화 대상에서 제외하고 <code class=\"language-text\">readResolve()</code> 메서드를 정의하여 기존에 생성된 객체를 반환하도록 해야 한다. 이때도 <code class=\"language-text\">readObject()</code> 호출 시 새로운 인스턴스가 생성되기는 하지만 해당 인스턴스를 가짜 인스턴스로 간주하고 무시하여 GC가 처리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"3-enum-타입으로-선언\" style=\"position:relative;\"><a href=\"#3-enum-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%84%A0%EC%96%B8\" aria-label=\"3 enum 타입으로 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Enum 타입으로 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Earth</span> <span class=\"token punctuation\">{</span>\n\tINSTANCE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">// 관련 메서드 정의</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거타입으로 선언할 경우 매우 간결하고 특별한 노력 없이 직렬화 관련 문제도 해결된다. 또한 리플렉션 시에도 싱글톤임을 보장해준다. 하지만 열거 타입의 본래 사용의도와 어긋나므로 어색해보일 수 있다.</p>\n<br>\n<br>\n<h2 id=\"-아이템-4-인스턴스화를-막으려거든-private-생성자를-사용하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94%EB%A5%BC-%EB%A7%89%EC%9C%BC%EB%A0%A4%EA%B1%B0%EB%93%A0-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 4 인스턴스화를 막으려거든 private 생성자를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 4] 인스턴스화를 막으려거든 private 생성자를 사용하라</h2>\n<p>객체지향적으로 보았을 때 안티패턴이기는 하지만 필요시 정적 필드와 정적 메서드만을 모아둔 utility 성향의 클래스를 생성하게 될 때가 있다.</p>\n<ul>\n<li>자바의 경우 java.util.Arrays, java.util.Collections와 같이 배열과 관련된 메서드를 모아 놓거나 특정 인터페이스 구현체를 생성해주는 팩터리 역할을 하는 경우 필요하다.</li>\n</ul>\n<p>이 경우 클래스의 인스턴스화를 막아야 하는데 이때는 기본 생성자를 <code class=\"language-text\">private</code>으로 선언하여 명시해주어야 한다.</p>\n<ul>\n<li>컴파일러는 기본 생성자가 명시되어 있지 않으면 자동으로 기본 생성자를 만들어서 인스턴스화가 가능하도록 한다.</li>\n<li>실수로 클래스 내에서 private 생성자를 사용하지 않도록 주의해야 한다.</li>\n<li>기본 생성자가 막혀있다면 하위 클래스에서 상위 클래스의 생성자에 접근할 수 없으므로 상속을 불가능하게 하는 효과도 있다.</li>\n</ul>\n<p>사용하지 않을 생성자를 코드에 명시하는 것이므로 직관적인 코드는 아니라는 단점도 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-3-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%82%98-%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC\">🌩 [아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라</a></p>\n<ul>\n<li><a href=\"#1-private-%EC%83%9D%EC%84%B1%EC%9E%90--public-static-final-%ED%95%84%EB%93%9C\">1) private 생성자 &#x26; public static final 필드</a></li>\n<li><a href=\"#2-private-%EC%83%9D%EC%84%B1%EC%9E%90--%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\">2) private 생성자 &#x26; 정적 팩터리 메서드</a></li>\n<li><a href=\"#%EC%9C%84-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C-%EC%A7%81%EB%A0%AC%ED%99%94-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">위 방법에서 직렬화 시 주의할 점</a></li>\n<li><a href=\"#3-enum-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%84%A0%EC%96%B8\">3) Enum 타입으로 선언</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94%EB%A5%BC-%EB%A7%89%EC%9C%BC%EB%A0%A4%EA%B1%B0%EB%93%A0-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">🌩 [아이템 4] 인스턴스화를 막으려거든 private 생성자를 사용하라</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 15, 2021","title":"이펙티브 자바 - 아이템 3 & 4","categories":"책 자바","author":"코다","emoji":"🐡"},"fields":{"slug":"/effective-java-3-4/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/effective-java-1-2/","nextSlug":"/growing-together-3/","prevSlug":"/effective-java-3-4/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}