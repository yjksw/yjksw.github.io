{"componentChunkName":"component---src-templates-blog-template-js","path":"/jpa-proxy/","result":{"data":{"cur":{"id":"0bbf1a5f-5450-5c71-8533-7652d2132ffe","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h2>\n<ul>\n<li>JPA는 DB의 데이터와 객체간의 모순을 해결하기 위해서 나온 것이다.</li>\n<li>객체는 객체 그래프로 탐색이 가능하지만 데이터베이스에 저장된 데이터는 객체를 탐색하듯이 탐색하기가 어렵다.</li>\n<li>따라서 데이터베이스에 저장된 데이터들을 가지고 객체 그래프 탐색이 가능하기 위해서 프록시 라는 기술이 나왔다.</li>\n<li>JPA에서는 연관된 객체를 로딩하는데 지연 로딩과 즉시 로딩이라는 두가지 기법을 사용한다.</li>\n<li>여기서 지연 로딩시 프록시 기술이 사용된다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"기본-예시-entity\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity\" aria-label=\"기본 예시 entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 예시 Entity</h2>\n<ol>\n<li>\n<p>Member</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> team<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//getter 및 생성자 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n<li>\n<p>Team </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//getter 및 생성자 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<br>\n<h2 id=\"프록시\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C\" aria-label=\"프록시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시</h2>\n<ul>\n<li>지연 로딩을 설정된 연관 객체를 가져올 때 프록시 객체를 가져온다.</li>\n<li>\n<p><code class=\"language-text\">em.find()</code>를 사용하면 실제 객체를 가져오고, <code class=\"language-text\">em.getReference()</code>를 사용하면 프록시 객체를 가져온다.</p>\n<ul>\n<li>프록시 객체를 가져온다는 것은 query는 실행되지 않는 것이다.</li>\n<li>특정 객체에 대해 <code class=\"language-text\">em.find()</code>를 하면 연관된 객체에 대해서는 설정되어 있는 <code class=\"language-text\">fetch</code> 종류에 따라 즉시로딩 혹은 지연로딩한다.</li>\n</ul>\n</li>\n</ul>\n<br> \n<h3 id=\"실제-entity-조회---code-classlanguage-textfindcode\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textfindcode\" aria-label=\"실제 entity 조회   code classlanguage textfindcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 Entity 조회 - <code class=\"language-text\">find()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"em.find()는 실제 entity를 조회하여 가져온다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">find_actualEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//select 퀴리가 호출된다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실제 엔티티 클래스임을 확인할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>위 테스트를 실행하면 다음과 같은 select 쿼리가 실행된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\nmember0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\nmember0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\nmember0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\nteam1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\nteam1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_ \n<span class=\"token keyword\">from</span>\nmember member0_ \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> <span class=\"token comment\">#ManyToOne, OneToOne 기본 fetch 전략은 EAGER이므로 left join을 실행해서 Team까지 즉시로딩한다. </span>\nteam team1_ \n    <span class=\"token keyword\">on</span> member0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>team1_<span class=\"token punctuation\">.</span>id \n<span class=\"token keyword\">where</span>\nmember0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"프록시-entity-조회---code-classlanguage-textgetreferencecode\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textgetreferencecode\" aria-label=\"프록시 entity 조회   code classlanguage textgetreferencecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 Entity 조회 - <code class=\"language-text\">getReference()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"em.getReference()는 해당 entity에 대한 proxy 객체를 가져온다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_proxyEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//아무 쿼리가 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//getId()는 여전히 쿼리는 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실제 Entity 클래스가 아니다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체는 실제 Entity 를 상속한다.</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//출력 : class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 테스트 코드는 select 쿼리를 호출하지 않는다. </li>\n<li><code class=\"language-text\">getId()</code>는 해당 entity에 대한 getter이기는 하나, 프록시는 해당 entity에 대한 식별자를 보관하므로 <code class=\"language-text\">getId()</code>를 호출하더라도 entity를 초기화하지 않는다. (여진히 쿼리가 실행되지 않는다.)</li>\n<li>위에서 <code class=\"language-text\">findMember.getClass()</code>를 출력해보면 <code class=\"language-text\">class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR</code> 와 같이 프록시 객체 임을 확인할 수 있다. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-특징-및-초기화\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"프록시 객체 특징 및 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 특징 및 초기화</h2>\n<ul>\n<li>초기화는 영속성 컨텍스트에 실제 객체가 없을 경우 엔티티 생성을 요청하여 영속성 컨텍스트에 실제 entity를 로드하고 참조값을 저장하는 것이다. </li>\n<li>\n<p>프록시 객체는 실제 객체를 상속한다. 따라서 사용할 때는 실제 Entity처럼 사용할 수 있다. </p>\n<p align=\"center\"><img width=\"500\" alt=\"스크린샷 2021-08-15 오후 3 58 10\" src=\"https://user-images.githubusercontent.com/63405904/129469950-dd48c26f-5554-4fdd-9e1f-5d38399ae46b.png\"><br>이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)</p>\n<br>\n</li>\n<li>프록시 객체는 실제 Entity에 대한 식별자와 해당 Entity의 참조값을 저장하고 있다. 따라서 <code class=\"language-text\">getId()</code>로 식별자 조회 시 초기화 하지 않는다. </li>\n<li>\n<p>더불어 프록시 객체가 초기화 될 때 실제 entity 객체로 대체되는 것이 아니라, 프록시에 저장되어 있는 entity 참조값으로 실제 객체 메소드에 위임하여 메소드가 실행된다. </p>\n<p align=\"center\"><img width=\"500\" alt=\"스크린샷 2021-08-15 오후 4 03 26\" src=\"https://user-images.githubusercontent.com/63405904/129470031-d0c8bcd1-ea2a-479c-a45f-bc3afa4f20de.png\"><br>이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)</p>\n</li>\n</ul>\n<br>\n<h3 id=\"getter-호출시-code-classlanguage-textgetidcode-제외-프록시-객체-초기화---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode\" style=\"position:relative;\"><a href=\"#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-code-classlanguage-textgetidcode-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode\" aria-label=\"getter 호출시 code classlanguage textgetidcode 제외 프록시 객체 초기화   code classlanguage textgetreferencecode   code classlanguage textgetnamecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getter 호출시 (<code class=\"language-text\">getId()</code> 제외) 프록시 객체 초기화 - <code class=\"language-text\">getReference()</code> -> <code class=\"language-text\">getName()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy 객체는 getName() 등을 호출 할 경우 초기화 된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_proxyEntity_getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//아무 쿼리가 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//getId()는 여전히 쿼리는 호출되지 않는다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//select 쿼리가 실행된다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//초기화 되어도 여전히 실제 Entity 클래스가 아니다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체는 실제 Entity 를 상속한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    member0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_ \n<span class=\"token keyword\">from</span>\n    member member0_ \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span>\n    team team1_ \n        <span class=\"token keyword\">on</span> member0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>team1_<span class=\"token punctuation\">.</span>id \n<span class=\"token keyword\">where</span>\n    member0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<ul>\n<li>getName() 실행 시 위 select 쿼리가 실행된다. </li>\n</ul>\n<br>\n<h3 id=\"프록시-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 특징</h3>\n<ul>\n<li>처음 단 한번만 초기화 된다. </li>\n<li>프록시 객체가 대체되는 것이 아니라 프록시 객체를 통해 실제 entity 접근하는 것이다. </li>\n<li>타입 체크시 주의해야 한다. (아래 더 자세히 다룸)</li>\n<li>영속성 컨텍스트에 이미 해당 entity가 있다면 <code class=\"language-text\">getReference()</code>를 해도 실제 entity가 조회된다. </li>\n<li>영속성 컨텍스트를 통해 초기화 하므로 영속성 컨텍스트와 연결이 없다면 <code class=\"language-text\">LazyInitializationException</code> 예외가 발생한다. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-타입-체크\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\" aria-label=\"프록시 객체 타입 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 타입 체크</h2>\n<ul>\n<li>프록시 객체의 타입은 <code class=\"language-text\">getClass()</code> 로 비교할 경우 프록시 객체 클래스가 조회되기 때문에 비교하기 위해서는 <code class=\"language-text\">instanceOf</code> 를 사용해야 한다. </li>\n<li>많은 경우 프록시 객체를 <code class=\"language-text\">getClass()</code>로 실제 entity와 비교하여 버그가 발생한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy 객체의 타입은 실제 entity 객체 타입과 다르다. getClass()로 비교할 경우 false가 반환된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">proxyType_getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//프록시 객체를 가져오기 위해 Member의 Team 프로퍼티를 FetchType.LAZY로 설정</span>\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team은 지연로딩으로 프록시객체이다.</span>\n    <span class=\"token class-name\">Team</span> findTeam <span class=\"token operator\">=</span> findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//기존 TeamA와 프록시 팀인 findTeam의 필드값은 동일하다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 팀읜 findTeam의 class는 Team이 아니다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//isInstanceOf로 비교하면 상속 받은 Team.class 이다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"영속성-컨텍스트에-있는-entity-getreference\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference\" aria-label=\"영속성 컨텍스트에 있는 entity getreference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영속성 컨텍스트에 있는 entity getReference</h2>\n<ul>\n<li>영속성 컨텍스트에 조회하고자 하는 entity가 이미 존재한다면 <code class=\"language-text\">getReference()</code>를 사용하더라도 프록시 객체가 아닌 실제 entity 가 반환된다.\n<br></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이미 영속성 컨텍스트에 있는 entity 조회시 getReference로 조회해도 실제 entity가 반환된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_AlreadyInPersistenceContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//영속성 컨텍스트에 존재햔다.</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프록시 객체를 가져오듯 메서드를 호출한다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시가 아닌 실제 entity 클래스를 가져온다. 추가적인 쿼리는 실행되지 않는다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"준영속-entity-초기화\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"준영속 entity 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준영속 entity 초기화</h2>\n<ul>\n<li>준영속이 된 프록시 객체에서 초기화를 시도할 경우 하이버네이트의 <code class=\"language-text\">LazyInitializationException</code>이 발생한다. </li>\n<li>프록시의 초기화는 영속성 컨텍스트와 매우 밀접하게 관련이 있으므로 영속성 컨텍스트와의 관계가 끊어지면 에외가 발생한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"준영속 프록시 객체에 대한 초기화 시 예외가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_InitializationExcpetion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.</span>\n\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//먼저 영속성 컨텍스트를 clear 해주어야한다. </span>\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체를 가져온 영속성 컨텍스트를 종료한다.</span>\n\n    <span class=\"token function\">assertThatThrownBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//영속성 컨텍스트가 종료된 이후에 초기화를 시도하면</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazyInitializationException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//하이버네이트 예외가 발생한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Member</code>의 <code class=\"language-text\">Team</code>을 지연로딩으로 <code class=\"language-text\">fetch</code> 타입을 설정하여 <code class=\"language-text\">Member</code> 조회시 <code class=\"language-text\">Team</code>은 프록시 객체이도록 한다. </li>\n<li>\n<p>영속성 컨텍스트를 닫은 후에 초기화를 시도하면 예외가 발생한다. </p>\n<ul>\n<li>단순히 <code class=\"language-text\">Member.getTeam()</code> 이 초기화를 실행하지 않고 실제 <code class=\"language-text\">Team</code>의 필드가 사용될 때 (<code class=\"language-text\">getName()</code> 등) 초기화가 된다. </li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-확인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8\" aria-label=\"프록시 객체 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 확인</h2>\n<ul>\n<li>프록시 객체 확인을 위해서는 <code class=\"language-text\">PersistenceUnitUtil.isLoaded(Object entity)</code>를 사용해서 확인할 수 있다. </li>\n<li>때때로 jpa repostiory에 대한 단위 테스트를 작성하려고 할 때, 의도한대로 지연로딩 또는 즉시로딩이 되었는지 확인할 때 사용할 수 있다. </li>\n<li>만일 초기화가 안된 프록시 객체라면 위 결과값이 <code class=\"language-text\">false</code>가 반환된다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"프록시 객체를 확인할 수 있다. \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">PersistenceUnitUtil_Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.</span>\n\n    <span class=\"token keyword\">boolean</span> memberIsLoaded <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getPersistenceUnitUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> teamIsLoaded <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getPersistenceUnitUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//EntityManagerFactory에서 PersistenceUnitUtil을 가져온다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberIsLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//findMember 는 실제 entity 이므로 결과값이 true 이다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamIsLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//team 은 프록시 객체이므로 결과값이 false 이다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">INTRO</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity\">기본 예시 Entity</a></li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C\">프록시</a></p>\n<ul>\n<li><a href=\"#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---find\">실제 Entity 조회 - <code class=\"language-text\">find()</code></a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---getreference\">프록시 Entity 조회 - <code class=\"language-text\">getReference()</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94\">프록시 객체 특징 및 초기화</a></p>\n<ul>\n<li><a href=\"#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-getid-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---getreference---getname\">Getter 호출시 (<code class=\"language-text\">getId()</code> 제외) 프록시 객체 초기화 - <code class=\"language-text\">getReference()</code> -> <code class=\"language-text\">getName()</code></a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95\">프록시 특징</a></li>\n</ul>\n</li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\">프록시 객체 타입 체크</a></li>\n<li><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference\">영속성 컨텍스트에 있는 entity getReference</a></li>\n<li><a href=\"#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94\">준영속 entity 초기화</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8\">프록시 객체 확인</a></li>\n</ul>\n</div>","excerpt":"INTRO JPA는 DB의 데이터와 객체간의 모순을 해결하기 위해서 나온 것이다. 객체는 객체 그래프로 탐색이 가능하지만 데이터베이스에 저장된 데이터는 객체를 탐색하듯이 탐색하기가 어렵다. 따라서 데이터베이스에 저장된 데이터들을 가지고 객체 그래프 탐색이 가능하기 위해서 프록시 라는 기술이 나왔다. JPA에서는 연관된 객체를 로딩하는데 지연 로딩과 즉시 로딩이라는 두가지 기법을 사용한다. 여기서 지연 로딩시 프록시 기술이 사용된다. 기본 예시 Entity Member Team  프록시 지연 로딩을 설정된 연관 객체를 가져올 때 프록시 객체를 가져온다. 를 사용하면 실제 객체를 가져오고, 를 사용하면 프록시 객체를 가져온다. 프록시 객체를 가져온다는 것은 query는 실행되지 않는 것이다. 특정 객체에 대해 를 하면 연관된 객체에 대해서는 설정되어 있는  종류에 따라 즉시로딩 혹은 지연로딩한다. 실제 Entity 조회 -  위 테스트를 실행하면 다음과 같은 select 쿼리가 실행된…","frontmatter":{"date":"August 26, 2021","title":"JPA 프록시 알아보기","categories":"JPA","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-proxy/"}},"next":{"id":"41ff080c-8050-53a6-a648-d015de29c91e","html":"<h2 id=\"자바-io-스트림\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-io-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-label=\"자바 io 스트림 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 I/O 스트림</h2>\n<ul>\n<li>Stream은 데이터의 연속이다. Sequence of Data</li>\n<li>다르게 말하면 <strong>Stream 이란 한쪽으로 흐르는 통로같은 것이다.</strong> 자바에서 Stream이란 한쪽 source에서 destination으로 흐르는 <strong>데이터를 위한 단방향 통로</strong>이다. 자바에서는 여러 매체를 읽거나 쓸 수 있고 각자를 위한 I/O Stream이 구현되어 있다. (disk files, devices, programs, memory arrays)</li>\n<li>Stream은 단방향 통신이기때문에 들어오는 데이터, 나가는 데이터에 따로 InputStream, OutputStream이 있는 것이다. </li>\n<li>I/O 스트림은 여러가지 종류의 데이터들을 처리할 수 있다: 바이트, primitive data type, characters, objects</li>\n<li>Stream은 단순히 데이터를 전달하는 역할만 하기도하고, 몇몇 stream은 데이터를 조작하고 편리하게 변환하는 역할을 수행하기도 한다.</li>\n<li>\n<p>모든 Stream은 사용 후 반드시 <code class=\"language-text\">close()</code> 해주어야 한다. (<code class=\"language-text\">try-with-resources</code>를 추천한다.)</p>\n<p align=\"center\"><img width=\"400\" src=\"https://user-images.githubusercontent.com/63405904/130890827-a907eff4-5edc-437c-b8d3-50cdb2cac0c9.png\"><br>TCP School</p>\n</li>\n</ul>\n<br>\n<h3 id=\"바이트-기반-stream\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%B0%98-stream\" aria-label=\"바이트 기반 stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바이트 기반 Stream</h3>\n<ul>\n<li>바이트를 기반으로 입출력하는 스트림이다. </li>\n<li>FileInputStream(파일), ByteArrayInputStream(메모리), PipeInputStream(프로세스), AudioInputStream(오디오 장치) 등등이 있다. </li>\n</ul>\n<br>\n<h3 id=\"보조-stream\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%A1%B0-stream\" aria-label=\"보조 stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보조 Stream</h3>\n<ul>\n<li>실제로 데이터를 주고받는 스트림이 아니라, 다른 스트림의 기능을 추가적으로 보조하여 새로운 기능을 수행할 수 있도록 해주는 스트림이다. </li>\n<li>생성시 인자로 <code class=\"language-text\">InputStream</code>, <code class=\"language-text\">OutputStream</code> 등을 받기도 한다. </li>\n<li>\n<p>몇가지 예시)</p>\n<ol>\n<li>\n<p>BufferedInputStream / BufferedOutputStream - 버퍼를 이용한 입출력으로 데이터 처리 속도를 높일 수 있다. </p>\n<ul>\n<li>지정되지 않았을 때 기본 버퍼 사이즈는 <code class=\"language-text\">8192</code> 이다.</li>\n</ul>\n</li>\n<li>DataInputStream / DataOutputStream - 자바의 기본 타입으로 데이터를 읽음</li>\n<li>등등</li>\n</ol>\n</li>\n</ul>\n<br>\n<h3 id=\"문자-기반-stream\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90-%EA%B8%B0%EB%B0%98-stream\" aria-label=\"문자 기반 stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자 기반 Stream</h3>\n<ul>\n<li>\n<p>Reader, Writer 를 통해서 UTF-8 등등의 인코딩 텍스트를 처리할 수 있다. </p>\n<ul>\n<li>이것은 필터의 일종이다. </li>\n</ul>\n</li>\n<li>이것을 사용하면 데이터를 byte 단위가 아닌, char 단위로 처리할 수 있다. </li>\n<li>대표적으로 자주 사용하는 것이 <code class=\"language-text\">BufferedReader</code>가 있다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">getByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>또 많이 사용되는 것으로는 <code class=\"language-text\">FileReader</code>, <code class=\"language-text\">CharArrayReader</code>, <code class=\"language-text\">PipedReader</code>, <code class=\"language-text\">StringReader</code> 등등이 있다. (각각 Writer도 있다.)</li>\n</ul>\n<br>\n<br>\n<h2 id=\"inputstream\" style=\"position:relative;\"><a href=\"#inputstream\" aria-label=\"inputstream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InputStream</h2>\n<ul>\n<li>\n<p>InputStream 은 <em>프로그램 입장</em>에서 데이터를 읽어드리는 것이다. </p>\n<p align=\"center\"><img width=\"400\" src=\"https://user-images.githubusercontent.com/63405904/130889921-1ef178ae-5fa1-4597-a173-ffa3165cf897.png\"><br>이미지 출처: 오라클 docs</p>\n</li>\n<li>InputStream은 입출력 스트림의 기본 클래스이며 <code class=\"language-text\">read()</code> 메소드를 추상메소드를 지원한다. </li>\n<li><code class=\"language-text\">read()</code>메소드를 적절하게 구현하여 사용허던지, 이미 구현한 하위 기타 InputStream을 활용하면 된다. </li>\n<li>기본적으로 바이트를 읽어드린다. <code class=\"language-text\">read(byte[], int off, int len)</code>, <code class=\"language-text\">read(byte[])</code></li>\n</ul>\n<h4 id=\"바이트를-읽는다는데-왜-반환값은-int일까\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%9D%BD%EB%8A%94%EB%8B%A4%EB%8A%94%EB%8D%B0-%EC%99%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%80-int%EC%9D%BC%EA%B9%8C\" aria-label=\"바이트를 읽는다는데 왜 반환값은 int일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바이트를 읽는다는데 왜 반환값은 int일까?</h4>\n<ul>\n<li>보면 <code class=\"language-text\">InputStream</code>의 overloading 되어 있는 모든 <code class=\"language-text\">read()</code> 메소드의 반환값이 <code class=\"language-text\">int</code> 이다. </li>\n<li>그 이유는 스트림에 있는 데이터를 모두 읽었을 때 <code class=\"language-text\">-1</code> 을 반환하는데 반환값이 byte이면 <code class=\"language-text\">-1</code> 을 반환할 수 없기 때문이다. </li>\n<li>데이터를 읽을 때 우선 0-255 사이의 값을 int로 반환하고, 해당 값을 -128 부터 127 사이의 byte 타입으로 변환한다. </li>\n</ul>\n<br>\n<h3 id=\"inputstream-to-string\" style=\"position:relative;\"><a href=\"#inputstream-to-string\" aria-label=\"inputstream to string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InputStream to String</h3>\n<ul>\n<li>여러가지 방법이 있겠지만 가장 간단한 방법은 다음이다. </li>\n<li>InputStream에서 읽은 byte 데이터를 <code class=\"language-text\">new String()</code>을 통해 반환한다. </li>\n<li>\n<p>이때 두번째 인자로 인코딩 타입도 정할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> data <span class=\"token operator\">=</span> \n<span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"outputstream\" style=\"position:relative;\"><a href=\"#outputstream\" aria-label=\"outputstream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OutputStream</h2>\n<ul>\n<li>다른 매체 (콘솔, 모니터, 파일 등등)에 데이터를 쓸 때 사용되는 출력 스트림이다.\n<p align=\"center\"><img width=\"400\" src=\"https://user-images.githubusercontent.com/63405904/130900408-a052d0ba-0ac3-4818-8fc7-80c17f156d41.png\"><br>이미지 출처: 오라클 docs</p></li>\n<li>\n<p>그냥 <code class=\"language-text\">write()</code>는 바이트 단위로 쓰기 때문에 비효율적이다. <code class=\"language-text\">read()</code>와 마찬가지로 <code class=\"language-text\">write()</code>도 byte[]을 인자로 넣어서 1 바이트 이상을 효율적으로 쓸 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n</li>\n</ul>\n<h3 id=\"code-classlanguage-textbytearrayoutputstreamcode-vs-code-classlanguage-textbufferedoutputstreamcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textbytearrayoutputstreamcode-vs-code-classlanguage-textbufferedoutputstreamcode\" aria-label=\"code classlanguage textbytearrayoutputstreamcode vs code classlanguage textbufferedoutputstreamcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">ByteArrayOutputStream</code> vs. <code class=\"language-text\">BufferedOutputStream</code></h3>\n<ul>\n<li><code class=\"language-text\">ByteArrayOutputStream</code>는 메모리에 데이터를 출력하는 스트림이다. </li>\n<li>\n<p><code class=\"language-text\">BufferedOutputStream</code>은 버퍼링 된 출력 스트림을 생성하는 filter stream의 일종으로 생성시 인자로 OutputStream을 받는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedOutputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">BufferedOutputStream</code>이 직접 출력 스트림에 쓰는 것이 아니라 우선 버퍼에 써서 저장이 되도록 지원하는 것이다. 그렇기 때문에 인자로 출력 스트림을 받아야한다. </li>\n<li>버퍼의 사이즈는 지정할 수 있으며 default 버퍼 사이즈는 <code class=\"language-text\">8192</code>이다.</li>\n<li><code class=\"language-text\">BufferedOutputStream</code>의 <code class=\"language-text\">close()</code>가 호출되면 버퍼에 있는 내용이 출력 스트림에 쓰인다. </li>\n<li>스트림을 닫지 않은 채로 내용을 쓰고 싶다면 <code class=\"language-text\">flush()</code>를 호출하면 된다.  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h4>\n<ul>\n<li><code class=\"language-text\">ByteArrayOutputStream</code>은 unbuffered I/O이고, <code class=\"language-text\">BufferedOutputStream</code>은 buffered I/O 이다.\n<br></li>\n</ul>\n<h4 id=\"왜-buffered-io를-사용할까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-buffered-io%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"왜 buffered io를 사용할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 buffered I/O를 사용할까?</h4>\n<ul>\n<li>unbuffered I/O를 사용한다는 것은 매번 입력 및 출력시 OS에 직접적인 요청이 간다는 것이다. 디스크 접근, 네트워크, 등등의 OS관련 요청이 많아지면서 그 비용으로 인해 프로그램의 효율이 배우 떨어진다. </li>\n<li>\n<p>그것을 해결하기 위해서 자바가 buffered I/O를 지원하도록 했다. </p>\n<ul>\n<li>Buffered input stream은 데이터를 buffer라는 메모리 공간에서 읽고 native input API 는 버퍼가 비었을때만 호출된다.   </li>\n<li>Buffered output stream은 반대로 출력하고자 하는 데이터가 buffer에 가득 찼을 때 native output API가 호출된다.</li>\n</ul>\n</li>\n<li>프로그램은 unbuffered I/O인 입출력 스트림을 buffered 스트림 선언시 인자로 넘겨 버퍼링 되도록 한다. </li>\n<li>바이트 버퍼링을 위해 <code class=\"language-text\">BufferedInputStream</code>, <code class=\"language-text\">BufferedOutputStream</code>이 있다.</li>\n<li>문자 버퍼링을 위해 <code class=\"language-text\">BufferedReader</code>, <code class=\"language-text\">BufferedWriter</code>가 있다.\n<br></li>\n</ul>\n<h4 id=\"code-classlanguage-textflushcode는-언제\" style=\"position:relative;\"><a href=\"#code-classlanguage-textflushcode%EB%8A%94-%EC%96%B8%EC%A0%9C\" aria-label=\"code classlanguage textflushcode는 언제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">flush()</code>는 언제?</h4>\n<ul>\n<li>언제 buffer를 비우는지가 중요한 포인트이다. 버퍼를 비우고 target에 입출력을 반영하는 것을 flushing이라고 한다. </li>\n<li>\n<p>어떤 buffered output class들은 autoflush를 지원해서 특정 이벤트 동작시 자동 flush가 되도록 한다. </p>\n<ul>\n<li>예를 들어 <code class=\"language-text\">PrintWriter</code>가 <code class=\"language-text\">println</code>, <code class=\"language-text\">format</code> 등을 기점으로 <code class=\"language-text\">flush</code>를 한다. </li>\n</ul>\n</li>\n<li>버퍼에 있는 내용을 반영하고 싶을 때 수동으로 <code class=\"language-text\">flush()</code>를 호출하면 된다. 참고로 <code class=\"language-text\">flush()</code>는 모든 스트림에 존재하는 메소드이지만 버퍼링을 지원하는 스트림이 아니면 아무 효과가 없다. </li>\n</ul>\n<br>\n<br>\n<br>\n<h2 id=\"file\" style=\"position:relative;\"><a href=\"#file\" aria-label=\"file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File</h2>\n<h3 id=\"path-absolute-path-canonical-path\" style=\"position:relative;\"><a href=\"#path-absolute-path-canonical-path\" aria-label=\"path absolute path canonical path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>path, absolute path, canonical path</h3>\n<ul>\n<li>파일 이름으로 경로를 찾아 해당 파일을 읽는 실습을 하면서 여러 종류의 path가 등장한다. </li>\n<li>path - 가장 기본적인 path로 주로 입력된 경로 그대로이다. </li>\n<li>\n<p>absolute path - 처음 root 부터 절대 경로를 나타낸다. </p>\n<ul>\n<li>solaris의 경우 <code class=\"language-text\">/home/sally/statusReport</code> 이런 형태를 지닌다. </li>\n<li>Windows의 경우 <code class=\"language-text\">C:\\home\\sally\\statusReport</code> 이런 형태를 지닌다. </li>\n<li>\n<p>루트 디렉토리부터 시작하면 절대경로이다. 그러니까 다음 두가지 경우도 모두 절대경로이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/home/../home/originfile\n/home/./././originfile</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>canonical path - 따라서 절대경로이면서 단 하나의 형식으로 유니크하게 표현하는 것이 canoncial path이다. 즉 위의 절대경로를 canonical path로 표현하면 다음과 같이 된다. 모든 파일의 canoncial path는 단 하나이며 같은 리소스일 경우 그 생김새는 항상 같다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> /home/originfile</code></pre></div>\n<br>\n</li>\n</ul>\n<h3 id=\"java에서-리소스-파일-읽기\" style=\"position:relative;\"><a href=\"#java%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0\" aria-label=\"java에서 리소스 파일 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java에서 리소스 파일 읽기</h3>\n<ul>\n<li>\n<p>Java에서 리소스 파일을 읽을 때는 다음과 같이 하면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">URL</span> resource <span class=\"token operator\">=</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Path</span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> content <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readlAllLines</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>하지만 위와 같이 실행하여 IDE에서 제대로 돌아가더라도 jar로 실행을 시켜보면 리소스를 찾지 못한다는 오류가 발생한다. jar 내부에서 되어있는 파일 구조가 조금 다르기 때문이다. </li>\n<li>\n<p>찾은 해결책은 resource를 inputStream으로 받아서 읽는 것이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> actual <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    actual<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>아직 테스트는 해보지 않았으나 조만한 해볼 예정이다. </li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고링크]</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/io/streams.html\">https://docs.oracle.com/javase/tutorial/essential/io/streams.html</a></li>\n<li><a href=\"http://tcpschool.com/java/java_io_stream\">http://tcpschool.com/java/java<em>io</em>stream</a></li>\n<li><a href=\"https://sgdev.tistory.com/23\">https://sgdev.tistory.com/23</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/io/buffers.html\">https://docs.oracle.com/javase/tutorial/essential/io/buffers.html</a></li>\n<li><a href=\"https://www.benjaminlog.com/entry/absolute-path-vs-canonical-path\">https://www.benjaminlog.com/entry/absolute-path-vs-canonical-path</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/io/path.html\">https://docs.oracle.com/javase/tutorial/essential/io/path.html</a></li>\n<li><a href=\"http://daplus.net/java-jar-%EB%82%B4%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0/\">http://daplus.net/java-jar-내에서-리소스-파일-읽기/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94-io-%EC%8A%A4%ED%8A%B8%EB%A6%BC\">자바 I/O 스트림</a></p>\n<ul>\n<li><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%B0%98-stream\">바이트 기반 Stream</a></li>\n<li><a href=\"#%EB%B3%B4%EC%A1%B0-stream\">보조 Stream</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-%EA%B8%B0%EB%B0%98-stream\">문자 기반 Stream</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#inputstream\">InputStream</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%9D%BD%EB%8A%94%EB%8B%A4%EB%8A%94%EB%8D%B0-%EC%99%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%80-int%EC%9D%BC%EA%B9%8C\">바이트를 읽는다는데 왜 반환값은 int일까?</a></li>\n</ul>\n</li>\n<li><a href=\"#inputstream-to-string\">InputStream to String</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#outputstream\">OutputStream</a></p>\n<ul>\n<li>\n<p><a href=\"#bytearrayoutputstream-vs-bufferedoutputstream\"><code class=\"language-text\">ByteArrayOutputStream</code> vs. <code class=\"language-text\">BufferedOutputStream</code></a></p>\n<ul>\n<li><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></li>\n<li><a href=\"#%EC%99%9C-buffered-io%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\">왜 buffered I/O를 사용할까?</a></li>\n<li><a href=\"#flush%EB%8A%94-%EC%96%B8%EC%A0%9C\"><code class=\"language-text\">flush()</code>는 언제?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#file\">File</a></p>\n<ul>\n<li><a href=\"#path-absolute-path-canonical-path\">path, absolute path, canonical path</a></li>\n<li><a href=\"#java%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0\">Java에서 리소스 파일 읽기</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2021","title":"Java IOStream 과 파일 입출력","categories":"자바","author":"코다","emoji":"✊"},"fields":{"slug":"/java-iostream-file/"}},"prev":{"id":"7bad748d-3789-5403-bce9-4bf2f8205619","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h2>\n<ul>\n<li>JPA에서는 데이터와 객체지향으로 설계 사이의 모순을 해소하기 위해서 나온 기술이다. </li>\n<li>\n<p>많은 객체들은 내부에 Collection 형태로 다른 객체에 대한 참조가 가능하게 설계된다. </p>\n<ul>\n<li>예) <code class=\"language-text\">Team</code> 객체 내부에 <code class=\"language-text\">Team</code>에 속해있는 <code class=\"language-text\">List&lt;Member></code> 와 팀에 할당된 <code class=\"language-text\">List&lt;Locker></code>가 존재한다. </li>\n</ul>\n</li>\n<li>\n<p>이때 상위 객체를 select 하면서 하위 객체를 가져오는 경우 다음 두가지 fetch 타입에 각각 다음과 같은 문제가 있다. </p>\n<ul>\n<li><code class=\"language-text\">fetch = FetchType.EAGER</code>일 경우 : <code class=\"language-text\">MultipleBagFetchException</code>이 발생</li>\n<li><code class=\"language-text\">fetch = FetchType.LAZY</code>일 경우 : <code class=\"language-text\">N+1</code> 문제 발생</li>\n</ul>\n</li>\n<li>상위 엔티티에서 다수의 collection 형태의 연관엔티티를 가지고 있을 때 여러 상황 및 문제와 해결 방법에 대해서 공부해본다. </li>\n</ul>\n<br>\n<h2 id=\"entity-상황\" style=\"position:relative;\"><a href=\"#entity-%EC%83%81%ED%99%A9\" aria-label=\"entity 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 상황</h2>\n<ul>\n<li><code class=\"language-text\">Team</code>과 <code class=\"language-text\">Member</code>가 1:N 연관관계 - <code class=\"language-text\">FetchType.LAZY</code>, <code class=\"language-text\">cascadeType.PERSIST</code></li>\n<li><code class=\"language-text\">Team</code>과 <code class=\"language-text\">Locker</code>가 1:N 연관관계 - <code class=\"language-text\">FetchType.LAZY</code>, <code class=\"language-text\">cascadeType.PERSIST</code></li>\n<li>참고 : 우선 모든 연관관계는 <code class=\"language-text\">LAZY</code>로 적용하고 테스트 상황에 따라 <code class=\"language-text\">EAGER</code>로 변경</li>\n<li>\n<p><code class=\"language-text\">Team</code> 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>EAGER<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>EAGER<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Locker</span><span class=\"token punctuation\">></span></span> lockers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...생성자 생략 </span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locker</span> locker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        locker<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        members<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>member <span class=\"token operator\">-></span> member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members <span class=\"token operator\">=</span> members<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Member</code> 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//생성자 및 setter, getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Locker</code> 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Locker</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//생성자 및 setter, getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"jpa에서-collection-fetch-join\" style=\"position:relative;\"><a href=\"#jpa%EC%97%90%EC%84%9C-collection-fetch-join\" aria-label=\"jpa에서 collection fetch join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA에서 collection fetch join</h2>\n<ul>\n<li>Team에 대한 모든 정보가 필요한 경우 Team을 가져오면서 Members와 Lockers 정보도 모두 함께 가지고 와야하는 경우가 있을 수 있다. </li>\n<li>\n<p>JPA에서는 <code class=\"language-text\">OneToMany</code>관계에서 fetch join을 할 경우 중복 데이터가 발생한다. 따라서 해결을 하기 위해서 쿼리에 <code class=\"language-text\">distinct</code>를 추가해주어 중복을 없애야한다. </p>\n<ol>\n<li>\n<p><code class=\"language-text\">distinct</code>가 없는 collection fetch join</p>\n<ul>\n<li>\n<p>TeamRepository.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select t from Team t join fetch t.members\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">distinct</code> 있는 collection fetch join</p>\n<ul>\n<li>\n<p>TeamRepository.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct t from Team t join fetch t.members\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>실제 실행된 query </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_0_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_0_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0__<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0__ \n<span class=\"token keyword\">from</span>\n    team team0_ \n<span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span>\n    member members1_ \n        <span class=\"token keyword\">on</span> team0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>members1_<span class=\"token punctuation\">.</span>team_id</code></pre></div>\n<br>\n</li>\n<li>\n<p>Test Method </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@BeforeEach</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamB<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamB<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> memberA1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberA2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberA3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> memberB1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberB1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberB2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberB2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberB3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberB3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> teamAMembers <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>memberA1<span class=\"token punctuation\">,</span> memberA2<span class=\"token punctuation\">,</span> memberA3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> teamBMembers <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>memberB1<span class=\"token punctuation\">,</span> memberB2<span class=\"token punctuation\">,</span> memberB3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span>teamAMembers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamB<span class=\"token punctuation\">.</span><span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span>teamBMembers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collection fetch join 데이터에 대해 데이터 뻥튀기가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">collectionFetchJoin_DuplicatedDataSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//members와 lockers가 지연로딩이므로 select 쿼리 1개</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teamsWithMembers <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamsWithMembers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// members에 대한 fetch join을 할 경우(distinct 없음) 데이터 뻥튀기가 발생한다.</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teamsWithMembers <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamsWithMembers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// members에 대한 fetch join을 할 경우(distinct 있음) 데이터 중복이 일어나지 않는다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"code-classlanguage-textfetchtypeeagercode---code-classlanguage-textmultiplebagfetchexceptioncode-발생\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfetchtypeeagercode---code-classlanguage-textmultiplebagfetchexceptioncode-%EB%B0%9C%EC%83%9D\" aria-label=\"code classlanguage textfetchtypeeagercode   code classlanguage textmultiplebagfetchexceptioncode 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">FetchType.EAGER</code> - <code class=\"language-text\">MultipleBagFetchException</code> 발생</h2>\n<ul>\n<li>현재는 위에 연관관계 fetchType이 <code class=\"language-text\">LAZY</code>로 되어 있지만 두 가지를 <code class=\"language-text\">EAGER</code>로 설정하여 즉시로딩 할 경우 <code class=\"language-text\">MultipleBagFetchExcpetion</code>이 발생한다. </li>\n<li>JPA에서는 다수의 <code class=\"language-text\">OneToMany</code>로 연관관계가 맺어져 있는 연관 엔티티에 대한 즉시로딩을 막고 있는데, 위에서 언급한 컬렉션 즉시로딩 시 발생하는 데이터 뻥튀기에 대한 제어가 어렵기 때문이다. </li>\n<li>발생 예외 - <br>\n<code class=\"language-text\">Caused by: org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags:</code> </li>\n</ul>\n<br>\n<h2 id=\"code-classlanguage-textfetchtypelazycode---code-classlanguage-textn1-문제code-발생\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfetchtypelazycode---code-classlanguage-textn1-%EB%AC%B8%EC%A0%9Ccode-%EB%B0%9C%EC%83%9D\" aria-label=\"code classlanguage textfetchtypelazycode   code classlanguage textn1 문제code 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">FetchType.LAZY</code> - <code class=\"language-text\">N+1 문제</code> 발생</h2>\n<ul>\n<li><code class=\"language-text\">Team</code>의 <code class=\"language-text\">Member</code>와 <code class=\"language-text\">Locker</code>가 각각 <code class=\"language-text\">OneToMany</code> 연관관계가 맺어져 있다. </li>\n<li>다음과 같이 메소드를 실행 할 때 N + 1 쿼리가 발생한다. </li>\n<li>\n<p>실행 서비스 로직</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team의 Members, Lockers 관련 서비스 로직이 있을 때 N+1 문제가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findAll_TooManyQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//모든 teams를 조회하는 select 쿼리 1개가 발생한다.</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> memberNames <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//각 팀 A개에 대한 각각의 Member select 쿼리 N개가 발생한다.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lockerNums <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//각 팀 A개에 대한 각각의 Locker select 쿼리 N개가 발생한다.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getLockers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locker</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>lockerNums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>실제 발생 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: <span class=\"token comment\">#Team 전체 조회</span>\n<span class=\"token keyword\">select</span>\n    team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_ \n<span class=\"token keyword\">from</span>\n    team team0_\nHibernate: <span class=\"token comment\">#첫번째 Team의 Member 조회</span>\n    <span class=\"token keyword\">select</span> \n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\nHibernate: <span class=\"token comment\">#두번째 Team의 Member 조회</span>\n    <span class=\"token keyword\">select</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\nHibernate: <span class=\"token comment\">#첫번째 Team의 Locker 조회</span>\n    <span class=\"token keyword\">select</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_ \n    <span class=\"token keyword\">from</span>\n        locker lockers0_ \n    <span class=\"token keyword\">where</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\nHibernate: <span class=\"token comment\">#두번째 Team의 Locker 조회</span>\n    <span class=\"token keyword\">select</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_ \n    <span class=\"token keyword\">from</span>\n        locker lockers0_ \n    <span class=\"token keyword\">where</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n<li><code class=\"language-text\">Team</code>을 전체 조회할 때 지연로딩으로 인해 각 <code class=\"language-text\">Team</code> 마다 <code class=\"language-text\">Member</code> 조회 쿼리, <code class=\"language-text\">Locker</code> 조회 쿼리가 팀의 개수 N 만큼 추가로 나가므로 <code class=\"language-text\">N+1 문제</code>가 발생한 것이다.</li>\n<li>팀의 개수가 많으면 많을수록 추가적인 쿼리가 많이 나가 성능이 더욱 떨어진다. </li>\n<li>해결하기 위해서는 연관관계 엔티티를 즉시로딩하거나 비슷한 방법을 사용하여 적은 쿼리로 select 할 수 있도록 해야한다.  </li>\n</ul>\n<br>\n<h3 id=\"하나의-collection-code-classlanguage-textfetch-joincode을-할-경우\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%82%98%EC%9D%98-collection-code-classlanguage-textfetch-joincode%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"하나의 collection code classlanguage textfetch joincode을 할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하나의 collection <code class=\"language-text\">fetch join</code>을 할 경우</h3>\n<ul>\n<li>우선 하나의 Collection이라도 <code class=\"language-text\">fetch join</code> 한다면 어떻게 동작이 될까? </li>\n<li>\n<p>Team을 조회할 때 다음과 같은 쿼리를 사용해서 Lockers 컬렉션만 join fetch 하도록 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct t from Team t join fetch t.lockers\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchLockers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>실행 서비스 로직은 바로 위와 같고, teams를 조회할 때문 위의 쿼리를 사용했다. </li>\n<li>\n<p>실제 발생 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: <span class=\"token comment\">#전체 팀 조회 시 lockers를 join fetch 한다. </span>\n<span class=\"token keyword\">select</span>\n    <span class=\"token keyword\">distinct</span> team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_0_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_0_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_1_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0__<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0__ \n<span class=\"token keyword\">from</span>\n    team team0_ \n<span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span>\n    locker lockers1_ \n        <span class=\"token keyword\">on</span> team0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>lockers1_<span class=\"token punctuation\">.</span>team_id\n\nHibernate: <span class=\"token comment\">#첫번째 Team의 Member 조회</span>\n    <span class=\"token keyword\">select</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\n    <span class=\"token keyword\">select</span> <span class=\"token comment\">#두번째 Team의 Member 조회</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?</code></pre></div>\n<ul>\n<li>Lockers 컬렉션을 join fetch 해서 즉시로딩 했으니, lockers 컬렉션 관련 서비스 로직 실행 시 추가 쿼리는 발생하지 않았다. </li>\n<li>여전히 Members에 대해서는 team N개 만큼의 추가 쿼리 N개가 발생했다. </li>\n<li>어느정도 쿼리가 줄긴 했으나, 여젼히 <code class=\"language-text\">N+1 문제</code>가 발생하고 있다. </li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"다수의-collection-code-classlanguage-textfetch-joincode을-할-경우---code-classlanguage-textmutiplebagfetchexceptioncode-발생\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%88%98%EC%9D%98-collection-code-classlanguage-textfetch-joincode%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0---code-classlanguage-textmutiplebagfetchexceptioncode-%EB%B0%9C%EC%83%9D\" aria-label=\"다수의 collection code classlanguage textfetch joincode을 할 경우   code classlanguage textmutiplebagfetchexceptioncode 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다수의 collection <code class=\"language-text\">fetch join</code>을 할 경우 - <code class=\"language-text\">MutipleBagFetchException</code> 발생</h2>\n<ul>\n<li>그렇다면 두 개의 컬렉션을 모두 fetch join 한다면 쿼리를 최적화 할 수 있지 않을까 생각할 수 있다. </li>\n<li>하지만 두개의 OneToMany 연관관계에 있는 collection fetch join을 할 경우 <code class=\"language-text\">MutipleBagFetchException</code> 예외가 발생한다. </li>\n<li>\n<p>두개의 collection을 fetch join 하는 JPQL</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct t from Team t join fetch t.members join fetch t.lockers\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>발생 예외 - <br>\n<code class=\"language-text\">Caused by: org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags:</code> </li>\n<li>collection을 <code class=\"language-text\">fetch join</code> 하면서 데이터 뻥튀기가 일어나기 때문인데 두 개 이상의 컬렉션을 할 경우 그 복잡도가 높아지기 때문에 JPA에서는 예외로 처리한다. </li>\n<li>위 쿼리를 실행하기도 전에 <code class=\"language-text\">JPA Entity Manager</code>에서 오류를 발견하여 어플리케이션 실행 시작 당시 <code class=\"language-text\">Bean Creation</code> 단계에서 예외를 던져 어플리케이션이 실행되지 못하게 한다. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"또-다른-문제-jpa-pagination\" style=\"position:relative;\"><a href=\"#%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%AC%B8%EC%A0%9C-jpa-pagination\" aria-label=\"또 다른 문제 jpa pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>또 다른 문제, JPA Pagination</h2>\n<ul>\n<li>위와 같은 서비스 로직을 실행할 때 뿐 아니라 JPA Pagination을 적용하려고 할 때 collection fetch join의 문제가 발생한다. </li>\n<li>collection fetch 를 할 경우 데이터 뻥튀기가 발생하기 때문에 Paging에 애매하게 되기 때문에 <code class=\"language-text\">select</code> 할 때 <code class=\"language-text\">WARN</code>이 발생한다.\n<br></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token date number\">2021-08-22</span> <span class=\"token time number\">22:04:27.898</span>  <span class=\"token level warning important\">WARN</span> <span class=\"token number\">4825</span> <span class=\"token separator comment\">---</span> <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> o<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>QueryTranslatorImpl   <span class=\"token operator\">:</span> HHH000104<span class=\"token operator\">:</span> firstResult<span class=\"token operator\">/</span>maxResults specified with collection fetch<span class=\"token operator\">;</span> applying in memory<span class=\"token operator\">!</span>\n<span class=\"token property\">Hibernate:</span> \n    select\n        distinct team0_<span class=\"token punctuation\">.</span>id as id1_2_0_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>id as id1_1_1_<span class=\"token punctuation\">,</span>\n        team0_<span class=\"token punctuation\">.</span>name as name2_2_0_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>name as name2_1_1_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>team_id as team_id3_1_1_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>team_id as team_id3_1_0__<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>id as id1_1_0__ \n    from\n        team team0_ \n    inner join\n        member members1_ \n            on team0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>members1_<span class=\"token punctuation\">.</span>team_id</code></pre></div>\n<ul>\n<li>그렇기 때문에 Pageable을 적용하면서 N+1 문제에 대해 <code class=\"language-text\">fetch join</code>만을 사용해서 해결하기는 어렵다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"해결방법-batchsize-적용하기\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"해결방법 batchsize 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법: BatchSize 적용하기</h2>\n<ul>\n<li>위 문제를 해결할 수 있는 방법 중 하나는 BatchSize를 적용하는 것이다. </li>\n<li><code class=\"language-text\">spring.jpa.properties.hibernate.default_batch_fetch_size={batchSize}</code> 를 <code class=\"language-text\">application.properties</code>에 지정하면 설정된 Batch Size만큼 <code class=\"language-text\">IN</code> 쿼리로 날라간다. </li>\n<li>\n<p>위와 동일한 테스트 코드 실행 (Pagination을 추가한 것 외에는 동일히다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Batch size를 적용해 Pagination을 하면 N+1문제나 경고가 뜨지 않는다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findWithPagination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pageable</span> pageable <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> teamRepository\n        <span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> memberNames <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//최대 batch size만큼 IN 쿼리로 한번에 처리된다</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lockerNums <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//최대 batch size만큼 IN 쿼리로 한번에 처리된다</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getLockers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locker</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>lockerNums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>실제 실행된 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: <span class=\"token comment\"># 전체 팀 조회 쿼리</span>\n<span class=\"token keyword\">select</span>\n    team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_ \n<span class=\"token keyword\">from</span>\n    team team0_ <span class=\"token keyword\">limit</span> ?\nHibernate: \n    <span class=\"token keyword\">select</span>\n        <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>team0_<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> col_0_0_ \n    <span class=\"token keyword\">from</span>\n        team team0_\nHibernate: <span class=\"token comment\"># Team 2개의 Id가 IN 절로 한번에 조회된다. </span>\n    <span class=\"token keyword\">select</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n            ?<span class=\"token punctuation\">,</span> ?\n        <span class=\"token punctuation\">)</span>\n<span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">02</span>:<span class=\"token number\">41</span>:<span class=\"token number\">39.149</span> TRACE <span class=\"token number\">5511</span> <span class=\"token comment\">--- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]</span>\n<span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">02</span>:<span class=\"token number\">41</span>:<span class=\"token number\">39.149</span> TRACE <span class=\"token number\">5511</span> <span class=\"token comment\">--- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [2]</span>\nHibernate: <span class=\"token comment\"># Team 2개의 Id가 IN 절로 한번에 조회된다. </span>\n    <span class=\"token keyword\">select</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_ \n    <span class=\"token keyword\">from</span>\n        locker lockers0_ \n    <span class=\"token keyword\">where</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n            ?<span class=\"token punctuation\">,</span> ?\n        <span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>이전에는 전체 팀 조회 쿼리 1개 + Team 2개에 대한 Members 조회 쿼리 2개 + Team 2개에 대한 Lockers 조회 쿼리 2개해서 총 5개의 쿼리가 나갔다. </li>\n<li>Batch size를 적용한 이후에는 전체 팀 조회 쿼리 1개 + Team의 Members 조회 쿼리 1개 + Team의 Lockers 조회 쿼리 1개 총 2개의 쿼리가 나갔다. </li>\n<li>Team의 사이즈가 클 수록 더 쿼리 차이가 많이 난다. </li>\n<li>Batch size는 1000을 넘어가지 않도록 설정하는 것이 좋다.</li>\n</ul>\n<br>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://jojoldu.tistory.com/457\">https://jojoldu.tistory.com/457</a></li>\n<li><a href=\"https://www.inflearn.com/questions/14663\">https://www.inflearn.com/questions/14663</a></li>\n<li><a href=\"https://jojoldu.tistory.com/165\">https://jojoldu.tistory.com/165</a></li>\n<li><a href=\"https://woowacourse.github.io/tecoble/post/2021-07-26-jpa-pageable/\">https://woowacourse.github.io/tecoble/post/2021-07-26-jpa-pageable/</a> </li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">INTRO</a></li>\n<li><a href=\"#entity-%EC%83%81%ED%99%A9\">Entity 상황</a></li>\n<li><a href=\"#jpa%EC%97%90%EC%84%9C-collection-fetch-join\">JPA에서 collection fetch join</a></li>\n<li><a href=\"#fetchtypeeager---multiplebagfetchexception-%EB%B0%9C%EC%83%9D\"><code class=\"language-text\">FetchType.EAGER</code> - <code class=\"language-text\">MultipleBagFetchException</code> 발생</a></li>\n<li>\n<p><a href=\"#fetchtypelazy---n1-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D\"><code class=\"language-text\">FetchType.LAZY</code> - <code class=\"language-text\">N+1 문제</code> 발생</a></p>\n<ul>\n<li><a href=\"#%ED%95%98%EB%82%98%EC%9D%98-collection-fetch-join%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0\">하나의 collection <code class=\"language-text\">fetch join</code>을 할 경우</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%8B%A4%EC%88%98%EC%9D%98-collection-fetch-join%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0---mutiplebagfetchexception-%EB%B0%9C%EC%83%9D\">다수의 collection <code class=\"language-text\">fetch join</code>을 할 경우 - <code class=\"language-text\">MutipleBagFetchException</code> 발생</a></li>\n<li><a href=\"#%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%AC%B8%EC%A0%9C-jpa-pagination\">또 다른 문제, JPA Pagination</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">해결방법: BatchSize 적용하기</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2021","title":"JPA N+1 문제 및 해결방법 알아보기","categories":"JPA","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-query-bug/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/jpa-proxy/","nextSlug":"/java-iostream-file/","prevSlug":"/jpa-query-bug/"}},"staticQueryHashes":["1073350324","2938748437"]}