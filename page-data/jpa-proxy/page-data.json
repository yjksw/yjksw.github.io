{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/jpa-proxy/",
    "result": {"data":{"cur":{"id":"0bbf1a5f-5450-5c71-8533-7652d2132ffe","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h2>\n<ul>\n<li>JPA는 DB의 데이터와 객체간의 모순을 해결하기 위해서 나온 것이다.</li>\n<li>객체는 객체 그래프로 탐색이 가능하지만 데이터베이스에 저장된 데이터는 객체를 탐색하듯이 탐색하기가 어렵다.</li>\n<li>따라서 데이터베이스에 저장된 데이터들을 가지고 객체 그래프 탐색이 가능하기 위해서 프록시 라는 기술이 나왔다.</li>\n<li>JPA에서는 연관된 객체를 로딩하는데 지연 로딩과 즉시 로딩이라는 두가지 기법을 사용한다.</li>\n<li>여기서 지연 로딩시 프록시 기술이 사용된다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"기본-예시-entity\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity\" aria-label=\"기본 예시 entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 예시 Entity</h2>\n<ol>\n<li>Member\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> team<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//getter 및 생성자 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>Team\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//getter 및 생성자 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<br>\n<h2 id=\"프록시\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C\" aria-label=\"프록시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시</h2>\n<ul>\n<li>지연 로딩을 설정된 연관 객체를 가져올 때 프록시 객체를 가져온다.</li>\n<li><code class=\"language-text\">em.find()</code>를 사용하면 실제 객체를 가져오고, <code class=\"language-text\">em.getReference()</code>를 사용하면 프록시 객체를 가져온다.\n<ul>\n<li>프록시 객체를 가져온다는 것은 query는 실행되지 않는 것이다.</li>\n<li>특정 객체에 대해 <code class=\"language-text\">em.find()</code>를 하면 연관된 객체에 대해서는 설정되어 있는 <code class=\"language-text\">fetch</code> 종류에 따라 즉시로딩 혹은 지연로딩한다.</li>\n</ul>\n</li>\n</ul>\n<br> \n<h3 id=\"실제-entity-조회---code-classlanguage-textfindcode\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textfindcode\" aria-label=\"실제 entity 조회   code classlanguage textfindcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 Entity 조회 - <code class=\"language-text\">find()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"em.find()는 실제 entity를 조회하여 가져온다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">find_actualEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//select 퀴리가 호출된다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실제 엔티티 클래스임을 확인할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 테스트를 실행하면 다음과 같은 select 쿼리가 실행된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    member0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_ \n<span class=\"token keyword\">from</span>\n    member member0_ \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> <span class=\"token comment\">#ManyToOne, OneToOne 기본 fetch 전략은 EAGER이므로 left join을 실행해서 Team까지 즉시로딩한다. </span>\n    team team1_ \n        <span class=\"token keyword\">on</span> member0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>team1_<span class=\"token punctuation\">.</span>id \n<span class=\"token keyword\">where</span>\n    member0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<br>\n<h3 id=\"프록시-entity-조회---code-classlanguage-textgetreferencecode\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textgetreferencecode\" aria-label=\"프록시 entity 조회   code classlanguage textgetreferencecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 Entity 조회 - <code class=\"language-text\">getReference()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"em.getReference()는 해당 entity에 대한 proxy 객체를 가져온다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_proxyEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//아무 쿼리가 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//getId()는 여전히 쿼리는 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실제 Entity 클래스가 아니다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체는 실제 Entity 를 상속한다.</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//출력 : class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 테스트 코드는 select 쿼리를 호출하지 않는다.</li>\n<li><code class=\"language-text\">getId()</code>는 해당 entity에 대한 getter이기는 하나, 프록시는 해당 entity에 대한 식별자를 보관하므로 <code class=\"language-text\">getId()</code>를 호출하더라도 entity를 초기화하지 않는다. (여진히 쿼리가 실행되지 않는다.)</li>\n<li>위에서 <code class=\"language-text\">findMember.getClass()</code>를 출력해보면 <code class=\"language-text\">class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR</code> 와 같이 프록시 객체 임을 확인할 수 있다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-특징-및-초기화\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"프록시 객체 특징 및 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 특징 및 초기화</h2>\n<ul>\n<li>초기화는 영속성 컨텍스트에 실제 객체가 없을 경우 엔티티 생성을 요청하여 영속성 컨텍스트에 실제 entity를 로드하고 참조값을 저장하는 것이다.</li>\n<li>프록시 객체는 실제 객체를 상속한다. 따라서 사용할 때는 실제 Entity처럼 사용할 수 있다.</li>\n</ul>\n<p align=\"center\"><img width=\"500\" alt=\"스크린샷 2021-08-15 오후 3 58 10\" src=\"https://user-images.githubusercontent.com/63405904/129469950-dd48c26f-5554-4fdd-9e1f-5d38399ae46b.png\"><br>이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)</p>\n<br>\n<ul>\n<li>프록시 객체는 실제 Entity에 대한 식별자와 해당 Entity의 참조값을 저장하고 있다. 따라서 <code class=\"language-text\">getId()</code>로 식별자 조회 시 초기화 하지 않는다.</li>\n<li>더불어 프록시 객체가 초기화 될 때 실제 entity 객체로 대체되는 것이 아니라, 프록시에 저장되어 있는 entity 참조값으로 실제 객체 메소드에 위임하여 메소드가 실행된다.</li>\n</ul>\n<p align=\"center\"><img width=\"500\" alt=\"스크린샷 2021-08-15 오후 4 03 26\" src=\"https://user-images.githubusercontent.com/63405904/129470031-d0c8bcd1-ea2a-479c-a45f-bc3afa4f20de.png\"><br>이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)</p>\n<br>\n<h3 id=\"getter-호출시-code-classlanguage-textgetidcode-제외-프록시-객체-초기화---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode\" style=\"position:relative;\"><a href=\"#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-code-classlanguage-textgetidcode-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode\" aria-label=\"getter 호출시 code classlanguage textgetidcode 제외 프록시 객체 초기화   code classlanguage textgetreferencecode   code classlanguage textgetnamecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getter 호출시 (<code class=\"language-text\">getId()</code> 제외) 프록시 객체 초기화 - <code class=\"language-text\">getReference()</code> -> <code class=\"language-text\">getName()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy 객체는 getName() 등을 호출 할 경우 초기화 된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_proxyEntity_getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//아무 쿼리가 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//getId()는 여전히 쿼리는 호출되지 않는다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//select 쿼리가 실행된다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//초기화 되어도 여전히 실제 Entity 클래스가 아니다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체는 실제 Entity 를 상속한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    member0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_ \n<span class=\"token keyword\">from</span>\n    member member0_ \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span>\n    team team1_ \n        <span class=\"token keyword\">on</span> member0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>team1_<span class=\"token punctuation\">.</span>id \n<span class=\"token keyword\">where</span>\n    member0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<ul>\n<li>getName() 실행 시 위 select 쿼리가 실행된다.</li>\n</ul>\n<br>\n<h3 id=\"프록시-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 특징</h3>\n<ul>\n<li>처음 단 한번만 초기화 된다.</li>\n<li>프록시 객체가 대체되는 것이 아니라 프록시 객체를 통해 실제 entity 접근하는 것이다.</li>\n<li>타입 체크시 주의해야 한다. (아래 더 자세히 다룸)</li>\n<li>영속성 컨텍스트에 이미 해당 entity가 있다면 <code class=\"language-text\">getReference()</code>를 해도 실제 entity가 조회된다.</li>\n<li>영속성 컨텍스트를 통해 초기화 하므로 영속성 컨텍스트와 연결이 없다면 <code class=\"language-text\">LazyInitializationException</code> 예외가 발생한다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-타입-체크\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\" aria-label=\"프록시 객체 타입 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 타입 체크</h2>\n<ul>\n<li>프록시 객체의 타입은 <code class=\"language-text\">getClass()</code> 로 비교할 경우 프록시 객체 클래스가 조회되기 때문에 비교하기 위해서는 <code class=\"language-text\">instanceOf</code> 를 사용해야 한다.</li>\n<li>많은 경우 프록시 객체를 <code class=\"language-text\">getClass()</code>로 실제 entity와 비교하여 버그가 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy 객체의 타입은 실제 entity 객체 타입과 다르다. getClass()로 비교할 경우 false가 반환된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">proxyType_getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//프록시 객체를 가져오기 위해 Member의 Team 프로퍼티를 FetchType.LAZY로 설정</span>\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team은 지연로딩으로 프록시객체이다.</span>\n    <span class=\"token class-name\">Team</span> findTeam <span class=\"token operator\">=</span> findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//기존 TeamA와 프록시 팀인 findTeam의 필드값은 동일하다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 팀읜 findTeam의 class는 Team이 아니다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//isInstanceOf로 비교하면 상속 받은 Team.class 이다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"영속성-컨텍스트에-있는-entity-getreference\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference\" aria-label=\"영속성 컨텍스트에 있는 entity getreference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영속성 컨텍스트에 있는 entity getReference</h2>\n<ul>\n<li>영속성 컨텍스트에 조회하고자 하는 entity가 이미 존재한다면 <code class=\"language-text\">getReference()</code>를 사용하더라도 프록시 객체가 아닌 실제 entity 가 반환된다.</li>\n</ul>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이미 영속성 컨텍스트에 있는 entity 조회시 getReference로 조회해도 실제 entity가 반환된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_AlreadyInPersistenceContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//영속성 컨텍스트에 존재햔다.</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프록시 객체를 가져오듯 메서드를 호출한다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시가 아닌 실제 entity 클래스를 가져온다. 추가적인 쿼리는 실행되지 않는다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"준영속-entity-초기화\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"준영속 entity 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준영속 entity 초기화</h2>\n<ul>\n<li>준영속이 된 프록시 객체에서 초기화를 시도할 경우 하이버네이트의 <code class=\"language-text\">LazyInitializationException</code>이 발생한다.</li>\n<li>프록시의 초기화는 영속성 컨텍스트와 매우 밀접하게 관련이 있으므로 영속성 컨텍스트와의 관계가 끊어지면 에외가 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"준영속 프록시 객체에 대한 초기화 시 예외가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_InitializationExcpetion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.</span>\n\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//먼저 영속성 컨텍스트를 clear 해주어야한다. </span>\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체를 가져온 영속성 컨텍스트를 종료한다.</span>\n\n    <span class=\"token function\">assertThatThrownBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//영속성 컨텍스트가 종료된 이후에 초기화를 시도하면</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazyInitializationException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//하이버네이트 예외가 발생한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Member</code>의 <code class=\"language-text\">Team</code>을 지연로딩으로 <code class=\"language-text\">fetch</code> 타입을 설정하여 <code class=\"language-text\">Member</code> 조회시 <code class=\"language-text\">Team</code>은 프록시 객체이도록 한다.</li>\n<li>영속성 컨텍스트를 닫은 후에 초기화를 시도하면 예외가 발생한다.\n<ul>\n<li>단순히 <code class=\"language-text\">Member.getTeam()</code> 이 초기화를 실행하지 않고 실제 <code class=\"language-text\">Team</code>의 필드가 사용될 때 (<code class=\"language-text\">getName()</code> 등) 초기화가 된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-확인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8\" aria-label=\"프록시 객체 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 확인</h2>\n<ul>\n<li>프록시 객체 확인을 위해서는 <code class=\"language-text\">PersistenceUnitUtil.isLoaded(Object entity)</code>를 사용해서 확인할 수 있다.</li>\n<li>때때로 jpa repostiory에 대한 단위 테스트를 작성하려고 할 때, 의도한대로 지연로딩 또는 즉시로딩이 되었는지 확인할 때 사용할 수 있다.</li>\n<li>만일 초기화가 안된 프록시 객체라면 위 결과값이 <code class=\"language-text\">false</code>가 반환된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"프록시 객체를 확인할 수 있다. \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">PersistenceUnitUtil_Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.</span>\n\n    <span class=\"token keyword\">boolean</span> memberIsLoaded <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getPersistenceUnitUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> teamIsLoaded <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getPersistenceUnitUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//EntityManagerFactory에서 PersistenceUnitUtil을 가져온다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberIsLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//findMember 는 실제 entity 이므로 결과값이 true 이다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamIsLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//team 은 프록시 객체이므로 결과값이 false 이다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">INTRO</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity\">기본 예시 Entity</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C\">프록시</a></p>\n<ul>\n<li><a href=\"#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---find\">실제 Entity 조회 - <code class=\"language-text\">find()</code></a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---getreference\">프록시 Entity 조회 - <code class=\"language-text\">getReference()</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94\">프록시 객체 특징 및 초기화</a></p>\n<ul>\n<li><a href=\"#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-getid-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---getreference---getname\">Getter 호출시 (<code class=\"language-text\">getId()</code> 제외) 프록시 객체 초기화 - <code class=\"language-text\">getReference()</code> -> <code class=\"language-text\">getName()</code></a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95\">프록시 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\">프록시 객체 타입 체크</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference\">영속성 컨텍스트에 있는 entity getReference</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94\">준영속 entity 초기화</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8\">프록시 객체 확인</a></p>\n</li>\n</ul>\n</div>","excerpt":"INTRO JPA는 DB의 데이터와 객체간의 모순을 해결하기 위해서 나온 것이다. 객체는 객체 그래프로 탐색이 가능하지만 데이터베이스에 저장된 데이터는 객체를 탐색하듯이 탐색하기가 어렵다. 따라서 데이터베이스에 저장된 데이터들을 가지고 객체 그래프 탐색이 가능하기 위해서 프록시 라는 기술이 나왔다. JPA에서는 연관된 객체를 로딩하는데 지연 로딩과 즉시 로딩이라는 두가지 기법을 사용한다. 여기서 지연 로딩시 프록시 기술이 사용된다. 기본 예시 Entity Member Team 프록시 지연 로딩을 설정된 연관 객체를 가져올 때 프록시 객체를 가져온다. 를 사용하면 실제 객체를 가져오고, 를 사용하면 프록시 객체를 가져온다. 프록시 객체를 가져온다는 것은 query는 실행되지 않는 것이다. 특정 객체에 대해 를 하면 연관된 객체에 대해서는 설정되어 있는  종류에 따라 즉시로딩 혹은 지연로딩한다. 실제 Entity 조회 -  위 테스트를 실행하면 다음과 같은 select 쿼리가 실행된다…","frontmatter":{"date":"August 26, 2021","title":"JPA 프록시 알아보기","categories":"JPA","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-proxy/"}},"next":{"id":"7bad748d-3789-5403-bce9-4bf2f8205619","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h2>\n<ul>\n<li>JPA에서는 데이터와 객체지향으로 설계 사이의 모순을 해소하기 위해서 나온 기술이다.</li>\n<li>많은 객체들은 내부에 Collection 형태로 다른 객체에 대한 참조가 가능하게 설계된다.\n<ul>\n<li>예) <code class=\"language-text\">Team</code> 객체 내부에 <code class=\"language-text\">Team</code>에 속해있는 <code class=\"language-text\">List&lt;Member></code> 와 팀에 할당된 <code class=\"language-text\">List&lt;Locker></code>가 존재한다.</li>\n</ul>\n</li>\n<li>이때 상위 객체를 select 하면서 하위 객체를 가져오는 경우 다음 두가지 fetch 타입에 각각 다음과 같은 문제가 있다.\n<ul>\n<li><code class=\"language-text\">fetch = FetchType.EAGER</code>일 경우 : <code class=\"language-text\">MultipleBagFetchException</code>이 발생</li>\n<li><code class=\"language-text\">fetch = FetchType.LAZY</code>일 경우 : <code class=\"language-text\">N+1</code> 문제 발생</li>\n</ul>\n</li>\n<li>상위 엔티티에서 다수의 collection 형태의 연관엔티티를 가지고 있을 때 여러 상황 및 문제와 해결 방법에 대해서 공부해본다.</li>\n</ul>\n<br>\n<h2 id=\"entity-상황\" style=\"position:relative;\"><a href=\"#entity-%EC%83%81%ED%99%A9\" aria-label=\"entity 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 상황</h2>\n<ul>\n<li><code class=\"language-text\">Team</code>과 <code class=\"language-text\">Member</code>가 1:N 연관관계 - <code class=\"language-text\">FetchType.LAZY</code>, <code class=\"language-text\">cascadeType.PERSIST</code></li>\n<li><code class=\"language-text\">Team</code>과 <code class=\"language-text\">Locker</code>가 1:N 연관관계 - <code class=\"language-text\">FetchType.LAZY</code>, <code class=\"language-text\">cascadeType.PERSIST</code></li>\n<li>참고 : 우선 모든 연관관계는 <code class=\"language-text\">LAZY</code>로 적용하고 테스트 상황에 따라 <code class=\"language-text\">EAGER</code>로 변경</li>\n</ul>\n<ol>\n<li>\n<p><code class=\"language-text\">Team</code> 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>EAGER<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>\n        mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">,</span>\n        cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">,</span>\n        fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>EAGER<span class=\"token punctuation\">,</span>\n        orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Locker</span><span class=\"token punctuation\">></span></span> lockers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...생성자 생략 </span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locker</span> locker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        locker<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        members<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>member <span class=\"token operator\">-></span> member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members <span class=\"token operator\">=</span> members<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Member</code> 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//생성자 및 setter, getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Locker</code> 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Locker</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//생성자 및 setter, getter 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"jpa에서-collection-fetch-join\" style=\"position:relative;\"><a href=\"#jpa%EC%97%90%EC%84%9C-collection-fetch-join\" aria-label=\"jpa에서 collection fetch join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA에서 collection fetch join</h2>\n<ul>\n<li>\n<p>Team에 대한 모든 정보가 필요한 경우 Team을 가져오면서 Members와 Lockers 정보도 모두 함께 가지고 와야하는 경우가 있을 수 있다.</p>\n</li>\n<li>\n<p>JPA에서는 <code class=\"language-text\">OneToMany</code>관계에서 fetch join을 할 경우 중복 데이터가 발생한다. 따라서 해결을 하기 위해서 쿼리에 <code class=\"language-text\">distinct</code>를 추가해주어 중복을 없애야한다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">distinct</code>가 없는 collection fetch join</p>\n<ul>\n<li>TeamRepository.java</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select t from Team t join fetch t.members\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">distinct</code> 있는 collection fetch join</p>\n<ul>\n<li>TeamRepository.java</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct t from Team t join fetch t.members\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>실제 실행된 query</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_0_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_0_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0__<span class=\"token punctuation\">,</span>\n    members1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0__ \n<span class=\"token keyword\">from</span>\n    team team0_ \n<span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span>\n    member members1_ \n        <span class=\"token keyword\">on</span> team0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>members1_<span class=\"token punctuation\">.</span>team_id</code></pre></div>\n</li>\n</ol>\n  <br>\n<ul>\n<li>Test Method\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@BeforeEach</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamB<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamB<span class=\"token punctuation\">.</span><span class=\"token function\">addLocker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> memberA1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberA2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberA3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberA3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> memberB1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberB1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberB2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberB2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> memberB3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberB3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> teamAMembers <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>memberA1<span class=\"token punctuation\">,</span> memberA2<span class=\"token punctuation\">,</span> memberA3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> teamBMembers <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>memberB1<span class=\"token punctuation\">,</span> memberB2<span class=\"token punctuation\">,</span> memberB3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    teamA<span class=\"token punctuation\">.</span><span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span>teamAMembers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamB<span class=\"token punctuation\">.</span><span class=\"token function\">setMembers</span><span class=\"token punctuation\">(</span>teamBMembers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>teamB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collection fetch join 데이터에 대해 데이터 뻥튀기가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">collectionFetchJoin_DuplicatedDataSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//members와 lockers가 지연로딩이므로 select 쿼리 1개</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teamsWithMembers <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamsWithMembers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// members에 대한 fetch join을 할 경우(distinct 없음) 데이터 뻥튀기가 발생한다.</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teamsWithMembers <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllJoinFetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamsWithMembers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// members에 대한 fetch join을 할 경우(distinct 있음) 데이터 중복이 일어나지 않는다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"code-classlanguage-textfetchtypeeagercode---code-classlanguage-textmultiplebagfetchexceptioncode-발생\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfetchtypeeagercode---code-classlanguage-textmultiplebagfetchexceptioncode-%EB%B0%9C%EC%83%9D\" aria-label=\"code classlanguage textfetchtypeeagercode   code classlanguage textmultiplebagfetchexceptioncode 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">FetchType.EAGER</code> - <code class=\"language-text\">MultipleBagFetchException</code> 발생</h2>\n<ul>\n<li>현재는 위에 연관관계 fetchType이 <code class=\"language-text\">LAZY</code>로 되어 있지만 두 가지를 <code class=\"language-text\">EAGER</code>로 설정하여 즉시로딩 할 경우 <code class=\"language-text\">MultipleBagFetchExcpetion</code>이 발생한다.</li>\n<li>JPA에서는 다수의 <code class=\"language-text\">OneToMany</code>로 연관관계가 맺어져 있는 연관 엔티티에 대한 즉시로딩을 막고 있는데, 위에서 언급한 컬렉션 즉시로딩 시 발생하는 데이터 뻥튀기에 대한 제어가 어렵기 때문이다.</li>\n<li>발생 예외 - <br>\n<code class=\"language-text\">Caused by: org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags:</code></li>\n</ul>\n<br>\n<h2 id=\"code-classlanguage-textfetchtypelazycode---code-classlanguage-textn1-문제code-발생\" style=\"position:relative;\"><a href=\"#code-classlanguage-textfetchtypelazycode---code-classlanguage-textn1-%EB%AC%B8%EC%A0%9Ccode-%EB%B0%9C%EC%83%9D\" aria-label=\"code classlanguage textfetchtypelazycode   code classlanguage textn1 문제code 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">FetchType.LAZY</code> - <code class=\"language-text\">N+1 문제</code> 발생</h2>\n<ul>\n<li><code class=\"language-text\">Team</code>의 <code class=\"language-text\">Member</code>와 <code class=\"language-text\">Locker</code>가 각각 <code class=\"language-text\">OneToMany</code> 연관관계가 맺어져 있다.</li>\n<li>다음과 같이 메소드를 실행 할 때 N + 1 쿼리가 발생한다.</li>\n<li>실행 서비스 로직\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team의 Members, Lockers 관련 서비스 로직이 있을 때 N+1 문제가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findAll_TooManyQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> teamRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//모든 teams를 조회하는 select 쿼리 1개가 발생한다.</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> memberNames <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//각 팀 A개에 대한 각각의 Member select 쿼리 N개가 발생한다.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lockerNums <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//각 팀 A개에 대한 각각의 Locker select 쿼리 N개가 발생한다.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getLockers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locker</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>lockerNums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>실제 발생 쿼리\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: <span class=\"token comment\">#Team 전체 조회</span>\n<span class=\"token keyword\">select</span>\n    team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_ \n<span class=\"token keyword\">from</span>\n    team team0_\nHibernate: <span class=\"token comment\">#첫번째 Team의 Member 조회</span>\n    <span class=\"token keyword\">select</span> \n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\nHibernate: <span class=\"token comment\">#두번째 Team의 Member 조회</span>\n    <span class=\"token keyword\">select</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\nHibernate: <span class=\"token comment\">#첫번째 Team의 Locker 조회</span>\n    <span class=\"token keyword\">select</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_ \n    <span class=\"token keyword\">from</span>\n        locker lockers0_ \n    <span class=\"token keyword\">where</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\nHibernate: <span class=\"token comment\">#두번째 Team의 Locker 조회</span>\n    <span class=\"token keyword\">select</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_ \n    <span class=\"token keyword\">from</span>\n        locker lockers0_ \n    <span class=\"token keyword\">where</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n<li><code class=\"language-text\">Team</code>을 전체 조회할 때 지연로딩으로 인해 각 <code class=\"language-text\">Team</code> 마다 <code class=\"language-text\">Member</code> 조회 쿼리, <code class=\"language-text\">Locker</code> 조회 쿼리가 팀의 개수 N 만큼 추가로 나가므로 <code class=\"language-text\">N+1 문제</code>가 발생한 것이다.</li>\n<li>팀의 개수가 많으면 많을수록 추가적인 쿼리가 많이 나가 성능이 더욱 떨어진다.</li>\n<li>해결하기 위해서는 연관관계 엔티티를 즉시로딩하거나 비슷한 방법을 사용하여 적은 쿼리로 select 할 수 있도록 해야한다.</li>\n</ul>\n<br>\n<h3 id=\"하나의-collection-code-classlanguage-textfetch-joincode을-할-경우\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%82%98%EC%9D%98-collection-code-classlanguage-textfetch-joincode%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"하나의 collection code classlanguage textfetch joincode을 할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하나의 collection <code class=\"language-text\">fetch join</code>을 할 경우</h3>\n<ul>\n<li>우선 하나의 Collection이라도 <code class=\"language-text\">fetch join</code> 한다면 어떻게 동작이 될까?</li>\n<li>Team을 조회할 때 다음과 같은 쿼리를 사용해서 Lockers 컬렉션만 join fetch 하도록 한다.\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct t from Team t join fetch t.lockers\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchLockers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>실행 서비스 로직은 바로 위와 같고, teams를 조회할 때문 위의 쿼리를 사용했다.</li>\n<li>실제 발생 쿼리\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: <span class=\"token comment\">#전체 팀 조회 시 lockers를 join fetch 한다. </span>\n<span class=\"token keyword\">select</span>\n    <span class=\"token keyword\">distinct</span> team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_0_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_0_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_1_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0__<span class=\"token punctuation\">,</span>\n    lockers1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0__ \n<span class=\"token keyword\">from</span>\n    team team0_ \n<span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span>\n    locker lockers1_ \n        <span class=\"token keyword\">on</span> team0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>lockers1_<span class=\"token punctuation\">.</span>team_id\n\nHibernate: <span class=\"token comment\">#첫번째 Team의 Member 조회</span>\n    <span class=\"token keyword\">select</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?\n\n    <span class=\"token keyword\">select</span> <span class=\"token comment\">#두번째 Team의 Member 조회</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>?</code></pre></div>\n<ul>\n<li>Lockers 컬렉션을 join fetch 해서 즉시로딩 했으니, lockers 컬렉션 관련 서비스 로직 실행 시 추가 쿼리는 발생하지 않았다.</li>\n<li>여전히 Members에 대해서는 team N개 만큼의 추가 쿼리 N개가 발생했다.</li>\n<li>어느정도 쿼리가 줄긴 했으나, 여젼히 <code class=\"language-text\">N+1 문제</code>가 발생하고 있다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"다수의-collection-code-classlanguage-textfetch-joincode을-할-경우---code-classlanguage-textmutiplebagfetchexceptioncode-발생\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%88%98%EC%9D%98-collection-code-classlanguage-textfetch-joincode%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0---code-classlanguage-textmutiplebagfetchexceptioncode-%EB%B0%9C%EC%83%9D\" aria-label=\"다수의 collection code classlanguage textfetch joincode을 할 경우   code classlanguage textmutiplebagfetchexceptioncode 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다수의 collection <code class=\"language-text\">fetch join</code>을 할 경우 - <code class=\"language-text\">MutipleBagFetchException</code> 발생</h2>\n<ul>\n<li>\n<p>그렇다면 두 개의 컬렉션을 모두 fetch join 한다면 쿼리를 최적화 할 수 있지 않을까 생각할 수 있다.</p>\n</li>\n<li>\n<p>하지만 두개의 OneToMany 연관관계에 있는 collection fetch join을 할 경우 <code class=\"language-text\">MutipleBagFetchException</code> 예외가 발생한다.</p>\n</li>\n<li>\n<p>두개의 collection을 fetch join 하는 JPQL</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select distinct t from Team t join fetch t.members join fetch t.lockers\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJoinFetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>발생 예외 - <br>\n<code class=\"language-text\">Caused by: org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags:</code></p>\n</li>\n<li>\n<p>collection을 <code class=\"language-text\">fetch join</code> 하면서 데이터 뻥튀기가 일어나기 때문인데 두 개 이상의 컬렉션을 할 경우 그 복잡도가 높아지기 때문에 JPA에서는 예외로 처리한다.</p>\n</li>\n<li>\n<p>위 쿼리를 실행하기도 전에 <code class=\"language-text\">JPA Entity Manager</code>에서 오류를 발견하여 어플리케이션 실행 시작 당시 <code class=\"language-text\">Bean Creation</code> 단계에서 예외를 던져 어플리케이션이 실행되지 못하게 한다.</p>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"또-다른-문제-jpa-pagination\" style=\"position:relative;\"><a href=\"#%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%AC%B8%EC%A0%9C-jpa-pagination\" aria-label=\"또 다른 문제 jpa pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>또 다른 문제, JPA Pagination</h2>\n<ul>\n<li>위와 같은 서비스 로직을 실행할 때 뿐 아니라 JPA Pagination을 적용하려고 할 때 collection fetch join의 문제가 발생한다.</li>\n<li>collection fetch 를 할 경우 데이터 뻥튀기가 발생하기 때문에 Paging에 애매하게 되기 때문에 <code class=\"language-text\">select</code> 할 때 <code class=\"language-text\">WARN</code>이 발생한다.</li>\n</ul>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token date number\">2021-08-22</span> <span class=\"token time number\">22:04:27.898</span>  <span class=\"token level warning important\">WARN</span> <span class=\"token number\">4825</span> <span class=\"token separator comment\">---</span> <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> o<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>QueryTranslatorImpl   <span class=\"token operator\">:</span> HHH000104<span class=\"token operator\">:</span> firstResult<span class=\"token operator\">/</span>maxResults specified with collection fetch<span class=\"token operator\">;</span> applying in memory<span class=\"token operator\">!</span>\n<span class=\"token property\">Hibernate:</span> \n    select\n        distinct team0_<span class=\"token punctuation\">.</span>id as id1_2_0_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>id as id1_1_1_<span class=\"token punctuation\">,</span>\n        team0_<span class=\"token punctuation\">.</span>name as name2_2_0_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>name as name2_1_1_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>team_id as team_id3_1_1_<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>team_id as team_id3_1_0__<span class=\"token punctuation\">,</span>\n        members1_<span class=\"token punctuation\">.</span>id as id1_1_0__ \n    from\n        team team0_ \n    inner join\n        member members1_ \n            on team0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>members1_<span class=\"token punctuation\">.</span>team_id</code></pre></div>\n<ul>\n<li>그렇기 때문에 Pageable을 적용하면서 N+1 문제에 대해 <code class=\"language-text\">fetch join</code>만을 사용해서 해결하기는 어렵다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"해결방법-batchsize-적용하기\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"해결방법 batchsize 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법: BatchSize 적용하기</h2>\n<ul>\n<li>\n<p>위 문제를 해결할 수 있는 방법 중 하나는 BatchSize를 적용하는 것이다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">spring.jpa.properties.hibernate.default_batch_fetch_size={batchSize}</code> 를 <code class=\"language-text\">application.properties</code>에 지정하면 설정된 Batch Size만큼 <code class=\"language-text\">IN</code> 쿼리로 날라간다.</p>\n</li>\n<li>\n<p>위와 동일한 테스트 코드 실행 (Pagination을 추가한 것 외에는 동일히다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Batch size를 적용해 Pagination을 하면 N+1문제나 경고가 뜨지 않는다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">findWithPagination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pageable</span> pageable <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> teamRepository\n        <span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> memberNames <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//최대 batch size만큼 IN 쿼리로 한번에 처리된다</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lockerNums <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//최대 batch size만큼 IN 쿼리로 한번에 처리된다</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token operator\">::</span><span class=\"token function\">getLockers</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locker</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>lockerNums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>실제 실행된 쿼리</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: <span class=\"token comment\"># 전체 팀 조회 쿼리</span>\n<span class=\"token keyword\">select</span>\n    team0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_2_<span class=\"token punctuation\">,</span>\n    team0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_2_ \n<span class=\"token keyword\">from</span>\n    team team0_ <span class=\"token keyword\">limit</span> ?\nHibernate: \n    <span class=\"token keyword\">select</span>\n        <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>team0_<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> col_0_0_ \n    <span class=\"token keyword\">from</span>\n        team team0_\nHibernate: <span class=\"token comment\"># Team 2개의 Id가 IN 절로 한번에 조회된다. </span>\n    <span class=\"token keyword\">select</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_0_<span class=\"token punctuation\">,</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_1_0_ \n    <span class=\"token keyword\">from</span>\n        member members0_ \n    <span class=\"token keyword\">where</span>\n        members0_<span class=\"token punctuation\">.</span>team_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n            ?<span class=\"token punctuation\">,</span> ?\n        <span class=\"token punctuation\">)</span>\n<span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">02</span>:<span class=\"token number\">41</span>:<span class=\"token number\">39.149</span> TRACE <span class=\"token number\">5511</span> <span class=\"token comment\">--- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [1]</span>\n<span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">08</span><span class=\"token operator\">-</span><span class=\"token number\">23</span> <span class=\"token number\">02</span>:<span class=\"token number\">41</span>:<span class=\"token number\">39.149</span> TRACE <span class=\"token number\">5511</span> <span class=\"token comment\">--- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [BIGINT] - [2]</span>\nHibernate: <span class=\"token comment\"># Team 2개의 Id가 IN 절로 한번에 조회된다. </span>\n    <span class=\"token keyword\">select</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_1_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_ \n    <span class=\"token keyword\">from</span>\n        locker lockers0_ \n    <span class=\"token keyword\">where</span>\n        lockers0_<span class=\"token punctuation\">.</span>team_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n            ?<span class=\"token punctuation\">,</span> ?\n        <span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>이전에는 전체 팀 조회 쿼리 1개 + Team 2개에 대한 Members 조회 쿼리 2개 + Team 2개에 대한 Lockers 조회 쿼리 2개해서 총 5개의 쿼리가 나갔다.</p>\n</li>\n<li>\n<p>Batch size를 적용한 이후에는 전체 팀 조회 쿼리 1개 + Team의 Members 조회 쿼리 1개 + Team의 Lockers 조회 쿼리 1개 총 2개의 쿼리가 나갔다.</p>\n</li>\n<li>\n<p>Team의 사이즈가 클 수록 더 쿼리 차이가 많이 난다.</p>\n</li>\n<li>\n<p>Batch size는 1000을 넘어가지 않도록 설정하는 것이 좋다.</p>\n</li>\n</ul>\n<br>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://jojoldu.tistory.com/457\">https://jojoldu.tistory.com/457</a></li>\n<li><a href=\"https://www.inflearn.com/questions/14663\">https://www.inflearn.com/questions/14663</a></li>\n<li><a href=\"https://jojoldu.tistory.com/165\">https://jojoldu.tistory.com/165</a></li>\n<li><a href=\"https://woowacourse.github.io/tecoble/post/2021-07-26-jpa-pageable/\">https://woowacourse.github.io/tecoble/post/2021-07-26-jpa-pageable/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">INTRO</a></p>\n</li>\n<li>\n<p><a href=\"#entity-%EC%83%81%ED%99%A9\">Entity 상황</a></p>\n</li>\n<li>\n<p><a href=\"#jpa%EC%97%90%EC%84%9C-collection-fetch-join\">JPA에서 collection fetch join</a></p>\n</li>\n<li>\n<p><a href=\"#fetchtypeeager---multiplebagfetchexception-%EB%B0%9C%EC%83%9D\"><code class=\"language-text\">FetchType.EAGER</code> - <code class=\"language-text\">MultipleBagFetchException</code> 발생</a></p>\n</li>\n<li>\n<p><a href=\"#fetchtypelazy---n1-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D\"><code class=\"language-text\">FetchType.LAZY</code> - <code class=\"language-text\">N+1 문제</code> 발생</a></p>\n<ul>\n<li><a href=\"#%ED%95%98%EB%82%98%EC%9D%98-collection-fetch-join%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0\">하나의 collection <code class=\"language-text\">fetch join</code>을 할 경우</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%88%98%EC%9D%98-collection-fetch-join%EC%9D%84-%ED%95%A0-%EA%B2%BD%EC%9A%B0---mutiplebagfetchexception-%EB%B0%9C%EC%83%9D\">다수의 collection <code class=\"language-text\">fetch join</code>을 할 경우 - <code class=\"language-text\">MutipleBagFetchException</code> 발생</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%AC%B8%EC%A0%9C-jpa-pagination\">또 다른 문제, JPA Pagination</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95-batchsize-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">해결방법: BatchSize 적용하기</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2021","title":"JPA N+1 문제 및 해결방법 알아보기","categories":"JPA","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-query-bug/"}},"prev":{"id":"ff4d68a5-f01f-5ae1-92ba-074f403b2c61","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>이번에 프로젝트를 진행하면서 보안상의 이유로 직접 S3 서버에 접근할 수 없었기 때문에 AWS에서 제공하는 CDN 서비스인 CloudFront를 통해서 이미지 등의 리소스에 접근해야 했다. (CDN서버의 본래 목적과는 다소 다른 이유로 사용했다.)</li>\n<li>CDN은 어떤 기술이며, 장점이 무엇이고, 어떻게 동작하는지에 대해서 알아본다.</li>\n<li>CDN을 퉁해 누릴 수 있는 보안적인 이점은 무엇이며, 프로젝트를 진행하면서 CloudFront를 어떻게 활용했는지에 대해서 작성한다.</li>\n</ul>\n<br>\n<h2 id=\"cdn이란-무엇인가\" style=\"position:relative;\"><a href=\"#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"cdn이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN이란 무엇인가?</h2>\n<p>CDN은 Content Delivery Network의 약자이다. 직역하자면 컨텐츠를 전달해주는 네트워크이다. CDN 컨텐츠를 전송하는 물리적인 서버가 지리적으로 여러곳에 상주하며 유저와 가까이 위치한 서버에서 요청한 컨텐츠를 고속으로 제공해준다.</p>\n<p>CDN이 제공하는 컨텐츠는 <code class=\"language-text\">HTML</code>, <code class=\"language-text\">javascript</code> 파일, <code class=\"language-text\">css</code>, 이미지, 동영상 등의 대부분의 인터넷 콘텐츠이다. CDN 서비스에 대해서 설명하는 예시에 항상 등장하는 어플리케이션은 넷플릭스이다. 전세계 곳곳에서 유저들이 넷플릭스 컨텐츠를 요청하면 가장 가까이 상주하고 있는 CDN 서버에서 넷플릭스 컨텐츠를 빠르게 유저에게 제공한다. 이외에 Facebook, Amazon 등도 사용 중이다.</p>\n<p>CDN을 자체로 웹을 호스팅 할 수는 없다. 다만 웹의 컨텐츠를 <code class=\"language-text\">캐싱</code>하여 호스팅하는 웹을 대신하여 전송해서 웹의 성능을 개선한다.</p>\n<br>\n<h2 id=\"cdn-장점\" style=\"position:relative;\"><a href=\"#cdn-%EC%9E%A5%EC%A0%90\" aria-label=\"cdn 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN 장점</h2>\n<ol>\n<li>\n<p>캐싱으로 컨텐츠 고속 전송</p>\n<ul>\n<li>\n<p>사용자와 물리적으로 가까운 CDN 서버에서 컨텐츠를 전송하므로 사용자의 입장에서 컨텐츠 로드 시간이 매우 단축된다. 또한 CDN 서버는 랜덤으로 배치되어 있는 것이 아니라, 전세계 트래픽이 많은 영역에 전략적으로 위치해 있다.</p>\n</li>\n<li>\n<p>캐싱 과정</p>\n<ol>\n<li>사용자가 컨텐츠를 요청하면 가장 가까운 CDN 엣지 서버로 요청이 간다.</li>\n<li>(최초 요청일 경우) CDN 엣지 서버에서 원본 서버로 요청을 보낸다.</li>\n<li>원본 서버가 해당 컨텐츠를 엣지 서버에 응답한다.</li>\n<li>엣지 서버가 사용자에게 컨텐츠를 응답한다.</li>\n</ol>\n<br>\n  <p align=\"center\"><img width=\"450\" src=\"https://user-images.githubusercontent.com/63405904/130417611-508fcc23-79f2-4ae7-923b-5a0989a2cf54.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/</p>\n</li>\n<li>\n<p>그 이후부터는 동일한 컨텐츠에 대한 요청이 있을 때 해당 컨텐츠가 동일한 CDN 엣지 서버에 요청을 보내고 원본 서버에 요청을 보낼 필요 없이 CDN 엣지 서버가 컨텐츠를 반환한다. 이때 속도가 굉장히 향상된다.\n<br></p>\n<p align=\"center\"><img width=\"450\" src=\"https://user-images.githubusercontent.com/63405904/130417751-e2d97680-8446-401e-bdec-90b95560f87f.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/</p>\n</li>\n</ul>\n</li>\n<li>\n<p>CDN의 failover</p>\n<ul>\n<li>failover란? 서버가 갑자기 중단되어 서버에 요청을 보내던 트래픽에 대해 정상적인 응답을 하지 못하는 것을 방지하는 것</li>\n<li>CDN은 요청을 보내던 origin server가 죽으면 정상적으로 응답을 할 수 있는 서버로 reroute 하여 사용자가 안정적으로 그 응답을 받을 수 있도록 한다.</li>\n</ul>\n<br>\n <p align=\"center\"><img width=\"433\" src=\"https://user-images.githubusercontent.com/63405904/130594395-77cf44f3-049c-4a4c-9be2-f59678f77b7c.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</p>\n</li>\n<li>\n<p>로드밸런싱 및 DDos 공격 완화</p>\n<ul>\n<li>로드 밸런서는 네트워크 트래픽을 여러 서버에 분산해서 성능을 개선하는 것이다.</li>\n<li>CDN은 GSLB(Global Server Load Balancing)으로 로드 밸런싱 기술을 제공한다. (DNS와 GSLB의 차이점에 대해서 학습해도 좋다.) <a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/glossary/global-server-load-balancing-gslb/\">GSLB 참고</a></li>\n<li>CDN은 데이터센터의 로드 밸런싱으로 사용자의 요청을 가능한 서버에 분산해서 요청한다. (GSLB를 사용하기 때문에 요청 서버에 대한 헬스체크도 수행하여 안정적이다.)</li>\n<li>속도도 개선시키고, 트래픽도 감소시키므로 DDos 공격도 방지할 수 있다.\n<p align=\"center\"><img width=\"630\" src=\"https://user-images.githubusercontent.com/63405904/130593424-74c410aa-b465-4fee-8dd1-e4213090064a.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"프로젝트에서-cdn-사용-목적\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\" aria-label=\"프로젝트에서 cdn 사용 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트에서 CDN 사용 목적</h2>\n<ul>\n<li>다음은 프로젝트의 인프라 구조이다.\n<p align=\"center\"><img width=\"605\" src=\"https://user-images.githubusercontent.com/63405904/130720611-034be1a1-c358-4ce5-8fac-8383a87d19e0.png\"></p>\n</li>\n<li>일반적인지는 잘 모르겠지만, 현재 S3 버킷에 프론트 서버가 올라가있다. (그렇지 않더라도 이미지 및 동영상 리소스가 S3 버킷에 저장되어 있다.)</li>\n<li>프로젝트를 하는데 보안상의 이슈로 S3 버킷에 대한 접근을 전체공개할 수 없었고, Cloud Front를 통해서 우회하여 접근하도록 설계했다.</li>\n<li>CDN의 본래 목적은 리소스를 캐싱하여 빠르게 로딩하는 것이지만 이번 프로젝트에서는 S3 버킷 사용 목적으로 설계했다.</li>\n<li>프론트 서버를 분산하거나, 진행중인 프로젝트(개발자 친화적 SNS)의 특성상 이미지 및 동영상 리소스가 굉장히 많아져서 S3 버킷이 추가되면 로드 밸런싱, CDN failover 등의 이점을 누릴 수 있을 것이라고 생각한다.</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/performance/\">https://www.cloudflare.com/ko-kr/learning/cdn/performance/</a></li>\n<li><a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/\">https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">CDN이란 무엇인가?</a></li>\n<li><a href=\"#cdn-%EC%9E%A5%EC%A0%90\">CDN 장점</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\">프로젝트에서 CDN 사용 목적</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 02, 2021","title":"CDN 알아보기","categories":"인프라","author":"코다","emoji":"🚊"},"fields":{"slug":"/cdn/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/jpa-proxy/","nextSlug":"/jpa-query-bug/","prevSlug":"/cdn/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}