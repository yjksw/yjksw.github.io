{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/effective-java-11-12/",
    "result": {"data":{"cur":{"id":"73dec607-9cfc-5427-8d94-f52427f33c4f","html":"<blockquote>\n<p>이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌</p>\n</blockquote>\n<h2 id=\"-아이템-11-equals를-재정의하려거든-hashcode도-재정의하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-11-equals%EB%A5%BC-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%A0%A4%EA%B1%B0%EB%93%A0-hashcode%EB%8F%84-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 11 equals를 재정의하려거든 hashcode도 재정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 11] equals를 재정의하려거든 hashCode도 재정의하라</h2>\n<p><code class=\"language-text\">equals</code>와 함께 <code class=\"language-text\">hashCode</code>도 재정의하지 않으면 <code class=\"language-text\">HashMap</code>이나 <code class=\"language-text\">HashSet</code>의 원소로 사용할 때 일관성이 무너진다.</p>\n<p>Object 명세에 따르면 다음 규약이 있다.</p>\n<blockquote>\n<p>eqauls(Object)가 두 객체를 같다고 판단하면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.</p>\n</blockquote>\n<p>다시 말해서 논리적으로 같은 객체는 같은 해시코드를 반환해야 한다는 것이다. 해시코드가 같지 않으면 다음 코드에서 일관성이 깨진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PhoneNumber</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">707</span><span class=\"token punctuation\">,</span> <span class=\"token number\">867</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5309</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사용자\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">707</span><span class=\"token punctuation\">,</span> <span class=\"token number\">867</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5309</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result.equals(\"사용자\") != false 이다.</span>\n</code></pre></div>\n<br>\n<h3 id=\"좋은-hashcode를-작성하기\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-hashcode%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"좋은 hashcode를 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 hashCode를 작성하기</h3>\n<ol>\n<li>\n<p>hashCode의 로컬 int 변수 result를 첫번째 핵심 필드의 해시코드로 초기화 한다. (여기서 해시코드는 다음 2.a 단계대로 계산한다.)</p>\n</li>\n<li>\n<p>다음 핵심 필드 들에 대해서 다음과 같이 해시코드를 계산하고 result 필드를 갱신한다.</p>\n<ol>\n<li>\n<p>기본 타입 필드라면 Type.hashCode(f)를 수행한다. Type은 해당 기본 타입의 박싱 클래스다.</p>\n<p>만일 참조 클래스라면 hashCode를 재귀적으로 호출할 수 있으니 이 필드의 표준형을 만들어서 해당 표준형(canonical representation)의 hashCode를 호출하고 null 이라면 0을 사용한다.</p>\n<p>필드가 배열이면 각각의 원소를 별도의 필드로 다루어 해시코드를 계산한다. Arrays.hashCode를 사용할 수 있다.</p>\n</li>\n<li>\n<p>a에서 계산된 해시코드로 result를 갱신한다.</p>\n<p><code class=\"language-text\">result = 31 * result + c;</code> 이다.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>result를 반환한다.</p>\n</li>\n</ol>\n<ul>\n<li>참고로 파생 필드는 제외해도 된다.</li>\n<li>equals에서 사용되지 않는 필드는 반드시 제외한다.</li>\n<li>단계 b에서 31 * result를 하는 순서에 따라서 result 값이 달라지므로 해시 효과를 높여준다. 그렇지 않으면 anagram인 경우 해시코드가 같아지면서 성능이 저하된다. (O(n)이 된다) 31은 홀수이면서 소수이기 때문에 적합하다. (그 이유는 책에 더 자세히 나와있다)</li>\n</ul>\n<p>이렇게 완성된 hashCode의 예시를 보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>areaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Objects 클래스의 정적 메서드 활용하기</strong></p>\n<ul>\n<li>임의 개수의 객체를 받아서 해시코드를 계산해주는 정적 메서드 hash를 제공한다.</li>\n<li>하지만 속도는 다수 느리다. 입력 인수를 위한 배열이 만들어지고 박싱/언박싱이 일어나기 때문에 성능이 민감한 요소라면 사용하지 않는 것이 좋다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> areaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>클래스가 불변이고 해시코드 계산 비용이 크다면 캐싱 방식을 고려하는 것이 좋다.</li>\n<li>hashCode를 지연초기화 하는 것도 하나의 방법인데 이때는 스레드 안전성을 고려하여 구현해야 한다.</li>\n<li>성능을 높이기 위해 핵심 필드를 생략해서 해시코드를 계산하면 안된다.</li>\n<li>hashCode의 생성 규칙을 API 사용자가 자세히 알 필요가 없다. 클라이언트가 이 값에 의지하지 않게 되고 이후에 계산 방식을 바꿀 수도 있다.</li>\n</ul>\n<br>\n<h2 id=\"-아이템-12-tostring을-항상-재정의하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 12 tostring을 항상 재정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 12] toString을 항상 재정의하라</h2>\n<p>Object에서 기본적으로 제공하는 <code class=\"language-text\">toString</code>은 <code class=\"language-text\">클래스명@16진수_해시코드</code> 를 주로 반환하여 사용자가 필요한 형태로 반환하는 경우가 거의 없다. <code class=\"language-text\">toString</code> 은 <strong>간결하며 사용자가 읽기 쉬운 형태의 유익한 정보</strong>를 반환해야 한다. 따라서 이 메서드를 항상 재정의 하는 것이 필요하다.</p>\n<p><code class=\"language-text\">toString</code>을 잘 구현한다면 <code class=\"language-text\">println</code>, <code class=\"language-text\">printf</code>, <code class=\"language-text\">+ 연산자</code>, <code class=\"language-text\">assert</code> 등에서 유용하게 사용되며 시스템 디버깅이 훨씬 용의해진다. 또한 직접 호출하지 않아도 오류 메세지 로깅 시 매우 읽기 좋은 유용한 정보를 표시한다.</p>\n<p><code class=\"language-text\">toString</code>은 해당 객체가 가진 주요 정보를 모두 반환하는 것이 좋다. 하지만 객체가 너무 크다면 표현하기 무리가 있다. 이럴 경우에는 요약 정보를 담는 것이 좋다. <strong>어쨋든 자기 스스로를 굉장히 잘 표현한 문자열이어야 한다.</strong></p>\n<p>toString을 구현할 때 반환값의 형식을 문서화 할지 정하는데, 값 클래스라면 문서화 하는 것이 좋다. 그대로 입출력에서 사용하고 CSV 파일처럼 사람이 읽을 수 있는 데이터 객체로 저장될 수 있다. 이 경우 문자열과 객체를 상호 전환할 수 있는 생성자나 정적 팩토리 메서드를 제공해주는 것이 좋다.</p>\n<p>포맷을 명시하는 것의 단점으로는 그 포맷이 평생 쓰이게 된다. 따라서 다른 포맷을 적용하고 싶다면 해당 포맷에 맞추어서 파싱하고 새로운 객체를 만들어서 데이터를 저장하는 코드를 작성해야 한다. 그 다음에 포맷이 바뀌게 된다면 굉장히 번거로워진다.</p>\n<p>또한 toString에서 반환하는 정보에 대한 접근자를 각각 제공하는 것이 좋다. 그렇지 않다면 사용자는 toString을 파싱해서 사용할 수밖에 없어진다.</p>\n<p>정적 유틸리티 클래스는 toString을 제공할 필요가 없으며 열거 타입도 마찬가지이다.</p>\n<p>추상 클래스같은 경우 하위 클래스에서 공통적으로 사용해야할 문자열 표현이 있다면 추상 클래스에서 toString을 재정의해야한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-11-equals%EB%A5%BC-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%A0%A4%EA%B1%B0%EB%93%A0-hashcode%EB%8F%84-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">🌩 [아이템 11] equals를 재정의하려거든 hashCode도 재정의하라</a></p>\n<ul>\n<li><a href=\"#%EC%A2%8B%EC%9D%80-hashcode%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">좋은 hashCode를 작성하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">🌩 [아이템 12] toString을 항상 재정의하라</a></p>\n</li>\n</ul>\n</div>","excerpt":"이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌 🌩 [아이템 11] equals를 재정의하려거든 hashCode도 재정의하라 와 함께 도 재정의하지 않으면 이나 의 원소로 사용할 때 일관성이 무너진다. Object 명세에 따르면 다음 규약이 있다. eqauls(Object)가 두 객체를 같다고 판단하면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다. 다시 말해서 논리적으로 같은 객체는 같은 해시코드를 반환해야 한다는 것이다. 해시코드가 같지 않으면 다음 코드에서 일관성이 깨진다. 좋은 hashCode를 작성하기 hashCode의 로컬 int 변수 result를 첫번째 핵심 필드의 해시코드로 초기화 한다. (여기서 해시코드는 다음 2.a 단계대로 계산한다.) 다음 핵심 필드 들에 대해서 다음과 같이 해시코드를 계산하고 result 필드를 갱신한다. 기본 타입 필드라면 Type.hashCode(f)를 수행한다. Type은 해당 기본 타입의 박싱 클…","frontmatter":{"date":"December 19, 2021","title":"이펙티브 자바 - 아이템 11 & 12","categories":"책 자바","author":"코다","emoji":"🐡"},"fields":{"slug":"/effective-java-11-12/"}},"next":{"id":"f03042d6-9c85-5531-bfa4-8dd1a2797b05","html":"<blockquote>\n<p>이 글은 몇몇 크루들과 이펙티브 자바 스터디를 하며 정리한 내용입니다. 🙌</p>\n</blockquote>\n<h2 id=\"-아이템-9-try-finally-보다는-try-with-resources를-사용하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-9-try-finally-%EB%B3%B4%EB%8B%A4%EB%8A%94-try-with-resources%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 9 try finally 보다는 try with resources를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 9] try-finally 보다는 try-with-resources를 사용하라</h2>\n<p>자바에서 close 메서드를 직접 호출해서 닫아주어야하는 자원들</p>\n<ul>\n<li><code class=\"language-text\">InputStream</code>, <code class=\"language-text\">OutputStream</code>, <code class=\"language-text\">java.sql.Connection</code> 등등</li>\n</ul>\n<br>\n<h3 id=\"try-finally-사용시-단점\" style=\"position:relative;\"><a href=\"#try-finally-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8B%A8%EC%A0%90\" aria-label=\"try finally 사용시 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-finally 사용시 단점</h3>\n<ul>\n<li>try-finally를 사용한다면 닫아야 하는 자원이 많아질수록 매우 복잡해진다.</li>\n<li>try 블록과 finally 블록에서 모두 예외가 발생할 수 있는데, 만일 둘다 예외가 발생했을 경우 이후에 일어난 예외가 첫번째 예외를 삼켜서 디버깅을 어렵게 한다.</li>\n</ul>\n<br>\n<h3 id=\"try-with-resources로-해결\" style=\"position:relative;\"><a href=\"#try-with-resources%EB%A1%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"try with resources로 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-with-resources로 해결</h3>\n<ul>\n<li>짧고 간결하여 읽기가 수월하다.</li>\n<li>try 내부와 <code class=\"language-text\">close()</code>에서 모두 예외가 발생 하더라도 첫번째 예외만 보여지고 두번째 예외는 <code class=\"language-text\">suppressed</code> 되어 출력된다.</li>\n<li>catch 블록을 함께 사용하여 여러 예외를 처리할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"-아이템-10-equals는-일반-규약을-지켜-재정의하라\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-10-equals%EB%8A%94-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD%EC%9D%84-%EC%A7%80%EC%BC%9C-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\" 아이템 10 equals는 일반 규약을 지켜 재정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 [아이템 10] equals는 일반 규약을 지켜 재정의하라</h2>\n<p>대부분은 <code class=\"language-text\">equals</code>를 재정의 하지 않는 것이 가장 좋다. 책에서는 특히나 다음과 같은 경우면 재정의 하지 않는 것을 추천한다.</p>\n<ol>\n<li>각 인스턴스가 본질적으로 고유하다.</li>\n<li>인스턴스의 ‘논리적 동치성(logical equality)‘를 검사할 일이 없다.</li>\n<li>상위 클래스의 equals가 하위 클래스에도 적합하게 구현되어 있다.</li>\n<li>클래스가 private이거나 package-private이고 equals를 호출할 일이 없다.</li>\n<li>인스턴스가 하나만 만들어지도록 통제되는 싱글톤이나 enum 인 경우이다.</li>\n</ol>\n<p><strong>다음과 같은 경우는 equals를 재정의 하는 것이 좋다.</strong></p>\n<ul>\n<li>객체의 식별성(identity)가 아닌 논리적 동치성을 확인해야 할 때 (VO 같은 경우)</li>\n</ul>\n<br>\n<h3 id=\"object-명세에-적힌-일반-규약\" style=\"position:relative;\"><a href=\"#object-%EB%AA%85%EC%84%B8%EC%97%90-%EC%A0%81%ED%9E%8C-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD\" aria-label=\"object 명세에 적힌 일반 규약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object 명세에 적힌 일반 규약</h3>\n<blockquote>\n<p>equals는 동치관계(equivalence relation)을 구현하며 다음을 만족한다.</p>\n</blockquote>\n<p><code class=\"language-text\">Object</code> 명세에서 말하는 <strong>동치관계</strong>란 무엇일까?</p>\n<ul>\n<li>집합을 서로 같은 원소의 부분집합으로 나누고 같은 집합 속에 있는 원소는 서로 언제나 교환될 수 있어야 하는 것이다.</li>\n</ul>\n<br>\n<p>첫 번째 조건, <strong>반사성</strong></p>\n<ul>\n<li>객체는 자기 자신과 같아야 한다.</li>\n<li><code class=\"language-text\">x.equals(x) == true</code></li>\n</ul>\n<br>\n<p>두 번째 조건, <strong>대칭성</strong></p>\n<ul>\n<li>\n<p>두 객체의 동치 여부는 같아야 한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">x.equals(y) == true</code>면 <code class=\"language-text\">y.equals(x) == true</code></p>\n</li>\n<li>\n<p>다음 예에서는 대칭성이 만족되지 않은 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CasInsensitiveString</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">CasInsensitiveString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CasInsensitiveString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CasInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 문제가 되는 지점 !!! </span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 코드에서는 <code class=\"language-text\">CasInsensitiveString</code> 클래스 인스턴스 뿐 아니라 String에 대해서도 equals 메서드를 지원한다. 여기서 문제는 <code class=\"language-text\">CasInsensitiveString**.**equals(String)</code> 의 경우는 잘 성립하는데 <code class=\"language-text\">String.equals(CasInsensitiveString)</code>는 성립하지 않는다.</li>\n<li>이렇게 대칭성이 성립되지 않으면 해당 객체를 사용하는 다른 객체들의 결과를 예측하기가 어렵다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<p>세 번째 조건, <strong>추이성</strong></p>\n<ul>\n<li>\n<p>a, b가 동치고 b, c가 동치면 a, c도 동치이다.</p>\n</li>\n<li>\n<p>주로 구체 클래스의 하위 클래스에서 추가가 된 필드에 대해서 equals를 추가하려고 할 때 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 추이성이 깨지는 경우</span>\n<span class=\"token class-name\">ColorPoint</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">ColorPoint</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위치만 비교</span>\np2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위치만 비교</span>\n\np1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 색상까지 비교 </span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">ColorPoint</code>의 <code class=\"language-text\">equals()</code> 내부 구현을 보면 다음과 같이 되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 만일 o가 Point면 좌표만 비교한다. </span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\t\t<span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ColorPoint</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이런 식으로 구현이 되었을 때 주의할 점은 무한 재귀에 빠질 수도 있다는 것이다. 위와 같이 구현된 <code class=\"language-text\">SmellPoint</code> 를 만들고 <code class=\"language-text\">myColorPoint.equals(mySmellPoint)</code>를 호출하면 무한 재귀로 인해 <code class=\"language-text\">StackOverflowError</code>를 일으킨다.</li>\n<li><code class=\"language-text\">instanceof</code> 대신 <code class=\"language-text\">getClass()</code> 를 쓸수 있지만 이것은 LSP를 위반하여 하위 클래스가 상위 클래스 대신 대체될 수 없다.</li>\n</ul>\n</li>\n<li>\n<p>가능한 해결 방법은 추상 클래스의 하위 클래스를 활용하던지 상속보다 컴포지션 룰을 적용하던지이다.</p>\n</li>\n</ul>\n<br>\n<p>네 번째 조건, <strong>일관성</strong></p>\n<p>두 객체가 같다면 수정이 되기 전까지 앞으로도 같아야 한다는 뜻이다. 특히 불변 클래스라면 한번 같다면 영원히 같아야 한다.</p>\n<p><strong>일관성</strong> 조건을 만족시키기 위해서는 equals에 신뢰할 수 있는 자원만 들어와야 한다. 예를 들어서 특정 URL의 IP주소가 그 자원 중 하나라면 이것은 네트워크에 따라서 매번 달라질 수 있기 때문에 항상 결과가 같지 않다.</p>\n<br>\n<p>다섯 번째 조건, <strong>null-아님</strong></p>\n<p>모든 객체가 null과 같지 않아야 한다는 뜻이다. 동치성을 검사하기 위해서 받은 객체를 적절히 형변환 하여 필드 값을 알아내기 때문에 여기서 <code class=\"language-text\">instanceof</code> 로 검사할 때 <code class=\"language-text\">ClassCastException</code>으로 예외를 발생시킨다.</p>\n<br>\n<h3 id=\"좋은-equals-메서드-구현하기\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-equals-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"좋은 equals 메서드 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 equals 메서드 구현하기</h3>\n<ol>\n<li><code class=\"language-text\">==</code> 를 통해 자기 자신이면 <code class=\"language-text\">true</code> 반환한다.</li>\n<li><code class=\"language-text\">instanceof</code> 로 입력의 타입을 검증한다.</li>\n<li>입력을 올바른 타입으로 형변환 한다.</li>\n<li>입력 객체와 자신의 <strong>핵심 필드</strong>는 모두 일치하는지 검사한다.</li>\n</ol>\n<ul>\n<li>자바에서 float와 double 같은 경우는 정적 메서드인 <code class=\"language-text\">Float.compare</code>와 <code class=\"language-text\">Double.compare</code>로 비교한다. 특수한 부동소수 값 때문이다.</li>\n<li>null을 정상값으로 취급하는 참조 타입 필드가 있다면 <code class=\"language-text\">Objects.equals(Object, Object)</code>를 사용하여 NPE를 방지하자.</li>\n<li><code class=\"language-text\">CaseInsensitiveString</code> 처럼 다루기 복잡한 클래스라면 해당 필드의 표준형(canonical form)을 저장하여 표준형 끼리 비교하자. 가변이라면 이 표준형을 매번 갱신해야해서 어렵지만 불변이라면 더욱 적합하다.</li>\n</ul>\n<br>\n<h3 id=\"equals의-성능-고려하기\" style=\"position:relative;\"><a href=\"#equals%EC%9D%98-%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0\" aria-label=\"equals의 성능 고려하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>equals의 성능 고려하기</h3>\n<ul>\n<li>다를 가능성이 크거나 비교하는 비용이 싼 필드를 먼저 비교하는 것이 좋다.</li>\n<li>객체의 논리적 상태와 관련이 없는 필드(락 필드 등등)는 비교하지 않도록 한다.</li>\n<li>equals를 재정의할 때 hashCode도 함께 재정의 해야 한다.</li>\n<li>필드의 동치성만 검사해도 equals 규약이 대부분 만족되니 너무 복잡하게 구현하지 않는 것이 좋다.</li>\n<li>equals의 매개변수는 반드시 Object 이도록 한다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-9-try-finally-%EB%B3%B4%EB%8B%A4%EB%8A%94-try-with-resources%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">🌩 [아이템 9] try-finally 보다는 try-with-resources를 사용하라</a></p>\n<ul>\n<li><a href=\"#try-finally-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%8B%A8%EC%A0%90\">try-finally 사용시 단점</a></li>\n<li><a href=\"#try-with-resources%EB%A1%9C-%ED%95%B4%EA%B2%B0\">try-with-resources로 해결</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-10-equals%EB%8A%94-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD%EC%9D%84-%EC%A7%80%EC%BC%9C-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">🌩 [아이템 10] equals는 일반 규약을 지켜 재정의하라</a></p>\n<ul>\n<li><a href=\"#object-%EB%AA%85%EC%84%B8%EC%97%90-%EC%A0%81%ED%9E%8C-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD\">Object 명세에 적힌 일반 규약</a></li>\n<li><a href=\"#%EC%A2%8B%EC%9D%80-equals-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">좋은 equals 메서드 구현하기</a></li>\n<li><a href=\"#equals%EC%9D%98-%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%ED%95%98%EA%B8%B0\">equals의 성능 고려하기</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 18, 2021","title":"이펙티브 자바 - 아이템 9 & 10","categories":"책 자바","author":"코다","emoji":"🐡"},"fields":{"slug":"/effective-java-9-10/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/effective-java-11-12/","nextSlug":"/effective-java-9-10/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}