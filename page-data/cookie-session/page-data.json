{"componentChunkName":"component---src-templates-blog-template-js","path":"/cookie-session/","result":{"data":{"cur":{"id":"104d60ac-d178-5742-8d47-caf93db5ba17","html":"<h1 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h1>\n<ul>\n<li>HTTP는 Stateless 무상태성을 가지고 있다. 따라서 데이터를 상태로 저장하지 않는다.</li>\n<li>HTTP가 무성태성이기 때문에 클라이언트에 대한 데이터를 유지하고 싶을 때는 쿠키 또는 세션을 이용한다. (이전에 요청을 보낸 동일한 사용자임을 확인하고 싶은 경우 등등)</li>\n<li>쿠키는 클라이언트가 정보를 가지고 브라우저에서 저장 및 관리한다. </li>\n<li>세션은 서버가 데이터를 가지고 저장 및 관리한다. </li>\n</ul>\n<br>\n<br>\n<h1 id=\"cookie\" style=\"position:relative;\"><a href=\"#cookie\" aria-label=\"cookie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cookie</h1>\n<ul>\n<li>쿠키는 클라이언트가 정보를 가지고 브라우저에서 해당 정보를 저장한다. </li>\n<li>\n<p>따라서 요청을 보낼 때마다 브라우저에서 저장된 쿠키 데이터를 HTTP 헤더에 추가하여 서버에 보낼 수 있다.</p>\n<ul>\n<li>HTTP 메세지 자체는 무상태성이기 때문에 매번 쿠키값을 보내주어야 한다. </li>\n</ul>\n</li>\n<li>쿠키에 저장되는 값의 형태는 text 이다. </li>\n</ul>\n<h3 id=\"쿠키의-단점\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"쿠키의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키의 단점</h3>\n<ul>\n<li>\n<p>클라이언트가 관리하는 것이기 때문에 데이터가 쉽게 훼손 될 수 있다. </p>\n<ul>\n<li>실제로 크롬 브라우저에서 개발자 도구 -> Application 탭에 가면 쿠키 데이터를 저장하는 저장소를 볼 수 있다. </li>\n<li>여기서 값을 조회, 수정, 삭제를 할 수 있다.\n<img width=\"636\" alt=\"스크린샷 2021-09-04 오후 3 10 59\" src=\"https://user-images.githubusercontent.com/63405904/132084874-b28a2e15-6ade-4fec-87a5-87434675f0b4.png\"></li>\n</ul>\n</li>\n<li>다른 사람이 쉽게 열람할 수 있다. 따라서 민감한 정보를 저장할 수 없다. </li>\n</ul>\n<br>\n<h2 id=\"쿠키-설정하기\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"쿠키 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키 설정하기</h2>\n<ul>\n<li>\n<p>쿠키를 설정하고 싶을때는 아래와 같이 서버에서 <code class=\"language-text\">Set-Cookie</code> 헤더로 값을 보내면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HttpResponse : \n\nHTTP/1.1 302 Found \nSet-Cookie: cookieValue=thisIsCookie!!!\nLocation: http://localhost:8080/index.html </code></pre></div>\n</li>\n<li>\n<p>그 이후 모든 클라이언트의 요청에는 위에 설정한 쿠키값이 Cookie 헤더로 서버에 전송된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HttpRequest : \n\nGET /login HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\nCookie: cookieValue=thisIsCookie!!!</code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<h1 id=\"session\" style=\"position:relative;\"><a href=\"#session\" aria-label=\"session permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Session</h1>\n<ul>\n<li>세션은 서버의 메모리에서 데이터를 관리한다. </li>\n<li>외부에 공개하기 위험한 정보를 서버의 메모리에 안전하게 저장할 수 있다. </li>\n<li>세션을 식별하기 위한 고유한 id인 session id가 부여되고 클라이언트는 해당 세션 Id만을 저장하고 관리하면 된다. </li>\n<li>세션에 저장되는 값의 형태는 object 이다. </li>\n</ul>\n<h3 id=\"세션의-단점\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"세션의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션의 단점</h3>\n<ul>\n<li>서버의 메모리에서 지나치게 많은 세션 데이터를 관리하기 힘들 수 있다. </li>\n</ul>\n<br>\n<h2 id=\"세션-설정하기\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"세션 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션 설정하기</h2>\n<ul>\n<li>서버에서 세션을 설정할 때 <code class=\"language-text\">HttpServletRequest</code>의 <code class=\"language-text\">getSession()</code>을 호출하면 해당 request의 세션을 생성해서 반환한다. 아래에 세션 생성 및 반환 시점에 대해서 추가로 설명한다. </li>\n<li>반환된 세션에 <code class=\"language-text\">setAttribute()</code>를 통해 속성값을 지정한다. 해당 값이 세션에 저장되는 데이터 정보이다. </li>\n<li>세션의 <code class=\"language-text\">getId()</code>를 호출해 해당 세션의 id를 <code class=\"language-text\">Set-Cookie</code> 헤더에 <code class=\"language-text\">JSESSIONID</code> 라는 key로 추가하여 클라이언트에게 응답힌다. </li>\n<li>이후에 쿠키로 등록된 세션 id를 통해서 세션을 유지하고 속성값에 접근할 수 있다. </li>\n<li>\n<p><strong>코드로 보기</strong></p>\n<ul>\n<li>\n<p>스프링부트 웹 프로젝트라고 가정한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> account<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">User</span> loginUSer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsession<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> sessionId <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">HttpHeaders</span> responseHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponseHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JSESSIONID=\"</span> <span class=\"token operator\">+</span> sessionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponseHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">found</span><span class=\"token punctuation\">(</span>responseHeaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>그럼 다음과 같이 응답이 나간다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTPResponse : \n\nHTTP/1.1 302 Found \nSet-Cookie: JSESSIONID=2cfd4acb-0b67-4ce9-90c4-97ee3242e51b \nLocation: http://localhost:8080/index.html </code></pre></div>\n</li>\n<li>\n<p>이후 클라이언트가 요청을 보낼 때마다 쿠키에 세션 ID 값이 포함되어서 보내어 진다. 이 아이디를 통해서 세션을 매핑하고 세션이 유지되는 것을 확인할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTPRequest : \n\nGET /login HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\nCookie: JSESSIONID=2cfd4acb-0b67-4ce9-90c4-97ee3242e51b</code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"세션은-언제-생성될까-\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C-\" aria-label=\"세션은 언제 생성될까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션은 언제 생성될까 ?</h2>\n<ul>\n<li>이번에 직접 HTTP 서버를 구현하는 프로젝트를 하면서 세션을 구현하면서 의문이 들었다. </li>\n<li><code class=\"language-text\">request.getSession()</code>을 하면 항상 세션을 반환하는데 그럼 모든 HttpRequest에 대한 세션이 생성되는 것인지 궁금했다. </li>\n<li><code class=\"language-text\">request.getSession()</code>을 하면 유지되던 세션, 혹은 새로 생성된 세션이 반환되므로 모든 요청에 대한 세션을 생성한다고 생각할 수 있지만 그렇지 않다. </li>\n<li>세션을 만드는 것도 비용이 필요하기 때문에 세션이 필요할 때만 lazy 하게 생성한다.\n<br></li>\n<li><code class=\"language-text\">HttpSession</code>의 경우 세션은 ServletContainer에서 생성이 된다. </li>\n<li>따라서 <code class=\"language-text\">HttpServletRequest</code>에서 세션을 요청할 때 서블릿 컨테이너에서 내부적으로 생성해서 세션을 반환한다. </li>\n<li>실제로 세션이 생성되는 시기는 <code class=\"language-text\">@Autowired</code>로 세션이 주입되는지, 메서드 인자로 주입되는지, request에서 <code class=\"language-text\">getSession()</code>을 호출하는 지에 따라서 다르므로 참고하자. </li>\n<li>\n<p>나는 주로 controller 메서드의 인자로 세션을 호출하는데 그때는 컨트롤러 메서드를 호출하는 즉시 세션을 생성/요청해서 주입해준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResponseMessage</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//..로직 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n<li>세션을 유지 할 때는 헤더에 관련 키가 있다면(<code class=\"language-text\">JSESSIONID</code>와 같은 쿠키값) 해당 세션을 요청해서 반환하고, 없다면 새로운 세션을 생성해서 반환한다. </li>\n</ul>\n<h3 id=\"주의할-점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할 점</h3>\n<ul>\n<li>세션이 쿠키보다 보안이 좋은 것은 사실이나, 쿠키에 저장된 <code class=\"language-text\">JSSESIONID</code>를 탈취하여 다른 브라우저의 쿠키값으로 설정한다면 서버는 위 세션 아이디와 동일한 브라우저로 판단해 요청을 처리한다. </li>\n<li>예를 들어서 A 사용자가 로그인해서 부여받은 세션 ID를 다른 브라우저의 쿠키값으로 집어넣기만 해도 A 사용자가 로그인한 상태로 요청을 보내는 것으로 처리되므로 여전히 위험할 수 있다. </li>\n</ul>\n<br>\n<br>\n<h1 id=\"언제-무엇을-사용하는-것이-좋을까\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"언제 무엇을 사용하는 것이 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 무엇을 사용하는 것이 좋을까?</h1>\n<ul>\n<li>언제 세션을 사용하고 언제 쿠키를 사용하는지에 대해서는 물론 답이 없다. </li>\n<li>웹을 구현하면서 워낙 많은 경우가 있기 때문에 각각 다른 이유들을 비교해서 더 적합한 것을 선택하면 된다. </li>\n<li>나의 경우에는 민감한 정보가 있을 때는 세션을, 그렇지 않은 경우는 쿠키로 관리한다.</li>\n</ul>\n<br>\n<br>\n<h1 id=\"번외-static-code-classlanguage-texthttpsessionscode-클래스-테스트하기-code-classlanguage-textmockstaticltcode\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%99%B8-static-code-classlanguage-texthttpsessionscode-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0-code-classlanguage-textmockstaticltcode\" aria-label=\"번외 static code classlanguage texthttpsessionscode 클래스 테스트하기 code classlanguage textmockstaticltcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번외) static <code class=\"language-text\">HttpSessions</code> 클래스 테스트하기 <code class=\"language-text\">MockStatic&lt;></code></h1>\n<ul>\n<li>직접 Http 서버를 구현하면서 세션에 고유한 id를 부여하기 위해 <code class=\"language-text\">UUID.randomUUID()</code>를 통해서 구현했다. </li>\n<li><code class=\"language-text\">HttpSession</code> 을 관리하는 <code class=\"language-text\">HttpSessions</code>는 <code class=\"language-text\">static</code>으로 관리하고 있고, 해당 클래스에서 <code class=\"language-text\">UUID.randomUUID()</code>를 사용해 새로운 HttpSession을 생성하고 아이디를 부여해 리턴 및 저장한다. </li>\n<li>매번 랜덤한 값을 id로 부여하기 때문에 테스트 코드를 짜는데 어려움이 있었고, Mocking을 하려고 했으나 HttpSessions가 static이므로 기존의 모킹 방식으로는 테스트하기가 어려웠다. </li>\n<li>\n<p>따라서 static 을 모킹할 수 있는 방법으로 테스트를 진행했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MockedStatic</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpSessions</span><span class=\"token punctuation\">></span></span> mockHttpSessions<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> sessionId <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSessions</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpSession</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://hahahoho5915.tistory.com/32\">https://hahahoho5915.tistory.com/32</a></li>\n<li><a href=\"https://soon-devblog.tistory.com/2\">https://soon-devblog.tistory.com/2</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=OpoVuwxGRDI\">https://www.youtube.com/watch?v=OpoVuwxGRDI</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EB%8B%A8%EC%A0%90\">쿠키의 단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BF%A0%ED%82%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">쿠키 설정하기</a></p>\n<ul>\n<li><a href=\"#%EC%84%B8%EC%85%98%EC%9D%98-%EB%8B%A8%EC%A0%90\">세션의 단점</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%84%B8%EC%85%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">세션 설정하기</a></li>\n<li>\n<p><a href=\"#%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C-\">세션은 언제 생성될까 ?</a></p>\n<ul>\n<li><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">주의할 점</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"INTRO HTTP는 Stateless 무상태성을 가지고 있다. 따라서 데이터를 상태로 저장하지 않는다. HTTP가 무성태성이기 때문에 클라이언트에 대한 데이터를 유지하고 싶을 때는 쿠키 또는 세션을 이용한다. (이전에 요청을 보낸 동일한 사용자임을 확인하고 싶은 경우 등등) 쿠키는 클라이언트가 정보를 가지고 브라우저에서 저장 및 관리한다.  세션은 서버가 데이터를 가지고 저장 및 관리한다.  Cookie 쿠키는 클라이언트가 정보를 가지고 브라우저에서 해당 정보를 저장한다.  따라서 요청을 보낼 때마다 브라우저에서 저장된 쿠키 데이터를 HTTP 헤더에 추가하여 서버에 보낼 수 있다. HTTP 메세지 자체는 무상태성이기 때문에 매번 쿠키값을 보내주어야 한다.  쿠키에 저장되는 값의 형태는 text 이다.  쿠키의 단점 클라이언트가 관리하는 것이기 때문에 데이터가 쉽게 훼손 될 수 있다.  실제로 크롬 브라우저에서 개발자 도구 -> Application 탭에 가면 쿠키 데이터를 저장하…","frontmatter":{"date":"September 04, 2021","title":"쿠키와 세션 알아보기","categories":"웹 스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/cookie-session/"}},"next":{"id":"ff4d68a5-f01f-5ae1-92ba-074f403b2c61","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<hr>\n<ul>\n<li>이번에 프로젝트를 진행하면서 보안상의 이유로 직접 S3 서버에 접근할 수 없었기 때문에 AWS에서 제공하는 CDN 서비스인 CloudFront를 통해서 이미지 등의 리소스에 접근해야 했다. (CDN서버의 본래 목적과는 다소 다른 이유로 사용했다.)</li>\n<li>CDN은 어떤 기술이며, 장점이 무엇이고, 어떻게 동작하는지에 대해서 알아본다. </li>\n<li>CDN을 퉁해 누릴 수 있는 보안적인 이점은 무엇이며, 프로젝트를 진행하면서 CloudFront를 어떻게 활용했는지에 대해서 작성한다. </li>\n</ul>\n<br>\n<br>\n<h2 id=\"cdn이란-무엇인가\" style=\"position:relative;\"><a href=\"#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"cdn이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN이란 무엇인가?</h2>\n<hr>\n<p>CDN은 Content Delivery Network의 약자이다. 직역하자면 컨텐츠를 전달해주는 네트워크이다. CDN 컨텐츠를 전송하는 물리적인 서버가 지리적으로 여러곳에 상주하며 유저와 가까이 위치한 서버에서 요청한 컨텐츠를 고속으로 제공해준다.\n<br></p>\n<p>CDN이 제공하는 컨텐츠는 <code class=\"language-text\">HTML</code>, <code class=\"language-text\">javascript</code> 파일, <code class=\"language-text\">css</code>, 이미지, 동영상 등의 대부분의 인터넷 콘텐츠이다. CDN 서비스에 대해서 설명하는 예시에 항상 등장하는 어플리케이션은 넷플릭스이다. 전세계 곳곳에서 유저들이 넷플릭스 컨텐츠를 요청하면 가장 가까이 상주하고 있는 CDN 서버에서 넷플릭스 컨텐츠를 빠르게 유저에게 제공한다. 이외에 Facebook, Amazon 등도 사용 중이다.\n<br></p>\n<p>CDN을 자체로 웹을 호스팅 할 수는 없다. 다만 웹의 컨텐츠를 <code class=\"language-text\">캐싱</code>하여 호스팅하는 웹을 대신하여 전송해서 웹의 성능을 개선한다.\n<br>\n<br></p>\n<h2 id=\"cdn-장점\" style=\"position:relative;\"><a href=\"#cdn-%EC%9E%A5%EC%A0%90\" aria-label=\"cdn 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN 장점</h2>\n<hr>\n<ol>\n<li>\n<p>캐싱으로 컨텐츠 고속 전송</p>\n<ul>\n<li>사용자와 물리적으로 가까운 CDN 서버에서 컨텐츠를 전송하므로 사용자의 입장에서 컨텐츠 로드 시간이 매우 단축된다. 또한 CDN 서버는 랜덤으로 배치되어 있는 것이 아니라, 전세계 트래픽이 많은 영역에 전략적으로 위치해 있다. </li>\n<li>\n<p>캐싱 과정 </p>\n<ol>\n<li>사용자가 컨텐츠를 요청하면 가장 가까운 CDN 엣지 서버로 요청이 간다. </li>\n<li>(최초 요청일 경우) CDN 엣지 서버에서 원본 서버로 요청을 보낸다. </li>\n<li>원본 서버가 해당 컨텐츠를 엣지 서버에 응답한다. </li>\n<li>\n<p>엣지 서버가 사용자에게 컨텐츠를 응답한다.\n<br></p>\n<p align=\"center\"><img width=\"450\" src=\"https://user-images.githubusercontent.com/63405904/130417611-508fcc23-79f2-4ae7-923b-5a0989a2cf54.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/</p>\n</li>\n</ol>\n</li>\n<li>\n<p>그 이후부터는 동일한 컨텐츠에 대한 요청이 있을 때 해당 컨텐츠가 동일한 CDN 엣지 서버에 요청을 보내고 원본 서버에 요청을 보낼 필요 없이 CDN 엣지 서버가 컨텐츠를 반환한다. 이때 속도가 굉장히 향상된다.\n<br></p>\n<p align=\"center\"><img width=\"450\" src=\"https://user-images.githubusercontent.com/63405904/130417751-e2d97680-8446-401e-bdec-90b95560f87f.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>\n<p>CDN의 failover</p>\n<ul>\n<li>failover란? 서버가 갑자기 중단되어 서버에 요청을 보내던 트래픽에 대해 정상적인 응답을 하지 못하는 것을 방지하는 것</li>\n<li>\n<p>CDN은 요청을 보내던 origin server가 죽으면 정상적으로 응답을 할 수 있는 서버로 reroute 하여 사용자가 안정적으로 그 응답을 받을 수 있도록 한다.\n<br></p>\n<p align=\"center\"><img width=\"433\" src=\"https://user-images.githubusercontent.com/63405904/130594395-77cf44f3-049c-4a4c-9be2-f59678f77b7c.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<ol start=\"3\">\n<li>\n<p>로드밸런싱 및 DDos 공격 완화</p>\n<ul>\n<li>로드 밸런서는 네트워크 트래픽을 여러 서버에 분산해서 성능을 개선하는 것이다. </li>\n<li>CDN은 GSLB(Global Server Load Balancing)으로 로드 밸런싱 기술을 제공한다. (DNS와 GSLB의 차이점에 대해서 학습해도 좋다.) <a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/glossary/global-server-load-balancing-gslb/\">GSLB 참고</a></li>\n<li>CDN은 데이터센터의 로드 밸런싱으로 사용자의 요청을 가능한 서버에 분산해서 요청한다. (GSLB를 사용하기 때문에 요청 서버에 대한 헬스체크도 수행하여 안정적이다.)</li>\n<li>\n<p>속도도 개선시키고, 트래픽도 감소시키므로 DDos 공격도 방지할 수 있다. </p>\n<p align=\"center\"><img width=\"630\" src=\"https://user-images.githubusercontent.com/63405904/130593424-74c410aa-b465-4fee-8dd1-e4213090064a.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<br>\n<h2 id=\"프로젝트에서-cdn-사용-목적\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\" aria-label=\"프로젝트에서 cdn 사용 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트에서 CDN 사용 목적</h2>\n<hr>\n<ul>\n<li>\n<p>다음은 프로젝트의 인프라 구조이다. </p>\n<p align=\"center\"><img width=\"605\" src=\"https://user-images.githubusercontent.com/63405904/130720611-034be1a1-c358-4ce5-8fac-8383a87d19e0.png\"></p>\n</li>\n<li>일반적인지는 잘 모르겠지만, 현재 S3 버킷에 프론트 서버가 올라가있다. (그렇지 않더라도 이미지 및 동영상 리소스가 S3 버킷에 저장되어 있다.) </li>\n<li>프로젝트를 하는데 보안상의 이슈로 S3 버킷에 대한 접근을 전체공개할 수 없었고, Cloud Front를 통해서 우회하여 접근하도록 설계했다. </li>\n<li>CDN의 본래 목적은 리소스를 캐싱하여 빠르게 로딩하는 것이지만 이번 프로젝트에서는 S3 버킷 사용 목적으로 설계했다. </li>\n<li>프론트 서버를 분산하거나, 진행중인 프로젝트(개발자 친화적 SNS)의 특성상 이미지 및 동영상 리소스가 굉장히 많아져서 S3 버킷이 추가되면 로드 밸런싱, CDN failover 등의 이점을 누릴 수 있을 것이라고 생각한다. </li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/performance/\">https://www.cloudflare.com/ko-kr/learning/cdn/performance/</a></li>\n<li><a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/\">https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">CDN이란 무엇인가?</a></li>\n<li><a href=\"#cdn-%EC%9E%A5%EC%A0%90\">CDN 장점</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\">프로젝트에서 CDN 사용 목적</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 02, 2021","title":"CDN 알아보기","categories":"인프라","author":"코다","emoji":"🚊"},"fields":{"slug":"/cdn/"}},"prev":{"id":"11b32bd6-6da4-513d-9a84-05d7450180a7","html":"<h1 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h1>\n<ul>\n<li>\n<p>DB Replication을 MySQL 공식 홈페이지에서 찾아보면 다음과 같이 말한다.    </p>\n<blockquote>\n<p>Replication enables data from one MySQL databse server (known as a source) to be copied to one or more MySQL database servers (know as replicas)\n출처 : <a href=\"https://dev.mysql.com/doc/refman/8.0/en/replication.html\">링크</a></p>\n</blockquote>\n</li>\n<li>즉, 하나의 데이터베이스(master/source)에서 다른 하나 또는 그 이상의 데이터베이스(slaves/replicas)로 데이터를 복제하여 저장하는 것이다. </li>\n<li>Replication은 비동기로 동작한다. 따라서 replicas가 master에 지속적으로 연결되어는 동기식으로 동작하지 않는다. </li>\n<li>설정에 따라서 여러 데이터베이스, 선택된 데이터베이스, 선택된 테이블에만 replication을 적용할 수도 있다. </li>\n</ul>\n<br>\n<br>\n<h1 id=\"mysql-replication-장점\" style=\"position:relative;\"><a href=\"#mysql-replication-%EC%9E%A5%EC%A0%90\" aria-label=\"mysql replication 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL replication 장점</h1>\n<p>공식 홈페이지에 나와있는 장점 4가지는 다음과 같다. </p>\n<ol>\n<li>\n<p>Scale-out solutions</p>\n<ul>\n<li>다수의 replicas를 두고 load를 분산해서 퍼포먼스를 높이는 장점이 있다. </li>\n<li>대부분의 replication 적용이유이기도 하다. </li>\n<li>쓰기 및 업데이트는 master 서버에서 이루어진다. </li>\n<li>조회는 하나 또는 여러 slave 서버에 분산되서 처리된다. </li>\n</ul>\n</li>\n<li>\n<p>Data security</p>\n<ul>\n<li>master 서버와 slave 서버가 분리되어 있으므로 하나의 slave 서버에 문제가 생겨도 다른 slave 서버에 영향을 미치지 않고 데이터를 보존할 수 있다. </li>\n<li>하지만 Master server에 장애가 생기면 문제가 생긴다. </li>\n</ul>\n</li>\n<li>\n<p>Analytics</p>\n<ul>\n<li>실시간 데이터 생성 및 업데이터가 master 서버에서 이루어지는 동안 데이터 분석처리는 slave 서버에서 처리하여 master 서버에 성능저하를 전혀 일으키지 않도록 지원한다. </li>\n</ul>\n</li>\n<li>\n<p>Long-distance data distribution</p>\n<ul>\n<li>리모트에 필요한 데이터를 위한 local 데이터 복제를 master에 접촉하지 않고 slave 서버에서 처리할 수 있다. </li>\n</ul>\n</li>\n</ol>\n<p>더 많은 정보를 위해서는 다음 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/replication.html\">링크</a>를 참고한다. </p>\n<br>\n<br>   \n<h1 id=\"replication-적용하기\" style=\"position:relative;\"><a href=\"#replication-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"replication 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Replication 적용하기</h1>\n<h3 id=\"적용이유\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9%EC%9D%B4%EC%9C%A0\" aria-label=\"적용이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용이유</h3>\n<ul>\n<li>현재 진행중인 <a href=\"pick-git.com\">프로젝트</a>에 DB replication을 적용하기로 했다. 그 이유는 프로젝트가 SNS의 일종이므로 유저에 의한 페이지 이동이 잦고 그것에 따른 조회 쿼리가 매우 많기 때문이다. 따라서 Master server 1개, slave server 2개를 두어 조회 쿼리를 slave 서버 2개로 분산했다. </li>\n</ul>\n<h3 id=\"참고사항\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%82%AC%ED%95%AD\" aria-label=\"참고사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고사항</h3>\n<ul>\n<li>현재 본 프로젝트의 WAS가 AWS EC2 인스턴스에서 실행 중이며 이번에 DB Replication을 적용하면서 DB 서버를 분리했다. </li>\n<li>AWS EC2 인스턴스 3개를 추가로 생성해서 MySQL master 서버 1개 + slave 서버 2개를 구성했다. </li>\n<li>쓰기 및 업데이트 작업은 master, 조회는 2개의 slave 서버를 RR(Round Robin) 방식으로 분산처리하도록 구성했다. DB는 MariaDB를 사용한다. </li>\n<li>조회 작업은 Transaction의 read-only 속성을 통해 확인하고 slave db를 연결했다. </li>\n</ul>\n<br>\n<h2 id=\"적용하기\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용하기</h2>\n<p>DB replication 적용에는 크게 3가지 단계가 있다. 다음 <a href=\"https://github.com/2021-pick-git/db-replication-learning-test\">레포지토리</a>에 가면 적용을 위한 replication 학습테스트 코드를 확인할 수 있다. </p>\n<ol>\n<li>Remote 서버에 MariaDB 로컬 설치 및 기본 설정</li>\n<li>Master 서버와 Slave 서버 replication 연결 설정</li>\n<li>프로덕션 코드에 DB 수동 연결 및 (여러 slave 서버를 두고 있다면) slave DB 선택 로직 구현 </li>\n</ol>\n<br>\n<h3 id=\"1-1-mariadb-설치-및-기본-설정\" style=\"position:relative;\"><a href=\"#1-1-mariadb-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-label=\"1 1 mariadb 설치 및 기본 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1) MariaDB 설치 및 기본 설정</h3>\n<ul>\n<li>\n<p>우분투에 MariaDB를 설치한다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mariadb-server</code></pre></div>\n</li>\n<li>현재 프로젝트를 위해서 제공받은 AWS 권한은 많이 닫혀있으므로 사용 가능한 포트(9000)으로 바꾸어주었다. <a href=\"https://bskyvision.com/1049\">포트변경방법</a></li>\n<li>\n<p>프로젝트에 사용할 database를 생성한다. </p>\n<ul>\n<li>현재 우리 프로젝트에서 사용하는 database는 <code class=\"language-text\">pickgit</code>이다.</li>\n</ul>\n</li>\n<li>\n<p>각 DB 서버에 계정을 생성한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">create user &#39;replication&#39;@&#39;%&#39; identified by &#39;password&#39;;</code></pre></div>\n<ul>\n<li>계정 이름 뒤에 %로 지정해야 전체에서 접속이 허용된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"2-1-master-db-설정\" style=\"position:relative;\"><a href=\"#2-1-master-db-%EC%84%A4%EC%A0%95\" aria-label=\"2 1 master db 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1) Master DB 설정</h3>\n<ul>\n<li>\n<p>해당 계정에 권한을 부여한다. (master)</p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">$ grant all privileges on {database}.* to &#39;replication&#39;@&#39;%&#39;; \n\n$ flush privileges;</code></pre></div>\n</li>\n<li>\n<p>위와 같이 하면 해당 계정에 대한 전체 권한이 열린다. 불안하다면 다음과 같이 replication에 대한 권한만 설정해도 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">$ grant replication slave on *.* to &#39;replication&#39;@&#39;%&#39;; \n\n$ flush privileges;</code></pre></div>\n<ul>\n<li>참고로 replication slave 권한을 줄 때는 <code class=\"language-text\">*.*</code>로 주지 않으면 db grant 및 global privileges 경고가 뜬다. </li>\n</ul>\n</li>\n<li>\n<p>설정과정</p>\n<p align=\"center\"><img width=\"600\" alt=\"masterDb\" src=\"https://user-images.githubusercontent.com/63405904/132974481-47521392-72e8-4596-9c08-0481b572717a.png\"></p>\n</li>\n<li>\n<p>다음 경로의 설정파일을 열어 수정한다. master db 서버의 서버 id를 설정하는 과정이다. </p>\n<ul>\n<li>\n<p>설정파일 경로 </p>\n<p align=\"center\"><img width=\"600\" src=\"https://user-images.githubusercontent.com/63405904/132974223-9df3b0cb-68fc-451f-bcb5-703980a36a79.png\"></p>\n</li>\n<li>\n<p>설정 수정 </p>\n<p align=\"center\"><img width=\"600\" alt=\"masterDb\" src=\"https://user-images.githubusercontent.com/63405904/132974298-64ba1690-5e69-441d-ba8e-b7ccc8887c43.png\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>모든 설정이 끝난 뒤에 mysql를 재실행하여 설정을 적용한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mysqld restart</code></pre></div>\n</li>\n<li>\n<p>Master DB 정보를 다음 명령어로 확인한다. </p>\n<ul>\n<li>\n<p>File 값과 position 값으로 slave db에 master db에 대한 정보를 설정해야 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">$ show master status;</code></pre></div>\n</li>\n</ul>\n<p align=\"center\"><img width=\"600\" alt=\"스크린샷 2021-09-05 오후 4 25 23\" src=\"https://user-images.githubusercontent.com/63405904/132974579-e455d052-e082-40f3-b68d-858692cbbb79.png\"></p>\n<ul>\n<li>위 두 정보가 의미하는 것이 무엇인지 확인하고 싶다면 다음 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterstatus.html\">링크</a>를 참고하자. </li>\n</ul>\n<blockquote>\n<p>The File column shows the name of the log file and the Position column shows the position within the file. In this example, the binary log file is mysql-bin.000003 and the position is 73. Record these values. You need them later when you are setting up the replica. They represent the replication coordinates at which the replica should begin processing new updates from the source. </p>\n</blockquote>\n<ul>\n<li>간단히 말하면 replica가 master db의 데이터를 읽을 binary 파일과 읽기 시작할 위치인 position에 대한 정보이다. </li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"2-2-slave-db-설정\" style=\"position:relative;\"><a href=\"#2-2-slave-db-%EC%84%A4%EC%A0%95\" aria-label=\"2 2 slave db 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2) Slave DB 설정</h3>\n<ul>\n<li>\n<p>Master DB 과 동일하게 다음 설정경로로 가서 <code class=\"language-text\">server-id</code>를 수정한다. </p>\n<ul>\n<li>\n<p>현재 master의 <code class=\"language-text\">server-id</code>가 1이므로 <code class=\"language-text\">slave1</code>은 2, <code class=\"language-text\">slave2</code>는 3으로 설정해주었다. </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Slave Db에서 이전에 기록해둔 Master DB의 정보를 입력해 두 DB를 연결한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">mysql&gt; change master to master_host={master_db_ip}, master_port={master_db_port}, master_user={master_username}, master_password={master_password}, master_log_file={master_bin_file}, master_log_pos={position};</code></pre></div>\n</li>\n<li>\n<p>Slave DB를 실행시킨다. </p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">mysql&gt; start slave;</code></pre></div>\n</li>\n<li>\n<p>실행 시키고 다음 명령어를 치면 slave db의 상태와 master와의 연결상태 여부를 확인할 수 있다. </p>\n<p align=\"center\"><img width=\"600\" alt=\"스크린샷 2021-09-05 오후 4 25 23\" src=\"https://user-images.githubusercontent.com/63405904/132976950-0bb84655-da17-4b4b-8d44-c03626b46e51.png\"></p>\n</li>\n<li>이제 master db에 데이터를 추가하면 slave db에도 적용이 되는 것을 확인할 수 있다. </li>\n</ul>\n<br>\n<h3 id=\"3-1-springboot-db-configuration-설정---datasource-정보-기입\" style=\"position:relative;\"><a href=\"#3-1-springboot-db-configuration-%EC%84%A4%EC%A0%95---datasource-%EC%A0%95%EB%B3%B4-%EA%B8%B0%EC%9E%85\" aria-label=\"3 1 springboot db configuration 설정   datasource 정보 기입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1) Springboot DB configuration 설정 - datasource 정보 기입</h3>\n<ul>\n<li>DB 서버에서 하는 설정은 Master DB에 쓰기 및 업데이트 처리시 Slave DB에 적용이 되도록 하는 연결 설정이다. </li>\n<li>\n<p>이외의 datasource를 선택하고, 설정에 맞게 connection을 만들고, 실제 쿼리를 처리하도록 하는 것은 어플리케이션 코드에서 구현을 해야한다. </p>\n<p align=\"center\"><img width=\"600\" src=\"https://user-images.githubusercontent.com/63405904/132996798-4b1a4c22-484c-415b-acdb-d599cdb0fcc2.png\"><br>이전 yml datasource 설정</p>\n<br>\n</li>\n<li>\n<p>다음과 같이 datasource 정보를 <code class=\"language-text\">yml</code> 혹은 <code class=\"language-text\">properties</code>에 기록한다. </p>\n<p align=\"center\"><img width=\"600\" src=\"https://user-images.githubusercontent.com/63405904/132996912-59fcf5f4-2cd9-40c7-89e0-9a142c5d20f8.png\"><br>datasource 정보</p>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>위 <code class=\"language-text\">yml에</code> 기입한 <code class=\"language-text\">datasource</code> 정보를 활용하기 위해서 다음과 같은 객체를 만들어 <code class=\"language-text\">yml</code> 정보를 바인딩 한다. </p>\n<ul>\n<li>유의할 점은 내부에 선언된 정보를 위해서는 <code class=\"language-text\">static inner class</code>를 칼럼과 동일한 이름으로 생성해야 한다. 그러면 class 내부의 자료구조로 정보가 들어간다.</li>\n<li>\n<p><code class=\"language-text\">getter</code> 및 <code class=\"language-text\">setter</code>가 필수적으로 있어야한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"datasource\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//이 annotation을 활용해서 yml 정보를 매핑한다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MasterDataSourceProperties</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Slave</span><span class=\"token punctuation\">></span></span> slave <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//getter 및 setter </span>\n<span class=\"token comment\">//slave map에 대한 setter는 불필요하다.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Slave</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//중첩 데이터 명과 일치해야한다. 즉, datasource.slave의 두번째 요소와 동일한 이름으로 static class를 만들어야한다.</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//getter 및 setter 생략 </span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-springboot-db-configuration-구현\" style=\"position:relative;\"><a href=\"#3-2-springboot-db-configuration-%EA%B5%AC%ED%98%84\" aria-label=\"3 2 springboot db configuration 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2) Springboot DB configuration 구현</h3>\n<ul>\n<li>위 입력한 datasource는 하나가 아니기 때문에 자동으로 연결이 안되고 상황에 따라 다른 datasource가 연결이 된다. 해당 작업을 수동으로 해야하기 때문에 몇가지 직접 설정해야하는 것들이 있다.</li>\n<li>\n<ol>\n<li>첫번째는 적합한 상황에 다른 datasource를 제공하는 설정이다. 하나 이상의 datasource를 생성해 저장한다. </li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>두번째는 Jpa에 대한 entityManagerFactory <code class=\"language-text\">@bean</code> 설정이다. 본래 datasource가 자동연결되면서 JPA에 대한 설정도 되지만 여기서는 수동으로 해야한다. </li>\n<li>이때 datasource가 매번 바뀌므로 entityManagerFactory 생성시 <code class=\"language-text\">LazyConnectionDataSourceProxy</code> 로 프록시 datasource를 연결해준다. </li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>세번재는 TransactionManager에 대한 설정이다. 이 또한 수동으로 datasource를 관리하려고 하니 추가해야하는 부분이다. </li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>기존에 자동으로 Datasource를 연결하던 설정을 해제하고, 수동으로 연결할 datasource의 properties를 지정해주어야 한다. (class 상단에 annotation으로 설정)</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableAutoConfiguration</span><span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">=</span> <span class=\"token class-name\">DataSourceAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//4)</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MasterDataSourceProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//4)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataSourceConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MasterDataSourceProperties</span> dataSourceProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JpaProperties</span> jpaProperties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSourceConfiguration</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">MasterDataSourceProperties</span> dataSourceProperties<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">JpaProperties</span> jpaProperties\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSourceProperties <span class=\"token operator\">=</span> dataSourceProperties<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jpaProperties <span class=\"token operator\">=</span> jpaProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">//1)번 부분</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">routingDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DataSource</span> master <span class=\"token operator\">=</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>\n            dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> dataSources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataSources<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"master\"</span><span class=\"token punctuation\">,</span> master<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getSlave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n            dataSources<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>\n                value<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ReplicationRoutingDataSource</span> replicationRoutingDataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReplicationRoutingDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        replicationRoutingDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultTargetDataSource</span><span class=\"token punctuation\">(</span>dataSources<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"master\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        replicationRoutingDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setTargetDataSources</span><span class=\"token punctuation\">(</span>dataSources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> replicationRoutingDataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DataSourceBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">driverClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.mariadb.jdbc.Driver\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">username</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">//2)번 부분</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span> <span class=\"token function\">entityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">EntityManagerFactoryBuilder</span> entityManagerFactoryBuilder <span class=\"token operator\">=</span>\n            <span class=\"token function\">createEntityManagerFactoryBuilder</span><span class=\"token punctuation\">(</span>jpaProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> entityManagerFactoryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">packages</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.pickgit.dbreplicationlearningtest\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EntityManagerFactoryBuilder</span> <span class=\"token function\">createEntityManagerFactoryBuilder</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">JpaProperties</span> jpaProperties\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HibernateJpaVendorAdapter</span> vendorAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HibernateJpaVendorAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntityManagerFactoryBuilder</span><span class=\"token punctuation\">(</span>vendorAdapter<span class=\"token punctuation\">,</span> jpaProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyConnectionDataSourceProxy</span><span class=\"token punctuation\">(</span><span class=\"token function\">routingDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">//3)번 부분</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">EntityManagerFactory</span> entityManagerFactory\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">JpaTransactionManager</span> jpaTransactionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JpaTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jpaTransactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setEntityManagerFactory</span><span class=\"token punctuation\">(</span>entityManagerFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> jpaTransactionManager<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"3-3-조회-쿼리시-datasource를-rr으로-선택하는-로직\" style=\"position:relative;\"><a href=\"#3-3-%EC%A1%B0%ED%9A%8C-%EC%BF%BC%EB%A6%AC%EC%8B%9C-datasource%EB%A5%BC-rr%EC%9C%BC%EB%A1%9C-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81\" aria-label=\"3 3 조회 쿼리시 datasource를 rr으로 선택하는 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3) 조회 쿼리시 datasource를 RR으로 선택하는 로직</h3>\n<ul>\n<li>\n<p>현재 연결가능한 datasources들을 순회하면서 쓰기 및 업데이트면 master, 조회시에는 slave를 번갈아 선택하는 로직을 구현한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReplicationRoutingDataSource</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractRoutingDataSource</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOGGER <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReplicationRoutingDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SlaveNames</span> slaveNames<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTargetDataSources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> targetDataSources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTargetDataSources</span><span class=\"token punctuation\">(</span>targetDataSources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> replicas <span class=\"token operator\">=</span> targetDataSources<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token operator\">::</span><span class=\"token function\">toString</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-></span> string<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slaveNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SlaveNames</span><span class=\"token punctuation\">(</span>replicas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">determineCurrentLookupKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> isReadOnly <span class=\"token operator\">=</span> <span class=\"token class-name\">TransactionSynchronizationManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCurrentTransactionReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//조회 쿼리인 경우 </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isReadOnly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> slaveName <span class=\"token operator\">=</span> slaveNames<span class=\"token punctuation\">.</span><span class=\"token function\">getNextName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//다음 slave 선택 </span>\n\n            LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Slave DB name: {}\"</span><span class=\"token punctuation\">,</span> slaveName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> slaveName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SlaveNames</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SlaveNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> slaveDataSourceProperties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>slaveDataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SlaveNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNextName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">;</span>\n        counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<h1 id=\"replication-test-하기\" style=\"position:relative;\"><a href=\"#replication-test-%ED%95%98%EA%B8%B0\" aria-label=\"replication test 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Replication Test 하기</h1>\n<ul>\n<li>Member를 입력하고 조회를 여러번 했을 때 의도된 대로 replication이 적용되는지 확인한다. </li>\n<li><code class=\"language-text\">@DataJpaTest</code>로도 진행할 수 있으나, 빈으로 등록된 설정 요소들이 필요하기 때문에 <code class=\"language-text\">@SpringBootTest</code>로 테스트를 진행했다. (@<code class=\"language-text\">DataJpaTest</code>를 진행하면서 해당 configuration만 빈으로 등록하는 방식으로 테스트해도 무방하다.) </li>\n<li>datasource를 자동 연결하지 않는 설정 annotation을 class 상단에 추가해야한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@AutoConfigureTestDatabase</span><span class=\"token punctuation\">(</span>replace <span class=\"token operator\">=</span> <span class=\"token class-name\">Replace</span><span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">)</span> <span class=\"token comment\">//datasource 자동연결 x</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepositoryTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Master DB에 데이터를 추가하면 slave DB에도 반영된다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addMember_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pickgit\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Slave DB에서 데이터를 조회한다 - 여러번 조회시 slave db를 번갈아 조회한다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">findMember_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pickgit\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">Member</span> findMember1 <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Member</span> findMember2 <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Member</span> findMember3 <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Member</span> findMember4 <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//조회 할 때마다 사용 DB 로거가 번갈아서 찍힌다. </span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember1<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>결과 화면: 4번의 조회를 할때 1, 2 slave DB가 번갈아 선택된다. </p>\n<p align=\"center\"><img width=\"600\" src=\"https://user-images.githubusercontent.com/63405904/133017838-c022df09-9d81-407e-9eac-7cd1e5af5de6.png\"></p>\n</li>\n</ul>\n<br>\n<br>\n<h1 id=\"마주한-이슈\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%A3%BC%ED%95%9C-%EC%9D%B4%EC%8A%88\" aria-label=\"마주한 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마주한 이슈</h1>\n<ul>\n<li>yml에 properties 입력시 오타 주의 !! (자동완성 안해주기 때문에 접미사 -s 등을 주의해야함)</li>\n<li>JPA 정보 또한 자동연결할 때 해주는 설정들을 하나씩 다 명시해주어야한다. </li>\n<li>\n<p>기존에 ddl 전략을 외부에 기입했다면 왜인지 <code class=\"language-text\">hbm2ddl.auto=create</code>로 지정해야 적용이 되었다. </p>\n<ul>\n<li>\n<p>현재 JPA properties </p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">dialect</span><span class=\"token punctuation\">:</span> org.hibernate.dialect.MySQL8Dialect\n    <span class=\"token key atrule\">format_sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">physical_naming_strategy</span><span class=\"token punctuation\">:</span> org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\n    <span class=\"token key atrule\">hbm2ddl</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">auto</span><span class=\"token punctuation\">:</span> create\n<span class=\"token key atrule\">generate-ddl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Slave DB 권한부여 및 bind address 오픈</p>\n<ul>\n<li>\n<p>Host의 접근이 허가되지 않는다는 오류가 날 때는 다음 두가지를 해주어야한다. </p>\n<ol>\n<li>slave db 계정 생성 및 권한 부여 (위 master db에 했던 작업과 동일)</li>\n<li><code class=\"language-text\">sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf</code>에 bind-address 부분 <code class=\"language-text\">0.0.0.0</code> 으로 지정</li>\n</ol>\n</li>\n</ul>\n<p align=\"center\"><img width=\"600\" src=\"https://user-images.githubusercontent.com/63405904/133018579-e3f0221f-a767-4203-9b07-18bc41fc7f7c.png\"></p>\n<ul>\n<li>다음 <a href=\"https://blog.naver.com/6116949/221991858055\">링크</a>를 참고하자.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Springboot JPA에 대한 Hibernate Naming Strategy 지정</p>\n<ul>\n<li>Springboot에서 자동으로 지정할 때는 알아서 네이밍전략이 설정되었으나, 수동을 할 때는 이 부분도 yml에 기입해주어야 한다. </li>\n<li>그렇지 않으면 테이블 및 칼럼명이 그대로 camel case로 입력된다. </li>\n<li>yml에 다음 설정을 해서 DB에서 underscore로 지정되도록 전략을 지정한다.\n<code class=\"language-text\">physical_naming_strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h1 id=\"번외-기존-db의-데이터-dump-하기\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%99%B8-%EA%B8%B0%EC%A1%B4-db%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-dump-%ED%95%98%EA%B8%B0\" aria-label=\"번외 기존 db의 데이터 dump 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번외) 기존 DB의 데이터 dump 하기</h1>\n<ul>\n<li>\n<p>기존 DB에 있던 데이터들을 새로 생성한 master db에 옮기기 위해 <code class=\"language-text\">mySqldump</code>를 사용해 마이그레이션을 했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ mysqldump -u <span class=\"token punctuation\">[</span>사용자 계정<span class=\"token punctuation\">]</span> -p <span class=\"token punctuation\">[</span>원본 데이터베이스명<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>생성할 백업 파일명<span class=\"token punctuation\">]</span>.sql <span class=\"token comment\">#백업 sql 생성 </span>\n\n<span class=\"token comment\">#scp를 사용해 새로운 database가 있는 서버로 sql 파일 이동</span>\n\n$ mysql -u <span class=\"token punctuation\">[</span>사용자 계정<span class=\"token punctuation\">]</span> -p <span class=\"token punctuation\">[</span>복원할 DB<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span>백업된 DB<span class=\"token punctuation\">]</span>.sql <span class=\"token comment\">#sql 파일을 사용해 데이터 복원 </span></code></pre></div>\n</li>\n<li>Master DB에만 적용하면 slave DB에 알아서 적용이 된다. </li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://mycup.tistory.com/237\">https://mycup.tistory.com/237</a></li>\n<li><a href=\"https://velog.io/@max9106/DB-Spring-Replication\">https://velog.io/@max9106/DB-Spring-Replication</a></li>\n<li><a href=\"https://mangkyu.tistory.com/97\">https://mangkyu.tistory.com/97</a></li>\n<li><a href=\"https://velog.io/@kyujonglee/Mysql-%EB%B0%B1%EC%97%85-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\">https://velog.io/@kyujonglee/Mysql-%EB%B0%B1%EC%97%85-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%A0%81%EC%9A%A9%EC%9D%B4%EC%9C%A0\">적용이유</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%82%AC%ED%95%AD\">참고사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">적용하기</a></p>\n<ul>\n<li><a href=\"#1-1-mariadb-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\">1-1) MariaDB 설치 및 기본 설정</a></li>\n<li><a href=\"#2-1-master-db-%EC%84%A4%EC%A0%95\">2-1) Master DB 설정</a></li>\n<li><a href=\"#2-2-slave-db-%EC%84%A4%EC%A0%95\">2-2) Slave DB 설정</a></li>\n<li><a href=\"#3-1-springboot-db-configuration-%EC%84%A4%EC%A0%95---datasource-%EC%A0%95%EB%B3%B4-%EA%B8%B0%EC%9E%85\">3-1) Springboot DB configuration 설정 - datasource 정보 기입</a></li>\n<li><a href=\"#3-2-springboot-db-configuration-%EA%B5%AC%ED%98%84\">3-2) Springboot DB configuration 구현</a></li>\n<li><a href=\"#3-3-%EC%A1%B0%ED%9A%8C-%EC%BF%BC%EB%A6%AC%EC%8B%9C-datasource%EB%A5%BC-rr%EC%9C%BC%EB%A1%9C-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81\">3-3) 조회 쿼리시 datasource를 RR으로 선택하는 로직</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 10, 2021","title":"DB 리플리케이션 적용하기","categories":"데이터베이스 인프라","author":"코다","emoji":"🚊"},"fields":{"slug":"/db-replication/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/cookie-session/","nextSlug":"/cdn/","prevSlug":"/db-replication/"}},"staticQueryHashes":["1073350324","2938748437"]}