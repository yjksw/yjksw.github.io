{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/high-traffic-service_12/",
    "result": {"data":{"cur":{"id":"67377600-a29e-5099-ba3e-69e517ee7ca0","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<ul>\n<li>규모가 커지면서 트래픽이 커지면 문제가 발생한다. → 라우터의 성능 관점에서는 bps보다 패킷 단위인 pps가 더 중요하다. 사용하고 있는 라우터에서 감당하는 이상의 패킷이 송수신되면 문제가 발생한다.</li>\n<li>또한 호스트 수가 500을 넘어가면서 하나의 서브넷을 구성하면 여러 패킷 손실등이 발생하기도 한다.</li>\n<li>글로벌 서비스로 확장하면 데이터 센트럴 한군데 두었을 때 latency도 한계에 다다를 수 있다.</li>\n</ul>\n<h2 id=\"강의38-네트워크-분기점\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9838-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B6%84%EA%B8%B0%EC%A0%90\" aria-label=\"강의38 네트워크 분기점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의38] 네트워크 분기점</h2>\n<h2 id=\"1gbps의-한계---pc-라우터의-한계\" style=\"position:relative;\"><a href=\"#1gbps%EC%9D%98-%ED%95%9C%EA%B3%84---pc-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"1gbps의 한계   pc 라우터의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1Gbps의 한계 - PC 라우터의 한계</h2>\n<ul>\n<li>1Gbps 는 30만pps → 한계치이다.</li>\n<li>이것을 해결하기 위해서는 PC 라우터를 여러 대 병렬화 하던지, 고가의 라우터를 사용해야 한다.</li>\n</ul>\n<h2 id=\"500호스트의-한계---1서브넷-arp-테이블에서의-한계\" style=\"position:relative;\"><a href=\"#500%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%95%9C%EA%B3%84---1%EC%84%9C%EB%B8%8C%EB%84%B7-arp-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"500호스트의 한계   1서브넷 arp 테이블에서의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>500호스트의 한계 - 1서브넷 ARP 테이블에서의 한계</h2>\n<ul>\n<li>스위치의 ARP(Address Resolution Protocol table)에서 한계가 있다.\n<ul>\n<li>ARP는 IP주소와 MAC 주소간의 관계를 나타내는 테이블이다.</li>\n</ul>\n</li>\n<li>이 테이블의 크기에 제한이 있다. 그것을 넘어가게 되면 특정 호스트로 ping이 가지 않게 된다.</li>\n<li>서브넷 내에 호스트가 많으면 브로드캐스팅 패킷이 증가하여 트래픽이 부하를 생성한다.</li>\n</ul>\n<h2 id=\"네트워크-구조-계층화\" style=\"position:relative;\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B5%AC%EC%A1%B0-%EA%B3%84%EC%B8%B5%ED%99%94\" aria-label=\"네트워크 구조 계층화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네트워크 구조 계층화</h2>\n<ul>\n<li>지금까지 언급한 문제에 대한 대책\n<ul>\n<li>3단 구조로 네트워크를 계층화 하자는 것이다.</li>\n</ul>\n</li>\n<li><strong>3단 구조</strong>\n<ol>\n<li>가장 작은 것은 Access 계층</li>\n<li>그 다음이 Distribution 계층</li>\n<li>가장 위가 Core 계층 또는 OSPF 영역</li>\n</ol>\n<ul>\n<li>이렇게 가장 작은 서브넷에서 100대, 200대를 억제, 디스트리뷰션에서 1000대, 코어 전체에서 100000 단위로 다룬다.</li>\n</ul>\n</li>\n<li>Distribution 영역간 트래픽을 제어해서 너무 증가하지 않도록 하고 서브넷 내에서의 통신량을 제어한다.</li>\n</ul>\n<h2 id=\"글로벌화\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EB%A1%9C%EB%B2%8C%ED%99%94\" aria-label=\"글로벌화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글로벌화</h2>\n<ul>\n<li>CDN을 사용해서 여러 곳에 배치된 데이터센터를 활용해 latency를 줄인다.</li>\n</ul>\n<br>\n<h2 id=\"강의39-한층-높은-단계로\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9839-%ED%95%9C%EC%B8%B5-%EB%86%92%EC%9D%80-%EB%8B%A8%EA%B3%84%EB%A1%9C\" aria-label=\"강의39 한층 높은 단계로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의39] 한층 높은 단계로</h2>\n<h2 id=\"웹-서비스-인프라의-핵심\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%9D%98-%ED%95%B5%EC%8B%AC\" aria-label=\"웹 서비스 인프라의 핵심 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 서비스 인프라의 핵심</h2>\n<ul>\n<li>저비용, 높은 확장성</li>\n<li>적당하면서 충분히 높은 신뢰성</li>\n<li>기술 4가지\n<ul>\n<li>확장성</li>\n<li>다중화</li>\n<li>효율향상</li>\n<li>네트워크</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B0%95%EC%9D%9838-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%B6%84%EA%B8%B0%EC%A0%90\">[강의38] 네트워크 분기점</a></li>\n<li><a href=\"#1gbps%EC%9D%98-%ED%95%9C%EA%B3%84---pc-%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%ED%95%9C%EA%B3%84\">1Gbps의 한계 - PC 라우터의 한계</a></li>\n<li><a href=\"#500%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%95%9C%EA%B3%84---1%EC%84%9C%EB%B8%8C%EB%84%B7-arp-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C%EC%9D%98-%ED%95%9C%EA%B3%84\">500호스트의 한계 - 1서브넷 ARP 테이블에서의 한계</a></li>\n<li><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B5%AC%EC%A1%B0-%EA%B3%84%EC%B8%B5%ED%99%94\">네트워크 구조 계층화</a></li>\n<li><a href=\"#%EA%B8%80%EB%A1%9C%EB%B2%8C%ED%99%94\">글로벌화</a></li>\n<li><a href=\"#%EA%B0%95%EC%9D%9839-%ED%95%9C%EC%B8%B5-%EB%86%92%EC%9D%80-%EB%8B%A8%EA%B3%84%EB%A1%9C\">[강의39] 한층 높은 단계로</a></li>\n<li><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9D%B8%ED%94%84%EB%9D%BC%EC%9D%98-%ED%95%B5%EC%8B%AC\">웹 서비스 인프라의 핵심</a></li>\n</ul>\n</div>","excerpt":"다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 규모가 커지면서 트래픽이 커지면 문제가 발생한다. → 라우터의 성능 관점에서는 bps보다 패킷 단위인 pps가 더 중요하다. 사용하고 있는 라우터에서 감당하는 이상의 패킷이 송수신되면 문제가 발생한다. 또한 호스트 수가 500을 넘어가면서 하나의 서브넷을 구성하면 여러 패킷 손실등이 발생하기도 한다. 글로벌 서비스로 확장하면 데이터 센트럴 한군데 두었을 때 latency도 한계에 다다를 수 있다. [강의38] 네트워크 분기점 1Gbps의 한계 - PC 라우터의 한계 1Gbps 는 30만pps → 한계치이다. 이것을 해결하기 위해서는 PC 라우터를 여러 대 병렬화 하던지, 고가의 라우터를 사용해야 한다. 500호스트의 한계 - 1서브넷 ARP 테이블에서의 한계 스위치의 ARP(Address Resolution Protocol table)에서 한계가 있다. ARP는 IP주소와 MAC 주소간의 관계를 나…","frontmatter":{"date":"September 29, 2021","title":"대규모 서비스를 지탱하는 기술 - 웹 서비스와 네트워크","categories":"웹 인프라 책 성능테스트","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_12/"}},"next":{"id":"3e136db1-f284-581a-99b2-6583b2742509","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<ul>\n<li>다중화로 어느정도 문제를 해결할 수 있지만 규모가 작으면 다중화를 했을 경우 전체적인 리소스 사용률이 떨어지면서 효율이 떨어진다.</li>\n<li>가상화로 전체적인 리소스 사용률을 높일 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"강의36-가상화-기술\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9836-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0\" aria-label=\"강의36 가상화 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의36] 가상화 기술</h2>\n<h2 id=\"가상화-기술의-도입\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%EB%8F%84%EC%9E%85\" aria-label=\"가상화 기술의 도입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 기술의 도입</h2>\n<h3 id=\"왜-가상화-기술을-사용하나\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98\" aria-label=\"왜 가상화 기술을 사용하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 가상화 기술을 사용하나</h3>\n<ul>\n<li>확장성 → 오버헤드 최소화</li>\n<li>비용대비 성능 → 리소스 사용률 향상, 운용의 유연함</li>\n<li>고가용성 → 환경 격리</li>\n</ul>\n<h2 id=\"가상화-기술의-효용\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%ED%9A%A8%EC%9A%A9\" aria-label=\"가상화 기술의 효용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 기술의 효용</h2>\n<ul>\n<li>IPMI를 대체하는 하이퍼바이저\n<ul>\n<li>호스트 OS : 서버에서 최초에 기동하는 OS</li>\n</ul>\n</li>\n<li>하드웨어 간 차이 흡수 → 환경 추상화</li>\n<li>준 가상화 사용</li>\n<li>리소스 소비 제어\n<ul>\n<li>과부하 경고</li>\n<li>부하 조정</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"가상화-서버-구축정책\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EC%A0%95%EC%B1%85\" aria-label=\"가상화 서버 구축정책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 서버 구축정책</h2>\n<ul>\n<li>하드웨어의 이용효율을 높이기 위해 남아있는 리소스를 사용하는 게스트 OS를 투입하는 것이다.\n<ul>\n<li>예를 들어 CPU 리소스가 남이있으면 웹 서버, I/O 리소스가 남아있으면 DB 서버, 메모리 용량이 남아있으면 캐시 서버를 투입한다.</li>\n<li>리소스 소비경향이 비슷한 게스트 OS는 서로 점유하려고 하므로 같이 두지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"가상화로-얻은-장점-정리\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94%EB%A1%9C-%EC%96%BB%EC%9D%80-%EC%9E%A5%EC%A0%90-%EC%A0%95%EB%A6%AC\" aria-label=\"가상화로 얻은 장점 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화로 얻은 장점 정리</h2>\n<ul>\n<li>물리적인 리소스 제약에서 해방 → 동적으로 변경 가능</li>\n<li>게스트 OS의 마이그레이션 및 복제가 용이 → 서버 증설이 용이 + 확장성 확보</li>\n<li>소프트웨어 레벨에서 호스트 리소스 제어가능</li>\n<li>비정상 동작 시 문제를 국소화, 호스트를 쉽게 제어</li>\n<li>효율이 향상, 시스템 안정화 가능</li>\n<li>비용대비 성능 향상, 고가용성으로 발전</li>\n</ul>\n<h2 id=\"가상화-도입-시-주의할-점\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EB%8F%84%EC%9E%85-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"가상화 도입 시 주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상화 도입 시 주의할 점</h2>\n<ul>\n<li>성능상 오버헤드가 있다.\n<ul>\n<li>CPU에서 2% - 3%</li>\n<li>메모리 성능에서 1할정도</li>\n<li>네트워크 성능 절반</li>\n<li>I/O 성능 5% 정도</li>\n</ul>\n</li>\n<li>상황에 따라서 가상화를 하는 것이 좋을수도 있고, 아닐수도 있다.</li>\n<li>지금은 가상화 기술이 더 안정되었을 것이다 → docker</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%95%EC%9D%9836-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0\">[강의36] 가상화 기술</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%EB%8F%84%EC%9E%85\">가상화 기술의 도입</a></p>\n<ul>\n<li><a href=\"#%EC%99%9C-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98\">왜 가상화 기술을 사용하나</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0%EC%9D%98-%ED%9A%A8%EC%9A%A9\">가상화 기술의 효용</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EC%A0%95%EC%B1%85\">가상화 서버 구축정책</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EC%83%81%ED%99%94%EB%A1%9C-%EC%96%BB%EC%9D%80-%EC%9E%A5%EC%A0%90-%EC%A0%95%EB%A6%AC\">가상화로 얻은 장점 정리</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EC%83%81%ED%99%94-%EB%8F%84%EC%9E%85-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">가상화 도입 시 주의할 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 28, 2021","title":"대규모 서비스를 지탱하는 기술 - 효율 향상 전략","categories":"웹 인프라 책 성능테스트","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_11/"}},"prev":{"id":"8064689b-ac41-5c5d-b707-9c5fb59639e2","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<h2 id=\"1-작업큐job-queue-시스템\" style=\"position:relative;\"><a href=\"#1-%EC%9E%91%EC%97%85%ED%81%90job-queue-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"1 작업큐job queue 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 작업큐(Job-Queue) 시스템</h2>\n<h2 id=\"웹-서비스와-요청\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EC%9A%94%EC%B2%AD\" aria-label=\"웹 서비스와 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 서비스와 요청</h2>\n<p>본래 웹 서비스의 요청은 동기적으로 실행이 되었는데, 데이터가 축적되어 처리가 무거워지면서 작업큐 시스템을 통해서 나중으로 미뤄도 되는 처리를 비동기로 실행하도록 한다.</p>\n<p><strong>예)</strong> 특정 url을 북마크 할 때 해당 url의 개요를 얻고 키워드를 추출하고, 카테고리를 판정하는 작업들을 비동기로 처리한다. 그렇지 않으면 북마크를 추가할 때마다 긴 시간이 소요된다.</p>\n<h2 id=\"작업큐-시스템-입문\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85%ED%81%90-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%85%EB%AC%B8\" aria-label=\"작업큐 시스템 입문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업큐 시스템 입문</h2>\n<ul>\n<li>비동화 하는 방법 → 해당 처리를 독립된 스크립트로 어플리케이션 내부에서 호출한다.\n<ul>\n<li>이 방법은 대량의 비동기 처리시 그 수만큼의 프로세스를 실행시키므로 성능상 단점이 될 수 있다.</li>\n<li>스크립트 시작과 초기화의 오버헤드가 커서 성능이 좋지 않다.</li>\n<li>소규모 어플리케이션에서만 진행하는 것이 좋다.</li>\n</ul>\n</li>\n<li>작업큐와 워커를 세트로 작업큐 시스템을 사용하는 것이 일반적이다.\n<ul>\n<li>작업큐에 실행하고자 하는 처리를 등록하고, 워커가 큐에서 작업을 추출해서 처리한다.</li>\n<li>작업큐를 통해 일시작인 대량의 처리 등록시 부하의 변동을 흡수한다.</li>\n<li>워커가 항상 실행하고 있으므로 처리시 초기화 오버헤드가 거의 없다.</li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/136998712-f7065322-bc05-4c98-a135-c8e360e0f89e.png\"><br>이미지 출처: 대용량 서비스를 지탱하는 기술</p>\n</li>\n</ul>\n<br>\n<h2 id=\"2-스토리지-선택---rdbms-와-key-value-스토어\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D---rdbms-%EC%99%80-key-value-%EC%8A%A4%ED%86%A0%EC%96%B4\" aria-label=\"2 스토리지 선택   rdbms 와 key value 스토어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스토리지 선택 - RDBMS 와 key-value 스토어</h2>\n<h2 id=\"증가하는-데이터를-어떻게-저장할까-\" style=\"position:relative;\"><a href=\"#%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%80%EC%9E%A5%ED%95%A0%EA%B9%8C-\" aria-label=\"증가하는 데이터를 어떻게 저장할까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>증가하는 데이터를 어떻게 저장할까 ?</h2>\n<h3 id=\"웹-어플리케이션과-스토리지\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\" aria-label=\"웹 어플리케이션과 스토리지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 어플리케이션과 스토리지</h3>\n<ul>\n<li><strong>스토리지란?</strong>\n<ul>\n<li>데이터를 영속적 혹은 일시적으로 저장하기 위한 기능</li>\n</ul>\n</li>\n<li>원본 데이터는 서비스의 근본적인 신뢰성과 관계되어서 매우 중요하다.</li>\n<li>캐시 데이터는 신뢰성보다는 성능을 높이고 비용을 줄일 때 사용된다.</li>\n<li>스토리지를 처음부터 잘 선택하는 것이 중요하다. 중간에 변경을 하려는 것은 굉장히 어렵다.</li>\n</ul>\n<h3 id=\"스토리지-선택의-전제조건\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D%EC%9D%98-%EC%A0%84%EC%A0%9C%EC%A1%B0%EA%B1%B4\" aria-label=\"스토리지 선택의 전제조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리지 선택의 전제조건</h3>\n<ul>\n<li>평균크기</li>\n<li>최대크기</li>\n<li>신규추가빈도</li>\n<li>갱신빈도</li>\n<li>삭제빈도</li>\n<li>참조빈도</li>\n</ul>\n<h3 id=\"스토리지의-종류\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"스토리지의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리지의 종류</h3>\n<ul>\n<li>현재는 크기 4가지 이다.\n<ul>\n<li>RDBMS\n<ul>\n<li>SQL 언어로 데이터 조작을 수행하는 시스템</li>\n<li>대표적으로 MySQL이 있다.</li>\n<li>MySQL에서는 SQL을 해석하여 실행하는 블록(서버, 옵티마이저, 캐시버퍼)과 실제 데이터를 보관하는 기능블록(InnoDB와 같은 스토리지 엔진)이 분리되어 있다.</li>\n<li>트랜잭션이 필요하고 갱신빈도가 높다면 InnoDB 엔진을 선택하고 추가작업이나 count 등만을 사용하면 MyISAM을 사용하는 등 특징에 맞게 선택해서 사용한다.\n<ul>\n<li>그렇지만 하나의 서버에서 두가지 엔진을 사용하는 것은 효율적인 CPU, 메모리 사용이 어렵다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>분산 key-value 스토어 (ex. memcached 등등)\n<ul>\n<li>정말 심플한 스토리지 이다.</li>\n<li>RDBMS에 비해 기능을 부족하지만 성능이 10~100배이다.</li>\n<li>분산알고리즘을 사용하기도 하는데 key의 해시값을 서버대수로 나누어서 분산저장하는 방법이나 더 복잡한 방법으로 분산한다.</li>\n<li>캐시데이터를 분산 key-value 스토리지에 저장할 수 있다.</li>\n</ul>\n</li>\n<li>분산 파일 시스템\n<ul>\n<li>보통 어느 크기 상의 데이터를 저장하는데 적합하다.</li>\n</ul>\n</li>\n<li>그 밖의 스토리지</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-캐시-시스템\" style=\"position:relative;\"><a href=\"#3-%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"3 캐시 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 캐시 시스템</h2>\n<h2 id=\"웹-어플리케이션의-부하와-프록시캐시-시스템\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"웹 어플리케이션의 부하와 프록시캐시 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 어플리케이션의 부하와 프록시/캐시 시스템</h2>\n<ul>\n<li>\n<p>용량이 부족할 때 HTTP 레벨의 캐싱을 포워드 프록시와 리버스 프록시로 진행할 수 있다.</p>\n</li>\n<li>\n<p>프록시에서 요청에 대한 응답을 캐싱하여 같은 요청이 전달됐을 때 캐싱해둔 응답을 반환할 수 있다.</p>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%9E%91%EC%97%85%ED%81%90job-queue-%EC%8B%9C%EC%8A%A4%ED%85%9C\">1. 작업큐(Job-Queue) 시스템</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EC%9A%94%EC%B2%AD\">웹 서비스와 요청</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%91%EC%97%85%ED%81%90-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%85%EB%AC%B8\">작업큐 시스템 입문</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D---rdbms-%EC%99%80-key-value-%EC%8A%A4%ED%86%A0%EC%96%B4\">2. 스토리지 선택 - RDBMS 와 key-value 스토어</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%80%EC%9E%A5%ED%95%A0%EA%B9%8C-\">증가하는 데이터를 어떻게 저장할까 ?</a></p>\n<ul>\n<li><a href=\"#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\">웹 어플리케이션과 스토리지</a></li>\n<li><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%A0%ED%83%9D%EC%9D%98-%EC%A0%84%EC%A0%9C%EC%A1%B0%EA%B1%B4\">스토리지 선택의 전제조건</a></li>\n<li><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80%EC%9D%98-%EC%A2%85%EB%A5%98\">스토리지의 종류</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C\">3. 캐시 시스템</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%BA%90%EC%8B%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C\">웹 어플리케이션의 부하와 프록시/캐시 시스템</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 29, 2021","title":"대규모 서비스를 지탱하는 기술 - 실전 기술","categories":"웹 인프라 책 성능테스트","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_13/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/high-traffic-service_12/","nextSlug":"/high-traffic-service_11/","prevSlug":"/high-traffic-service_13/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}