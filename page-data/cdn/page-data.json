{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/cdn/",
    "result": {"data":{"cur":{"id":"ff4d68a5-f01f-5ae1-92ba-074f403b2c61","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ul>\n<li>이번에 프로젝트를 진행하면서 보안상의 이유로 직접 S3 서버에 접근할 수 없었기 때문에 AWS에서 제공하는 CDN 서비스인 CloudFront를 통해서 이미지 등의 리소스에 접근해야 했다. (CDN서버의 본래 목적과는 다소 다른 이유로 사용했다.)</li>\n<li>CDN은 어떤 기술이며, 장점이 무엇이고, 어떻게 동작하는지에 대해서 알아본다.</li>\n<li>CDN을 퉁해 누릴 수 있는 보안적인 이점은 무엇이며, 프로젝트를 진행하면서 CloudFront를 어떻게 활용했는지에 대해서 작성한다.</li>\n</ul>\n<br>\n<h2 id=\"cdn이란-무엇인가\" style=\"position:relative;\"><a href=\"#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"cdn이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN이란 무엇인가?</h2>\n<p>CDN은 Content Delivery Network의 약자이다. 직역하자면 컨텐츠를 전달해주는 네트워크이다. CDN 컨텐츠를 전송하는 물리적인 서버가 지리적으로 여러곳에 상주하며 유저와 가까이 위치한 서버에서 요청한 컨텐츠를 고속으로 제공해준다.</p>\n<p>CDN이 제공하는 컨텐츠는 <code class=\"language-text\">HTML</code>, <code class=\"language-text\">javascript</code> 파일, <code class=\"language-text\">css</code>, 이미지, 동영상 등의 대부분의 인터넷 콘텐츠이다. CDN 서비스에 대해서 설명하는 예시에 항상 등장하는 어플리케이션은 넷플릭스이다. 전세계 곳곳에서 유저들이 넷플릭스 컨텐츠를 요청하면 가장 가까이 상주하고 있는 CDN 서버에서 넷플릭스 컨텐츠를 빠르게 유저에게 제공한다. 이외에 Facebook, Amazon 등도 사용 중이다.</p>\n<p>CDN을 자체로 웹을 호스팅 할 수는 없다. 다만 웹의 컨텐츠를 <code class=\"language-text\">캐싱</code>하여 호스팅하는 웹을 대신하여 전송해서 웹의 성능을 개선한다.</p>\n<br>\n<h2 id=\"cdn-장점\" style=\"position:relative;\"><a href=\"#cdn-%EC%9E%A5%EC%A0%90\" aria-label=\"cdn 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CDN 장점</h2>\n<ol>\n<li>\n<p>캐싱으로 컨텐츠 고속 전송</p>\n<ul>\n<li>\n<p>사용자와 물리적으로 가까운 CDN 서버에서 컨텐츠를 전송하므로 사용자의 입장에서 컨텐츠 로드 시간이 매우 단축된다. 또한 CDN 서버는 랜덤으로 배치되어 있는 것이 아니라, 전세계 트래픽이 많은 영역에 전략적으로 위치해 있다.</p>\n</li>\n<li>\n<p>캐싱 과정</p>\n<ol>\n<li>사용자가 컨텐츠를 요청하면 가장 가까운 CDN 엣지 서버로 요청이 간다.</li>\n<li>(최초 요청일 경우) CDN 엣지 서버에서 원본 서버로 요청을 보낸다.</li>\n<li>원본 서버가 해당 컨텐츠를 엣지 서버에 응답한다.</li>\n<li>엣지 서버가 사용자에게 컨텐츠를 응답한다.</li>\n</ol>\n<br>\n  <p align=\"center\"><img width=\"450\" src=\"https://user-images.githubusercontent.com/63405904/130417611-508fcc23-79f2-4ae7-923b-5a0989a2cf54.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/</p>\n</li>\n<li>\n<p>그 이후부터는 동일한 컨텐츠에 대한 요청이 있을 때 해당 컨텐츠가 동일한 CDN 엣지 서버에 요청을 보내고 원본 서버에 요청을 보낼 필요 없이 CDN 엣지 서버가 컨텐츠를 반환한다. 이때 속도가 굉장히 향상된다.\n<br></p>\n<p align=\"center\"><img width=\"450\" src=\"https://user-images.githubusercontent.com/63405904/130417751-e2d97680-8446-401e-bdec-90b95560f87f.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/performance/</p>\n</li>\n</ul>\n</li>\n<li>\n<p>CDN의 failover</p>\n<ul>\n<li>failover란? 서버가 갑자기 중단되어 서버에 요청을 보내던 트래픽에 대해 정상적인 응답을 하지 못하는 것을 방지하는 것</li>\n<li>CDN은 요청을 보내던 origin server가 죽으면 정상적으로 응답을 할 수 있는 서버로 reroute 하여 사용자가 안정적으로 그 응답을 받을 수 있도록 한다.</li>\n</ul>\n<br>\n <p align=\"center\"><img width=\"433\" src=\"https://user-images.githubusercontent.com/63405904/130594395-77cf44f3-049c-4a4c-9be2-f59678f77b7c.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</p>\n</li>\n<li>\n<p>로드밸런싱 및 DDos 공격 완화</p>\n<ul>\n<li>로드 밸런서는 네트워크 트래픽을 여러 서버에 분산해서 성능을 개선하는 것이다.</li>\n<li>CDN은 GSLB(Global Server Load Balancing)으로 로드 밸런싱 기술을 제공한다. (DNS와 GSLB의 차이점에 대해서 학습해도 좋다.) <a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/glossary/global-server-load-balancing-gslb/\">GSLB 참고</a></li>\n<li>CDN은 데이터센터의 로드 밸런싱으로 사용자의 요청을 가능한 서버에 분산해서 요청한다. (GSLB를 사용하기 때문에 요청 서버에 대한 헬스체크도 수행하여 안정적이다.)</li>\n<li>속도도 개선시키고, 트래픽도 감소시키므로 DDos 공격도 방지할 수 있다.\n<p align=\"center\"><img width=\"630\" src=\"https://user-images.githubusercontent.com/63405904/130593424-74c410aa-b465-4fee-8dd1-e4213090064a.png\"><br>이미지 출처: https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"프로젝트에서-cdn-사용-목적\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\" aria-label=\"프로젝트에서 cdn 사용 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트에서 CDN 사용 목적</h2>\n<ul>\n<li>다음은 프로젝트의 인프라 구조이다.\n<p align=\"center\"><img width=\"605\" src=\"https://user-images.githubusercontent.com/63405904/130720611-034be1a1-c358-4ce5-8fac-8383a87d19e0.png\"></p>\n</li>\n<li>일반적인지는 잘 모르겠지만, 현재 S3 버킷에 프론트 서버가 올라가있다. (그렇지 않더라도 이미지 및 동영상 리소스가 S3 버킷에 저장되어 있다.)</li>\n<li>프로젝트를 하는데 보안상의 이슈로 S3 버킷에 대한 접근을 전체공개할 수 없었고, Cloud Front를 통해서 우회하여 접근하도록 설계했다.</li>\n<li>CDN의 본래 목적은 리소스를 캐싱하여 빠르게 로딩하는 것이지만 이번 프로젝트에서는 S3 버킷 사용 목적으로 설계했다.</li>\n<li>프론트 서버를 분산하거나, 진행중인 프로젝트(개발자 친화적 SNS)의 특성상 이미지 및 동영상 리소스가 굉장히 많아져서 S3 버킷이 추가되면 로드 밸런싱, CDN failover 등의 이점을 누릴 수 있을 것이라고 생각한다.</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/performance/\">https://www.cloudflare.com/ko-kr/learning/cdn/performance/</a></li>\n<li><a href=\"https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/\">https://www.cloudflare.com/ko-kr/learning/cdn/cdn-load-balance-reliability/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">CDN이란 무엇인가?</a></li>\n<li><a href=\"#cdn-%EC%9E%A5%EC%A0%90\">CDN 장점</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-cdn-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\">프로젝트에서 CDN 사용 목적</a></li>\n</ul>\n</div>","excerpt":"Intro 이번에 프로젝트를 진행하면서 보안상의 이유로 직접 S3 서버에 접근할 수 없었기 때문에 AWS에서 제공하는 CDN 서비스인 CloudFront를 통해서 이미지 등의 리소스에 접근해야 했다. (CDN서버의 본래 목적과는 다소 다른 이유로 사용했다.) CDN은 어떤 기술이며, 장점이 무엇이고, 어떻게 동작하는지에 대해서 알아본다. CDN을 퉁해 누릴 수 있는 보안적인 이점은 무엇이며, 프로젝트를 진행하면서 CloudFront를 어떻게 활용했는지에 대해서 작성한다. CDN이란 무엇인가? CDN은 Content Delivery Network의 약자이다. 직역하자면 컨텐츠를 전달해주는 네트워크이다. CDN 컨텐츠를 전송하는 물리적인 서버가 지리적으로 여러곳에 상주하며 유저와 가까이 위치한 서버에서 요청한 컨텐츠를 고속으로 제공해준다. CDN이 제공하는 컨텐츠는 ,  파일, , 이미지, 동영상 등의 대부분의 인터넷 콘텐츠이다. CDN 서비스에 대해서 설명하는 예시에 항상 등장하는 …","frontmatter":{"date":"September 02, 2021","title":"CDN 알아보기","categories":"인프라","author":"코다","emoji":"🚊"},"fields":{"slug":"/cdn/"}},"next":{"id":"0bbf1a5f-5450-5c71-8533-7652d2132ffe","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INTRO</h2>\n<ul>\n<li>JPA는 DB의 데이터와 객체간의 모순을 해결하기 위해서 나온 것이다.</li>\n<li>객체는 객체 그래프로 탐색이 가능하지만 데이터베이스에 저장된 데이터는 객체를 탐색하듯이 탐색하기가 어렵다.</li>\n<li>따라서 데이터베이스에 저장된 데이터들을 가지고 객체 그래프 탐색이 가능하기 위해서 프록시 라는 기술이 나왔다.</li>\n<li>JPA에서는 연관된 객체를 로딩하는데 지연 로딩과 즉시 로딩이라는 두가지 기법을 사용한다.</li>\n<li>여기서 지연 로딩시 프록시 기술이 사용된다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"기본-예시-entity\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity\" aria-label=\"기본 예시 entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 예시 Entity</h2>\n<ol>\n<li>Member\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> team<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//getter 및 생성자 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>Team\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//getter 및 생성자 생략 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<br>\n<h2 id=\"프록시\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C\" aria-label=\"프록시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시</h2>\n<ul>\n<li>지연 로딩을 설정된 연관 객체를 가져올 때 프록시 객체를 가져온다.</li>\n<li><code class=\"language-text\">em.find()</code>를 사용하면 실제 객체를 가져오고, <code class=\"language-text\">em.getReference()</code>를 사용하면 프록시 객체를 가져온다.\n<ul>\n<li>프록시 객체를 가져온다는 것은 query는 실행되지 않는 것이다.</li>\n<li>특정 객체에 대해 <code class=\"language-text\">em.find()</code>를 하면 연관된 객체에 대해서는 설정되어 있는 <code class=\"language-text\">fetch</code> 종류에 따라 즉시로딩 혹은 지연로딩한다.</li>\n</ul>\n</li>\n</ul>\n<br> \n<h3 id=\"실제-entity-조회---code-classlanguage-textfindcode\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textfindcode\" aria-label=\"실제 entity 조회   code classlanguage textfindcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 Entity 조회 - <code class=\"language-text\">find()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"em.find()는 실제 entity를 조회하여 가져온다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">find_actualEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//select 퀴리가 호출된다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실제 엔티티 클래스임을 확인할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 테스트를 실행하면 다음과 같은 select 쿼리가 실행된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    member0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_ \n<span class=\"token keyword\">from</span>\n    member member0_ \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> <span class=\"token comment\">#ManyToOne, OneToOne 기본 fetch 전략은 EAGER이므로 left join을 실행해서 Team까지 즉시로딩한다. </span>\n    team team1_ \n        <span class=\"token keyword\">on</span> member0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>team1_<span class=\"token punctuation\">.</span>id \n<span class=\"token keyword\">where</span>\n    member0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<br>\n<h3 id=\"프록시-entity-조회---code-classlanguage-textgetreferencecode\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---code-classlanguage-textgetreferencecode\" aria-label=\"프록시 entity 조회   code classlanguage textgetreferencecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 Entity 조회 - <code class=\"language-text\">getReference()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"em.getReference()는 해당 entity에 대한 proxy 객체를 가져온다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_proxyEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//아무 쿼리가 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//getId()는 여전히 쿼리는 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실제 Entity 클래스가 아니다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체는 실제 Entity 를 상속한다.</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//출력 : class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 테스트 코드는 select 쿼리를 호출하지 않는다.</li>\n<li><code class=\"language-text\">getId()</code>는 해당 entity에 대한 getter이기는 하나, 프록시는 해당 entity에 대한 식별자를 보관하므로 <code class=\"language-text\">getId()</code>를 호출하더라도 entity를 초기화하지 않는다. (여진히 쿼리가 실행되지 않는다.)</li>\n<li>위에서 <code class=\"language-text\">findMember.getClass()</code>를 출력해보면 <code class=\"language-text\">class com.example.jpastudy.domain.Member$HibernateProxy$VGt5eoXR</code> 와 같이 프록시 객체 임을 확인할 수 있다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-특징-및-초기화\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"프록시 객체 특징 및 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 특징 및 초기화</h2>\n<ul>\n<li>초기화는 영속성 컨텍스트에 실제 객체가 없을 경우 엔티티 생성을 요청하여 영속성 컨텍스트에 실제 entity를 로드하고 참조값을 저장하는 것이다.</li>\n<li>프록시 객체는 실제 객체를 상속한다. 따라서 사용할 때는 실제 Entity처럼 사용할 수 있다.</li>\n</ul>\n<p align=\"center\"><img width=\"500\" alt=\"스크린샷 2021-08-15 오후 3 58 10\" src=\"https://user-images.githubusercontent.com/63405904/129469950-dd48c26f-5554-4fdd-9e1f-5d38399ae46b.png\"><br>이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)</p>\n<br>\n<ul>\n<li>프록시 객체는 실제 Entity에 대한 식별자와 해당 Entity의 참조값을 저장하고 있다. 따라서 <code class=\"language-text\">getId()</code>로 식별자 조회 시 초기화 하지 않는다.</li>\n<li>더불어 프록시 객체가 초기화 될 때 실제 entity 객체로 대체되는 것이 아니라, 프록시에 저장되어 있는 entity 참조값으로 실제 객체 메소드에 위임하여 메소드가 실행된다.</li>\n</ul>\n<p align=\"center\"><img width=\"500\" alt=\"스크린샷 2021-08-15 오후 4 03 26\" src=\"https://user-images.githubusercontent.com/63405904/129470031-d0c8bcd1-ea2a-479c-a45f-bc3afa4f20de.png\"><br>이미지 출처 : 자바 ORM 표준 JPA 프로그래밍 (저자: 김영한)</p>\n<br>\n<h3 id=\"getter-호출시-code-classlanguage-textgetidcode-제외-프록시-객체-초기화---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode\" style=\"position:relative;\"><a href=\"#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-code-classlanguage-textgetidcode-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---code-classlanguage-textgetreferencecode---code-classlanguage-textgetnamecode\" aria-label=\"getter 호출시 code classlanguage textgetidcode 제외 프록시 객체 초기화   code classlanguage textgetreferencecode   code classlanguage textgetnamecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getter 호출시 (<code class=\"language-text\">getId()</code> 제외) 프록시 객체 초기화 - <code class=\"language-text\">getReference()</code> -> <code class=\"language-text\">getName()</code></h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy 객체는 getName() 등을 호출 할 경우 초기화 된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_proxyEntity_getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//아무 쿼리가 호출되지 않는다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//getId()는 여전히 쿼리는 호출되지 않는다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//select 쿼리가 실행된다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//초기화 되어도 여전히 실제 Entity 클래스가 아니다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체는 실제 Entity 를 상속한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    member0_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_0_0_<span class=\"token punctuation\">,</span>\n    member0_<span class=\"token punctuation\">.</span>team_id <span class=\"token keyword\">as</span> team_id3_0_0_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> id1_1_1_<span class=\"token punctuation\">,</span>\n    team1_<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> name2_1_1_ \n<span class=\"token keyword\">from</span>\n    member member0_ \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span>\n    team team1_ \n        <span class=\"token keyword\">on</span> member0_<span class=\"token punctuation\">.</span>team_id<span class=\"token operator\">=</span>team1_<span class=\"token punctuation\">.</span>id \n<span class=\"token keyword\">where</span>\n    member0_<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<ul>\n<li>getName() 실행 시 위 select 쿼리가 실행된다.</li>\n</ul>\n<br>\n<h3 id=\"프록시-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 특징</h3>\n<ul>\n<li>처음 단 한번만 초기화 된다.</li>\n<li>프록시 객체가 대체되는 것이 아니라 프록시 객체를 통해 실제 entity 접근하는 것이다.</li>\n<li>타입 체크시 주의해야 한다. (아래 더 자세히 다룸)</li>\n<li>영속성 컨텍스트에 이미 해당 entity가 있다면 <code class=\"language-text\">getReference()</code>를 해도 실제 entity가 조회된다.</li>\n<li>영속성 컨텍스트를 통해 초기화 하므로 영속성 컨텍스트와 연결이 없다면 <code class=\"language-text\">LazyInitializationException</code> 예외가 발생한다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-타입-체크\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\" aria-label=\"프록시 객체 타입 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 타입 체크</h2>\n<ul>\n<li>프록시 객체의 타입은 <code class=\"language-text\">getClass()</code> 로 비교할 경우 프록시 객체 클래스가 조회되기 때문에 비교하기 위해서는 <code class=\"language-text\">instanceOf</code> 를 사용해야 한다.</li>\n<li>많은 경우 프록시 객체를 <code class=\"language-text\">getClass()</code>로 실제 entity와 비교하여 버그가 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy 객체의 타입은 실제 entity 객체 타입과 다르다. getClass()로 비교할 경우 false가 반환된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">proxyType_getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//프록시 객체를 가져오기 위해 Member의 Team 프로퍼티를 FetchType.LAZY로 설정</span>\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team은 지연로딩으로 프록시객체이다.</span>\n    <span class=\"token class-name\">Team</span> findTeam <span class=\"token operator\">=</span> findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//기존 TeamA와 프록시 팀인 findTeam의 필드값은 동일하다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEqualTo</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 팀읜 findTeam의 class는 Team이 아니다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findTeam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//isInstanceOf로 비교하면 상속 받은 Team.class 이다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"영속성-컨텍스트에-있는-entity-getreference\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference\" aria-label=\"영속성 컨텍스트에 있는 entity getreference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영속성 컨텍스트에 있는 entity getReference</h2>\n<ul>\n<li>영속성 컨텍스트에 조회하고자 하는 entity가 이미 존재한다면 <code class=\"language-text\">getReference()</code>를 사용하더라도 프록시 객체가 아닌 실제 entity 가 반환된다.</li>\n</ul>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이미 영속성 컨텍스트에 있는 entity 조회시 getReference로 조회해도 실제 entity가 반환된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_AlreadyInPersistenceContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//영속성 컨텍스트에 존재햔다.</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프록시 객체를 가져오듯 메서드를 호출한다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시가 아닌 실제 entity 클래스를 가져온다. 추가적인 쿼리는 실행되지 않는다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"준영속-entity-초기화\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"준영속 entity 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준영속 entity 초기화</h2>\n<ul>\n<li>준영속이 된 프록시 객체에서 초기화를 시도할 경우 하이버네이트의 <code class=\"language-text\">LazyInitializationException</code>이 발생한다.</li>\n<li>프록시의 초기화는 영속성 컨텍스트와 매우 밀접하게 관련이 있으므로 영속성 컨텍스트와의 관계가 끊어지면 에외가 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"준영속 프록시 객체에 대한 초기화 시 예외가 발생한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">getReference_InitializationExcpetion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.</span>\n\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//먼저 영속성 컨텍스트를 clear 해주어야한다. </span>\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//프록시 객체를 가져온 영속성 컨텍스트를 종료한다.</span>\n\n    <span class=\"token function\">assertThatThrownBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//영속성 컨텍스트가 종료된 이후에 초기화를 시도하면</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazyInitializationException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//하이버네이트 예외가 발생한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Member</code>의 <code class=\"language-text\">Team</code>을 지연로딩으로 <code class=\"language-text\">fetch</code> 타입을 설정하여 <code class=\"language-text\">Member</code> 조회시 <code class=\"language-text\">Team</code>은 프록시 객체이도록 한다.</li>\n<li>영속성 컨텍스트를 닫은 후에 초기화를 시도하면 예외가 발생한다.\n<ul>\n<li>단순히 <code class=\"language-text\">Member.getTeam()</code> 이 초기화를 실행하지 않고 실제 <code class=\"language-text\">Team</code>의 필드가 사용될 때 (<code class=\"language-text\">getName()</code> 등) 초기화가 된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"프록시-객체-확인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8\" aria-label=\"프록시 객체 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 객체 확인</h2>\n<ul>\n<li>프록시 객체 확인을 위해서는 <code class=\"language-text\">PersistenceUnitUtil.isLoaded(Object entity)</code>를 사용해서 확인할 수 있다.</li>\n<li>때때로 jpa repostiory에 대한 단위 테스트를 작성하려고 할 때, 의도한대로 지연로딩 또는 즉시로딩이 되었는지 확인할 때 사용할 수 있다.</li>\n<li>만일 초기화가 안된 프록시 객체라면 위 결과값이 <code class=\"language-text\">false</code>가 반환된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"프록시 객체를 확인할 수 있다. \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">PersistenceUnitUtil_Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> teamA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Team A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    member<span class=\"token punctuation\">.</span><span class=\"token function\">setTeam</span><span class=\"token punctuation\">(</span>teamA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Member</span> savedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Member</span> findMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> savedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Team 을 lazy 로딩 설정하여 프록시 객체로 가져온다.</span>\n\n    <span class=\"token keyword\">boolean</span> memberIsLoaded <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getPersistenceUnitUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> teamIsLoaded <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getPersistenceUnitUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span>findMember<span class=\"token punctuation\">.</span><span class=\"token function\">getTeam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//EntityManagerFactory에서 PersistenceUnitUtil을 가져온다.</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>memberIsLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//findMember 는 실제 entity 이므로 결과값이 true 이다.</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>teamIsLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//team 은 프록시 객체이므로 결과값이 false 이다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">INTRO</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C-entity\">기본 예시 Entity</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C\">프록시</a></p>\n<ul>\n<li><a href=\"#%EC%8B%A4%EC%A0%9C-entity-%EC%A1%B0%ED%9A%8C---find\">실제 Entity 조회 - <code class=\"language-text\">find()</code></a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-entity-%EC%A1%B0%ED%9A%8C---getreference\">프록시 Entity 조회 - <code class=\"language-text\">getReference()</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%8A%B9%EC%A7%95-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94\">프록시 객체 특징 및 초기화</a></p>\n<ul>\n<li><a href=\"#getter-%ED%98%B8%EC%B6%9C%EC%8B%9C-getid-%EC%A0%9C%EC%99%B8-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%EC%B4%88%EA%B8%B0%ED%99%94---getreference---getname\">Getter 호출시 (<code class=\"language-text\">getId()</code> 제외) 프록시 객체 초기화 - <code class=\"language-text\">getReference()</code> -> <code class=\"language-text\">getName()</code></a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8A%B9%EC%A7%95\">프록시 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\">프록시 객체 타입 체크</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9E%88%EB%8A%94-entity-getreference\">영속성 컨텍스트에 있는 entity getReference</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A4%80%EC%98%81%EC%86%8D-entity-%EC%B4%88%EA%B8%B0%ED%99%94\">준영속 entity 초기화</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9D%B8\">프록시 객체 확인</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 26, 2021","title":"JPA 프록시 알아보기","categories":"JPA","author":"코다","emoji":"🚀"},"fields":{"slug":"/jpa-proxy/"}},"prev":{"id":"9dcfc695-3e64-5efc-9b80-257d69dd5ae2","html":"<h2 id=\"1-intro\" style=\"position:relative;\"><a href=\"#1-intro\" aria-label=\"1 intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. INTRO</h2>\n<ul>\n<li>많은 어플리케이션에서 소셜 로그인을 지원하는데, 이때 사용되는 것이 OAuth 2.0 이다.</li>\n<li>간단하게 이야기하면 OAuth 2.0 이란 사용자의 정보에 대한 권한을 부여하는 <code class=\"language-text\">산업 표준 프로토콜</code>의 일종이다.</li>\n</ul>\n<blockquote>\n<p>(정의) 제 3의 앱이 자원의 소유자인 서비스 이용자를 대신하여 서비스를 요청할 수 있도록 자원 접근 권한을 위임하는 방법 <br> <em>출처: 금융보안원 “OAuth 2.0 개요 및 보안 고려사항” 보안연구부-2015-030</em></p>\n</blockquote>\n<ul>\n<li>즉, 정보 소유자 (서비스 이용자)를 대신하여 앱이 다른 서비스에 등록되어 있는 자원에 대한 접근을 요청하는 권한을 위임한다.</li>\n<li>아래 글은 <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2\">링크</a> 원문을 번역하고 일부 요약한 것이다.</li>\n</ul>\n<br>\n<h2 id=\"2-oauth-주요-개념\" style=\"position:relative;\"><a href=\"#2-oauth-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\" aria-label=\"2 oauth 주요 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. OAuth 주요 개념</h2>\n<ol>\n<li><strong>리소스 소유자</strong> (Resource Owner) - 어플리케이션이 인가 요청을 하는 정보의 소유자이다. 즉, 그 정보를 소유하고 있는 ‘사용자’를 말한다.</li>\n<li><strong>클라이언트</strong> (Client) - 리소스 소유자의 정보를 요청하는 어플리케이션이다.</li>\n<li><strong>리소스 서버</strong> (Resource Server) - 리소스 소유자의 정보를 보유하고 있는 서버이다.</li>\n<li><strong>인가 서버</strong> (Authorization Server) - 클라이언트가 사용자에 대한 정보 권한을 요청할 때, 그 사용자에 대해 검증하고 클라이언트 어플리케이션에 access token을 발급하는 인가 서버이다. 편의상 리소스 서버와 인가 서버를 구별하지 않고 이해해도 좋다.</li>\n</ol>\n<br> \n<h2 id=\"3-간단히-보는-oauth-프로토콜-흐름\" style=\"position:relative;\"><a href=\"#3-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B3%B4%EB%8A%94-oauth-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%ED%9D%90%EB%A6%84\" aria-label=\"3 간단히 보는 oauth 프로토콜 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 간단히 보는 OAuth 프로토콜 흐름</h2>\n<p align=\"center\"><img width=\"540\" alt=\"스크린샷 2021-08-17 오후 2 41 53\" src=\"https://user-images.githubusercontent.com/63405904/129669922-d91d3405-3315-4b29-9e47-f8015dec6b13.png\">출처 : Digital Ocean의 An Introduction to OAuth 2.0</p>\n<br>\n<ol>\n<li>어플리케이션 유저에게 리소스에 대한 인가를 요청한다.</li>\n<li>유저는 해당 인가를 승인한다.</li>\n<li>어플리케이션은 리소스를 보유하고 있는 인가 서버에 access token을 요청한다.</li>\n<li>본 어플리케이션이 인증이 되고, 인가 승인을 인증하면 인가 서버는 해당 어플리케이션에 access token을 발급하고 인가 절차가 마무리된다.</li>\n<li>인가를 받은 어플리케이션은 리소스 서버에 access token과 함께 리소스를 요청한다.</li>\n<li>리소스 서버에서 access token을 확인하면 해당 리소스를 어플리케이션에 제공한다.</li>\n</ol>\n<br>\n<h2 id=\"4-어플리케이션-등록\" style=\"position:relative;\"><a href=\"#4-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%93%B1%EB%A1%9D\" aria-label=\"4 어플리케이션 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 어플리케이션 등록</h2>\n<ul>\n<li>OAuth 기능을 추가하기 이전 본 어플리케이션(클라이언트)를 리소스를 요청하고자 하는 제 3 서비스(Google, Kakao, Github 등등)에 등록해야한다.</li>\n<li>등록 정보\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 어플리케이션 이름\n- 어플리케이션 웹사이트\n- Redirect URI or Callback URL</code></pre></div>\n</li>\n<li>위에서 리다이렉트 URI는 인가 후, 인가 서버(리소스 서버)에서 code를 전송해줄 주소를 말한다.</li>\n</ul>\n<br>\n<ul>\n<li>어플리케이션 등록 시 다음 정보를 발급 받는다. 다음은 <code class=\"language-text\">Client Credentials</code>이라고 도 한다.\n<ol>\n<li>Client Id - 외부에 노출되는 어플리케이션 identity 이다.</li>\n<li>Client Secret - 외부에 공개되어서는 안되는 key로 어플리케이션을 인증하고 유저의 계정에 접근을 요청할 때 사용한다. (Access Token 발급 시)</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"5-authorization-부여하기\" style=\"position:relative;\"><a href=\"#5-authorization-%EB%B6%80%EC%97%AC%ED%95%98%EA%B8%B0\" aria-label=\"5 authorization 부여하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Authorization 부여하기</h2>\n<ul>\n<li>\n<p>OAuth 2.0은 3가지 종류로 인가를 부여한다.</p>\n<ol>\n<li>Authorization Code</li>\n<li>Client Credentials</li>\n<li>Device Code</li>\n</ol>\n</li>\n<li>\n<p>위 3가지 중 이번 프로젝트에서는 <code class=\"language-text\">Authorization Code</code>를 사용했다. <code class=\"language-text\">Authorization Code</code>가 가장 빈번하게 사용이 되는데 server-side applications에 가장 최적화 되어 있기 때문이다.</p>\n</li>\n<li>\n<p>아래가 <code class=\"language-text\">Authorization Code</code>를 발급받는 기본 흐름인데, 보면 어플리케이션이 user-agent(유저의 웹 브라우저)와 소통할 수 있어야 하며 user-agent를 통해 라우팅 된 API authorization 코드를 받을 수 있어야 한다.</p>\n</li>\n</ul>\n<p align=\"center\"><img width=\"688\" alt=\"스크린샷 2021-08-17 오후 4 08 28\" src=\"https://user-images.githubusercontent.com/63405904/129680013-50c21f7f-e1a2-4bb7-89fc-361450ef6c3e.png\">출처 : Digital Ocean의 An Introduction to OAuth 2.0</p>\n<ol>\n<li>리소스를 요청하고자 하는 서버에 기재되어 있는 API authorization endpoint URI 에 1) client_id 2) redirect_uri 3) response_type 4) scope 등을 지정해서 요청을 보낸다.\n<ul>\n<li>본인은 프로젝트에서 Github 소셜 로그인을 구현했었는데 <code class=\"language-text\">https://github.com/login/oauth/authorize?client_id=%s&amp;redirect_uri=%s&amp;scope=%s</code> 로 유저 인가 request를 보내도록 되어 있었다.</li>\n</ul>\n</li>\n<li>그럼 해당 리소스 서버(Github 등)에서 인가를 허가할지 말지 여부를 물어보는 페이지로 이동하여 유저가 허가 또는 거절을 누른다.</li>\n<li>유저가 허가한다면 리소스 서버(인가 서버)는 user-agent(브라우저)가  어플리케이션 등록 시 기재한 redirect URI로 authorization code와 함께 리다이렉트 하도록 한다.</li>\n<li>어플리케이션은 리소스 서버(인가 서버)에 1) client_id 2) client_secrete 3) grant_type 4) code 5) redirect_uri 와 함께 Access Token 발급 request를 보낸다.</li>\n<li>리소스 서버(인가 서버)에서 요청을 검사하고 유효하다면 AccessToken을 반환한다.\n`{“access_token”:“ACCESS_TOKEN”,“token_type”:“bearer”,“expires_in”:2592000,“refresh_token”:“REFRESH_TOKEN”,“scope”:“read”,“uid”:100101,“info”:{“name”:“developer_coda”,“email”:”<a href=\"mailto:coda@coda.com\">coda@coda.com</a>“}}</li>\n</ol>\n<p>`</p>\n<br> \n<h2 id=\"6-access-token-활용하기\" style=\"position:relative;\"><a href=\"#6-access-token-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"6 access token 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Access Token 활용하기</h2>\n<ul>\n<li>이후 어플리케이션은 리소스 서버에 원하는 정보 또는 행위를 요청할 때 헤더에 access token을 담아서 요청하도록 한다.</li>\n<li>Access token을 어플리케이션에 어떻게 관리할지는 내부 논의 후 정해서 저장하면 된다. (Redis, JWT 등등 이 있다.)</li>\n<li>본인은 프로젝트에서 JWT 토큰의 value로 저장하고 유저에게 JWT 토큰을 반환했다.</li>\n</ul>\n<br>\n<h2 id=\"7-전체적인-흐름도\" style=\"position:relative;\"><a href=\"#7-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%9D%90%EB%A6%84%EB%8F%84\" aria-label=\"7 전체적인 흐름도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 전체적인 흐름도</h2>\n<p align=\"center\"><img width=\"700\" alt=\"스크린샷 2021-08-17 오후 4 44 00\" src=\"https://user-images.githubusercontent.com/63405904/129685067-5d0bbbdc-0224-42e8-bed4-fe984cb036ec.png\">출처 : NHN Cloud - OAuth 2.0 대표 취약점과 보안 고려 사항 알아보기</p>\n<br>\n<h2 id=\"8-번외-oauth의-대표-취약점\" style=\"position:relative;\"><a href=\"#8-%EB%B2%88%EC%99%B8-oauth%EC%9D%98-%EB%8C%80%ED%91%9C-%EC%B7%A8%EC%95%BD%EC%A0%90\" aria-label=\"8 번외 oauth의 대표 취약점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 번외) OAuth의 대표 취약점</h2>\n<h3 id=\"81-csrfcross-site-request-forgery-공격\" style=\"position:relative;\"><a href=\"#81-csrfcross-site-request-forgery-%EA%B3%B5%EA%B2%A9\" aria-label=\"81 csrfcross site request forgery 공격 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1. CSRF(Cross Site Request Forgery) 공격</h3>\n<ul>\n<li>OAuth 인증 진행 시, 발급받은 <code class=\"language-text\">Authorization Code</code>와 이전에 발급받은 <code class=\"language-text\">client_secret</code>을 함께 보내어 리소스 서버에 Access Token을 요청하는 단계가 있다.</li>\n<li><code class=\"language-text\">client_secret</code>은 CSRF token과 같은 역할을 해서 중간에 CSRF 공격을 예방하는 역할을 하는데, 만일 이것에 대한 검증이 누락되거나 취약하면 CSRF 공격에 의해 Authorization Code가 탈취되어 사용자의 계정이 노출될 수 있다.</li>\n<li><code class=\"language-text\">client_secret</code>에 대한 검증이 필요하다.</li>\n</ul>\n<br>\n<h3 id=\"82-convert-redirect\" style=\"position:relative;\"><a href=\"#82-convert-redirect\" aria-label=\"82 convert redirect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.2. Convert Redirect</h3>\n<ul>\n<li>유저가 로그인한 후 인가를 승인하고 Authorization Code에 대해서 발급할 때 리다이렉트 되는 redirect_uri에 대한 검증이 안될 경우 공격자가 해당 공격 서버의 uri로 대체하여 Authorization Token을 탈취할 수 있다.</li>\n<li>Redirect URI에 대한 Full path 검증을 진행해야한다.</li>\n</ul>\n<br>\n<br>\n<p><strong>[출처]</strong></p>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2\">https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2</a></li>\n<li><a href=\"https://meetup.toast.com/posts/105\">https://meetup.toast.com/posts/105</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-intro\">1. INTRO</a></p>\n</li>\n<li>\n<p><a href=\"#2-oauth-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\">2. OAuth 주요 개념</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EA%B0%84%EB%8B%A8%ED%9E%88-%EB%B3%B4%EB%8A%94-oauth-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%ED%9D%90%EB%A6%84\">3. 간단히 보는 OAuth 프로토콜 흐름</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%93%B1%EB%A1%9D\">4. 어플리케이션 등록</a></p>\n</li>\n<li>\n<p><a href=\"#5-authorization-%EB%B6%80%EC%97%AC%ED%95%98%EA%B8%B0\">5. Authorization 부여하기</a></p>\n</li>\n<li>\n<p><a href=\"#6-access-token-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">6. Access Token 활용하기</a></p>\n</li>\n<li>\n<p><a href=\"#7-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%9D%90%EB%A6%84%EB%8F%84\">7. 전체적인 흐름도</a></p>\n</li>\n<li>\n<p><a href=\"#8-%EB%B2%88%EC%99%B8-oauth%EC%9D%98-%EB%8C%80%ED%91%9C-%EC%B7%A8%EC%95%BD%EC%A0%90\">8. 번외) OAuth의 대표 취약점</a></p>\n<ul>\n<li><a href=\"#81-csrfcross-site-request-forgery-%EA%B3%B5%EA%B2%A9\">8.1. CSRF(Cross Site Request Forgery) 공격</a></li>\n<li><a href=\"#82-convert-redirect\">8.2. Convert Redirect</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 03, 2021","title":"OAuth 알아보기","categories":"웹","author":"코다","emoji":"🖥"},"fields":{"slug":"/oauth/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/cdn/","nextSlug":"/jpa-proxy/","prevSlug":"/oauth/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}