{"componentChunkName":"component---src-templates-blog-template-js","path":"/spring-exception-handling/","result":{"data":{"cur":{"id":"debf7ec4-ca5a-5118-ab72-01b5b73f51e7","html":"<h2 id=\"spring-boot\" style=\"position:relative;\"><a href=\"#spring-boot\" aria-label=\"spring boot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot</h2>\n<p>Spring boot 자체에서 핸들링 되지 않은 error 에 대한 대비책을 마련해 두었다. </p>\n<ul>\n<li>먼저, Spring boot 자체에서 <code class=\"language-text\">/error</code> 에 대한 매핑을 찾아서 해당 URL에 대해서 동일한 이름을 가진 <code class=\"language-text\">error</code> 뷰를 매핑 한다. 해당 뷰는 <code class=\"language-text\">error.html</code> 을 반환한다. (해당 뷰는  Thymeleaf template인데, 만일 JSP를 사용한다면 <code class=\"language-text\">error.jsp</code>를 반환하도록 <code class=\"language-text\">InternalResourceViewResolver</code>에서 변경할 수 있다) 실질적인 매핑은 ViewResolver에서 담당한다.</li>\n<li>\n<p>만일 <code class=\"language-text\">/error</code>에 대해 그 어떠한 view-resolver도 매핑이 되어 있지 않다면 spring boot는 내부적으로 가지고 있는 대체 에러 페이지인 “Whitelabel Error Page”를 가지고 있다.</p>\n<p>이때 만일 RESTful request에 대한 응답이라면 Spring boot는 자체적인 JSON 형태로 “Whitelabel Error Page”의 응답을 받은 error 정보를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"timestamp\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2018-04-11T05:56:03.845+0000\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"No message available\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/no-such-page\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Spring boot는 컨테이너에 대한 디폴트 error-page 또한 구축해놓았다. 만일 예외가 Spring MVC 밖에서 발생했더라도(ex. servlet Filter) 여전히 Spring Boot에 대비되어 있는 error page에 리포트 되어 반환된다.</li>\n</ul>\n<br>\n<h2 id=\"exception-handling-동작원리\" style=\"position:relative;\"><a href=\"#exception-handling-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"exception handling 동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception Handling 동작원리</h2>\n<br>\n<h3 id=\"handlerexceptionresolverinterface\" style=\"position:relative;\"><a href=\"#handlerexceptionresolverinterface\" aria-label=\"handlerexceptionresolverinterface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HandlerExceptionResolver(interface)</h3>\n<p><code class=\"language-text\">DispatcherServlet</code>의 application context에 선언되어 있는 Spring bean의 예외들은(Spring MVC system 내에서 발생한 경우들) <code class=\"language-text\">HandlerExceptionResolver</code>을 구현하여 intercept를 통해 핸들링 된다. 즉, Controller에서 에외를 핸들링하지 않는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HandlerExceptionResolver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">resolveException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">handler</code> 는 해당 예외가 발생한 controller를 말한다. </p>\n<p>MVC는 기본적은 3가지 resolvers를 생성한다. </p>\n<ol>\n<li>\n<p><code class=\"language-text\">ExceptionHandlerExceptionResolver</code> </p>\n<p>예외들을 적합한 <code class=\"language-text\">@ExceptionHander</code> 어노테이션이 붙은 메소드에 매칭한다. handler(controller)와 controller-advice 두가지 모두 고려한다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">ResponseStatusExceptionResolver</code></p>\n<p>처리되지 않은 예외들 중 <code class=\"language-text\">@ResponseStatus</code>가 붙은 것들을 확인한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">DefaultHandlerExceptionResolver</code> </p>\n<p>기본 Spring Exceptions를 Http Status Codes로 변경하는 작업을 한다.(MVC 내부적인 부분) </p>\n</li>\n</ol>\n<p>위 3가지 resolvers들은 체이닝 되어 위 순서대로 처리되는데 Spring이 내부적으로 해당 일을 처리하는 <code class=\"language-text\">HandlerExceptionResolverComposite</code> 빈을 생성하여 처리하도록 한다. </p>\n<br>\n<h3 id=\"simplemappingexceptionresolver\" style=\"position:relative;\"><a href=\"#simplemappingexceptionresolver\" aria-label=\"simplemappingexceptionresolver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SimpleMappingExceptionResolver</h3>\n<p>Spring은 자체적으로 위 <code class=\"language-text\">HandlerExceptionResolver</code> 구현체인 <code class=\"language-text\">SimpleMappingExceptionResolver</code>를 제공하고 대부분의 어플리케이션에서 사용되고 있다. 해당 리졸버에서는 다음과 같은 것들을 결정하여 처리할 수 있다. </p>\n<ul>\n<li>Exception 클래스를 뷰에 매핑</li>\n<li>아무 곳에서도 처리되지 않은 예외에 대한 기본(default) error page를 설정</li>\n<li>Model에 추가되는 <code class=\"language-text\">exception</code> 속성의 이름을 설정한다.(View에서 추후 사용할 수 있도록) 기본값은 “exception” 이다. <code class=\"language-text\">@ExceptionHandler</code>에서 반환되는 뷰는 exception 자체에 대한 접근 권한이 없지만 <code class=\"language-text\">SimpleMappingExceptionResolver</code>에 정의되어 있는 뷰는 접근 권한이 있으므로 여기서 설정하도록 되어있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebMvc</span>  <span class=\"token comment\">// Optionally setup Spring MVC defaults (if you aren't using</span>\n               <span class=\"token comment\">// Spring Boot &amp; haven't specified @EnableWebMvc elsewhere)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfiguration</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"simpleMappingExceptionResolver\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span>\n                  <span class=\"token function\">createSimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SimpleMappingExceptionResolver</span> r <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Properties</span> mappings <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mappings<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DatabaseException\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"databaseError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mappings<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvalidCreditCardException\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"creditCardError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionMappings</span><span class=\"token punctuation\">(</span>mappings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// None by default</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultErrorView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// No default</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Default is \"exception\"</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">setWarnLogCategory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example.MvcLogger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// No default</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 <code class=\"language-text\">defaultErrorView</code> 속성으로 처리되지 않은 예외들에 대한 적합한 error 페이지를 설정할 수 있으므로 유용하다. 현재 대부분의 어플리케이션에 기본값은 java stack-trace를 노출하는 것인데 유저들은 stack-trace에 관심이 없다. 따라서 Spring boot는 해당 부분을 “white-label” 에러 페이지로 처리한다. </p>\n<br>\n<h3 id=\"extending-simplemappingexceptionresolver\" style=\"position:relative;\"><a href=\"#extending-simplemappingexceptionresolver\" aria-label=\"extending simplemappingexceptionresolver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending SimpleMappingExceptionResolver</h3>\n<p>다음과 같은 이유로 <code class=\"language-text\">SimpleMappingExceptionResolver</code>를 확장하여 사용한다.</p>\n<ul>\n<li>\n<p>Constructor를 사용하여 속성들 직접 지정하는 경우</p>\n<p>예를 들어서 exception 관련 로깅 및 로거를 설정</p>\n</li>\n<li>\n<p>default log message를 오버라이딩하여 변경하는 경우 (<code class=\"language-text\">buildLogMessage</code>를 변경)</p>\n<p>현재 기본 메세지는 <em>Handler execution resulted in exception</em> 이다. </p>\n</li>\n<li>\n<p>에러 view에 추가 정보를 설정하고 싶은 경우</p>\n<p><code class=\"language-text\">doResolverException</code>을 오버라이딩 하여 설정 </p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMappingExceptionResolver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable logging by providing the name of the logger to use</span>\n    <span class=\"token function\">setWarnLogCategory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMappingExceptionResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">buildLogMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"MVC exception: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalizedMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n    \n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">doResolveException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Call super method to get the ModelAndView</span>\n    <span class=\"token class-name\">ModelAndView</span> mav <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">doResolveException</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token comment\">// Make the full URL available to the view - note ModelAndView uses</span>\n    <span class=\"token comment\">// addObject() but Model uses addAttribute(). They work the same. </span>\n    mav<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mav<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest\">https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#spring-boot\">Spring Boot</a></li>\n<li>\n<p><a href=\"#exception-handling-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">Exception Handling 동작원리</a></p>\n<ul>\n<li><a href=\"#handlerexceptionresolverinterface\">HandlerExceptionResolver(interface)</a></li>\n<li><a href=\"#simplemappingexceptionresolver\">SimpleMappingExceptionResolver</a></li>\n<li><a href=\"#extending-simplemappingexceptionresolver\">Extending SimpleMappingExceptionResolver</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Spring Boot Spring boot 자체에서 핸들링 되지 않은 error 에 대한 대비책을 마련해 두었다.  먼저, Spring boot 자체에서  에 대한 매핑을 찾아서 해당 URL에 대해서 동일한 이름을 가진  뷰를 매핑 한다. 해당 뷰는  을 반환한다. (해당 뷰는  Thymeleaf template인데, 만일 JSP를 사용한다면 를 반환하도록 에서 변경할 수 있다) 실질적인 매핑은 ViewResolver에서 담당한다. 만일 에 대해 그 어떠한 view-resolver도 매핑이 되어 있지 않다면 spring boot는 내부적으로 가지고 있는 대체 에러 페이지인 “Whitelabel Error Page”를 가지고 있다. 이때 만일 RESTful request에 대한 응답이라면 Spring boot는 자체적인 JSON 형태로 “Whitelabel Error Page”의 응답을 받은 error 정보를 반환한다. Spring boot는 컨테이너에 대한 디폴트 error-pag…","frontmatter":{"date":"June 19, 2021","title":"스프링부트의 Exception handling","categories":"스프링부트 스프링 웹","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-exception-handling/"}},"next":{"id":"2696e70c-e746-5fb0-96cc-3b651a5c3483","html":"<h2 id=\"requestbody\" style=\"position:relative;\"><a href=\"#requestbody\" aria-label=\"requestbody permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@RequestBody</h2>\n<p>request body를 method argument로 바꿀 때 <code class=\"language-text\">HttpMessageConverter</code>를 사용한다.</p>\n<ul>\n<li><code class=\"language-text\">HttpMessageConverter</code> 는 두가지를 담당한다. 첫번째는 Http request message를 객체로 변환하는 것, 두번째는 객체를 Http response body로 변환하는 작업이다.</li>\n</ul>\n<h3 id=\"동작원리\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작원리</h3>\n<p><code class=\"language-text\">DispatcherServlet</code>에 의해서 호출되는 handler의 method parameters은 스프링의 <code class=\"language-text\">HandlerMethodArgumentResolver</code>에 의해 생성이 되고, handler의 return value는 <code class=\"language-text\">HandlerMethodReturnValueHandler</code>에 의해서 처리된다. <code class=\"language-text\">@ResponseBody</code>와 <code class=\"language-text\">@RequestBody</code>를 다루는 구현체는 <code class=\"language-text\">RequestResponseBodyMethodProcess</code>이다. </p>\n<ul>\n<li>\n<p>DispatcherServlet의 handle에서부터 Argument resolve 하는 과정</p>\n<p><code class=\"language-text\">DispatcherServlet#handle()</code> → <code class=\"language-text\">AbstractHandlerMethodAdapter#handle()</code> → <code class=\"language-text\">RequestMappingHandlerAdapter#handleInternal()</code> → <code class=\"language-text\">RequestMappingHandlerAdapter#invokeHandlerMethod()</code> → <code class=\"language-text\">ServletInvocableHandlerMethod#invokeAndHandle()</code> → <code class=\"language-text\">InvocableHandlerMethod#invokeForRequest()</code> → <code class=\"language-text\">InvocableHandlerMethod #getMethodArgumentValues()</code> → <em>(Interface)</em><code class=\"language-text\">HandlerMethodArgumentResolver#resolveArgument()</code> → <em>(Imp)</em><code class=\"language-text\">RequestResponseBodyMethodProcessor#resolveArgument()</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">RequestResponseBodyMethodProcessor#resolveArgument()</code> 내부에서 HttpMessageConverter를 사용해서 변환시키는 과정</p>\n<p><code class=\"language-text\">RequestResponseBodyMethodProcessor#resolveArgument()</code> → (e<em>xtends  AbstractMessageConverterMethodArgumentResolver</em>)<code class=\"language-text\">RequestResponseBodyMethodProcessor#readWithMessageConverters()</code> → (<em>Imp HandlerMethodArgumentResolver</em>)<code class=\"language-text\">AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters()</code> 에서 변환 로직을 시행한다. </p>\n</li>\n</ul>\n<p>이때 HttpMessageConverter default 인스턴스들은 <code class=\"language-text\">WebMvcConfigurationSupport#addDefaultHttpMessageConverters()</code> 를 통해 등록된다. </p>\n<h3 id=\"httpmessageconverter-로직\" style=\"position:relative;\"><a href=\"#httpmessageconverter-%EB%A1%9C%EC%A7%81\" aria-label=\"httpmessageconverter 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HttpMessageConverter 로직</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@RequestBody</code> 일때</p>\n<p><code class=\"language-text\">HttpMessageConverter#canRead()</code> 로 converter가 해당 content의 인스턴스를 읽고 생성할 수 있는지 확인한다. 이후에 argument를 생성하여 반환한다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">@ResponseBody</code> 일때</p>\n<p><code class=\"language-text\">HttpMessageConverter#canWrite()</code> 를 통해서 <code class=\"language-text\">HttpMessageConverter</code>가 해당 반환값을 serialize 할 수 있는지 확인하고 response content를 생성하고, <code class=\"language-text\">Accept</code> 헤더가 있다면 해당 content-type에 매칭되는지도 확인한다. </p>\n</li>\n</ul>\n<p><code class=\"language-text\">MessagConverter</code>를 사용하는 <code class=\"language-text\">@RequestBody</code>는 값을 바인딩하는 것이 아니라, 해당 내용을 Java Object로 변환한다. 그렇기 때문에 Body가 존재하지 않은 <code class=\"language-text\">GET</code> 메서드에 <code class=\"language-text\">@RequestBody</code>를 적용하려고 하면 예외가 발생한다. </p>\n<h3 id=\"4가지-default-messageconverters\" style=\"position:relative;\"><a href=\"#4%EA%B0%80%EC%A7%80-default-messageconverters\" aria-label=\"4가지 default messageconverters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4가지 Default MessageConverters</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">ByteArrayHttpMessageConverter</code></p>\n<p><code class=\"language-text\">byte[]</code> 오브젝트 타입을 지원하여 들어오는 요청을 모두 바이트 배열로 받을 수 있다. 또한 리턴 타입이 <code class=\"language-text\">byte[]</code> 일 경우 <code class=\"language-text\">Content-type</code>이 <code class=\"language-text\">applcation/octet-stream</code>으로 설정된다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">StringHttpMessageConverter</code></p>\n<p><code class=\"language-text\">String</code> 오브젝트 타입을 지원하여 HTTP 본문을 그대로 <code class=\"language-text\">String</code>으로 가져오고, 그대로 리턴할 경우 <code class=\"language-text\">Content-type</code>은 <code class=\"language-text\">text/plain</code>으로 전달된다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">FormHttpMessageConverter</code></p>\n<p>MultiValueMap&#x3C;String, String>을 지원하는데, 지원하는 미디어 타입은 <code class=\"language-text\">application/x-www-form-urlencoded</code>이다. 하지만 form 데이터의 경우 <code class=\"language-text\">@ModelAttribute</code>가 더 유용하다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">SourceHttpMessageConverter</code></p>\n<p>XML 문서를 Source 타입 객체로 변환하고 싶을 때 사용하지만 요즘에는 잘 쓰이지 않는다. </p>\n</li>\n</ol>\n<h3 id=\"자주-쓰이는-messageconverters-3가지\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-messageconverters-3%EA%B0%80%EC%A7%80\" aria-label=\"자주 쓰이는 messageconverters 3가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자주 쓰이는 MessageConverters 3가지</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">Jaxb2RootElementHttpMessageConverter</code></p>\n<p>JAXB의 @XmlRootElement와 @XmlType이 붙은 클래스로 XML과 오브젝트 사이의 변환을 해준다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">MashallingHttpMessageConverter</code></p>\n<p>스프링 OXM 추상화 <code class=\"language-text\">Mashaller</code>와 <code class=\"language-text\">Unmarshaller</code>를 이용해서 <code class=\"language-text\">XML</code>과 오브젝트 사이의 변환을 해준다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">MappingJacksonHttpMessageConverter</code></p>\n<p><code class=\"language-text\">Jackson</code>의 <code class=\"language-text\">ObjectMapper</code>를 사용해서 <code class=\"language-text\">JSON</code>과 오브젝트 사이의 변환을 해주고 지원하는 미디어타입은 <code class=\"language-text\">application/json</code>이다.</p>\n</li>\n<li>참고링크: <a href=\"https://joont92.github.io/spring/MessageConverter/\">https://joont92.github.io/spring/MessageConverter/</a></li>\n</ol>\n<br>\n<h2 id=\"modelattribute\" style=\"position:relative;\"><a href=\"#modelattribute\" aria-label=\"modelattribute permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@ModelAttribute</h2>\n<p>흔히 <code class=\"language-text\">@ModelAttribute</code>를 들어온 요청에 대해서 method parameter를 매핑시키는 용도로만 알고 있는데, 이외에 return value를 지정된 model attribute로 바인딩하고 웹 뷰에 표현하는 작업도 담당한다. <br></p>\n<p>따라서 <code class=\"language-text\">@ModelAttribute</code>는 두 가지 level에서 사용되는데 <strong>1) method parameter</strong>와 <strong>2) method level</strong>이다. <br></p>\n<p>일반적으로 <code class=\"language-text\">@ModelAttribute</code>는 form data에 사용이 되는데, 이때 value 속성의 값을 함께 넘겨준다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/spring-mvc-basics/addEmployee<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">modelAttribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>employee<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>하지만 만일 <code class=\"language-text\">value</code> 속성이 함께 제공되지 않았다면 default로 Method level에 적용되는 <code class=\"language-text\">@ModelAttribute</code>에게는 반환 타입이, Method-argument에는 parameter 타입이  지정된다. </p>\n<h3 id=\"at-method-level\" style=\"position:relative;\"><a href=\"#at-method-level\" aria-label=\"at method level permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>At Method Level</h3>\n<p>Method level에서 <code class=\"language-text\">@ModelAttribute</code>이 추가되어 있다면 해당 메서드는 Model에 하나 또는 여러개의 속성(attribute)을 추가한다는 것을 의미한다. <code class=\"language-text\">@RequestMapping</code> 어노테이션이 붙어있는 메서드와 마찬가지로 같은 argument(Model mode)을 제공하는것은 동일하지만, 들어오는 request에 직접적으로 매핑되지는 않는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//하나의 model attribute를 추가할 때</span>\n<span class=\"token annotation punctuation\">@ModelAttribute</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAccount</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> accountManager<span class=\"token punctuation\">.</span><span class=\"token function\">findAccount</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//하나 이상의 model attributes를 추가할 때 </span>\n<span class=\"token annotation punctuation\">@ModelAttribute</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Welcome to the Netherlands\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반적으로 Spring MVC는 위 메서드를 request handler를 호출하기 이전에 우선적으로 호출한다.  <br></p>\n<p><strong>!!! <code class=\"language-text\">@ModelAttribute</code> 메서드들이 controller에서 <code class=\"language-text\">@RequestMapping</code>으로 지정된 메서드들 보다 먼저 실행된다는 것이다. (같은 controller에 있는 경우)</strong> <br></p>\n<p>만일 global하게 들어오는 모든 요청에 대해서 특정 model attribute을 추가하고 싶다면, 해당 controller를 <code class=\"language-text\">@ControllerAdvice</code>을 지정하는 것이 좋다. <br></p>\n<p>일반적으로 method level의 <code class=\"language-text\">@ModelAttribute</code>의 목적은 하나 또는 하나 이상의 model attributes를 추가하기 위해서이다. Controller는 여러개의 <code class=\"language-text\">@MethodAttribute</code> 메소드들을 가지고 있을 수 있는데, 그 어떤 요청이 들어오면 같은 controller 안에 있는 그 모든 메소드들이 실행된다. 전역적으로 실행하고 싶다면 <code class=\"language-text\">@ControllerAdvice</code> 어노테이션을 추가하면 된다. <br></p>\n<h3 id=\"at-method-argument\" style=\"position:relative;\"><a href=\"#at-method-argument\" aria-label=\"at method argument permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>At Method Argument</h3>\n<p>만일 method argument 레벨에서 <code class=\"language-text\">@ModelAttribute</code>가 사용된다면 model 에서 인자가 추출되어야 한다는 것을 의미한다. </p>\n<blockquote>\n<p>“An @ModelAttribute on a method argument indicates the argument should be retrieved from the model. If not present in the model, the argument should be instantiated first and then added to the model.”</p>\n</blockquote>\n<p>즉, Method Argument 레벨에서 <code class=\"language-text\">@ModelAttribute</code>를 사용하면, 우선 model에 해당 attribute가 있는지 확인하여 반환하고, 없다면 <strong>1) arguments를 초기화</strong> <strong>2)model에 추가</strong>한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"/owners/{ownerId}/pets/{petId}/edit\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">processSubmit</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span> <span class=\"token class-name\">Pet</span> pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 Method Argument에서 <code class=\"language-text\">@ModelAttribute</code>가 사용되었을 경우 인자인 Pet instance의 출처는 다음 4가지 중 하나일 수 있다. </p>\n<ol>\n<li><code class=\"language-text\">@SessionAttributes</code> 에 의해 이미 존재하는 model attribute</li>\n<li><code class=\"language-text\">@ModelAttribute</code> 메소드에 의해 이미 존재하는 model attribute</li>\n<li>URI template와 type converter에 의해 추출된 instance</li>\n<li>default constructor에 의해 초기화된 instance</li>\n</ol>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/remoting.html#rest-message-conversion\">https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/remoting.html#rest-message-conversion</a></li>\n<li><a href=\"https://mangkyu.tistory.com/72\">https://mangkyu.tistory.com/72</a></li>\n<li><a href=\"https://stackoverflow.com/questions/29517613/how-exactly-works-requestbody-annotation-and-how-it-is-related-to-the-httpmessa\">https://stackoverflow.com/questions/29517613/how-exactly-works-requestbody-annotation-and-how-it-is-related-to-the-httpmessa</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17362177/how-does-the-modelattribute-annotation-work-why-cant-i-got-the-value\">https://stackoverflow.com/questions/17362177/how-does-the-modelattribute-annotation-work-why-cant-i-got-the-value</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-methods\">https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-methods</a></li>\n</ul>\n<br>\n<br>\n<p><strong>[MORE]</strong></p>\n<ul>\n<li>\n<p>HttpMessageConverters 내부동작원리</p>\n<p><a href=\"https://www.baeldung.com/spring-httpmessageconverter-rest\">https://www.baeldung.com/spring-httpmessageconverter-rest</a></p>\n</li>\n<li>언제 무엇? 장단점</li>\n<li>URI template와 type converter에 의해 추출된 instance 동작원리</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#requestbody\">@RequestBody</a></p>\n<ul>\n<li><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">동작원리</a></li>\n<li><a href=\"#httpmessageconverter-%EB%A1%9C%EC%A7%81\">HttpMessageConverter 로직</a></li>\n<li><a href=\"#4%EA%B0%80%EC%A7%80-default-messageconverters\">4가지 Default MessageConverters</a></li>\n<li><a href=\"#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-messageconverters-3%EA%B0%80%EC%A7%80\">자주 쓰이는 MessageConverters 3가지</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#modelattribute\">@ModelAttribute</a></p>\n<ul>\n<li><a href=\"#at-method-level\">At Method Level</a></li>\n<li><a href=\"#at-method-argument\">At Method Argument</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 19, 2021","title":"@ModelAttribute vs. @RequestBody 더 깊이 파헤치기","categories":"스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/request-body-model-attribute-advanced/"}},"prev":{"id":"aa4dffec-9907-5cba-91ed-6988835a5453","html":"<ul>\n<li><code class=\"language-text\">@ControllerAdvice</code>를 통해서 어플리케이션 전역적으로 exception을 핸들링 할 수 있다. 다르게 표현하면 <code class=\"language-text\">@RequestMapping</code> 메서드에서 던져지는 exceptions들의 interceptor라고 할 수 있다. (shared across multiple @Controller classes)</li>\n<li>주로 <code class=\"language-text\">@ControllerAdvice</code>에서 전역적으로 처리하고 싶은 어노테이션은 <code class=\"language-text\">@ExceptionHandler</code>, <code class=\"language-text\">@InitBinder</code>, <code class=\"language-text\">@ModelAttribute</code> 등이 있다.</li>\n<li><code class=\"language-text\">ResponseEntityExceptionHandler</code> 클래스가 <code class=\"language-text\">@ControllerAdvice</code> 어노테이션에서 전역적인 exception handling 을 구현할 수 있도록 하는 base class이다. 해당 클래스에서 Spring MVC 내부에서 발생한 예외들을 처리할 수 있는 메서드들을 제공한다. (<code class=\"language-text\">DefaultHandlerExceptionResolver</code>는 <code class=\"language-text\">ModelAndView</code>를 반환하는 반면 <code class=\"language-text\">ResponseEntityExceptionHandler</code>는 <code class=\"language-text\">ResponseEntity</code>를 반환한다)</li>\n</ul>\n<h2 id=\"여러-controlleradvice-간의-우선순위\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"여러 controlleradvice 간의 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 @ControllerAdvice 간의 우선순위</h2>\n<p>@ControllerAdvice 클래스들은 Bean으로 등록이 되도록 하는데, 해당 빈들은 <code class=\"language-text\">Ordered</code> 인터페이스를 구현하여 orderable 한 속성을 부여하거나, <code class=\"language-text\">@Order</code>/ <code class=\"language-text\">@Priority</code>를 사용해서 우선순위를 부여할 수 있다. (여기서 <code class=\"language-text\">Ordered</code> semantic이 <code class=\"language-text\">@Order</code>/ <code class=\"language-text\">@Priority</code> 에 우선순위를 가진다) </p>\n<ul>\n<li>\n<p>예외를 처리하는 경우</p>\n<p>매칭이 되는 exception handler method가 있는 가장 처음 매칭되는 advice의 <code class=\"language-text\">@ExceptionHandler</code>가 실행된다. </p>\n</li>\n<li>\n<p>model attribute와 data binding 초기화 경우</p>\n<p><code class=\"language-text\">@ModelAttribute</code>와 <code class=\"language-text\">@InitBinder</code> 메소드가 <code class=\"language-text\">ControllerAdvice</code>의 우선순위 순서에 따라서 실행된다.  </p>\n</li>\n<li>\n<p><code class=\"language-text\">@ControlerAdvice</code>의 우선순위에 따른 ExceptionHandler 선언 팁</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/135494123-1441631a-7277-4b6f-b82e-30610bcf4b5e.png\"></p>\n</li>\n</ul>\n<p>기본적으로 <code class=\"language-text\">@ControllerAdvice</code>는 모든 controller에 전역적으로 적용이 되기 때문에, 더 구체적인 controller에 적용하기 위해서는 selectors를 사용해야한다. (<code class=\"language-text\">annotations()</code> , <code class=\"language-text\">basePackageClasses()</code> , <code class=\"language-text\">basePackages()</code>)만일 여러 selectors가 있으면 OR 로 적용이되면 이 selectors 체크는 runtime에 실행이 되므로, 만일 너무 많은 selectors를 사용하면 런타임 퍼포먼스 효율이 떨어지게 된다.  </p>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://zetcode.com/springboot/controlleradvice/\">https://zetcode.com/springboot/controlleradvice/</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html\">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%97%AC%EB%9F%AC-controlleradvice-%EA%B0%84%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">여러 @ControllerAdvice 간의 우선순위</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 19, 2021","title":"@ControllerAdvice 알아보기","categories":"스프링부트","author":"코다","emoji":"🖥"},"fields":{"slug":"/springboot-controller-advice/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/spring-exception-handling/","nextSlug":"/request-body-model-attribute-advanced/","prevSlug":"/springboot-controller-advice/"}},"staticQueryHashes":["1073350324","2938748437"]}