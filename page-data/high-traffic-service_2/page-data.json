{"componentChunkName":"component---src-templates-blog-template-js","path":"/high-traffic-service_2/","result":{"data":{"cur":{"id":"54e8cac2-addf-5b3e-a5e3-602ffc1f3a3d","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<h2 id=\"강의4\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%984\" aria-label=\"강의4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의4]</h2>\n<h2 id=\"어느정도가-대규모-데이터인가-\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%8A%90%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%B8%EA%B0%80-\" aria-label=\"어느정도가 대규모 데이터인가  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어느정도가 대규모 데이터인가 ?</h2>\n<blockquote>\n<p>이때 당시의 수치임을 감안하고 보자 !! </p>\n</blockquote>\n<ul>\n<li>\n<p>하테나의 경우</p>\n<ul>\n<li>레코드 건수 1500만, 5000만</li>\n<li>entry 테이블이 3기가, bookmark 데이블이 5.5기가 등등</li>\n<li>html 텍스트 데이터 압축 후 200 기가</li>\n<li>이정도가 중규모 ~ 대규모</li>\n<li>디비 규모가 기가바이트면 굉장히 많은 것이다.</li>\n<li>인덱스 사용 안했을 때 1건 검색시 200초 소요</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"강의5\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%985\" aria-label=\"강의5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의5]</h2>\n<h2 id=\"대규모-데이터는-어떤-점이-어려운가\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EC%96%B4%EB%A0%A4%EC%9A%B4%EA%B0%80\" aria-label=\"대규모 데이터는 어떤 점이 어려운가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대규모 데이터는 어떤 점이 어려운가</h2>\n<ul>\n<li>한마디로 말하면 <strong>‘메모리 내에서 계산할 수 없다’</strong></li>\n<li>데이터가 너무 많으면 메모리 내에서 계산할 수 없으므로 디스크를 검색하면 읽어야하는데 디스크를 읽는 것은 계산량도 지나치게 많아지고 시간도 많이 소요된다. (I/O 시간)</li>\n<li>메모리와 디스크 속도 차이는 10만 ~ 100만배 정도</li>\n</ul>\n<h2 id=\"디스크는-왜-늦나\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%8A%A4%ED%81%AC%EB%8A%94-%EC%99%9C-%EB%8A%A6%EB%82%98\" aria-label=\"디스크는 왜 늦나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디스크는 왜 늦나</h2>\n<ul>\n<li>디스크의 경우 헤드의 이동과 원반의 회전이라는 두 가지 물리적인 이동이 수반되며 속도가 저하된다.</li>\n<li>\n<p>하지만 OS레벨에서 이것을 어느정도 커버하기 위해서 연속된 데이터를 같은 위치에 쌓고, 데이터를 여러 바이트씩 한꺼번에 읽도록 한다.</p>\n<ul>\n<li>이렇게 하면 한번의 디스크 회전으로 읽을 수 있는 데이터가 많으며 회전횟수를 최소화 할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>전송속도, 버스의 속도차도 있다.</p>\n<ul>\n<li>SSD는 물리적이 회전이 아니므로 탐색이 더 빠르긴 하다. 하지만 여전히 버스 속도로 인해 메모리 만큼 빠르지는 않다.</li>\n<li><strong>디스크와 메모리의 속도차를 생각하며 설계하는 것이 중요하다.</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"linux-단일-호스트의-부하\" style=\"position:relative;\"><a href=\"#linux-%EB%8B%A8%EC%9D%BC-%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B6%80%ED%95%98\" aria-label=\"linux 단일 호스트의 부하 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 단일 호스트의 부하</h2>\n<ul>\n<li><strong>단일 서버의 성능을 충분히 끌어내는 것을 시작으로 복수 서버에서 부하분산이 의미를 갖는다</strong></li>\n<li><strong>추측하지 말고 계측</strong>!! 서버의 리소스를 정확히 파악하고 부하를 계측하는 것이 필요하다.</li>\n<li>\n<p>병목 규명작업 기본적인 흐름</p>\n<ul>\n<li>\n<p>Load Average 확인</p>\n<ul>\n<li>top, uptime 등의 명령어로 확인</li>\n<li>시스템 전체의 부하 상황을 나타내는 지표</li>\n<li>여기를 시초로 병목지점을 찾아나가야한다.</li>\n<li>Load Average가 낮은데 전송량이 오르지 않다면 소프트웨어 설정, 오류, 네트워크, 호스트 문제 쪽일 가능성이 높음</li>\n</ul>\n</li>\n<li>\n<p>CPU, I/O 중 병목 원인 조사</p>\n<ul>\n<li>Load Average가 높다면 둘 중 어디에 원인이 있는지 규명</li>\n<li>sar, vmstat으로 시간 경과에 CPU 사용률, I/O 대기율 추이 확인</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>CPU부하가 높을 경우 핸들링 루틴</p>\n<ul>\n<li>어플리케이션의 처리가 병목인지, 시스템 프로그램이 원인인지 top, sar로 확인</li>\n<li>ps로 프로세스 상태, CPU 사용시간 보며 원인 프로세스 찾기</li>\n<li>프로세스 찾은 후 strace로 해당 프로세스 추척, oprofile로 프로파일링</li>\n</ul>\n</li>\n<li>\n<p>주로 CPU 부하가 높은 경우</p>\n<ul>\n<li>\n<p>디스크나 메모리 용량에서 병목이 되지 않는 이상적인 상태</p>\n<ul>\n<li>서버 증설, 프로그램 로직, 알고리즘 개선 필요</li>\n</ul>\n</li>\n<li>\n<p>프로그램이 폭주해서 CPU에 필요이상의 부하가 걸리는 경우</p>\n<ul>\n<li>오류를 제거하여 프로그램 폭주를 방지</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>I/O 부하가 높은 경우</p>\n<ul>\n<li>프로그램 입출력이 많아서 부하가 높거나</li>\n<li>스왑이 발생해서 디스크 액세스가 발생</li>\n<li>sar , vmstat으로 스왑 발생상황 확인</li>\n<li>\n<p>스왑이 발생하고 있다면 다음과 같이 조사</p>\n<ul>\n<li>특정 프로세스가 극단적으로 메모리를 소비하고 있는지 ps로 확인</li>\n<li>프로그램의 오류로 메모리 소비시 프로그램 개선</li>\n<li>메모리 부족한 경우 메모리 증설, 또는 분산</li>\n</ul>\n</li>\n<li>\n<p>스왑이 아닌데 디스크로 입출력이 빈번하다면 캐시에 필요한 메모리 부족한 경우</p>\n<ul>\n<li>메모리 증설로 캐시 영역 확대</li>\n<li>또는 데이터 분산이나 캐시서버 도임</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>OS 튜닝이랑 부하의 원인을 알고 제거하는 것이다 !!!</p>\n<ul>\n<li>튜닝은 성능을 몇배씩 키워주는 것보다 ‘병목이 생기면 알아내고 제거하는 것’이다.</li>\n<li>본래 하드웨어가 가지고 있는 성능 이상을 내기는 어렵다. (그냥 하드웨어를 더 좋은걸 써야함)</li>\n</ul>\n</li>\n<li>\n<p>I/O 성능 개선을 위해서는 다음을 고려해야한다.</p>\n<ul>\n<li>메모리 증설해서 캐시영역 확보할 수 있는지</li>\n<li>데이터량이 너무 많지 않은지</li>\n<li>어플리케이션의 I/O 알고리즘을 변경해야하는지</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"강의6-규모조정의-요소\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%986-%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C\" aria-label=\"강의6 규모조정의 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의6] 규모조정의 요소</h2>\n<h2 id=\"규모조정-확장성\" style=\"position:relative;\"><a href=\"#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95-%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"규모조정 확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>규모조정, 확장성</h2>\n<ul>\n<li>앞에서 이야기한 대규모 데이터가 시스템 전체의 확장성 전략에 어떠한 영향을 주나</li>\n<li>\n<p>웹 서비스에서는 스케일업 보다 스케일아웃 전략이 주류이다. </p>\n<ul>\n<li>웹 서비스에 적합하고 비용이 저렴, 시스템 구성에 유연함</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"규모조정의-요소---cpu-부하와-io-부하\" style=\"position:relative;\"><a href=\"#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C---cpu-%EB%B6%80%ED%95%98%EC%99%80-io-%EB%B6%80%ED%95%98\" aria-label=\"규모조정의 요소   cpu 부하와 io 부하 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>규모조정의 요소 - CPU 부하와 I/O 부하</h2>\n<ul>\n<li>스케일아웃으로 CPU 부하분산의 확장성 확보는 쉬움</li>\n<li>DB 서버에서는 I/O 부하가 걸린다.</li>\n</ul>\n<h2 id=\"웹-어플리케이션과-부하의-관계\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EB%B6%80%ED%95%98%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"웹 어플리케이션과 부하의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 어플리케이션과 부하의 관계</h2>\n<ul>\n<li>\n<p>WAS는 CPU부하만 걸린다.</p>\n<ul>\n<li>서버를 늘리면 확장이 가능</li>\n<li>로드밸런서 장치 활용</li>\n</ul>\n</li>\n<li>\n<p>DB에서 I/O 부하 문제 발생</p>\n<ul>\n<li>여러 DB 서버를 두었을 때 동기화가 이슈가 됨</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"db-확장성-확보-어려움\" style=\"position:relative;\"><a href=\"#db-%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EC%96%B4%EB%A0%A4%EC%9B%80\" aria-label=\"db 확장성 확보 어려움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 확장성 확보 어려움</h2>\n<ul>\n<li>디스크 속도 저하의 문제가 여기에 영향을 미침</li>\n<li>DB에서 디스크 많이 사용 → 데이터가 커지면 메모리에서 처리하지 못하고 디스크에서 처리할 수밖에 없음</li>\n<li>서버를 늘려서 해결할 수 없는 문제다.</li>\n</ul>\n<h2 id=\"-두-종류의-부하와-웹-어플리케이션\" style=\"position:relative;\"><a href=\"#-%EB%91%90-%EC%A2%85%EB%A5%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-label=\" 두 종류의 부하와 웹 어플리케이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>+ 두 종류의 부하와 웹 어플리케이션</h2>\n<ul>\n<li>CPU 부하</li>\n<li>I/O 부하</li>\n</ul>\n<p>WAS는 CPU 바운드한 서버, DB는 I/O 바운드한 서버이다. </p>\n<h3 id=\"멀티태스킹-os와-부하\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0%ED%83%9C%EC%8A%A4%ED%82%B9-os%EC%99%80-%EB%B6%80%ED%95%98\" aria-label=\"멀티태스킹 os와 부하 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티태스킹 OS와 부하</h3>\n<ul>\n<li>멀티태스킹으로 태스크를 처리하면서 태스크가 대기하게 된다.</li>\n<li>\n<p>top 명령어의 load average에 단위 시간당 대기된 태스크의 수, 즉, 평균 어느정도 태스크가 대기상태로 있었는지 보여준다.</p>\n<ul>\n<li>높은 숫자는 태스크 실행에 대기가 발생한다는 표시 → 부하가 높은 상황</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"위-부하의-정체\" style=\"position:relative;\"><a href=\"#%EC%9C%84-%EB%B6%80%ED%95%98%EC%9D%98-%EC%A0%95%EC%B2%B4\" aria-label=\"위 부하의 정체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위 부하의 정체</h3>\n<ul>\n<li>하드웨어는 CPU 인터럽트로 주기적 신호를 보내서 실행 중인 프로세스가 CPU를 얼마나 사용했는지 계산한다. 이 타이머 인터럽트마다 Load Average 값이 계산된다.</li>\n<li>\n<p>타이머 인터럽트 때 실행 가능 상태인 태스크(가용 가능한 CPU가 없어서 대기중인 프로세스)와 I/O 대기인 태스크의 개수를 세어서 단위시간으로 나눈 값으로 load avarage를 측정한다.</p>\n<ul>\n<li>처리를 실행하려고 해도 실행할 수 없어서 대기하는 프로세스의 수</li>\n</ul>\n</li>\n<li>이 값으로 부하 정도를 알 수 있고 CPU 부하인지 I/O 부하인지 판단하기는 어려워서 더 자세히 규명해야 한다.</li>\n</ul>\n<br>\n<h2 id=\"강의7\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%987\" aria-label=\"강의7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의7]</h2>\n<p>대규모 데이터를 다루는 두가지 관점 </p>\n<ol>\n<li>프로그램을 작성할 때의 요령 </li>\n<li>프로그램 개발의 근간이 되는 기초라는 점에서 전제로 알아두면 좋은 것 </li>\n</ol>\n<h2 id=\"대규모-데이터-3가지-중요점---프로그램-작성시-중요\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-3%EA%B0%80%EC%A7%80-%EC%A4%91%EC%9A%94%EC%A0%90---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1%EC%8B%9C-%EC%A4%91%EC%9A%94\" aria-label=\"대규모 데이터 3가지 중요점   프로그램 작성시 중요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대규모 데이터 3가지 중요점 - 프로그램 작성시 중요</h2>\n<ul>\n<li>어떻게 메모리에서 처리를 마칠 수 있을까</li>\n<li>데이터량 증가에 강한 알고리즘 (효율적인 탐색 알고리즘)</li>\n<li>\n<p>데이터 압축이나 검색기술과 같은 테크닉 활용</p>\n<ul>\n<li>압축하면 메모리에 캐싱하기 쉬움</li>\n<li>확장성 면에서 DB에 맡겨서 해결될 수 없을 때 검색엔진을 만들어서 속도를 확보할 수 있음</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"대규모-데이터-다루기-3대-전제지식---프로그램-개발-기초\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8B%A4%EB%A3%A8%EA%B8%B0-3%EB%8C%80-%EC%A0%84%EC%A0%9C%EC%A7%80%EC%8B%9D---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88\" aria-label=\"대규모 데이터 다루기 3대 전제지식   프로그램 개발 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대규모 데이터 다루기 3대 전제지식 - 프로그램 개발 기초</h2>\n<ul>\n<li>OS 캐시</li>\n<li>분산 고려 RDBMS</li>\n<li>대규모 환경에서 알고리즘과 데이터구조 사용</li>\n</ul>\n<h2 id=\"-load-average-다음에-cpu-사용률과-io-대기율\" style=\"position:relative;\"><a href=\"#-load-average-%EB%8B%A4%EC%9D%8C%EC%97%90-cpu-%EC%82%AC%EC%9A%A9%EB%A5%A0%EA%B3%BC-io-%EB%8C%80%EA%B8%B0%EC%9C%A8\" aria-label=\" load average 다음에 cpu 사용률과 io 대기율 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>+ Load Average 다음에 CPU 사용률과 I/O 대기율</h2>\n<ul>\n<li>\n<p>sar(System Activity Reporter) 명령어로 CPU 대기율, I/O 대기율 확인</p>\n<ul>\n<li>Load average가 높고 <code class=\"language-text\">sar</code>의 <code class=\"language-text\">%user</code>, <code class=\"language-text\">%system</code> CPU 사용률 수치가 높으면 부하 원인이 CPU 리소스 부족</li>\n<li>Load average가 높고 <code class=\"language-text\">sar</code>의 <code class=\"language-text\">%iowait</code> CPU 사용률 수치가 높으면 부하 원인이 I/O</li>\n</ul>\n</li>\n<li>여기까지 알았다면 더 자세히 보기 위해 메모리 사용률, 스왑 발생 상황을 들여다본다.</li>\n<li>\n<p>멀티 CPU 인 경우 더 자세히 볼 필요가 있다.</p>\n<ul>\n<li>sar -p 옵션으로 여러 CPU 사용시 각 CPU의 지표를 볼 수 있다.</li>\n<li>I/O의 경우 전체 CPU의 <code class=\"language-text\">%iowait</code>의 지표는 높지 않을 수 있으나 각 CPU의 지표를 보았을 때 특정 CPU의 지표가 높을 수 있다.</li>\n<li>이는 멀티 CPU 이더라도 디스크는 하나밖에 없는 경우 I/O 부하가 분산되지 않기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B0%95%EC%9D%984\">강의4</a></li>\n<li><a href=\"#%EC%96%B4%EB%8A%90%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%B8%EA%B0%80-\">어느정도가 대규모 데이터인가 ?</a></li>\n<li><a href=\"#%EA%B0%95%EC%9D%985\">강의5</a></li>\n<li><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EC%96%B4%EB%A0%A4%EC%9A%B4%EA%B0%80\">대규모 데이터는 어떤 점이 어려운가</a></li>\n<li><a href=\"#%EB%94%94%EC%8A%A4%ED%81%AC%EB%8A%94-%EC%99%9C-%EB%8A%A6%EB%82%98\">디스크는 왜 늦나</a></li>\n<li><a href=\"#linux-%EB%8B%A8%EC%9D%BC-%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B6%80%ED%95%98\">Linux 단일 호스트의 부하</a></li>\n<li><a href=\"#%EA%B0%95%EC%9D%986-%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C\">강의6 규모조정의 요소</a></li>\n<li><a href=\"#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95-%ED%99%95%EC%9E%A5%EC%84%B1\">규모조정, 확장성</a></li>\n<li><a href=\"#%EA%B7%9C%EB%AA%A8%EC%A1%B0%EC%A0%95%EC%9D%98-%EC%9A%94%EC%86%8C---cpu-%EB%B6%80%ED%95%98%EC%99%80-io-%EB%B6%80%ED%95%98\">규모조정의 요소 - CPU 부하와 I/O 부하</a></li>\n<li><a href=\"#%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EB%B6%80%ED%95%98%EC%9D%98-%EA%B4%80%EA%B3%84\">웹 어플리케이션과 부하의 관계</a></li>\n<li><a href=\"#db-%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EC%96%B4%EB%A0%A4%EC%9B%80\">DB 확장성 확보 어려움</a></li>\n<li>\n<p><a href=\"#-%EB%91%90-%EC%A2%85%EB%A5%98%EC%9D%98-%EB%B6%80%ED%95%98%EC%99%80-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\">+ 두 종류의 부하와 웹 어플리케이션</a></p>\n<ul>\n<li><a href=\"#%EB%A9%80%ED%8B%B0%ED%83%9C%EC%8A%A4%ED%82%B9-os%EC%99%80-%EB%B6%80%ED%95%98\">멀티태스킹 OS와 부하</a></li>\n<li><a href=\"#%EC%9C%84-%EB%B6%80%ED%95%98%EC%9D%98-%EC%A0%95%EC%B2%B4\">위 부하의 정체</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B0%95%EC%9D%987\">강의7</a></li>\n<li><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-3%EA%B0%80%EC%A7%80-%EC%A4%91%EC%9A%94%EC%A0%90---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1%EC%8B%9C-%EC%A4%91%EC%9A%94\">대규모 데이터 3가지 중요점 - 프로그램 작성시 중요</a></li>\n<li><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8B%A4%EB%A3%A8%EA%B8%B0-3%EB%8C%80-%EC%A0%84%EC%A0%9C%EC%A7%80%EC%8B%9D---%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88\">대규모 데이터 다루기 3대 전제지식 - 프로그램 개발 기초</a></li>\n<li><a href=\"#-load-average-%EB%8B%A4%EC%9D%8C%EC%97%90-cpu-%EC%82%AC%EC%9A%A9%EB%A5%A0%EA%B3%BC-io-%EB%8C%80%EA%B8%B0%EC%9C%A8\">+ Load Average 다음에 CPU 사용률과 I/O 대기율</a></li>\n</ul>\n</div>","excerpt":"다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌 강의4 어느정도가 대규모 데이터인가 ? 이때 당시의 수치임을 감안하고 보자 !!  하테나의 경우 레코드 건수 1500만, 5000만 entry 테이블이 3기가, bookmark 데이블이 5.5기가 등등 html 텍스트 데이터 압축 후 200 기가 이정도가 중규모 ~ 대규모 디비 규모가 기가바이트면 굉장히 많은 것이다. 인덱스 사용 안했을 때 1건 검색시 200초 소요 강의5 대규모 데이터는 어떤 점이 어려운가 한마디로 말하면 ‘메모리 내에서 계산할 수 없다’ 데이터가 너무 많으면 메모리 내에서 계산할 수 없으므로 디스크를 검색하면 읽어야하는데 디스크를 읽는 것은 계산량도 지나치게 많아지고 시간도 많이 소요된다. (I/O 시간) 메모리와 디스크 속도 차이는 10만 ~ 100만배 정도 디스크는 왜 늦나 디스크의 경우 헤드의 이동과 원반의 회전이라는 두 가지 물리적인 이동이 수반되며 속도가 저하된다. 하…","frontmatter":{"date":"September 23, 2021","title":"대규모 서비스를 지탱하는 기술 - 대규모 데이터 처리","categories":"웹 인프라 책","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_2/"}},"next":{"id":"72eb0efc-2aca-58a7-8046-5b6afbb9b2fb","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<h3 id=\"어느-정도가-대규모-인가-\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%8A%90-%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%9D%B8%EA%B0%80-\" aria-label=\"어느 정도가 대규모 인가  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어느 정도가 대규모 인가 ?</h3>\n<p>이것은 이 책이 쓰여졌을 당시의 상황이다. 전혀 감이 없으니 이때 당시의 대규모 정도를 숫자로 파악해보자. </p>\n<ul>\n<li>등록 사용자 100만 명 이상, 1500만 UU</li>\n<li>서버 500대 이상</li>\n<li>피크시 회선 트래픽 430Mbps</li>\n</ul>\n<h2 id=\"강의1\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%981\" aria-label=\"강의1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의1]</h2>\n<h2 id=\"소규모-서비스와-대규모-서비스의-차이\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"소규모 서비스와 대규모 서비스의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소규모 서비스와 대규모 서비스의 차이</h2>\n<h3 id=\"확장성-확보-부하분산-필요\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0-%ED%95%84%EC%9A%94\" aria-label=\"확장성 확보 부하분산 필요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장성 확보, 부하분산 필요</h3>\n<p>1대의 서버로 처리 할 수 없는 부하를 어떻게 처리할 것인가 ? </p>\n<ul>\n<li>스케일 아웃 → 서버 대수를 늘림으로 스스템 처리능력을 높임</li>\n<li>스케일 업  → 하드웨어 성능을 높여 처리 능력을 끌어올림</li>\n</ul>\n<p>여러대의 서버를 사용했을 때 파생되는 문제 </p>\n<ul>\n<li>데이터 동기화, 네트워크 통신 지연시간,</li>\n</ul>\n<h3 id=\"다중성-확보\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4\" aria-label=\"다중성 확보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중성 확보</h3>\n<ul>\n<li>특정 서버가 고장이 나도 서비스를 계속 할 수 있어야 함</li>\n<li>스케일아웃은 서버의 고장율이 올라가고 하나가 고장났다고 전체가 정지해버릴 순 없다.</li>\n<li>시스템이 고장나면 다른 시스템이 자동으로 처리를 인계받는 시스템 설계가 필요</li>\n</ul>\n<h3 id=\"효율적-운용-필요\" style=\"position:relative;\"><a href=\"#%ED%9A%A8%EC%9C%A8%EC%A0%81-%EC%9A%B4%EC%9A%A9-%ED%95%84%EC%9A%94\" aria-label=\"효율적 운용 필요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>효율적 운용 필요</h3>\n<ul>\n<li>서버의 상태를 확인하고, 부하, 헬스, 디스크 용량, 보안 등을 체크할 수 있어야한다.</li>\n<li>여러대의 서버일 경우 효율적으로 운용하기 어려움.</li>\n</ul>\n<h3 id=\"개발자-수-개발방법의-변화\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%88%98-%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EC%9D%98-%EB%B3%80%ED%99%94\" aria-label=\"개발자 수 개발방법의 변화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발자 수, 개발방법의 변화</h3>\n<ul>\n<li>여러 사람이 개발을 하게 되면서 개발 표준화는 어떻게 해야하나, 컨벤션, 언어 통일, 라이브러리, 프레임워크 통일 등등의 표준화가 필요</li>\n</ul>\n<h2 id=\"대규모-데이터량에-대한-대처\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9F%89%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8C%80%EC%B2%98\" aria-label=\"대규모 데이터량에 대한 대처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대규모 데이터량에 대한 대처</h2>\n<ul>\n<li>\n<p>데이터 처리 과정</p>\n<ul>\n<li>디스크 → 메모리 → 캐시 메모리 → CPU</li>\n</ul>\n</li>\n<li>디스크와 CPU에서의 속도차이는 엄청나다</li>\n<li>미들웨어, 케싱등을 사용해서 데이터 처리 속도를 향상시키곤 한다.</li>\n<li>\n<p>하지만 대규모 서비스에서는 한계가 있다.</p>\n<ul>\n<li>데이터가 많아지면 캐시 미스가 많이 발생</li>\n<li>그러므로 디스크 I/O 가 많아져서 속도가 저하됨</li>\n</ul>\n</li>\n<li>소규모 서비스에서는 큰 문제가 아니지만 데이터량이 기하급수적으로 많으면 문제가 복잡해짐</li>\n</ul>\n<h2 id=\"강의2\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%982\" aria-label=\"강의2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의2]</h2>\n<h2 id=\"웹-서비스의-어려움\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80\" aria-label=\"웹 서비스의 어려움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 서비스의 어려움</h2>\n<ul>\n<li>게속 점진적으로 성장해가기 때문에 운영 환경에 변화를 야기한다.</li>\n</ul>\n<h2 id=\"하테나의-예시\" style=\"position:relative;\"><a href=\"#%ED%95%98%ED%85%8C%EB%82%98%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"하테나의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하테나의 예시</h2>\n<ul>\n<li>트래픽이 많아지고 서버를 데이터 센터로 이전</li>\n<li>\n<p>이전하며 부하 상황정리</p>\n<ul>\n<li>병목지점 측정</li>\n<li>I/O 부하가 높은 서버는 메모리 중시</li>\n<li>CPU 부하가 높은 서버는 CPU를 중시 등으로 최적 구성으로 하드웨어 배치</li>\n<li>로드밸런서로 다중화</li>\n</ul>\n</li>\n<li>성급한 최적화가 좋은 건 아니다. 낮은 확률에 지나친 비용을 쏟아야 한다. 하지만 너무 불완전해서는 안된다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%96%B4%EB%8A%90-%EC%A0%95%EB%8F%84%EA%B0%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%9D%B8%EA%B0%80-\">어느 정도가 대규모 인가 ?</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B0%95%EC%9D%981\">강의1</a></li>\n<li>\n<p><a href=\"#%EC%86%8C%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%99%80-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4\">소규모 서비스와 대규모 서비스의 차이</a></p>\n<ul>\n<li><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1-%ED%99%95%EB%B3%B4-%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0-%ED%95%84%EC%9A%94\">확장성 확보, 부하분산 필요</a></li>\n<li><a href=\"#%EB%8B%A4%EC%A4%91%EC%84%B1-%ED%99%95%EB%B3%B4\">다중성 확보</a></li>\n<li><a href=\"#%ED%9A%A8%EC%9C%A8%EC%A0%81-%EC%9A%B4%EC%9A%A9-%ED%95%84%EC%9A%94\">효율적 운용 필요</a></li>\n<li><a href=\"#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%88%98-%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EC%9D%98-%EB%B3%80%ED%99%94\">개발자 수, 개발방법의 변화</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9F%89%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8C%80%EC%B2%98\">대규모 데이터량에 대한 대처</a></li>\n<li><a href=\"#%EA%B0%95%EC%9D%982\">강의2</a></li>\n<li><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80\">웹 서비스의 어려움</a></li>\n<li><a href=\"#%ED%95%98%ED%85%8C%EB%82%98%EC%9D%98-%EC%98%88%EC%8B%9C\">하테나의 예시</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 23, 2021","title":"대규모 서비스를 지탱하는 기술 - 오리엔테이션","categories":"웹 인프라 책","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_1/"}},"prev":{"id":"b9fd9f8d-cdec-50ab-ad11-588460d309b6","html":"<blockquote>\n<p>다음은 웹 개발자를 위한 대규모 서비스를 지탱하는 기술을 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<p>이번장은 레이어를 DB로 옮겨서 DB의 스케일아웃 전략에 대해서 살펴본다. </p>\n<h2 id=\"강의11-인덱스-올바르게-운용하기\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9811-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%9A%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"강의11 인덱스 올바르게 운용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의11] 인덱스 올바르게 운용하기</h2>\n<h2 id=\"분산을-고려한-mysql-운용-세-가지-포인트\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%82%B0%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-mysql-%EC%9A%B4%EC%9A%A9-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-label=\"분산을 고려한 mysql 운용 세 가지 포인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분산을 고려한 MySQL 운용, 세 가지 포인트</h2>\n<ol>\n<li>OS 캐시 활용</li>\n<li>인덱스를 적절하게 설정</li>\n<li>확장을 전제로 한 설계 </li>\n</ol>\n<h2 id=\"os-캐시-활용\" style=\"position:relative;\"><a href=\"#os-%EC%BA%90%EC%8B%9C-%ED%99%9C%EC%9A%A9\" aria-label=\"os 캐시 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OS 캐시 활용</h2>\n<p>전체 데이터 크기가 물리 메모리보다 가능한 적도록 유지한다. </p>\n<ul>\n<li>상황: 대규모 서비스일 경우 (3억건의 데이터), 테이블에 칼럼을 한 개 (약 8바이트)를 추가하더라도 3GB 가 추가된다. → 스키마도 신경써서 설계해야한다.</li>\n<li>따라서 테이블의 레코드를 컴팩트하게 설계해야한다. (int형 32비트, 문자열 8비트 같은 수치에 대한 감각 필요)</li>\n</ul>\n<h3 id=\"db-테이블의-데이터를-정규화하는-것은-\" style=\"position:relative;\"><a href=\"#db-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%95%EA%B7%9C%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-\" aria-label=\"db 테이블의 데이터를 정규화하는 것은  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 테이블의 데이터를 정규화하는 것은 ?</h3>\n<ul>\n<li>예를 들어서 필수적으로 필요한 데이터만 테이블에 남기고, flag로 사용되는 데이터들을 테이블 분리하여 필요할 때만 사용할 수도 있다. 대규모 데이터인 경우 이것만 분리를 하더라도 엄청난 용량이 줄어든다.</li>\n<li>하지만 쿼리가 복잡해져서 속도가 떨어질 수 있으므로 <strong>속도와 데이터 크기 간 트레이드 오프</strong>가 있다는 것도 생각해야한다. !!!</li>\n</ul>\n<h2 id=\"인덱스의-중요성---b트리\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1---b%ED%8A%B8%EB%A6%AC\" aria-label=\"인덱스의 중요성   b트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스의 중요성 - B+트리</h2>\n<p>DB의 인덱스는 탐색이 매우 빠른 B+트리 구조를 사용한다.</p>\n<p>이분탐색과 비교해서 더 디스크에 최적화 되어 있다 → 더 알아보아야겠지만 하나의 노드에 있는 내용들은 디스크 액세스를 하지 않아도 된다. </p>\n<h2 id=\"인덱스의-효과\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%ED%9A%A8%EA%B3%BC\" aria-label=\"인덱스의 효과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스의 효과</h2>\n<p>4000만건의 테이블이 있을때를 고려해보면, </p>\n<ul>\n<li>만일 인덱스가 없다면 선형탐색을 함 → O(n) 최대 4000만번 탐색</li>\n<li>인덱스 있다면 → O(logn) 최대 25.5번</li>\n</ul>\n<p>하지만 데이터가 작은 경우 트리를 순회하는 오버헤트가 더 클수도 있으므로 잘 판단하여 인덱스를 사용한다. </p>\n<h2 id=\"-mysql-특성에-따른-인덱스의-작용\" style=\"position:relative;\"><a href=\"#-mysql-%ED%8A%B9%EC%84%B1%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%9E%91%EC%9A%A9\" aria-label=\" mysql 특성에 따른 인덱스의 작용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>+ MySQL 특성에 따른 인덱스의 작용</h2>\n<p>특정 칼럼에 인덱스를 걸어놓더라도 사용하는 쿼리에 따라서 사용하지 않을수도 있다.</p>\n<ul>\n<li>기본적으로 where, order by, group by 조건문이 지정되는 칼럼에 인덱스를 사용한다.</li>\n<li>인덱스를 명시적으로 추가한 것 이외에 pk, unique 제약조건에 인덱스를 가지고 있다. (show index로 인덱스 내용 확인 가능)</li>\n<li>조건문에 여러 인덱스 칼럼이 사용되도, 하나의 인덱스만 사용된다. (따라서 여러 칼럼이 한꺼번에 조건으로 될 경우 복합 인덱스를 설정해야한다)</li>\n<li><strong>인덱스 설정에 대해서는 더 알아보자 !!</strong></li>\n<li><code class=\"language-text\">explain</code> 명령어로 인덱스 작용을 확인할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"인덱스의-간과\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EA%B0%84%EA%B3%BC\" aria-label=\"인덱스의 간과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스의 간과</h2>\n<ul>\n<li>\n<p>나도 모르게 인덱스가 작용하지 않은 쿼리를 사용하고 있을수도 있다.</p>\n<ul>\n<li>자동으로 쿼리를 생성해주는 툴을 사용하면서 이것을 간과하게 된다.</li>\n<li>감시방안을 늘려서 대응해야한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"강의12-mysql의-분산\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9812-mysql%EC%9D%98-%EB%B6%84%EC%82%B0\" aria-label=\"강의12 mysql의 분산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의12] MySQL의 분산</h2>\n<h2 id=\"mysql-replication-기능\" style=\"position:relative;\"><a href=\"#mysql-replication-%EA%B8%B0%EB%8A%A5\" aria-label=\"mysql replication 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL replication 기능</h2>\n<ul>\n<li>Master, slave 구조이며 slave가 master의 replica가 되는 것이다.</li>\n<li>갱신은 마스터에서만 이루어지며 slave는 조회 쿼리만 담당한다.</li>\n</ul>\n<h2 id=\"masterslave의-특징\" style=\"position:relative;\"><a href=\"#masterslave%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"masterslave의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Master/Slave의 특징</h2>\n<ul>\n<li>select는 분산할 수 있지만 갱신은 분산할 수 없으므로 마스터의 다중화의 문제가 발생한다.</li>\n<li>하지만 대부분 쓰기보다 읽기가 훨씬 많으므로 읽기용 slave가 많은 것이 분산에 큰 효과를 낸다.</li>\n</ul>\n<h3 id=\"갱신-및-쓰기-확장\" style=\"position:relative;\"><a href=\"#%EA%B0%B1%EC%8B%A0-%EB%B0%8F-%EC%93%B0%EA%B8%B0-%ED%99%95%EC%9E%A5\" aria-label=\"갱신 및 쓰기 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>갱신 및 쓰기 확장</h3>\n<p>이런 경우에는 테이블을 분할해서 그 크기를 매우 작게 한다. 이것으로 쓰기 작업이 분산된다. </p>\n<ul>\n<li>테이블 파일이 분산 될 경우 동일 호스트 내에서 여러 디스크를 가지고 분산할 수 있고, 다른 서버로 분산할 수도 있다.</li>\n<li>쓰기 작업이 너무 많다면 RDBMS를 사용하지 않고 KVS 방식을 사용하는 것도 고려할 수 있다. (오버헤드가 적고 빠르며 확장이 쉽다)</li>\n</ul>\n<br>\n<h2 id=\"강의13-mysql의-스케일아웃과-파티셔닝\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%9813-mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83%EA%B3%BC-%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D\" aria-label=\"강의13 mysql의 스케일아웃과 파티셔닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[강의13] MySQL의 스케일아웃과 파티셔닝</h2>\n<h2 id=\"mysql의-스케일아웃-전략\" style=\"position:relative;\"><a href=\"#mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83-%EC%A0%84%EB%9E%B5\" aria-label=\"mysql의 스케일아웃 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL의 스케일아웃 전략</h2>\n<ul>\n<li>일단 데이터가 메모리에 올라가는 크기면 메모리에 올리고, 올라가지 않으면 메모리를 증설한다.</li>\n<li>그리고 인덱스를 걸자 !!</li>\n<li>하지만 만일 메모리 증설이 어렵다면 파티셔닝을 한다.</li>\n</ul>\n<h2 id=\"파티셔닝에-관한-보충-테이블-분할\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%97%90-%EA%B4%80%ED%95%9C-%EB%B3%B4%EC%B6%A9-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%B6%84%ED%95%A0\" aria-label=\"파티셔닝에 관한 보충 테이블 분할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티셔닝에 관한 보충 (테이블 분할)</h2>\n<ul>\n<li>테이블A와 테이블B를 다른 서버에 놓아서 분산하는 것.</li>\n<li>국소성을 활용해서 분산할 수 있고 캐싱이 유효하기 때문에 효과적이다.</li>\n</ul>\n<h2 id=\"파티셔닝을-전제로-한-설계\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%84-%EC%A0%84%EC%A0%9C%EB%A1%9C-%ED%95%9C-%EC%84%A4%EA%B3%84\" aria-label=\"파티셔닝을 전제로 한 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티셔닝을 전제로 한 설계</h2>\n<ul>\n<li>상황: 두 테이블 사이에 연관관계가 존재하여 join 쿼리를 던져야하는 경우 두 테이블을 분할 수는 없다.</li>\n<li>\n<p>두 개의 테이블이 다른 서버로 분할되면 JOIN을 할 수 없지만 이것을 두 개의 쿼리로 나눠서 질의하면 가능하게 만들 수 있다. → 그러면 파티셔닝이 가능하게 된다.</p>\n<ul>\n<li>하지만 너무 밀접할 경우 같은 서버에 놓고 join을 하는 것이 더 효율적이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"join-배제---where-in-활용\" style=\"position:relative;\"><a href=\"#join-%EB%B0%B0%EC%A0%9C---where-in-%ED%99%9C%EC%9A%A9\" aria-label=\"join 배제   where in 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JOIN 배제 - where, in 활용</h2>\n<ul>\n<li>위에 말한 경우이다. 먼저 어떤 테이블에 관련 Id를 질의하고 해당 id를 가지고 원하는 데이터를 뽑아내도록 한다. (JPA를 활용할 경우는 어떻게 하는 것이 좋을까)</li>\n<li>다수의 DB를 찔려서 하나의 쿼리에서 다수의 DB 서버 액세스 가능? (키워드 MSA)</li>\n</ul>\n<h2 id=\"파티셔닝의-상반관계---단점\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%98-%EC%83%81%EB%B0%98%EA%B4%80%EA%B3%84---%EB%8B%A8%EC%A0%90\" aria-label=\"파티셔닝의 상반관계   단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티셔닝의 상반관계 - 단점</h2>\n<ol>\n<li>운용이 복잡해진다. → 다른 용도의 서버가 생긴다. </li>\n<li>고장률이 높아진다 → 대수가 늘어나므로 고장률 또한 증가한다. </li>\n<li>\n<p>어플리케이션 용도와 서버 대수 </p>\n<ol>\n<li>무정지가 되려면 여러개의 서버대수가 필요하고 해당 서버를 분할하면 기하급수적으로 많아진다. </li>\n</ol>\n</li>\n</ol>\n<p>파티셔닝은 언제나 마지막 카드이다 !!!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B0%95%EC%9D%9811-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%9A%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">강의11 인덱스 올바르게 운용하기</a></li>\n<li><a href=\"#%EB%B6%84%EC%82%B0%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%9C-mysql-%EC%9A%B4%EC%9A%A9-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8F%AC%EC%9D%B8%ED%8A%B8\">분산을 고려한 MySQL 운용, 세 가지 포인트</a></li>\n<li>\n<p><a href=\"#os-%EC%BA%90%EC%8B%9C-%ED%99%9C%EC%9A%A9\">OS 캐시 활용</a></p>\n<ul>\n<li><a href=\"#db-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%95%EA%B7%9C%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-\">DB 테이블의 데이터를 정규화하는 것은 ?</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1---b%ED%8A%B8%EB%A6%AC\">인덱스의 중요성 - B+트리</a></li>\n<li><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%ED%9A%A8%EA%B3%BC\">인덱스의 효과</a></li>\n<li><a href=\"#-mysql-%ED%8A%B9%EC%84%B1%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EC%9E%91%EC%9A%A9\">+ MySQL 특성에 따른 인덱스의 작용</a></li>\n<li><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EA%B0%84%EA%B3%BC\">인덱스의 간과</a></li>\n<li><a href=\"#%EA%B0%95%EC%9D%9812-mysql%EC%9D%98-%EB%B6%84%EC%82%B0\">강의12 MySQL의 분산</a></li>\n<li><a href=\"#mysql-replication-%EA%B8%B0%EB%8A%A5\">MySQL replication 기능</a></li>\n<li>\n<p><a href=\"#masterslave%EC%9D%98-%ED%8A%B9%EC%A7%95\">Master/Slave의 특징</a></p>\n<ul>\n<li><a href=\"#%EA%B0%B1%EC%8B%A0-%EB%B0%8F-%EC%93%B0%EA%B8%B0-%ED%99%95%EC%9E%A5\">갱신 및 쓰기 확장</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B0%95%EC%9D%9813-mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83%EA%B3%BC-%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D\">강의13 MySQL의 스케일아웃과 파티셔닝</a></li>\n<li><a href=\"#mysql%EC%9D%98-%EC%8A%A4%EC%BC%80%EC%9D%BC%EC%95%84%EC%9B%83-%EC%A0%84%EB%9E%B5\">MySQL의 스케일아웃 전략</a></li>\n<li><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%97%90-%EA%B4%80%ED%95%9C-%EB%B3%B4%EC%B6%A9-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%B6%84%ED%95%A0\">파티셔닝에 관한 보충 (테이블 분할)</a></li>\n<li><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%84-%EC%A0%84%EC%A0%9C%EB%A1%9C-%ED%95%9C-%EC%84%A4%EA%B3%84\">파티셔닝을 전제로 한 설계</a></li>\n<li><a href=\"#join-%EB%B0%B0%EC%A0%9C---where-in-%ED%99%9C%EC%9A%A9\">JOIN 배제 - where, in 활용</a></li>\n<li><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EC%9D%98-%EC%83%81%EB%B0%98%EA%B4%80%EA%B3%84---%EB%8B%A8%EC%A0%90\">파티셔닝의 상반관계 - 단점</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 24, 2021","title":"대규모 서비스를 지탱하는 기술 - 분산을 고려한 MySQL 운용","categories":"웹 인프라 책","author":"코다","emoji":"📚"},"fields":{"slug":"/high-traffic-service_4/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/high-traffic-service_2/","nextSlug":"/high-traffic-service_1/","prevSlug":"/high-traffic-service_4/"}},"staticQueryHashes":["1073350324","2938748437"]}