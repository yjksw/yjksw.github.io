{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/spring-boot-testresttemplate/",
    "result": {"data":{"cur":{"id":"57df426c-a3bd-5baf-bc88-0e1154ce17ba","html":"<blockquote>\n<p>다음은 <a href=\"%5Bhttps://www.baeldung.com/spring-boot-testresttemplate%5D(https://www.baeldung.com/spring-boot-testresttemplate)\">TestRestTemplate 링크</a> 를 번역하면서 공부한 글입니다. 🙌</p>\n</blockquote>\n<br> \n<p>기존에 RestTemplate을 활용하여 통합테스트를 많이 했을 것이다. 스프링부트에는 굉장히 비슷하게 동작하는 TestRestTemplate이 있다.\n두가지 모두 통합테스트에서 유용하며 HTTP API를 다룰 수 있다. TestRestTemplate의 예시를 한번 들여다보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TestRestTemplate</span> testRestTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span>\n  <span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span>FOO_RESOURCE_URL <span class=\"token operator\">+</span> <span class=\"token string\">\"/1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>RestTemplate과 거의 유사한 형테를 지니고 있다. 하지만 TempRestTemplate은 RestTemplate을 확장하지 않으며 몇가지 다른 기능을 제공한다.</p>\n<br>\n<h2 id=\"-testresttemplate은-무엇이-다를까\" style=\"position:relative;\"><a href=\"#-testresttemplate%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%BC%EA%B9%8C\" aria-label=\" testresttemplate은 무엇이 다를까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 TestRestTemplate은 무엇이 다를까?</h2>\n<h3 id=\"1-auth-credentials을-설정할-수-있는-생성자를-제공한다\" style=\"position:relative;\"><a href=\"#1-auth-credentials%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\" aria-label=\"1 auth credentials을 설정할 수 있는 생성자를 제공한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Auth Credentials을 설정할 수 있는 생성자를 제공한다.</h3>\n<p>TestRestTemplate을 생성할 때 기본 authentication을 설정하여 생성할 수 있다. 그러면 해당 인스턴스를 활용한 모든 요청이 해당 credential이 적용된 채로 수행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TestRestTemplate</span> testRestTemplate\n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span>\n  <span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span>URL_SECURED_BY_AUTHENTICATION<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h3 id=\"2-httpclientoption을-제공하는-생성자를-제공한다\" style=\"position:relative;\"><a href=\"#2-httpclientoption%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\" aria-label=\"2 httpclientoption을 제공하는 생성자를 제공한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. HttpClientOption을 제공하는 생성자를 제공한다.</h3>\n<p>기타 다른 Http 옵션등을 설정할 수 있다. Enum을 제공하며 <code class=\"language-text\">ENABLE_COOKIES</code>, <code class=\"language-text\">ENABLE_REDIRECTS</code>, <code class=\"language-text\">SSL</code> 이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TestRestTemplate</span> testRestTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> \n  <span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TestRestTemplate<span class=\"token punctuation\">.</span>HttpClientOption</span><span class=\"token punctuation\">.</span>ENABLE_COOKIES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span>\n  <span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span>URL_SECURED_BY_AUTHENTICATION<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"3-새로운-메소드\" style=\"position:relative;\"><a href=\"#3-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"3 새로운 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 새로운 메소드</h3>\n<p>생성자 뿐 아니라 <code class=\"language-text\">withBasicAuth()</code> 라는 메소드를 통해서 authentication을 추가할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TestRestTemplate</span> testRestTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">withBasicAuth</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span>URL_SECURED_BY_AUTHENTICATION<span class=\"token punctuation\">,</span> \n  <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"-resttemplate과-testresttemplate-둘다-사용하기\" style=\"position:relative;\"><a href=\"#-resttemplate%EA%B3%BC-testresttemplate-%EB%91%98%EB%8B%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" resttemplate과 testresttemplate 둘다 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 RestTemplate과 TestRestTemplate 둘다 사용하기</h2>\n<p>TestRestTemplate은 RestTemplate의 wrapper로 활용될 수 있다. 예를 들어 이미 restTemplate으로 구현된 레거시 코드가 있다면 wrapper로 TestRestTemplate으로 전환해 손쉽게 사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">RestTemplateBuilder</span> restTemplateBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrestTemplateBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>restTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">TestRestTemplate</span> testRestTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestRestTemplate</span><span class=\"token punctuation\">(</span>restTemplateBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> testRestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForEntity</span><span class=\"token punctuation\">(</span>\n  FOO_RESOURCE_URL <span class=\"token operator\">+</span> <span class=\"token string\">\"/1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"-결론\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0\" aria-label=\" 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 결론</h2>\n<p>TestRestTemplate은 단순히 RestTemplate의 확장버전이 아니다. 오히려 더 간단하게 통합테스트를 할 수 있고 유용하게 authentication을 설정할 수 있는 대체안이다. Apache Http 클라이언트를 커스텀할 수 있으며 RestTemplate의 wrapper 클래스로도 활용될 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-testresttemplate%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%BC%EA%B9%8C\">🌩 TestRestTemplate은 무엇이 다를까?</a></p>\n<ul>\n<li><a href=\"#1-auth-credentials%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\">1. Auth Credentials을 설정할 수 있는 생성자를 제공한다.</a></li>\n<li><a href=\"#2-httpclientoption%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\">2. HttpClientOption을 제공하는 생성자를 제공한다.</a></li>\n<li><a href=\"#3-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%A9%94%EC%86%8C%EB%93%9C\">3. 새로운 메소드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-resttemplate%EA%B3%BC-testresttemplate-%EB%91%98%EB%8B%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">🌩 RestTemplate과 TestRestTemplate 둘다 사용하기</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B2%B0%EB%A1%A0\">🌩 결론</a></p>\n</li>\n</ul>\n</div>","excerpt":"다음은 TestRestTemplate 링크 를 번역하면서 공부한 글입니다. 🙌 기존에 RestTemplate을 활용하여 통합테스트를 많이 했을 것이다. 스프링부트에는 굉장히 비슷하게 동작하는 TestRestTemplate이 있다.\n두가지 모두 통합테스트에서 유용하며 HTTP API를 다룰 수 있다. TestRestTemplate의 예시를 한번 들여다보자. RestTemplate과 거의 유사한 형테를 지니고 있다. 하지만 TempRestTemplate은 RestTemplate을 확장하지 않으며 몇가지 다른 기능을 제공한다. 🌩 TestRestTemplate은 무엇이 다를까? 1. Auth Credentials을 설정할 수 있는 생성자를 제공한다. TestRestTemplate을 생성할 때 기본 authentication을 설정하여 생성할 수 있다. 그러면 해당 인스턴스를 활용한 모든 요청이 해당 credential이 적용된 채로 수행된다. 2. HttpClientOption을 제공하…","frontmatter":{"date":"October 24, 2021","title":"Springboot의 TestRestTemplate 알아보기","categories":"스프링부트 테스트","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-boot-testresttemplate/"}},"next":{"id":"2f49dd5a-2fdd-5bc5-99dd-37f1109d261c","html":"<blockquote>\n<p>다음 <a href=\"%5Bhttps://www.baeldung.com/spring-boot-testing%5D(https://www.baeldung.com/spring-boot-testing)\">링크</a>를 읽고 정리한 내용입니다 🙌 <br> 이전에 작성했던 <a href=\"https://yjksw.github.io/spring-boot-test/\">글</a>이 있습니다.</p>\n</blockquote>\n<p>스프링부트에서 지원하는 여러 테스팅 기법들을 통해서 단위 테스트나 스프링 컨텍스트를 띄우는 통합 테스트를 진행할 수 있다.\n사전 준비로는 스프링부트 프로젝트에 <code class=\"language-text\">org.springframwork.boot.spring-boot-start-test</code> 의존성을 추가해야한다.</p>\n<br>\n<h2 id=\"-springboottest-통합테스트\" style=\"position:relative;\"><a href=\"#-springboottest-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" springboottest 통합테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @SpringBootTest 통합테스트</h2>\n<ul>\n<li>통합테스트는 어플리케이션의 여러 레이어의 통합 로직을 테스트 하는 것이다. 따라서 mocking을 하지 않는다.</li>\n<li>원칙적으로는 통합테스트는 단위테스트와 분리되어 있어야하며 실행 또한 분리해서 실행해야 한다. 다른 profile 환경으로 나누고 통합테스트만을 분리하여 실행해야한다.\n<ul>\n<li>이렇게 해야하는 이유 중 하나는 통합 테스트는 어플리케이션 컨텍스트를 띄우는 작업을 필요로 하기 때문에 상대적으로 긴 시간이 소요된다.</li>\n<li>또한 실제 데이터베이스의 실행을 필요로 하기도 한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">@SpringBootTest</code> 은 컨테이너 전체를 띄우는데 유용하다. 이 어노테이션은 테스트에 사용될 ApplicationContext를 생성하여 테스트를 진행한다.\n<ul>\n<li><code class=\"language-text\">@SpringBootTest</code>의 <code class=\"language-text\">SpringBootTest.webEnvironment.MOCK</code> 을 통해 mock 서블릿 환경에서 컨테이너를 실행할 수 있다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">@TestPropertySource</code> 어노테이션을 통해 properties 파일을 지정할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"-testconfiguration-을-활용한-테스트-설정\" style=\"position:relative;\"><a href=\"#-testconfiguration-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\" testconfiguration 을 활용한 테스트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @TestConfiguration 을 활용한 테스트 설정</h2>\n<ul>\n<li><code class=\"language-text\">@SpringBootTest</code>는 어플리케이션 컨텍스트 전체를 띄우는 것이기 때문에 <code class=\"language-text\">@Autowired</code> 를 통해 자동주입하는 bean 은 모두 컴포넌트 스캔을 통한다는 것이다.</li>\n<li>하지만 테스트를진행하면서실제 어플리케이션 컨텍스트와 다른 테스트용 설정 빈들을 주입하고 싶을 수 있다. 이때 <code class=\"language-text\">@TestConfiguration</code> 어노테이션을 활용한다.</li>\n<li>사용하는 방법은 2가지 이다.\n<ol>\n<li>\n<p>static inner class</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@TestConfiguration</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token function\">employeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// implement methods</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeService</span> employeeService<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>separated test configuration class</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TestConfiguration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token function\">employeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token comment\">// implement methods </span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">@TestConfiguration</code>이 명시된 클래스는 component scanning에서 제외되어 있다. 따라서 해당 설정을 사용하고 싶은 테스트에 <code class=\"language-text\">@Import</code> 어노테이션을 통해 명시해주어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeService</span> employeeService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// remaining class code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"-mockbean-을-활용한-모킹\" style=\"position:relative;\"><a href=\"#-mockbean-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%AA%A8%ED%82%B9\" aria-label=\" mockbean 을 활용한 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @MockBean 을 활용한 모킹</h2>\n<ul>\n<li>\n<p>특정 layer의 로직만 테스트하고 싶은 경우 해당 layer나 클래스가 의존하고 있는 다른 빈의 동작에 대해서는 크게 상관하고 싶지 않을때가 있다.</p>\n</li>\n<li>\n<p>따라서 <code class=\"language-text\">@MockBean</code>을 활용하여 실제 의존 빈을 사용하는 것이 아니라 해당 빈이 지정된 값을 반환하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplIntegrationTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@TestConfiguration</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImplTestContextConfiguration</span> <span class=\"token punctuation\">{</span>\n \n        <span class=\"token annotation punctuation\">@Bean</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token function\">employeeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmployeeServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeService</span> employeeService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@MockBean</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeRepository</span> employeeRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// write test cases here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>여기서 다음과 같이 <code class=\"language-text\">EmployeeRepository</code> 의 행동을 지정하고  테스트를 돌리면 EmployeeService 에서 repository 부분은 지정한 것과 같이 행동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Employee</span> alex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Mockito</span><span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span>employeeRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whenValidName_thenEmployeeShouldBeFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"alex\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Employee</span> found <span class=\"token operator\">=</span> employeeService<span class=\"token punctuation\">.</span><span class=\"token function\">getEmployeeByName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n     <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"-datajpatest-를-활용한-통합테스트\" style=\"position:relative;\"><a href=\"#-datajpatest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" datajpatest 를 활용한 통합테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @DataJpaTest 를 활용한 통합테스트</h2>\n<ul>\n<li>Persistence layer를 테스트하고 JPA를 사용하고 있다면 <code class=\"language-text\">@DataJpaTest</code> 어노테이션이 해당 레이어를 테스트하는 여러 세팅을 해준다.\n<ul>\n<li>H2 설정</li>\n<li>Hibernate, Spring Data, Datasource 설정</li>\n<li><code class=\"language-text\">@EntityScan</code> 실행</li>\n<li>SQL 로깅 실행</li>\n</ul>\n</li>\n<li>테스트 이전에 데이터베이스에 테스트 데이터를 미리 넣을 수 있도록 <code class=\"language-text\">TestEntityManager</code>를 활용한다.</li>\n</ul>\n<br>\n<h2 id=\"-webmvctest-를-활용한-단위-테스트\" style=\"position:relative;\"><a href=\"#-webmvctest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" webmvctest 를 활용한 단위 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 @WebMvcTest 를 활용한 단위 테스트</h2>\n<ul>\n<li>\n<p>주로 Controller는 Serivce에 의존한다.</p>\n</li>\n<li>\n<p>Controller에 대한 단위테스트를 진행하기 위해서는 service layer 코드를 모킹해야 한다.</p>\n</li>\n<li>\n<p>이때 <code class=\"language-text\">@WebMvcTest</code> 어노테이션을 활용할 수 있다. 이 어노테이션은 Spring MVC 인프라를 자동으로 설정해준다.</p>\n</li>\n<li>\n<p>주로 <code class=\"language-text\">@WebMvcTest</code> 하나의 컨트롤러에 국한되며 <code class=\"language-text\">@MockBean</code> 어노테이션을 활용해 의존 객체를 모킹할 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">@WebMvcTest</code> 는 또한 <code class=\"language-text\">MockMvc</code> 에 대한 자동설정을 해 전체 HTTP 서버를 구동하지 않고 MVC 컨트롤러를 테스트할 수 있도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">givenEmployees_whenGetEmployees_thenReturnJsonArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token class-name\">Employee</span> alex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> allEmployees <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">getAllEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span>allEmployees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/employees\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$[0].name\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>alex<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"-각종-자동화-테스트\" style=\"position:relative;\"><a href=\"#-%EA%B0%81%EC%A2%85-%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 각종 자동화 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 각종 자동화 테스트</h2>\n<p>스프링부트에서는 전체 어플리케이션의 일부분을 로딩하고 특정 레이어만 테스트할 수 있는 자동화 어노테이션을 많이 제공한다. 설명한 몇가지를 소개해보려보 한다.</p>\n<ul>\n<li>@JdbcTest : JPA 어플리케이션을 테스트하는데 사용될 수 있다. 하지만 이 어노테이션이 사용되는 테스트는 DataSource를 필요로하는 테스트 이다.</li>\n<li>@DataRedisTest : Redis 어플리케이션을 테스트할 수 있는 어노테이션이다. @RedisHash 클래스를 스캔하고 Spring Data Redis 레포지토리를 default 설정한다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-느낀점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\" 느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛋 느낀점</h2>\n<ul>\n<li>스프링부트 테스트는 <a href=\"https://yjksw.github.io/spring-boot-test/\">이전 글</a>에서도 한번 다루었던 이야기 이다. 다시 한번 쓰게 된 이유는 <a href=\"https://github.com/yjksw/jwp-refactoring\">레거시 리팩토링 미션</a>을 진행하면서 코드를 보호하는 테스트의 정도에 대한 고민이 되었기 때문이다.</li>\n<li>테스트를 작성할수록 어느정도의 테스트까지 작성하는 것이 좋은지는 정답이 없는 것 같다. 다만 테스트 코드 내에서 모순이 있어 항상 성공하는 테스트를 만들지 않기 위해서 주의해야한다. 또한 실패하는 케이스에 대한 작성도 꼼꼼히 해야 한다.</li>\n<li>테스트코드는 다다익선일까 ?</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-springboottest-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 @SpringBootTest 통합테스트</a></li>\n<li><a href=\"#-testconfiguration-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95\">🌩 @TestConfiguration 을 활용한 테스트 설정</a></li>\n<li><a href=\"#-mockbean-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%AA%A8%ED%82%B9\">🌩 @MockBean 을 활용한 모킹</a></li>\n<li><a href=\"#-datajpatest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%86%B5%ED%95%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 @DataJpaTest 를 활용한 통합테스트</a></li>\n<li><a href=\"#-webmvctest-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 @WebMvcTest 를 활용한 단위 테스트</a></li>\n<li><a href=\"#-%EA%B0%81%EC%A2%85-%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 각종 자동화 테스트</a></li>\n<li><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\">🛋 느낀점</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 23, 2021","title":"Springboot 테스트 다시 한번 알아보기_중요한 건 여러 번 😊","categories":"스프링부트 테스트","author":"코다","emoji":"🖥"},"fields":{"slug":"/spring-boot-test-2/"}},"prev":{"id":"a00c71d2-8668-58f5-a971-d074a917495f","html":"<blockquote>\n<p>다음은 우아한테크코스 막바지 글쓰기 미션 때 제출한 글 입니다. 진솔한 마음으로 써서 올려봅니다 😶</p>\n</blockquote>\n<h2 id=\"내가-꿈꾸는-프로그래머로서의-삶\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80-%EA%BF%88%EA%BE%B8%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%82%B6\" aria-label=\"내가 꿈꾸는 프로그래머로서의 삶 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내가 꿈꾸는 프로그래머로서의 삶</h2>\n<br>\n<p>처음 프로그래머를 꿈꾸게 된 명확한 이유가 있다. 프로그래밍은 많은 사람에게 영향을 줄 수 있는 가장 좋은 도구이기 때문이다. 나이가 많거나 적거나, 물질적으로 풍요롭거나 아니거나, 어떤 언어를 쓰거나 상관없이 대부분의 사람은 기술을 접할 수 있는 기기를 하나씩 가지고 있다. 한 애플리케이션을 전 세계가 쓰기도 하고, 특정 플랫폼을 통해 콘텐츠가 확 퍼지기도 한다. 그렇기에 내가 꿈꾸는 프로그래머로의 삶은 많은 사람에게 선한 영향력을 끼치는 것이다.</p>\n<br>\n<p>굉장히 붕 뜬 이상주의자처럼 들릴 수도 있지만 사실 나는 그런 사람은 아니다. 한때 MBTI 검사를 하면 감정을 나타내는 수치인 F가 빵점이 나올 정도로 (지금은 많이 바뀌었다) 기본이 이성적인 사람이다. 흔히 이성적이며 현실적인 사람에 대해서 이야기할 때 부정적이고 “현실적으로 안 된다”라고 말하는 사람이라고 형용한다. 나도 그런 사람 중 일인자라고 자부할 수 있는 사람이었는데, 그렇지 않은 현실을 만들고 그 현실 속에서 살아가는 좋은 사람들을 만나면서 바뀌었다. 그리고 누군가에게 이렇다 할 변화를 만들어내는 것도 현실에 안주하지 않고 그 이상을 꿈꾸는 사람들이라는 것을 목격하면서 내 가치관이 변했다.</p>\n<br>\n<p>그렇다고 붕 뜨면서 말도 안 되는 꿈만 꾸는 것은 아무래도 적성에 맞지 않는다. 곰곰이 고민해보았을 때 꿈을 현실로 만들 방법 중 가장 현실적이며 합리적인 리소스로 실현할 수 있는 방법이 프로그래밍이라고 생각했다. 지금은 그 프로그래밍에 대한 역량을 키워야 할 때다. 선한 목적과 꿈이 실력을 키워주지는 않는다. 다만 분명한 목적이 있다면 그것이 없는 다른 이들보다 훨씬 멀리 오래 갈 수 있을 거라 생각한다. 괜히 부푼 꿈만 말하면서 상응하는 실력이 없는 사람이 되기는 싫다.</p>\n<br>\n<p>프로그래밍을 처음 시작한 때부터 지금까지 내 가치관이 불분명했던 적은 없다. 나에게 프로그래밍은 그 자체가 목적이기보다 선한 목적을 이루기 위한 좋은 도구이다. 그 때문에 내 블로그 이름도 <em>FromCoding</em> 코딩으로 시작되는 무언가를 암시하는 이름으로 정했다. 깃헙에 소개 글도 마찬가지이다.</p>\n<blockquote>\n<p>일상에 스미는 좋은 기술로 사람이 사람을 돕는 문화를 꿈꾸는 개발자입니다👩‍💻</p>\n</blockquote>\n<p>오늘날에는 누구든지 기술을 사용하기 때문에 프로그래밍은 일상에 침투하기 가장 좋은 수단이다. 무언가가 많은 사람의 일상이 되면 그것은 하나의 문화가 된다. 마치 배달의 민족이 배달문화를 만들고 당근마켓이 또 하나의 문화가 된 것처럼 말이다. 그것이 선한 문화라면 사람이 사람을 돕는 가장 자연스러운 방법일 것이다.</p>\n<br>\n<p>마지막으로 쑥스러운 마음에 굳이 밝히지 않았던 <em>코다</em>라는 별명에 내재된 뜻을 말해보려고 한다. 누가 물어보면 그냥 우리 집 고양이 이름이라고 소개했지만 (맞는 말이긴 하다) ‘코딩이 다가 아닌 개발자’라는 나만의 의미를 담고 있다. 코딩이 다가 아니라 그것이 끼치는 영향까지 고려하는 개발자, 그래서 항상 선한 뜻을 실현하고자 하는 개발자가 내가 꿈꾸는 프로그래머로의 삶이다. 일단 코딩이 다가 아니라면 적어도 코딩은 잘해야 한다는 뜻이기도 하다.</p>\n<br>\n<p>마지막 글이라고 나름의 인생관을 적어보자면 나는 아무래도 나 혼자 행복하자고 사는 삶은 좀 시시한 것 같다. 언젠가는 끝나는 인생이기도 하고 행복 자체가 목적이라면 행복의 그릇을 조금 줄인다면 금방 행복해질 수 있다. (나만 해도 좋은 사람들과 때 되면 밥을 먹을 수 있기만 해도 매우 행복….) 또 나 혼자 잘 살기에는 세상에는 너무 많은 사람이 함께 살고 있다. 아직 걸음마 단계를 거치고 있는 예비 프로그래머이지만 내 꿈을 실현하기 위해 가장 좋은 방법을 찾고 열심히 발전하고 있는 것 같아서 나름 뿌듯하다. 그 과정이 재미있는 건 덤이다.</p>","frontmatter":{"date":"October 27, 2021","title":"내가 꿈꾸는 프로그래머에 대해 궁금한 사람들은 보시오 🙌","categories":"아무말","author":"코다","emoji":"💡"},"fields":{"slug":"/goal-as-programmer/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/spring-boot-testresttemplate/","nextSlug":"/spring-boot-test-2/","prevSlug":"/goal-as-programmer/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}