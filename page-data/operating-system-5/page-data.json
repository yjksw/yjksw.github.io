{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/operating-system-5/",
    "result": {"data":{"cur":{"id":"6a22f61a-df2e-50fa-b1ee-dcb3734cbb98","html":"<blockquote>\n<p>다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ <em>CH6. CPU 스케줄링</em>를 읽고 정리한 내용입니다 🙌</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 INTRO</h2>\n<ul>\n<li>CPU는 PC가 가리키는 명령어를 하나씩 수행하기 때문에 효율적으로 관리해야한다.</li>\n<li>기계어 명령은 다음 3가지로 나뉜다.\n<ol>\n<li>CPU 내에서 수행되는 명령\n<ol>\n<li>ADD 명령</li>\n<li>수행 속도 빠르며 일반명령</li>\n<li>CPU 버스트</li>\n</ol>\n</li>\n<li>메모리 접근을 필요로 하는 명령\n<ol>\n<li>LOAD 명령</li>\n<li>메모리에 있는 데이터를 CPU로 읽는 명령</li>\n<li>CPU 명령보다는 오래 걸리지만 비교적 빠르며 일반명령</li>\n<li>CPU 버스트</li>\n</ol>\n</li>\n<li>입출력을 동반하는 명령\n<ol>\n<li>입출력 작업이필요한 경우이며 오랜 시간이 소요</li>\n<li>특권명령으로 운영체제를 통해 서비스를 대행해야한다.</li>\n<li>I/O 버스트</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>CPU 수행은 위 명령어의 조합과 반복으로 이루어진다.</li>\n</ul>\n</li>\n<li>각 프로그램마다 위 명령어들의 비율이 다르며 CPU 연산이 많이 이루어지는 것을 CPU 바운드 프로세스, I/O 연산이 많이 일어나는 것을 I/O 바운트 프로세스라고 한다.\n<ul>\n<li>I/O 바운드 프로세스는 사용자 인터렉션이 많은 대화형 프로그램이 해당된다.</li>\n</ul>\n</li>\n<li>프로그램마다 CPU 사용패턴이 다르므로 버스트가 균일하지 않다. 때문에 효율적인 CPU 스캐줄링이 필요하다.</li>\n<li>컴퓨터에서 수행되는 대부분의 프로세스는 다수의 짧은 CPU 버스트와 소수의 긴 CPU 버스트로 구성이 된다.\n<ul>\n<li>CPU 버스트가 짧은 프로세스들은 대화형 작업으로 사용자와 인터렉션을 하며 입력을 받아서 연산을 수행하는 것이다.</li>\n<li>이런 작업은 빠른 응답을 위해 CPU의 빠른 서비스를 필요로 한다.</li>\n</ul>\n</li>\n<li>CPU 스캐줄링 시 버스트가 짧은 프로세스에게 우선적으로 CPU를 사용할 수 있도록 하는 스캐줄링이 필요하다.\n<ul>\n<li>I/O 바운드 프로세스의 우선순위를 높이는 것이 필요하다.</li>\n</ul>\n</li>\n<li>I/O 바운드 프로세스에게 우선권을 주면 I/O 장치의 효율성을 높이며 CPU 연산을 하는 동안 I/O 장치가 휴먼 상태인 것도 방지할 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"-1-cpu-스캐줄러\" style=\"position:relative;\"><a href=\"#-1-cpu-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%9F%AC\" aria-label=\" 1 cpu 스캐줄러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 1. CPU 스캐줄러</h2>\n<ul>\n<li>운영체제의 코드로 준비 상태에 있는 프로세스들 중 어느 프로세스에게 CPU를 할당할지 결정한다.</li>\n<li>대표적으로 <strong>타이머 인터럽트가 발생</strong>하면 CPU 스캐줄러가 호출되며 준비 큐에 있는 프로세스 중 하나를 선택해서 CPU를 할당한다.</li>\n<li>다음과 같은 경우에도 호출된다.\n<ol>\n<li>실행상태 프로세스는 I/O 요청 등에 의해 봉쇄 상태로 바뀌는 경우 - 비선점형</li>\n<li>실행상태 프로세스가 타이머 인터럽트로 준비 상태로 바뀌는 경우 - 선점형</li>\n<li>봉쇄상태 프로세스가 I/O 작업이 완료되어 인터럽트가 발생하고 준비상태로 바뀌는 경우 - 선점형</li>\n<li>CPU의 실행상태에 있던 프로세스가 종료되는 경우 - 비선점형</li>\n</ol>\n</li>\n<li>스캐줄링 방식 2가지가 있다.\n<ul>\n<li>비선점형 (nonpreemptive) 방식\n<ul>\n<li>CPU를 차지한 프로세스가 스스로 반납하기 전에 CPU를 뺏기지 않는 방법이다.</li>\n</ul>\n</li>\n<li>선점형 (preemptive) 방식\n<ul>\n<li>프로세스에게서 CPU를 강제로 빼앗을 수 있는 방식이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>CPU 빼앗는 방법\n<ul>\n<li>할당시간 time quantum을 부여하여 타이머 인터럽트를 발생시켜서 빼앗는다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-2-디스패처\" style=\"position:relative;\"><a href=\"#-2-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B2%98\" aria-label=\" 2 디스패처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 2. 디스패처</h2>\n<ul>\n<li>다음 프로세스에게 CPU를 이양하는 작업을 수행하는 운영체제의 코드를 dispatcher라고 부른다.\n<ul>\n<li>현재 프로세스의 문맥을 해당 프로세스의 PCB에 저장하고</li>\n<li>새로운 프로세스의 문맥을 PCB로부터 CPU에 복원한다.</li>\n<li>시스템의 상태를 사용자 모드로 전환하고 사용자 프로그램에게 CPU 제어권을 넘긴다.</li>\n</ul>\n</li>\n<li>위 과정이 걸리는 시간은 디스패처 지연시간 dispatch latency라고 하며 문맥교환 오버헤드에 해당한다.</li>\n</ul>\n<br>\n<h2 id=\"-3-스캐줄링의-성능-평가\" style=\"position:relative;\"><a href=\"#-3-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80\" aria-label=\" 3 스캐줄링의 성능 평가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 3. 스캐줄링의 성능 평가</h2>\n<ul>\n<li>2가지 지표\n<ul>\n<li>시스템 관점 지표\n<ul>\n<li>CPU 이용률 및 처리량</li>\n</ul>\n</li>\n<li>사용자 관점 지표\n<ul>\n<li>소요시간, 대기시간, 응답시간 등 기다린 시간</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>CPU utilization\n<ul>\n<li>전체 시간 중 CPU가 일을 한 시간 비율이며 이용률은 시스템 전체 성능과 밀접하게 관련있다.</li>\n<li>CPU의 휴면 idle 상태를 최대한 줄이는 것이 중요하다.</li>\n</ul>\n</li>\n<li>처리량 throughput\n<ul>\n<li>주어진 시간 동안 준비 큐에서 기다리고 있는 프로세스 중 몇개를 끝냈는지를 나타낸다.\n<ul>\n<li>CPU 버스트를 완료한 프로세스 수</li>\n</ul>\n</li>\n<li>처리량을 높이기 위해서는 CPU 버스트가 짧은 프로세스에게 우선적으로 CPU를 할당하는 것이 유리하다.</li>\n</ul>\n</li>\n<li>소요시간 turnaround time\n<ul>\n<li>프로세스가 CPU를 요청한 시점부터 원하는 만큼 CPU를 다 쓰고 CPU 버스트가 끝날 때까지 걸린 시간</li>\n<li>준비큐에서 기다린 시간 + CPU 사용한 시간</li>\n<li>각 소요시간은 프로그램의 시작 및 종료 시간보다 CPU 버스트 단위로 별도로 측정한다.</li>\n</ul>\n</li>\n<li>대기시간 waiting time\n<ul>\n<li>CPU 버스트 기간 중 프로세스가 준비 큐에서 CPU를 얻기 위해 기다린 시간의 합</li>\n<li>시분할 시스템에서는 한번의 CPU 버스트 중 준비큐에서 기다린 시간이 많을 수 있으며 이것의 합이다</li>\n</ul>\n</li>\n<li>응답시간 response time\n<ul>\n<li>프로세스가 준비 큐에 들어온 이후 첫번째 CPU 획득까지 걸린 시간</li>\n<li>타이머 인터럽트 주기가 짧을 경우 프로세스가 빨리 돌아가서 응답시간이 줄어드므로 향상된다.</li>\n<li>대화형 시스템에 적합한 성능 척도이며 사용자 입장에서 가장 중요한 척도이다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"-4-스캐줄링-알고리즘\" style=\"position:relative;\"><a href=\"#-4-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\" 4 스캐줄링 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 4. 스캐줄링 알고리즘</h2>\n<h3 id=\"선입선출-스케줄링-fcfs\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-fcfs\" aria-label=\"선입선출 스케줄링 fcfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선입선출 스케줄링 FCFS</h3>\n<ul>\n<li>프로세스가 준비 큐에 도착한 시간 순대로 CPU를 할당하는 방식</li>\n<li>해당 프로세스가 자발적으로 CPU를 반납할 때까지 CPU를 빼앗기지 않는다.</li>\n<li>때로 비효율적인 결과를 초래한다.\n<ul>\n<li>CPU 버스트가 긴 프로세스가 짧은 프로세스 여러 개 보다 먼저 도착하면 CPU를 잠깐 사용하고 I/O 작업을 할 수 있는 프로세스가 앞의 긴 프로세스 하나 때문에 오래 기다려야 한다.</li>\n<li>I/O 장치 이용률도 떨어진다.</li>\n</ul>\n</li>\n<li>먼저 도착한 프로세스의 버스트 길이에 따라 평균 대기시간이 크게 달라진다.</li>\n<li>convoy effect 콘보이 현상 - CPU 버스트가 짧은 프로세스가 버스트가 긴 프로세스부터 나중에 도착해 오랜 시간을 기다려야 하는 현상</li>\n</ul>\n<h3 id=\"최단작업-우선-스캐줄링-sjf-shortest-job-first\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8B%A8%EC%9E%91%EC%97%85-%EC%9A%B0%EC%84%A0-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-sjf-shortest-job-first\" aria-label=\"최단작업 우선 스캐줄링 sjf shortest job first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최단작업 우선 스캐줄링 SJF (Shortest Job First)</h3>\n<ul>\n<li>CPU 버스트가 가장 짧은 프로세스에게 가장먼저 CPU를 할당하는 방식으로 프로세스의 준비 큐에서 기다리는 전체적인 시간이 줄어든다.</li>\n<li>대기시간을 가장 짧게 하는 최적 알고리즘이다.</li>\n<li>비선점형 방식과 선점형 방식\n<ul>\n<li>비선점형은 CPU를 획득하면 해당 프로세스가 CPU를 자진 반납하기 전까지 CPU 할당</li>\n<li>선점형은 CPU에서 버스트가 가장 짧은 프로세스에게 할당하더라도 중간에 더 짧은 버스트 프로세스가 도착하면 CPU를 빼앗아 더 짧은 프로세스에게 우선 부여하는 방식\n<ul>\n<li>현재 진행 중이던 프로세스의 <strong>남은 버스트 시간</strong>보다 더 짧은 경우이다.</li>\n<li>SRTF Shortest Remaining Time First 라고도 부른다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>일반적으로 프로세스가 한꺼번에 도착하지 않으므로 선점형 방식이 평균 대기시간을 가장 많이 줄일 수 있는 방법이다.</li>\n<li><strong>하지만 프로세스의 CPU 버스트 시간을 미리 알 수 없다.</strong>\n<ul>\n<li>따라서 CPU 시간을 예측하여 스캐줄링한다.</li>\n<li>이전 CPU 버스트 시간의 예측값과 실제값의 반영정도를 매개변수로 한 공식을 사용한다.</li>\n<li>과거의 CPU 버스트 시간들을 통해 미래 CPU 버스트 시간을 예측하는 것인데 최근 것일수록 가중치를 눂여서 반영하는 형식이다.</li>\n</ul>\n</li>\n<li>평균 대기시간을 최소화 하기는 하지만 평균 CPU 버스트 시간이 긴 프로세스는 준비큐에서 무한정 기다려야하는 문제가 발생한다.\n<ul>\n<li>기아 현상 starvation이라고 한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"우선순위-스케줄링-priority-scheduling\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-priority-scheduling\" aria-label=\"우선순위 스케줄링 priority scheduling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 스케줄링 priority scheduling</h3>\n<ul>\n<li>준비 큐에서 기다리는 프로세스 중 우선순위가 가장 높은 프로세스에게 먼저 CPU를 할당한다.</li>\n<li>우선순위 값을 할당하며 숫자가 적은 것이 우선순위가 높은것으로 판단한다.</li>\n<li>우선순위값의 정의는 여러가지이다.\n<ul>\n<li>CPU 버스트 시간을 그 값으로 정하면 SJF 알고리즘과 동일하다.</li>\n</ul>\n</li>\n<li>선점형과 비선점형이 있다.\n<ul>\n<li>선점형은 수행중인 프로세스 보다 높은 우선순위 프로세스가 들어오면 선점하여 CPU를 할당한다.</li>\n</ul>\n</li>\n<li>기아 현상이 발생할 수 있다.\n<ul>\n<li>우선순위가 높은 프로세스가 계속 들어올 경우 CPU를 계속 할당받지 못하는 프로세스가 있을 수 있다.</li>\n<li>노화 aging 기법을 사용한다.\n<ul>\n<li>기다리는 시간이 길어지면 우선순위를 조금씩 높여서 CPU를 할당받을 수 있게 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"라운드-로빈-스캐줄링-round-robin-scheduling\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-round-robin-scheduling\" aria-label=\"라운드 로빈 스캐줄링 round robin scheduling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라운드 로빈 스캐줄링 round robin scheduling</h3>\n<ul>\n<li>시분할 시스템의 성질을 가장 잘 이용한 스캐줄링 방식이다.</li>\n<li>각 프로세스가 <strong>CPU를 연속적으로 사용할 수 있는 시간이 제한되며 시간이 경과하면 CPU를 회수</strong>해 다른 프로세스에게 할당한다.</li>\n<li>할당 시간 time quantum - CPU를 연속적으로 사용할 수 있는 최대시간\n<ul>\n<li>할당시간이 너무 길면 FCFS와 동일해진다.</li>\n<li>할당시간이 너무 짧으면 문맥교환의 오버헤드가 커진다.</li>\n<li>일반적으로 수십밀리초 정도의 규모로 설정한다.</li>\n</ul>\n</li>\n<li>n 개의 프로세스에 q만큼의 할당시간이라고 하면 모든 프로세스는 적어도 (n-1)q 시간 이내에 적어도 한번 CPU를 할당받을 수 있다.\n<ul>\n<li>대화형 프로세스에 빠른 응답시간을 보장한다.</li>\n</ul>\n</li>\n<li>n 개의 프로세스에 q만큼의 할당시간이라고 하면 모든 프로세스는 적어도 (n-1)q 시간 이내에 적어도 한번 CPU를 할당받을 수 있다.\n<ul>\n<li>대화형 프로세스에 빠른 응답시간을 보장한다.</li>\n</ul>\n</li>\n<li>CPU 버스트가 긴 프로세스는 대기 시간이 비례해서 길어지고 적게 쓰는 프로세스는 대기시간도 짧아진다.</li>\n<li><strong>SJF 보다 평균 대기 시간은 길지만 응답시간은 더 짧다.</strong></li>\n<li>할당시간이 만료되면 타이머 인터럽트로 CPU를 회수한다. 만일 CPU 버스트 시간이 할당 시간보다 짧으면 자진 반납한다.\n<ul>\n<li>짧은 프로세스는 빨리 CPU를 얻으며 긴 프로세스도 불이익 당하지 않아서 매우 공정하다.</li>\n</ul>\n</li>\n<li><strong>소요시간과 대기시간이 CPU 버스트의 길이와 비례하여 공정하다.</strong></li>\n<li>FCFS와 비교했을 때 FCFS는 하나씩 프로세스를 끝마쳐 가므로 해당 프로세스의 소요시간 및 대기 시간이 짧아지지만 라운드 로빈 스케줄링은 CPU를 조금씩 같이 쓰고 거의 동시에 끝나게 되어 소요시간 및 대기시간이 가장 긴 프로세스에 어느정도 맞춰진다.\n<ul>\n<li>동일한 CPU 버스트 시간을 가진 프로세스들이 도착할 경우 평균 소요시간 및 대기시간이 길어지지만 여전히 평균 응답시간은 더 짧다.</li>\n</ul>\n</li>\n<li>하지만 주로 프로세스의 CPU 버스트 시간이 균일하지 않으므로 라운드 로빈 스캐줄링 기법이 타당한다.</li>\n</ul>\n<h3 id=\"멀티레벨-큐-multi-level-queue\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%81%90-multi-level-queue\" aria-label=\"멀티레벨 큐 multi level queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티레벨 큐 multi-level queue</h3>\n<ul>\n<li>큐를 여러개 분할해 관리하는 스캐줄링 기법이다.</li>\n<li>어떤 줄의 프로세스에 CPU를 할당하며 프로세스를 어떤 줄에 세워야할지 고려해야한다.</li>\n<li>성격이 다른 프로세스들을 별도로 관리하고 각각의 성격에 맞는 스케줄링을 큐마다 적용한다.\n<ul>\n<li>예를 들어 대화형 작업과 그렇지 않은 작업을 따로 두어 대화형 작업에 우선적으로 CPU를 할당한다.</li>\n</ul>\n</li>\n<li>일반적으로 전위큐 (foreground queue)와 후위큐(background queue)로 분할하여 운영한다.\n<ul>\n<li>전위큐는 응답시간을 짧게하기 위한 라운드 로빈 스캐줄링</li>\n<li>후위큐는 계산 위주 작업으로 응답시간이 중요하지 않은 FCFS 스캐줄링 기법으로 문맥교환 오버헤드를 줄인다.</li>\n</ul>\n</li>\n<li>큐 자체에 대한 스캐줄링도 필요하다.\n<ul>\n<li>가장 쉬운 방법은 고정 우선순위 방식 fixed priority scheduling 이다.\n<ul>\n<li>우선순위가 높은 큐를 먼저 서비스하고 해당 큐가 비면 우선순위가 낮은 큐를 서비스한다.</li>\n</ul>\n</li>\n<li>타임 슬라이스 time slice 방식\n<ul>\n<li>큐의 기아 현상을 해소하기위해 각 큐에 CPU 시간을 적절한 비율로 할당한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"멀티레벨-피드백-큐-multilevel-feedback-queue\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%94%BC%EB%93%9C%EB%B0%B1-%ED%81%90-multilevel-feedback-queue\" aria-label=\"멀티레벨 피드백 큐 multilevel feedback queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티레벨 피드백 큐 multilevel feedback queue</h3>\n<ul>\n<li>멀티레벨큐와 비슷하나 프로세스가 하나의 큐에서 다른 큐로 이동할 수 있다.\n<ul>\n<li>예를 들어 노화 기법을 사용하여 우선순위가 낮은 큐에서 높은 큐로 이동할 수 있다.</li>\n</ul>\n</li>\n<li>큐의 수, 각 큐의 스캐줄링 알고리즘, 프로세스를 상위 큐로 승격시키는 기준, 프로세스를 강등시키는 기준, 프로세스가 도착할 대 큐를 결정하는 기준 등을 고려해야한다.</li>\n<li>일반적인 멀티레벨 피드백 큐는\n<ul>\n<li>3개의 큐로 구성되며 우선순위 순으로 라운드로빈 (할당시간 5) → 라운드로빈 (할당시간 10) → FCFS 이다.</li>\n<li>대화형 서비스는 빨리 작업을 완료할 수 있다.</li>\n<li>모든 프로세스들은 처음에 상위 큐에 있다가 할당시간만큼 서비스 되고 나서 버스트 기간이 남으면 하위 큐로 강등된다.</li>\n<li>큐는 최상위 큐가 비었을 때 하위 큐가 서비스 받는다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"다중처리기-스케줄링-multi-processor-system\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91%EC%B2%98%EB%A6%AC%EA%B8%B0-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-multi-processor-system\" aria-label=\"다중처리기 스케줄링 multi processor system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중처리기 스케줄링 multi-processor system</h3>\n<ul>\n<li>각 CPU 별로 줄을 세워야하므로 더 복잡하다.</li>\n<li>일부 CPU에 작업이 편중될 수도 있는데 이것을 방지하기 위해 적절히 분산되도록 부하균형(load balancing) 매커니즘이 필요하다.</li>\n<li>대칭형 다중처리\n<ul>\n<li>CPU가 각자 알아서 스케줄링을 결정한다.</li>\n</ul>\n</li>\n<li>비대칭형 다중처리\n<ul>\n<li>하나의 CPU가 다른 CPU 스캐줄링 및 데이터 접근을 책임진다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"실시간-스케줄링\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\"실시간 스케줄링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실시간 스케줄링</h3>\n<ul>\n<li>각 작업마다 데드라인이 있어서 반드시 처리해야하는 real-time system에서 사용된다.</li>\n<li>경성 실시간 시스템 hard real-time system과 연성 실시간 시스템 soft real-time system 으로 나뉜다.\n<ul>\n<li>전자는 미사일 원자로 제어 등 반드시 정확해야하는 시스템</li>\n<li>후자는 위험하지는 않은 멀티미디어 스트리밍 시스템</li>\n</ul>\n</li>\n<li>데드라인이 얼마 남지 않은 요청을 먼저 처리하는 EDF earliest dedline first 스캐줄링을 사용한다.</li>\n</ul>\n<br>\n<h2 id=\"-5-스캐줄링-알고리즘의-평가\" style=\"position:relative;\"><a href=\"#-5-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%8F%89%EA%B0%80\" aria-label=\" 5 스캐줄링 알고리즘의 평가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 5. 스캐줄링 알고리즘의 평가</h2>\n<ul>\n<li>큐잉 모델\n<ul>\n<li>확률분포 등 수학적으로 구해서 평가한다.</li>\n</ul>\n</li>\n<li>구현 및 실측\n<ul>\n<li>실제로 수행하여 커널을 컴파일하여 실행시간 측정하여 평가한다.</li>\n</ul>\n</li>\n<li>시물레이션\n<ul>\n<li>가상 CPU 스캐줄링 프로그램을 작성하여 결과를 확인한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-intro\">🌩 INTRO</a></p>\n</li>\n<li>\n<p><a href=\"#-1-cpu-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%9F%AC\">🌩 1. CPU 스캐줄러</a></p>\n</li>\n<li>\n<p><a href=\"#-2-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B2%98\">🌩 2. 디스패처</a></p>\n</li>\n<li>\n<p><a href=\"#-3-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80\">🌩 3. 스캐줄링의 성능 평가</a></p>\n</li>\n<li>\n<p><a href=\"#-4-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">🌩 4. 스캐줄링 알고리즘</a></p>\n<ul>\n<li><a href=\"#%EC%84%A0%EC%9E%85%EC%84%A0%EC%B6%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-fcfs\">선입선출 스케줄링 FCFS</a></li>\n<li><a href=\"#%EC%B5%9C%EB%8B%A8%EC%9E%91%EC%97%85-%EC%9A%B0%EC%84%A0-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-sjf-shortest-job-first\">최단작업 우선 스캐줄링 SJF (Shortest Job First)</a></li>\n<li><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-priority-scheduling\">우선순위 스케줄링 priority scheduling</a></li>\n<li><a href=\"#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-round-robin-scheduling\">라운드 로빈 스캐줄링 round robin scheduling</a></li>\n<li><a href=\"#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%81%90-multi-level-queue\">멀티레벨 큐 multi-level queue</a></li>\n<li><a href=\"#%EB%A9%80%ED%8B%B0%EB%A0%88%EB%B2%A8-%ED%94%BC%EB%93%9C%EB%B0%B1-%ED%81%90-multilevel-feedback-queue\">멀티레벨 피드백 큐 multilevel feedback queue</a></li>\n<li><a href=\"#%EB%8B%A4%EC%A4%91%EC%B2%98%EB%A6%AC%EA%B8%B0-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-multi-processor-system\">다중처리기 스케줄링 multi-processor system</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">실시간 스케줄링</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-5-%EC%8A%A4%EC%BA%90%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%8F%89%EA%B0%80\">🌩 5. 스캐줄링 알고리즘의 평가</a></p>\n</li>\n</ul>\n</div>","excerpt":"다음은 반효경 교수님의 ‘운영체제와 정보기술의 원리’ CH6. CPU 스케줄링를 읽고 정리한 내용입니다 🙌 🌩 INTRO CPU는 PC가 가리키는 명령어를 하나씩 수행하기 때문에 효율적으로 관리해야한다. 기계어 명령은 다음 3가지로 나뉜다. CPU 내에서 수행되는 명령 ADD 명령 수행 속도 빠르며 일반명령 CPU 버스트 메모리 접근을 필요로 하는 명령 LOAD 명령 메모리에 있는 데이터를 CPU로 읽는 명령 CPU 명령보다는 오래 걸리지만 비교적 빠르며 일반명령 CPU 버스트 입출력을 동반하는 명령 입출력 작업이필요한 경우이며 오랜 시간이 소요 특권명령으로 운영체제를 통해 서비스를 대행해야한다. I/O 버스트 CPU 수행은 위 명령어의 조합과 반복으로 이루어진다. 각 프로그램마다 위 명령어들의 비율이 다르며 CPU 연산이 많이 이루어지는 것을 CPU 바운드 프로세스, I/O 연산이 많이 일어나는 것을 I/O 바운트 프로세스라고 한다. I/O 바운드 프로세스는 사용자 인터렉션이 많…","frontmatter":{"date":"October 15, 2021","title":"운영체제와 정보기술의 원리 - CH6. CPU 스케줄링","categories":"운영체제 책","author":"코다","emoji":"🧁"},"fields":{"slug":"/operating-system-5/"}},"next":{"id":"79b6b456-21f6-50d7-af26-9328d6bda772","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>이전 포스트에서 진행한 <a href=\"https://github.com/woowacourse-teams/2021-pick-git\">프로젝트</a>에서 홈피드 게시물 조회 성능 테스트에 대한 결과를 보고 개선대상을 파악하고 개선한다.</li>\n<li>개선 후 테스트를 재진행하여 결과를 비교한다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-쿼리-진단\" style=\"position:relative;\"><a href=\"#-%EC%BF%BC%EB%A6%AC-%EC%A7%84%EB%8B%A8\" aria-label=\" 쿼리 진단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 쿼리 진단</h2>\n<p>이전 포스트에서 진행한 성능 테스트를 통해 DB 쿼리 쪽 병목이 있다는 것을 알아냈다. 구체적으로 쿼리를 자세히 살펴보면서 어떤 문제가 있는지 확인해보자.</p>\n<ul>\n<li>\n<p>홈피드 게시물을 반환할 때 발생하는 slow query</p>\n<ul>\n<li>현재는 포스트 조회하는 쿼리가 최대값으로는 3.62 초가 소요된다.</li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137448824-409b2475-61a2-48f1-8390-7f6364a5f4db.png\"></p> \n<ul>\n<li>쿼리의 실행계획을 확인해서 문제점을 파악해보니 100만건의 데이터를 거의 다 훑으면서 filesort를 하고 있었다. 게시물을 최신순으로 정렬하여 상위 10개를 가지고 오는 Pagination을 적용하고 있기 때문이다.</li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137449059-6b18bcad-3794-41b9-b7e2-6bc42ee7a971.png\"></p> \n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-개선하기\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\" aria-label=\" 개선하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 개선하기</h2>\n<ul>\n<li>\n<p>createt_At 칼럼에 인덱스를 추가하여 데이터가 정렬되도록 한다. 인덱스를 건 후 실행계획을 확인해보니 filesort가 제거되었고 훑는 row 수가 대폭 줄어들었다.</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137449278-a84af99e-42d5-4ada-86aa-cc3c9c05a2fb.png\"></p> \n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-개선-후-성능-테스트\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 개선 후 성능 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 개선 후 성능 테스트</h2>\n<h3 id=\"인덱스-추가-후-테스트\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%B6%94%EA%B0%80-%ED%9B%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"인덱스 추가 후 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스 추가 후 테스트</h3>\n<ul>\n<li>\n<p>테스트 중 서버 모니터링</p>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137449561-613620d9-d87a-4433-a626-aca8ea74ebcf.png\"></p> \n<ul>\n<li>본래 DB에 실행 대기 중인 프로세스(맨 왼쪽 r 칼럼)가 많았다. 약 20 이라는 수치를 보였으며 DB 서버의 CPU의 idle 상태도 항상 0%였다.</li>\n<li>인덱스를 걸어서 쿼리 수행이 훨씬 빨라지면서 <strong>DB 인스턴스에 CPU 부하가 훨씬 줄었다</strong>. 또한 여전히 Disk I/O는 발생하지 않는다.</li>\n<li>대신 WAS 쪽 CPU에 부하가 발생했다. r 수치가 11-15 사이를 왔다갔다 했으며 CPU idle 비율이 2% ~ 15%를 왔다갔다 했다.</li>\n<li><strong>왜 갑자기 이런 수치가 보여졌을까?</strong>\n<ul>\n<li>성능 테스트를 할 때 실운영 환경과의 차이가 있기 때문이다.</li>\n<li>성능 테스트를 할 때는 한 vuser의 요청에 대한 응답이 오기 전까지 다음 요청을 보내지 않는다. 따라서 요청에 대한 응답이 느리면 그 다음 요청을 못보내기 때문에 이전 테스트 결과와 다르게 더 많은 요청을 보냈고, WAS의 CPU 부하가 발생했다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>인덱스 추가 후 성능 테스트 결과</p>\n<ul>\n<li>진행된 테스트 개수: 6694 → 944360</li>\n<li>요청 응답 시간: 13.41s → 83.57ms</li>\n<li>TPS: 10.94/s → 1573.72/s</li>\n<li>성능이 대폭 향상된 것을 확인할 수 있다.</li>\n</ul>\n<p align=\"center\"><img width=\"85%\" src=\"https://user-images.githubusercontent.com/63405904/137450075-acdc9624-f2c0-4b3d-852c-367fc4a441bd.png\"></p> \n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-요약\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD\" aria-label=\" 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 요약</h2>\n<ul>\n<li>기존 홈피드를 조회할 때 13초 가량의 시간이 소요 되었다.</li>\n<li>분석해보니 디스크 I/O 부하는 없고 DB쪽 CPU 부하가 있으므로 쿼리 효율성의 문제라고 판단하였다.</li>\n<li><code class=\"language-text\">order by createdAt</code> 쿼리의 부분이 풀스캔 + filesort를 하고 있음을 발견했다. (쿼리 실행 시간 3초 이상)</li>\n<li><code class=\"language-text\">createdAt</code> 칼럼에 인덱스를 걸어서 풀스캔 → limit 개수 만큼만 스캔하도록 설정했다..</li>\n<li>결과적으로 응답 시간이 약 <strong>13초에서 85ms</strong> 정도로 단축되었다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"-느낀점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\" 느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 느낀점</h2>\n<ul>\n<li>테스트 코드를 통해서는 확인할 수 없는 허점을 발견할 수 있었던 것이 새로웠다.</li>\n<li>성능 테스트를 하면서 가장 크게 느낀 것은 돌아가는 어플리케이션을 구현하는 것이 아니라 사용자에게 서비스될 수 있는 어플리케이션을 만들어야 한다는 것이다. 그렇게 하기 위해서는 경험하지 않으면 알 수 없는 많은 부분들을 고려해야한다.</li>\n<li>기존에는 코드 퀄리티 자체와 원하는 결과를 내는 것에 집중했다면, 이제는 제한된 리소스 내에게 원하는 목표치까지 서비스할 수 있는 어플리케이션을 구현하는것이 중요하다는 시각이 트인 좋은 기회였다.</li>\n<li>성능 테스트를 하면서 막힌 부분은 서버를 모니터링, 커넥션 개수 파악, 데이터베이스 쿼리 최적화, 네트워크 통신 부분이다. 많이 배웠던 CS 기초가 웹 어플리케이션을 구현하면서 많이 등장하지 않아서 왜 중요한지 체감하지 못하고 있있는데 이런 대용량 (대용량이라고 하기엔 훨씬 부족하지만..) 서비스를 만들면서 다시 마주하게 될 줄 몰랐다. 역시 기초가 튼튼한 것이 가장 중요한 것 같다.</li>\n<li>성능 테스트를 하면서 부족한 CS 기초 (운영체제, 네트워크, 데이터베이스)를 병행해서 공부했다. 띄엄띄엄 알던 지식들이 하나로 연결되는 경험이었다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%BF%BC%EB%A6%AC-%EC%A7%84%EB%8B%A8\">🌩 쿼리 진단</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\">🌩 개선하기</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🌩 개선 후 성능 테스트</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%B6%94%EA%B0%80-%ED%9B%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">인덱스 추가 후 테스트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9A%94%EC%95%BD\">🌩 요약</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%8A%90%EB%82%80%EC%A0%90\">🌩 느낀점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"K6를 활용한 성능테스트 경험기 2 - 홈피드 조회 기능 향상","categories":"웹 프로젝트 성능테스트 데이터베이스","author":"코다","emoji":"📈"},"fields":{"slug":"/project-pickgit-homefeed-performance-test-2/"}},"prev":{"id":"2eba1279-e1e0-5811-91ac-0f45dbfc508a","html":"<blockquote>\n<p>이 글은 다음 <a href=\"https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55\">링크</a>를 번역하며 공부한 글입니다 🙌</p>\n</blockquote>\n<br>\n<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<ul>\n<li>성능 테스트에 관련한 공부 및 적용을 하면서 좋은 아티클을 추천 받았다. (Thanks to 제리 👍)</li>\n<li>관련 명령어들에 대해서 공부하고 각 칼럼이 의미하는 os 및 네트워크 기초 지식을 메꾸보자.</li>\n</ul>\n<br>\n<h2 id=\"1-uptime\" style=\"position:relative;\"><a href=\"#1-uptime\" aria-label=\"1 uptime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. uptime</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">uptime</span> \n<span class=\"token number\">23</span>:51:26 up <span class=\"token number\">21</span>:31, <span class=\"token number\">1</span> user, load average: <span class=\"token number\">30.02</span>, <span class=\"token number\">26.43</span>, <span class=\"token number\">19.02</span></code></pre></div>\n<ul>\n<li>실행되기를 기다리는 프로세스의 갯수를 출력한다. 리눅스 시스템에서는 CPU를 기다리는 프로세스와 uninterruptible I/O (disk I/O) 에 의해 프로세스가 막혀있을 수 있다. 따라서 이 수치를 통해서 리소스 부하를 간편하게 확인 할 수 있다.</li>\n<li>위 세개의 번호는 각각 1분, 5분, 15분 간 실행되지 못하고 대기 중인 프로세스 갯수를 나타낸다. 시간 추이에 따른 부하 상태를 통해 상황을 유추할 수도 있다.</li>\n</ul>\n<br>\n<h2 id=\"2-dmesg--tail\" style=\"position:relative;\"><a href=\"#2-dmesg--tail\" aria-label=\"2 dmesg  tail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. dmesg | tail</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">dmesg</span> <span class=\"token operator\">|</span> <span class=\"token function\">tail</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1880957.563150</span><span class=\"token punctuation\">]</span> perl invoked oom-killer: <span class=\"token assign-left variable\">gfp_mask</span><span class=\"token operator\">=</span>0x280da, <span class=\"token assign-left variable\">order</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>, <span class=\"token assign-left variable\">oom_score_adj</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1880957.563400</span><span class=\"token punctuation\">]</span> Out of memory: Kill process <span class=\"token number\">18694</span> <span class=\"token punctuation\">(</span>perl<span class=\"token punctuation\">)</span> score <span class=\"token number\">246</span> or sacrifice child\n<span class=\"token punctuation\">[</span><span class=\"token number\">1880957.563408</span><span class=\"token punctuation\">]</span> Killed process <span class=\"token number\">18694</span> <span class=\"token punctuation\">(</span>perl<span class=\"token punctuation\">)</span> total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB\n<span class=\"token punctuation\">[</span><span class=\"token number\">2320864.954447</span><span class=\"token punctuation\">]</span> TCP: Possible SYN flooding on port <span class=\"token number\">7001</span>. Dropping request.  Check SNMP counters.</code></pre></div>\n<ul>\n<li>마지막 10개의 시스템 메세지를 출력한다. 여기서 성능에 이슈를 일으킨 에러 메세지를 확인할 수 있다. oom-killer나 TCP 요청 드랍 같은 경우를 확인할 수 있으므로 필수다.</li>\n</ul>\n<br>\n<h2 id=\"3-vmstat-1\" style=\"position:relative;\"><a href=\"#3-vmstat-1\" aria-label=\"3 vmstat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. vmstat 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b swpd   <span class=\"token function\">free</span>   buff  cache   si   so    bi    bo   <span class=\"token keyword\">in</span>   cs us sy <span class=\"token function\">id</span> wa st\n<span class=\"token number\">34</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200889792</span>  <span class=\"token number\">73708</span> <span class=\"token number\">591828</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">5</span>    <span class=\"token number\">6</span>   <span class=\"token number\">10</span> <span class=\"token number\">96</span>  <span class=\"token number\">1</span>  <span class=\"token number\">3</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200889920</span>  <span class=\"token number\">73708</span> <span class=\"token number\">591860</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>   <span class=\"token number\">592</span> <span class=\"token number\">13284</span> <span class=\"token number\">4282</span> <span class=\"token number\">98</span>  <span class=\"token number\">1</span>  <span class=\"token number\">1</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200890112</span>  <span class=\"token number\">73708</span> <span class=\"token number\">591860</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span> <span class=\"token number\">9501</span> <span class=\"token number\">2154</span> <span class=\"token number\">99</span>  <span class=\"token number\">1</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200889568</span>  <span class=\"token number\">73712</span> <span class=\"token number\">591856</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>    <span class=\"token number\">48</span> <span class=\"token number\">11900</span> <span class=\"token number\">2459</span> <span class=\"token number\">99</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n<span class=\"token number\">32</span>  <span class=\"token number\">0</span>    <span class=\"token number\">0</span> <span class=\"token number\">200890208</span>  <span class=\"token number\">73712</span> <span class=\"token number\">591860</span>    <span class=\"token number\">0</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span> <span class=\"token number\">15898</span> <span class=\"token number\">4840</span> <span class=\"token number\">98</span>  <span class=\"token number\">1</span>  <span class=\"token number\">1</span>  <span class=\"token number\">0</span>  <span class=\"token number\">0</span>\n^C</code></pre></div>\n<ul>\n<li>가상 메모리 stat를 보여준다. 서버의 중요한 statistics를 출력한다.</li>\n<li>vmstat 명령어와 1을 클릭하면 1초마다 서버의 statictics를 출력한다. (단 첫번째 행은 서버가 부팅되었을 때부터의 평균 수치를 보여준다)</li>\n</ul>\n<h3 id=\"중요한-칼럼\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%9A%94%ED%95%9C-%EC%B9%BC%EB%9F%BC\" aria-label=\"중요한 칼럼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중요한 칼럼</h3>\n<ul>\n<li>\n<p><strong>r</strong>: CPU에서 실행되는 프로세스와 기다리고 있는 프로세스 숫자이다. I/O에 의해 생기는 부하를 제외하고 CPU에 대해서만 보여주기 때문에 load average의 원인이 CPU인지 아닌지를 확인 할 수 있다.</p>\n<p>참고로, “r” 칼럼 값이 CPU 코어 갯수보다 많다면 saturation 상황이다.</p>\n</li>\n<li>\n<p><strong>free</strong>: 비어있는 메모리를 kilobytes 단위로 보여준다.</p>\n</li>\n<li>\n<p><strong>si, so</strong>: swap-ins, swap-outs를 보여준다. 이 값이 0이 아니라면 메모리 부족이다.</p>\n</li>\n<li>\n<p><strong>us, sy, id, wa, st</strong>: CPU 시간을 분할하여 모든 CPU 시간의 평균 정보를 보여준다.</p>\n<ul>\n<li>user time, system time(kernel), idle, wait I/O, stolen time(다른 게스트, Xen 등등) 지표를 보여준다.</li>\n</ul>\n</li>\n<li>\n<p>여기서 user + system time을 통해 CPU가 바쁜 상태인지 확인할 수 있다.</p>\n</li>\n<li>\n<p>wait I/O에 특정 값이 유지된다면 disk 병목 현상이 있다고 볼 수 있다. 이 경우는 작업이 disk I/O 작업을 기다리느라 CPU 가 유휴 상태에 있는 때이다.</p>\n</li>\n<li>\n<p>System time은 I/O 작업을 하기 위해서 필수이다. high system time 평균은 20% 이상이며 이런 수치를 보이면 커널이 I/O 작업을 비효율적으로 처리하고 있다고 볼 수 있다.</p>\n</li>\n<li>\n<p>CPU 사용률(user-level)은 평균 90% 이상일 수도 있으나 이것이 꼭 문제를 뜻하는 것은 아니다. CPU에 부하가 걸리고 있는지는 “r” 칼럼을 통해서 판단해야한다.</p>\n</li>\n<li>\n<p><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&#x26;blogId=ggaibi1004&#x26;logNo=221398356656\">여기서</a> 각 칼럼에 대한 자세한 설명을 확인할 수 있다. 개인적으로 매우 유용하게 참고하고 있다. <a href=\"https://im-recording-of-sw-studies.tistory.com/30\">여기도..</a></p>\n</li>\n</ul>\n<br>\n<h2 id=\"4-mpstat--p-all-1\" style=\"position:relative;\"><a href=\"#4-mpstat--p-all-1\" aria-label=\"4 mpstat  p all 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. mpstat -P ALL 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mpstat -P ALL <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015  _x86_64_ <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle\n07:38:50 PM  all  <span class=\"token number\">98.47</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.75</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.78</span>\n07:38:50 PM    <span class=\"token number\">0</span>  <span class=\"token number\">96.04</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">2.97</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.99</span>\n07:38:50 PM    <span class=\"token number\">1</span>  <span class=\"token number\">97.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">2.00</span>\n07:38:50 PM    <span class=\"token number\">2</span>  <span class=\"token number\">98.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">1.00</span>\n07:38:50 PM    <span class=\"token number\">3</span>  <span class=\"token number\">96.97</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>   <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">3.03</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>CPU 코어 별 CPU 시간을 출력한다. 이것을 통해 한 코어에 프로세스가 집중되어 비효율적이지는 않은지 확인할 수 있다.</li>\n<li>만일 하나의 CPU에 부하가 심하다면 single thread application에 의한 부하일 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"5-pidstat-1\" style=\"position:relative;\"><a href=\"#5-pidstat-1\" aria-label=\"5 pidstat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. pidstat 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pidstat <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015    _x86_64_    <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n07:41:02 PM   <span class=\"token environment constant\">UID</span>       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:03 PM     <span class=\"token number\">0</span>         <span class=\"token number\">9</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.94</span>     <span class=\"token number\">1</span>  rcuos/0\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">4214</span>    <span class=\"token number\">5.66</span>    <span class=\"token number\">5.66</span>    <span class=\"token number\">0.00</span>   <span class=\"token number\">11.32</span>    <span class=\"token number\">15</span>  mesos-slave\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">4354</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">1.89</span>     <span class=\"token number\">8</span>  java\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6521</span> <span class=\"token number\">1596.23</span>    <span class=\"token number\">1.89</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1598.11</span>    <span class=\"token number\">27</span>  java\n07:41:03 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6564</span> <span class=\"token number\">1571.70</span>    <span class=\"token number\">7.55</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1579.25</span>    <span class=\"token number\">28</span>  java\n07:41:03 PM <span class=\"token number\">60004</span>     <span class=\"token number\">60154</span>    <span class=\"token number\">0.94</span>    <span class=\"token number\">4.72</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">5.66</span>     <span class=\"token number\">9</span>  pidstat\n\n07:41:03 PM   <span class=\"token environment constant\">UID</span>       PID    %usr %system  %guest    %CPU   CPU  Command\n07:41:04 PM     <span class=\"token number\">0</span>      <span class=\"token number\">4214</span>    <span class=\"token number\">6.00</span>    <span class=\"token number\">2.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">8.00</span>    <span class=\"token number\">15</span>  mesos-slave\n07:41:04 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6521</span> <span class=\"token number\">1590.00</span>    <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1591.00</span>    <span class=\"token number\">27</span>  java\n07:41:04 PM     <span class=\"token number\">0</span>      <span class=\"token number\">6564</span> <span class=\"token number\">1573.00</span>   <span class=\"token number\">10.00</span>    <span class=\"token number\">0.00</span> <span class=\"token number\">1583.00</span>    <span class=\"token number\">28</span>  java\n07:41:04 PM   <span class=\"token number\">108</span>      <span class=\"token number\">6718</span>    <span class=\"token number\">1.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">1.00</span>     <span class=\"token number\">0</span>  snmp-pass\n07:41:04 PM <span class=\"token number\">60004</span>     <span class=\"token number\">60154</span>    <span class=\"token number\">1.00</span>    <span class=\"token number\">4.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">5.00</span>     <span class=\"token number\">9</span>  pidstat\n^C</code></pre></div>\n<ul>\n<li>pidstat는 프로세스 별 top 명령어 같은 느낌이다. 하지만 rollling 방식으로 매 시간마다의 모니터링 결과를 출력해준다.</li>\n<li>이 명령을 통해 시간에 흐름에 따른 패턴을 확인할 수 있고, 현상을 기록할 수 있는 장점이 있다.</li>\n<li>위 예시를 보면 2개의 자바 프로세스가 CPU를 과하게 소비하고 있음을 알 수 있다.</li>\n<li>위에서 <code class=\"language-text\">%CPU</code> 칼럼은 서버의 모든 CPU를 포함한 수치이다. 따라서 1591%라는 수치는 해당 자바 프로세스가 거의 16개의 CPU를 소비하고 있음을 나타낸다. (리눅스에서 CPU 사용률은 주로 각 CPU 당 100%의 수치로 그 합을 의미한다)</li>\n</ul>\n<br>\n<h2 id=\"6-iostat--xz-1\" style=\"position:relative;\"><a href=\"#6-iostat--xz-1\" aria-label=\"6 iostat  xz 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. iostat -xz 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ iostat -xz <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015  _x86_64_ <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n          <span class=\"token number\">73.96</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">3.73</span>    <span class=\"token number\">0.03</span>    <span class=\"token number\">0.06</span>   <span class=\"token number\">22.21</span>\n\nDevice:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nxvda        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.23</span>    <span class=\"token number\">0.21</span>    <span class=\"token number\">0.18</span>     <span class=\"token number\">4.52</span>     <span class=\"token number\">2.08</span>    <span class=\"token number\">34.37</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">9.98</span>   <span class=\"token number\">13.80</span>    <span class=\"token number\">5.42</span>   <span class=\"token number\">2.44</span>   <span class=\"token number\">0.09</span>\nxvdb        <span class=\"token number\">0.01</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">1.02</span>    <span class=\"token number\">8.94</span>   <span class=\"token number\">127.97</span>   <span class=\"token number\">598.53</span>   <span class=\"token number\">145.79</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.43</span>    <span class=\"token number\">1.78</span>    <span class=\"token number\">0.28</span>   <span class=\"token number\">0.25</span>   <span class=\"token number\">0.25</span>\nxvdc        <span class=\"token number\">0.01</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">1.02</span>    <span class=\"token number\">8.86</span>   <span class=\"token number\">127.79</span>   <span class=\"token number\">595.94</span>   <span class=\"token number\">146.50</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.45</span>    <span class=\"token number\">1.82</span>    <span class=\"token number\">0.30</span>   <span class=\"token number\">0.27</span>   <span class=\"token number\">0.26</span>\ndm-0        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.69</span>    <span class=\"token number\">2.32</span>    <span class=\"token number\">10.47</span>    <span class=\"token number\">31.69</span>    <span class=\"token number\">28.01</span>     <span class=\"token number\">0.01</span>    <span class=\"token number\">3.23</span>    <span class=\"token number\">0.71</span>    <span class=\"token number\">3.98</span>   <span class=\"token number\">0.13</span>   <span class=\"token number\">0.04</span>\ndm-1        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.00</span>    <span class=\"token number\">0.94</span>     <span class=\"token number\">0.01</span>     <span class=\"token number\">3.78</span>     <span class=\"token number\">8.00</span>     <span class=\"token number\">0.33</span>  <span class=\"token number\">345.84</span>    <span class=\"token number\">0.04</span>  <span class=\"token number\">346.81</span>   <span class=\"token number\">0.01</span>   <span class=\"token number\">0.00</span>\ndm-2        <span class=\"token number\">0.00</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">0.09</span>    <span class=\"token number\">0.07</span>     <span class=\"token number\">1.35</span>     <span class=\"token number\">0.36</span>    <span class=\"token number\">22.50</span>     <span class=\"token number\">0.00</span>    <span class=\"token number\">2.55</span>    <span class=\"token number\">0.23</span>    <span class=\"token number\">5.62</span>   <span class=\"token number\">1.78</span>   <span class=\"token number\">0.03</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n^C</code></pre></div>\n<ul>\n<li>블록 디바이스 (disks)를 확인하기 매우 좋은 명령어다. 해당 디바이스의 부하와 퍼포먼스까지 확인할 수 있다. 다음 칼럼들을 유의해서 보자.</li>\n</ul>\n<ol>\n<li><strong>r/s, w/s, rkB/s, wkB/s</strong>\n<ul>\n<li>위 수치들은 1초 동안 해당 디바이스에게 전달된 읽기, 쓰기, Kbytes 읽기, Kbytes 쓰기이다.</li>\n<li>디바이스의 작업량 정도를 확인할 수 있다. 이 수치가 지나치게 높다면 과부하에 의한 성능 문제가 발생할 수 있다.</li>\n</ul>\n</li>\n<li><strong>await</strong>\n<ul>\n<li>ms 단위의 I/O 평균 시간이다. 이것은 어플리케이션이 queue에 있는 시간과 서비스되는 시간이 모두 포함된 시간이다.</li>\n<li>예상보다 긴 평균시간은 디바이스 포화 여부 혹은 디바이스에 오류 가능성을 의미할 수 있다.</li>\n</ul>\n</li>\n<li><strong>avgqu-sz</strong>\n<ul>\n<li>디바이스의 평균 요청 수이다. 1 보다 큰 수치는 포화상태의 근거일 수 있다. (여러 디스크에 대한 가장 디바이스 같은 경우 요청을 병렬로 처리할 수 있긴 하다는 것을 참고)</li>\n</ul>\n</li>\n<li><strong>%util</strong>\n<ul>\n<li>디바이스 사용률이다. 매 초마다 디바이스가 처리하고 있는 퍼센트를 나타닌다.</li>\n<li>디바이스 마다 상이하지만 60% 보다 큰 수치는 주로 좋지 않은 성능을 나타낸다. (await 칼럼에서 함께 확인할 수 있는 상태이다)</li>\n<li>100%에 가까운 것은 포화상태임을 뜻한다.</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>만일 storage device가 여러 물리 디스크 앞에 있는 논리 디스크라면 100% 의 사용률은 어떤 I/O 프로세스가 100% 시간동안 처리되고 있으나 실제 물리 디스크는 포화상태가 아닐 수도 있다.</li>\n<li>참고할 것은 disk I/O의 낮은 성능이 어플리케이션의 성능을 저하시키는 요인이 아닐 수도 있다는 것이다. 많은 기술들은 I/O 작업을 비동기로 처리하여 어플리케이션이 봉쇄상태에 머물거나 지연시간(latency)에 영향이 가지 않도록 한다.</li>\n</ul>\n<br>\n<h2 id=\"7-free--m\" style=\"position:relative;\"><a href=\"#7-free--m\" aria-label=\"7 free  m permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. free -m</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">free</span> -m\n             total       used       <span class=\"token function\">free</span>     shared    buffers     cached\nMem:        <span class=\"token number\">245998</span>      <span class=\"token number\">24545</span>     <span class=\"token number\">221453</span>         <span class=\"token number\">83</span>         <span class=\"token number\">59</span>        <span class=\"token number\">541</span>\n-/+ buffers/cache:      <span class=\"token number\">23944</span>     <span class=\"token number\">222053</span>\nSwap:            <span class=\"token number\">0</span>          <span class=\"token number\">0</span>          <span class=\"token number\">0</span></code></pre></div>\n<ul>\n<li>중요 칼럼 (가장 오른쪽 칼럼)\n<ol>\n<li><strong>buffers</strong>\n<ul>\n<li>버퍼 캐시이며 block device I/O 에 사용</li>\n</ul>\n</li>\n<li><strong>cached</strong>\n<ul>\n<li>페이지 캐시이며 file systems에 사용</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>위 두 칼럼의 수치가 <code class=\"language-text\">0</code>이 아니도록 주의하자. 0 이라면 disk I/O가 빈번하게 발생하며(<code class=\"language-text\">iostat</code>으로 확인) 가장 느린 연산이므로 최악의 성능을 낸다. 위 경우 Mbytes 이상의 여유 공간을 가지고 있으니 양호한 상태이다.</li>\n<li><code class=\"language-text\">/+ buffers/cache</code> 은 <code class=\"language-text\">free</code> 수치에 대해서 더 명확하게 알려준다.\n<ul>\n<li>운영체제의 물리 메모리는 그 빈 공간을 캐싱을 하기 위해서 사용한다. 하지만 프로세스가 필요로 하다면 곧바로 회수하여 필요한 프로세스에게 할당한다. 따라서 엄밀히 말하먄 캐시 데이터가 차지하고 있는 메모리의 용량도 free에 포함되어야 마땅하다.</li>\n<li>이 수치의 free는 캐시 데이터 메모리 용량까지 포함한 수치이다.</li>\n<li>이 부분에 대한 많은 혼란이 있기에 관련 <a href=\"https://www.linuxatemyram.com/\">사이트</a>가 따로 있을 정도이다. (ㅋㅋㅋㅋ)</li>\n</ul>\n</li>\n<li>리눅스에서 <a href=\"https://itsfoss.com/what-is-zfs/\">ZFS</a> 라는 향상된 file system을 사용하고 있다면 위 수치가 더 혼란스러울 수 있다. ZFS는 별도의 캐시가 존재하며 <code class=\"language-text\">free -m</code> 에 제대로 반영이 되지 않기 때문이다.\n<ul>\n<li>시스템이 가용 가능한 메모리 공간이 적어보이지만 ZFS 캐시에 의해 가용 가능한 메모리가 존재할 수도 있다는 것을 참고하자.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"8-sar--n-dev-1\" style=\"position:relative;\"><a href=\"#8-sar--n-dev-1\" aria-label=\"8 sar  n dev 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. sar -n DEV 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sar -n DEV <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015     _x86_64_    <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">12</span>:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n<span class=\"token number\">12</span>:16:49 AM      eth0  <span class=\"token number\">18763.00</span>   <span class=\"token number\">5032.00</span>  <span class=\"token number\">20686.42</span>    <span class=\"token number\">478.30</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:49 AM        lo     <span class=\"token number\">14.00</span>     <span class=\"token number\">14.00</span>      <span class=\"token number\">1.36</span>      <span class=\"token number\">1.36</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:49 AM   docker0      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n\n<span class=\"token number\">12</span>:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil\n<span class=\"token number\">12</span>:16:50 AM      eth0  <span class=\"token number\">19763.00</span>   <span class=\"token number\">5101.00</span>  <span class=\"token number\">21999.10</span>    <span class=\"token number\">482.56</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:50 AM        lo     <span class=\"token number\">20.00</span>     <span class=\"token number\">20.00</span>      <span class=\"token number\">3.25</span>      <span class=\"token number\">3.25</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n<span class=\"token number\">12</span>:16:50 AM   docker0      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n^C</code></pre></div>\n<ul>\n<li>이 명령어를 통해 네트워크 인터페이스 처리량을 확인할 수 있다.\n<ul>\n<li><code class=\"language-text\">rxkB/s</code> 와 <code class=\"language-text\">txkB/s</code> 를 통해 작업량을 확인하고 한계치에 다다랐는지 확인할 수 있다.</li>\n<li>위 예시를 보면 eth0 는 22 Mbytes/s (176 Mbits/sec) 이다. (1 Gbit/sec 제한 보다 낮은 수치이다)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">%ifutil</code> 칼럼을 통해 디바이스 사용률을 확인할 수 있다. (full-duplex인 경우 양쪽 방향의 최대값이다) 이것은 정확한 수치를 알기 어렵고 사용하지 않는 0.00 수치를 보이기도 한다.</li>\n</ul>\n<br>\n<h2 id=\"9-sar--n-tcpetcp-1\" style=\"position:relative;\"><a href=\"#9-sar--n-tcpetcp-1\" aria-label=\"9 sar  n tcpetcp 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. sar -n TCP,ETCP 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sar -n TCP,ETCP <span class=\"token number\">1</span>\nLinux <span class=\"token number\">3.13</span>.0-49-generic <span class=\"token punctuation\">(</span>titanclusters-xxxxx<span class=\"token punctuation\">)</span>  07/14/2015    _x86_64_    <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> CPU<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">12</span>:17:19 AM  active/s passive/s    iseg/s    oseg/s\n<span class=\"token number\">12</span>:17:20 AM      <span class=\"token number\">1.00</span>      <span class=\"token number\">0.00</span>  <span class=\"token number\">10233.00</span>  <span class=\"token number\">18846.00</span>\n\n<span class=\"token number\">12</span>:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n<span class=\"token number\">12</span>:17:20 AM      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n\n<span class=\"token number\">12</span>:17:20 AM  active/s passive/s    iseg/s    oseg/s\n<span class=\"token number\">12</span>:17:21 AM      <span class=\"token number\">1.00</span>      <span class=\"token number\">0.00</span>   <span class=\"token number\">8359.00</span>   <span class=\"token number\">6039.00</span>\n\n<span class=\"token number\">12</span>:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s\n<span class=\"token number\">12</span>:17:21 AM      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>      <span class=\"token number\">0.00</span>\n^C</code></pre></div>\n<ul>\n<li>중요한 TCP 수치에 대해서 보여준다.\n<ol>\n<li><strong>active/s</strong>\n<ul>\n<li>로컬에서 시작된 초당 TCP 커넥션 개수 (<code class=\"language-text\">connect()</code>를 명령어로 시작된 커넥션)</li>\n</ul>\n</li>\n<li><strong>passive/s</strong>\n<ul>\n<li>리모트에서 시작된 초당 TCP 커넥션 개수 (<code class=\"language-text\">accept()</code>로 연결된 커넥션)</li>\n</ul>\n</li>\n<li><strong>retrans/s</strong>\n<ul>\n<li>초당 TCP 재전송량</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>active와 passive 수는 서버 부하를 대략적으로 산출할 수 있는 좋은 수치이다.\n<ul>\n<li>새롭게 들어온 passive 커넥션 개수와 내보내지고 있는 active 커넥션 개수</li>\n<li>active를 outbound, passive을 inbound 수치로 판단할 수 있으나 정확히 그렇지만은 않다. (<a href=\"http://localhost\">localhost</a>와 localhost connection의 차이를 고려해보라)</li>\n</ul>\n</li>\n<li>네트워크 재전송량은 네트워크 혹은 서버 이슈 일 수 있다.\n<ul>\n<li>네트워크 문제라면 네트워크가 안정적이지 않은 네트워크 일 수 있다.</li>\n<li>혹은 서버 과부화로 인해 패킷이 유실되는 문제일 수도 있다.</li>\n<li>위 예시에서는 초당 1개의 TCP 커넥션이 재전송되고 있다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"10-top\" style=\"position:relative;\"><a href=\"#10-top\" aria-label=\"10 top permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. top</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">top</span>\n<span class=\"token function\">top</span> - 00:15:40 up <span class=\"token number\">21</span>:56,  <span class=\"token number\">1</span> user,  load average: <span class=\"token number\">31.09</span>, <span class=\"token number\">29.87</span>, <span class=\"token number\">29.92</span>\nTasks: <span class=\"token number\">871</span> total,   <span class=\"token number\">1</span> running, <span class=\"token number\">868</span> sleeping,   <span class=\"token number\">0</span> stopped,   <span class=\"token number\">2</span> zombie\n%Cpu<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: <span class=\"token number\">96.8</span> us,  <span class=\"token number\">0.4</span> sy,  <span class=\"token number\">0.0</span> ni,  <span class=\"token number\">2.7</span> id,  <span class=\"token number\">0.1</span> wa,  <span class=\"token number\">0.0</span> hi,  <span class=\"token number\">0.0</span> si,  <span class=\"token number\">0.0</span> st\nKiB Mem:  <span class=\"token number\">25190241</span>+total, <span class=\"token number\">24921688</span> used, <span class=\"token number\">22698073</span>+free,    <span class=\"token number\">60448</span> buffers\nKiB Swap:        <span class=\"token number\">0</span> total,        <span class=\"token number\">0</span> used,        <span class=\"token number\">0</span> free.   <span class=\"token number\">554208</span> cached Mem\n\n   PID <span class=\"token environment constant\">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n <span class=\"token number\">20248</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>  <span class=\"token number\">0</span>.227t <span class=\"token number\">0</span>.012t  <span class=\"token number\">18748</span> S  <span class=\"token number\">3090</span>  <span class=\"token number\">5.2</span>  <span class=\"token number\">29812</span>:58 java\n  <span class=\"token number\">4213</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span> <span class=\"token number\">2722544</span>  <span class=\"token number\">64640</span>  <span class=\"token number\">44232</span> S  <span class=\"token number\">23.5</span>  <span class=\"token number\">0.0</span> <span class=\"token number\">233</span>:35.37 mesos-slave\n <span class=\"token number\">66128</span> titancl+  <span class=\"token number\">20</span>   <span class=\"token number\">0</span>   <span class=\"token number\">24344</span>   <span class=\"token number\">2332</span>   <span class=\"token number\">1172</span> R   <span class=\"token number\">1.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.07 <span class=\"token function\">top</span>\n  <span class=\"token number\">5235</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span> <span class=\"token number\">38</span>.227g <span class=\"token number\">547004</span>  <span class=\"token number\">49996</span> S   <span class=\"token number\">0.7</span>  <span class=\"token number\">0.2</span>   <span class=\"token number\">2</span>:02.74 java\n  <span class=\"token number\">4299</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span> <span class=\"token number\">20</span>.015g <span class=\"token number\">2</span>.682g  <span class=\"token number\">16836</span> S   <span class=\"token number\">0.3</span>  <span class=\"token number\">1.1</span>  <span class=\"token number\">33</span>:14.42 java\n     <span class=\"token number\">1</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>   <span class=\"token number\">33620</span>   <span class=\"token number\">2920</span>   <span class=\"token number\">1496</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:03.82 init\n     <span class=\"token number\">2</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.02 kthreadd\n     <span class=\"token number\">3</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:05.35 ksoftirqd/0\n     <span class=\"token number\">5</span> root       <span class=\"token number\">0</span> -20       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.00 kworker/0:0H\n     <span class=\"token number\">6</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:06.94 kworker/u256:0\n     <span class=\"token number\">8</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S   <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">2</span>:38.05 rcu_sched</code></pre></div>\n<ul>\n<li><code class=\"language-text\">top</code> 명령어는 이전에 다룬 다른 명령어로 확인할 수 있는 수치를 전반적으로 포함한 지표들을 보여준다. 때문에 편리하게 사용된다.</li>\n<li><code class=\"language-text\">top</code> 명령어의 단점은 시간의 흐름에 따른 패턴 확인이 어렵고 당시 전반적인 서버의 상태만을 확인할 수 있다는 것이다. 시간의 흐름에 따른 패턴을 확인하고 싶다면 <code class=\"language-text\">vmstat</code> 혹은 <code class=\"language-text\">pidstat</code> 으로 확인할 수 있다. (rolling output을 보여준다)</li>\n</ul>\n <br>\n <br>\n<h2 id=\"-느낀-점\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\" 느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌩 느낀 점</h2>\n<ul>\n<li>확실히 os 에 대한 지식이 필요한 것을 느꼈다. os와 네트워크 공부와 병행하며 지표를 살피니 의미하는 바를 잘 이해할 수 있었다.</li>\n<li>서버의 부하를 살펴보려면 크게 CPU부하, I/O 디바이스 부하, 네트워크 부하를 확인해야한다.</li>\n<li>어플리케이션을 구현하고 제대로 서비스 하기 위해서는 서버를 제대로 모니터링하고 미리 어느 정도를 감당할 수 있는지 확인할 수 있어야 한다.</li>\n<li>또한 지표를 보고 어느 부분을 개선하여 성능을 개선시킬 수 있을지도 판단할 수 있어야 한다.</li>\n<li>결국 경험이 답이다…!!</li>\n</ul>\n<br>\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55\">https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-intro\">💡 Intro</a></p>\n</li>\n<li>\n<p><a href=\"#1-uptime\">1. uptime</a></p>\n</li>\n<li>\n<p><a href=\"#2-dmesg--tail\">2. dmesg | tail</a></p>\n</li>\n<li>\n<p><a href=\"#3-vmstat-1\">3. vmstat 1</a></p>\n<ul>\n<li><a href=\"#%EC%A4%91%EC%9A%94%ED%95%9C-%EC%B9%BC%EB%9F%BC\">중요한 칼럼</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-mpstat--p-all-1\">4. mpstat -P ALL 1</a></p>\n</li>\n<li>\n<p><a href=\"#5-pidstat-1\">5. pidstat 1</a></p>\n</li>\n<li>\n<p><a href=\"#6-iostat--xz-1\">6. iostat -xz 1</a></p>\n</li>\n<li>\n<p><a href=\"#7-free--m\">7. free -m</a></p>\n</li>\n<li>\n<p><a href=\"#8-sar--n-dev-1\">8. sar -n DEV 1</a></p>\n</li>\n<li>\n<p><a href=\"#9-sar--n-tcpetcp-1\">9. sar -n TCP,ETCP 1</a></p>\n</li>\n<li>\n<p><a href=\"#10-top\">10. top</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%8A%90%EB%82%80-%EC%A0%90\">🌩 느낀 점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"넷플릭스에서 60000ms 만에 리눅스 서버 성능을 진단하는 방법 10가지","categories":"웹 성능테스트","author":"코다","emoji":"📈"},"fields":{"slug":"/netflix-performance-analysis/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/operating-system-5/","nextSlug":"/project-pickgit-homefeed-performance-test-2/","prevSlug":"/netflix-performance-analysis/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}