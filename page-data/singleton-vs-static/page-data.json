{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/singleton-vs-static/",
    "result": {"data":{"cur":{"id":"d6ed2c46-51b8-5365-a4ce-bb6cc111355c","html":"<p>아직 잘 모르는 분야라서 우선 두개의 차이점에 대해서만 기록해본다. 둘 중 어느 것을 어느 때에 사용해야 하는지에 대한 판단은 잘 모르겠지만 이 <a href=\"%5Bhttps://www.yegor256.com/2016/06/27/singletons-must-die.html%5D(https://www.yegor256.com/2016/06/27/singletons-must-die.html)\">링크</a> 를  확인해보면 singleton 사용을 지양하라고 했고, 또 정적 메소드도 객체지향에서는 지양하는 것이 좋다고 한다.</p>\n<h3 id=\"싱글톤\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4\" aria-label=\"싱글톤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤</h3>\n<ul>\n<li>단 하나의 객체만을 생성할 수 있는 패턴이다. 객체를 생성하려고 할 때마다 이미 생성된 것을 반환하거나 없다면 해당 시간에 처음 생성하도록 한다.</li>\n<li>정적 클래스와는 달리 싱클톤 클래스는 <code class=\"language-text\">확장</code>과 <code class=\"language-text\">인터페이스 구현</code>이 가능하다.</li>\n<li>언제 생성하는지에 대한 시점을 조정할 수 있다.</li>\n<li>객체이기 때문에 힙에 싱글톤 객체가 저장된다. 따라서 쓰레드간 공유가 가능하다.</li>\n<li>싱글톤은 구현으로 단 하나만 생성되게 보장한 것이지만 그 자체로는 클래스 객체이기 때문에 직렬화가 가능하다.</li>\n</ul>\n<h3 id=\"static-클래스\" style=\"position:relative;\"><a href=\"#static-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"static 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static 클래스</h3>\n<ul>\n<li>Static 메소드를 가지는 클래스를 말한다.</li>\n<li>어플리케이션이 메모리에 로드 될 때 정적 스택에 바로 초기화 된다.</li>\n<li>표준 클래스라고 보기는 어렵고 <code class=\"language-text\">함수와 변수가 있는 네임스페이스</code> 라고 볼 수 있다.</li>\n<li>정적 스택에 저장이 되기 때문에 쓰레드 관리가 어렵다.</li>\n</ul>\n<h3 id=\"차이\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4\" aria-label=\"차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이</h3>\n<ul>\n<li>엘레강트 오브젝트 발췌\n<ul>\n<li>싱클톤 패턴과 정적 클래스의 가장 큰 차이는 싱클톤은 분리 가능한 의존성으로 연결되어 있지만 정적 클래스는 하드코딩의 결정체라는 것이다.</li>\n<li>싱글톤 패턴을 사용하면 내부에 선언된 정적 객체를 교체해서 변경할 수 있다.</li>\n<li>정적 메소드로 구현된 유틸리티 클래스는 분리할 수 없는 하드코딩된 의존성이다.</li>\n<li>따라서 OOP 관점에서는 정적 클래스가 싱글톤 패턴보다 더 안좋다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4\">싱글톤</a></li>\n<li><a href=\"#static-%ED%81%B4%EB%9E%98%EC%8A%A4\">Static 클래스</a></li>\n<li><a href=\"#%EC%B0%A8%EC%9D%B4\">차이</a></li>\n</ul>\n</div>","excerpt":"아직 잘 모르는 분야라서 우선 두개의 차이점에 대해서만 기록해본다. 둘 중 어느 것을 어느 때에 사용해야 하는지에 대한 판단은 잘 모르겠지만 이 링크 를  확인해보면 singleton 사용을 지양하라고 했고, 또 정적 메소드도 객체지향에서는 지양하는 것이 좋다고 한다. 싱글톤 단 하나의 객체만을 생성할 수 있는 패턴이다. 객체를 생성하려고 할 때마다 이미 생성된 것을 반환하거나 없다면 해당 시간에 처음 생성하도록 한다. 정적 클래스와는 달리 싱클톤 클래스는 과 이 가능하다. 언제 생성하는지에 대한 시점을 조정할 수 있다. 객체이기 때문에 힙에 싱글톤 객체가 저장된다. 따라서 쓰레드간 공유가 가능하다. 싱글톤은 구현으로 단 하나만 생성되게 보장한 것이지만 그 자체로는 클래스 객체이기 때문에 직렬화가 가능하다. Static 클래스 Static 메소드를 가지는 클래스를 말한다. 어플리케이션이 메모리에 로드 될 때 정적 스택에 바로 초기화 된다. 표준 클래스라고 보기는 어렵고  라고 볼 …","frontmatter":{"date":"Invalid date","title":"싱글톤 vs. Static","categories":"설계","author":"코다","emoji":"🛠"},"fields":{"slug":"/singleton-vs-static/"}},"next":{"id":"a31d3ec2-ded1-5cd7-b9e1-9aa1ecf9b0c9","html":"<h2 id=\"전략-패턴strategy-pattern이란\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern%EC%9D%B4%EB%9E%80\" aria-label=\"전략 패턴strategy pattern이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴(Strategy Pattern)이란?</h2>\n<p>객체가 할 수 있는 <strong>행위</strong>에 대한 <code class=\"language-text\">전략 클래스</code> 생성하여 해당 행위들을 캡슐화(인터페이스화) 하여 사용하는 것이다. <br></p>\n<p>즉, 행위를 각각의 전략 클래스로 생성하고 수정이 필요한 경우 전략을 바꾸는 것으로 행위를 수정하도록 한다. <br></p>\n<h2 id=\"왜-전략-패턴을-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"왜 전략 패턴을 사용해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 전략 패턴을 사용해야 할까?</h2>\n<p>예를 들어 움직이는 Bus, Train 이라는 객체가 있다고 하고 각각 move() 함수를 통해서 움직인다. <br></p>\n<p>그런데, Bus는 도로로 Train은 선로로 움직인다. 만약 이때 버스가 더 이상 길이 아니라 선로로 움직인다고 가정할 때, 버스의 move() 메소드를 선로로 움직이는 로직으로 수정해야 한다. <br></p>\n<p>이때 두 가지 문제가 발생한다.</p>\n<ol>\n<li>OCP (Open-Closed Principle)에 위배 : 수정에 닫혀있어야 하는데, <code class=\"language-text\">move()</code> 메소드를 직접 수정</li>\n<li>확장이 될 경우 메서드 중복 문제 : <code class=\"language-text\">move()</code> 메소드를 가진 여러 객체가 있을 때 일일이 수정을 해아함</li>\n</ol>\n<p><strong>이 때 전략 패턴을 사용하면, 위 두 문제를 마주하지 않으면서 행위를 수정할 수 있다.</strong></p>\n<h2 id=\"전략-패턴-구현\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84\" aria-label=\"전략 패턴 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴 구현</h2>\n<ul>\n<li>행위에 대한 메소드를 정의하는 <code class=\"language-text\">Strategy</code> 인터페이스를 생성하고 해당 인터페이스를 구현하는 구현체로 각기 다른 전략 로직을 구현한다. <br></li>\n</ul>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/63405904/134760341-bf9b0e5b-8db9-489f-a529-63a46844a877.png\"></p>\n<ul>\n<li>\n<p>움직이는 객체인 <code class=\"language-text\">Bus</code>, <code class=\"language-text\">Train</code> 등등에 위 <code class=\"language-text\">MovableStrategy</code> 를 조합하여, <code class=\"language-text\">move()</code> 메소드에서 지정된 전략 패턴으로 실행되도록 한다. (Bus, Train 등을 Movable 이라는 추상 클래스나 부모 클래스로부터 확장을 해서 추가적으로 중복을 줄일 수도 있다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Moving</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MovableStrategy</span> movableStrategy<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        movableStrategy<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMovableStrategy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MovableStrategy</span> movableStrategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>movableStrategy <span class=\"token operator\">=</span> movableStrategy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>전략 패턴은 상태 패턴과 유사한 매커니즘으로 구조가 되어 있다. 다만 조금 다른 점은 전략 패턴이 대체하고자 하는 것은 <code class=\"language-text\">상속</code> 에 가깝다. 반면 상태 패턴이 대체하고자 하는 것은 수많은 <code class=\"language-text\">조건문</code> 이다. 두 패턴 모두 조합을 통해서 문제를 해결하려고 하기 때문에 그 생김새가 매우 유사하다. <a href=\"%5Bhttps://github.com/KWSStudy/Refactoring/issues/2%5D(https://github.com/KWSStudy/Refactoring/issues/2)\">참고</a> <br></p>\n<h3 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h3>\n<ul>\n<li><a href=\"https://victorydntmd.tistory.com/292\">https://victorydntmd.tistory.com/292</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern%EC%9D%B4%EB%9E%80\">전략 패턴(Strategy Pattern)이란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%99%9C-%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">왜 전략 패턴을 사용해야 할까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84\">전략 패턴 구현</a></p>\n<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"Invalid date","title":"전략 패턴이란?","categories":"설계","author":"코다","emoji":"🛠"},"fields":{"slug":"/strategy-pattern/"}},"prev":{"id":"3ff22722-319b-55d8-82ed-b7434e408311","html":"<p>웹 UI/DB 를 적용한 온라인 체스 게임을 구현하는 중 리뷰어가 다음과 같은 질문을 했다. 처음 웹 개발을 해보는 것이라서 우선 돌아가기 위해 인터넷과 크루들이 추가한 <code class=\"language-text\">dependency</code> 를 우선 가져와 추가했었는데 리뷰어의 질문을 받고 해당 개념을 찾아보았다.</p>\n<p>[참고 링크](<a href=\"https://tomgregory.com/gradle-implementation-vs-compile-dependencies/#:~:text=The%20compile%20dependency%20configuration%20is,the%20same%20functionality%20as%20compile.&#x26;text=You%20should%20always%20use%20implementation,as%20compile%20is%20now%20deprecated\">https://tomgregory.com/gradle-implementation-vs-compile-dependencies/#:~:text=The compile dependency configuration is,the same functionality as compile.&#x26;text=You should always use implementation,as compile is now deprecated</a>.)</p>\n<p align=\"center\"><img width=\"90%\" src=\"https://user-images.githubusercontent.com/63405904/134770516-da835d13-928a-4cf9-95fc-61b73542173c.png\"></p> \n<p>결론부터 말해서 다음을 기억하면 될 것 같다.</p>\n<ul>\n<li><code class=\"language-text\">compile</code> 은 Gradle 7.0 부터 depracated 되므로 대부분의 상황에서 <code class=\"language-text\">implementation</code> 을 사용하도록 한다.</li>\n</ul>\n<p><code class=\"language-text\">Compile</code>과 <code class=\"language-text\">implementation</code>은 거의 같은 가능을 하기 때문에 서로가 대체 되어도 상관없다.</p>\n<h3 id=\"그렇다면-implementation-의존성-주입은-무엇일까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-implementation-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"그렇다면 implementation 의존성 주입은 무엇일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 implementation 의존성 주입은 무엇일까?</h3>\n<p>Java 프로젝트가 실행이 될 때 2개의 classpath가 존재한다.</p>\n<ol>\n<li>Complie classpath</li>\n<li>Runtime classpath</li>\n</ol>\n<p>Gradle dependency를 추가할 때 위 두가지 경우에 필요한 의존성들이 나누어지고 둘다 필요한 경우도 있다. 따라서 각각 필요한 경우에 추가할 수 있는 경우들과 두가지 경우 모두 필요할 경우 추가할 수 있는 키워드가 따로 있다.</p>\n<ol>\n<li>compileOnly : compile classpath에서 필요한 경우</li>\n<li>runtimeOnly : runtime classpath에서 필요한 경우</li>\n<li>implementation : 위 두가지에 모두 필요한 경우</li>\n</ol>\n<p>위 경우들을 나누어서 의존성을 추가했을 때, 각각의 경우에 dependencies와 classpaths의 간결함으로 컴파일 시간이 단축되고 프로그램 복잡도를 낮출 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-implementation-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\">그렇다면 implementation 의존성 주입은 무엇일까?</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 02, 2021","title":"Gradle 의존성 주입 시 implementation vs. compile","categories":"빌드","author":"코다","emoji":"🏡"},"fields":{"slug":"/gradle-dependency/"}},"site":{"siteMetadata":{"siteUrl":"https://yjksw.github.io","comments":{"utterances":{"repo":"yjksw/yjksw.github.io"}}}}},"pageContext":{"slug":"/singleton-vs-static/","nextSlug":"/strategy-pattern/","prevSlug":"/gradle-dependency/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}